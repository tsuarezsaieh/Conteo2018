!function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){var l="function"==typeof require&&require;if(!s&&l)return l(a,!0);if(o)return o(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return i(n||e)},c,c.exports,e,t,n,r)}return n[a].exports}for(var o="function"==typeof require&&require,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){var r=e("./core/core")();r.helpers=e("./helpers/index"),e("./core/core.helpers")(r),r.defaults=e("./core/core.defaults"),r.Element=e("./core/core.element"),r.elements=e("./elements/index"),r.Interaction=e("./core/core.interaction"),r.platform=e("./platforms/platform"),e("./core/core.plugin")(r),e("./core/core.animation")(r),e("./core/core.controller")(r),e("./core/core.datasetController")(r),e("./core/core.layoutService")(r),e("./core/core.scaleService")(r),e("./core/core.scale")(r),e("./core/core.tooltip")(r),e("./scales/scale.linearbase")(r),e("./scales/scale.category")(r),e("./scales/scale.linear")(r),e("./scales/scale.logarithmic")(r),e("./scales/scale.radialLinear")(r),e("./scales/scale.time")(r),e("./controllers/controller.bar")(r),e("./controllers/controller.bubble")(r),e("./controllers/controller.doughnut")(r),e("./controllers/controller.line")(r),e("./controllers/controller.polarArea")(r),e("./controllers/controller.radar")(r),e("./controllers/controller.scatter")(r),e("./charts/Chart.Bar")(r),e("./charts/Chart.Bubble")(r),e("./charts/Chart.Doughnut")(r),e("./charts/Chart.Line")(r),e("./charts/Chart.PolarArea")(r),e("./charts/Chart.Radar")(r),e("./charts/Chart.Scatter")(r);var i=[];i.push(e("./plugins/plugin.filler")(r),e("./plugins/plugin.legend")(r),e("./plugins/plugin.title")(r)),r.plugins.register(i),r.platform.initialize(),t.exports=r,"undefined"!=typeof window&&(window.Chart=r),r.canvasHelpers=r.helpers.canvas},{"./charts/Chart.Bar":2,"./charts/Chart.Bubble":3,"./charts/Chart.Doughnut":4,"./charts/Chart.Line":5,"./charts/Chart.PolarArea":6,"./charts/Chart.Radar":7,"./charts/Chart.Scatter":8,"./controllers/controller.bar":9,"./controllers/controller.bubble":10,"./controllers/controller.doughnut":11,"./controllers/controller.line":12,"./controllers/controller.polarArea":13,"./controllers/controller.radar":14,"./controllers/controller.scatter":15,"./core/core":23,"./core/core.animation":16,"./core/core.controller":17,"./core/core.datasetController":18,"./core/core.defaults":19,"./core/core.element":20,"./core/core.helpers":21,"./core/core.interaction":22,"./core/core.layoutService":24,"./core/core.plugin":25,"./core/core.scale":26,"./core/core.scaleService":27,"./core/core.tooltip":29,"./elements/index":34,"./helpers/index":39,"./platforms/platform":42,"./plugins/plugin.filler":43,"./plugins/plugin.legend":44,"./plugins/plugin.title":45,"./scales/scale.category":46,"./scales/scale.linear":47,"./scales/scale.linearbase":48,"./scales/scale.logarithmic":49,"./scales/scale.radialLinear":50,"./scales/scale.time":51}],2:[function(e,t,n){"use strict";t.exports=function(e){e.Bar=function(t,n){return n.type="bar",new e(t,n)}}},{}],3:[function(e,t,n){"use strict";t.exports=function(e){e.Bubble=function(t,n){return n.type="bubble",new e(t,n)}}},{}],4:[function(e,t,n){"use strict";t.exports=function(e){e.Doughnut=function(t,n){return n.type="doughnut",new e(t,n)}}},{}],5:[function(e,t,n){"use strict";t.exports=function(e){e.Line=function(t,n){return n.type="line",new e(t,n)}}},{}],6:[function(e,t,n){"use strict";t.exports=function(e){e.PolarArea=function(t,n){return n.type="polarArea",new e(t,n)}}},{}],7:[function(e,t,n){"use strict";t.exports=function(e){e.Radar=function(t,n){return n.type="radar",new e(t,n)}}},{}],8:[function(e,t,n){"use strict";t.exports=function(e){e.Scatter=function(t,n){return n.type="scatter",new e(t,n)}}},{}],9:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),r._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(e,t){var n="";return e.length>0&&(e[0].yLabel?n=e[0].yLabel:t.labels.length>0&&e[0].index<t.labels.length&&(n=t.labels[e[0].index])),n},label:function(e,t){return(t.datasets[e.datasetIndex].label||"")+": "+e.xLabel}},mode:"index",axis:"y"}}),t.exports=function(e){e.controllers.bar=e.DatasetController.extend({dataElementType:i.Rectangle,initialize:function(){var t,n=this;e.DatasetController.prototype.initialize.apply(n,arguments),t=n.getMeta(),t.stack=n.getDataset().stack,t.bar=!0},update:function(e){var t,n,r=this,i=r.getMeta().data;for(r._ruler=r.getRuler(),t=0,n=i.length;t<n;++t)r.updateElement(i[t],t,e)},updateElement:function(e,t,n){var r=this,i=r.chart,a=r.getMeta(),s=r.getDataset(),l=e.custom||{},u=i.options.elements.rectangle;e._xScale=r.getScaleForId(a.xAxisID),e._yScale=r.getScaleForId(a.yAxisID),e._datasetIndex=r.index,e._index=t,e._model={datasetLabel:s.label,label:i.data.labels[t],borderSkipped:l.borderSkipped?l.borderSkipped:u.borderSkipped,backgroundColor:l.backgroundColor?l.backgroundColor:o.valueAtIndexOrDefault(s.backgroundColor,t,u.backgroundColor),borderColor:l.borderColor?l.borderColor:o.valueAtIndexOrDefault(s.borderColor,t,u.borderColor),borderWidth:l.borderWidth?l.borderWidth:o.valueAtIndexOrDefault(s.borderWidth,t,u.borderWidth)},r.updateElementGeometry(e,t,n),e.pivot()},updateElementGeometry:function(e,t,n){var r=this,i=e._model,o=r.getValueScale(),a=o.getBasePixel(),s=o.isHorizontal(),l=r._ruler||r.getRuler(),u=r.calculateBarValuePixels(r.index,t),c=r.calculateBarIndexPixels(r.index,t,l);i.horizontal=s,i.base=n?a:u.base,i.x=s?n?a:u.head:c.center,i.y=s?c.center:n?a:u.head,i.height=s?c.size:void 0,i.width=s?void 0:c.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},getStackCount:function(e){var t,n,r=this,i=r.chart,o=r.getIndexScale(),a=o.options.stacked,s=void 0===e?i.data.datasets.length:e+1,l=[];for(t=0;t<s;++t)n=i.getDatasetMeta(t),n.bar&&i.isDatasetVisible(t)&&(!1===a||!0===a&&-1===l.indexOf(n.stack)||void 0===a&&(void 0===n.stack||-1===l.indexOf(n.stack)))&&l.push(n.stack);return l.length},getStackIndex:function(e){return this.getStackCount(e)-1},getRuler:function(){var e,t,n=this,r=n.getIndexScale(),i=n.getStackCount(),o=n.index,a=[],s=r.isHorizontal(),l=s?r.left:r.top,u=l+(s?r.width:r.height);for(e=0,t=n.getMeta().data.length;e<t;++e)a.push(r.getPixelForValue(null,e,o));return{pixels:a,start:l,end:u,stackCount:i,scale:r}},calculateBarValuePixels:function(e,t){var n,r,i,o,a,s,l=this,u=l.chart,c=l.getMeta(),d=l.getValueScale(),h=u.data.datasets,f=d.getRightValue(h[e].data[t]),p=d.options.stacked,g=c.stack,m=0;if(p||void 0===p&&void 0!==g)for(n=0;n<e;++n)r=u.getDatasetMeta(n),r.bar&&r.stack===g&&r.controller.getValueScaleId()===d.id&&u.isDatasetVisible(n)&&(i=d.getRightValue(h[n].data[t]),(f<0&&i<0||f>=0&&i>0)&&(m+=i));return o=d.getPixelForValue(m),a=d.getPixelForValue(m+f),s=(a-o)/2,{size:s,base:o,head:a,center:a+s/2}},calculateBarIndexPixels:function(e,t,n){var r,i,a,s,l,u,c=this,d=n.scale.options,h=c.getStackIndex(e),f=n.pixels,p=f[t],g=f.length,m=n.start,v=n.end;return 1===g?(r=p>m?p-m:v-p,i=p<v?v-p:p-m):(t>0&&(r=(p-f[t-1])/2,t===g-1&&(i=r)),t<g-1&&(i=(f[t+1]-p)/2,0===t&&(r=i))),a=r*d.categoryPercentage,s=i*d.categoryPercentage,l=(a+s)/n.stackCount,u=l*d.barPercentage,u=Math.min(o.valueOrDefault(d.barThickness,u),o.valueOrDefault(d.maxBarThickness,1/0)),p-=a,p+=l*h,p+=(l-u)/2,{size:u,base:p,head:p+u,center:p+u/2}},draw:function(){var e=this,t=e.chart,n=e.getValueScale(),r=e.getMeta().data,i=e.getDataset(),a=r.length,s=0;for(o.canvas.clipArea(t.ctx,t.chartArea);s<a;++s)isNaN(n.getRightValue(i.data[s]))||r[s].draw();o.canvas.unclipArea(t.ctx)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},i=e._model;i.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:o.valueAtIndexOrDefault(t.hoverBackgroundColor,n,o.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor?r.hoverBorderColor:o.valueAtIndexOrDefault(t.hoverBorderColor,n,o.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:o.valueAtIndexOrDefault(t.hoverBorderWidth,n,i.borderWidth)},removeHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},i=e._model,a=this.chart.options.elements.rectangle;i.backgroundColor=r.backgroundColor?r.backgroundColor:o.valueAtIndexOrDefault(t.backgroundColor,n,a.backgroundColor),i.borderColor=r.borderColor?r.borderColor:o.valueAtIndexOrDefault(t.borderColor,n,a.borderColor),i.borderWidth=r.borderWidth?r.borderWidth:o.valueAtIndexOrDefault(t.borderWidth,n,a.borderWidth)}}),e.controllers.horizontalBar=e.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],10:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",r=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+r.r+")"}}}}),t.exports=function(e){e.controllers.bubble=e.DatasetController.extend({dataElementType:i.Point,update:function(e){var t=this,n=t.getMeta(),r=n.data;o.each(r,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,i=r.getMeta(),o=e.custom||{},a=r.getScaleForId(i.xAxisID),s=r.getScaleForId(i.yAxisID),l=r._resolveElementOptions(e,t),u=r.getDataset().data[t],c=r.index,d=n?a.getPixelForDecimal(.5):a.getPixelForValue("object"==typeof u?u:NaN,t,c),h=n?s.getBasePixel():s.getPixelForValue(u,t,c);e._xScale=a,e._yScale=s,e._options=l,e._datasetIndex=c,e._index=t,e._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,radius:n?0:l.radius,skip:o.skip||isNaN(d)||isNaN(h),x:d,y:h},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options;t.backgroundColor=o.valueOrDefault(n.hoverBackgroundColor,o.getHoverColor(n.backgroundColor)),t.borderColor=o.valueOrDefault(n.hoverBorderColor,o.getHoverColor(n.borderColor)),t.borderWidth=o.valueOrDefault(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},removeHoverStyle:function(e){var t=e._model,n=e._options;t.backgroundColor=n.backgroundColor,t.borderColor=n.borderColor,t.borderWidth=n.borderWidth,t.radius=n.radius},_resolveElementOptions:function(e,t){var n,r,i,a=this,s=a.chart,l=s.data.datasets,u=l[a.index],c=e.custom||{},d=s.options.elements.point,h=o.options.resolve,f=u.data[t],p={},g={chart:s,dataIndex:t,dataset:u,datasetIndex:a.index},m=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle"];for(n=0,r=m.length;n<r;++n)i=m[n],p[i]=h([c[i],u[i],d[i]],g,t);return p.radius=h([c.radius,f?f.r:void 0,u.radius,d.radius],g,t),p}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],11:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,i=n.labels;if(r.length)for(var o=0;o<r[0].data.length;++o)t.push('<li><span style="background-color:'+r[0].backgroundColor[o]+'"></span>'),i[o]&&t.push(i[o]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var i=e.getDatasetMeta(0),a=t.datasets[0],s=i.data[r],l=s&&s.custom||{},u=o.valueAtIndexOrDefault,c=e.options.elements.arc;return{text:n,fillStyle:l.backgroundColor?l.backgroundColor:u(a.backgroundColor,r,c.backgroundColor),strokeStyle:l.borderColor?l.borderColor:u(a.borderColor,r,c.borderColor),lineWidth:l.borderWidth?l.borderWidth:u(a.borderWidth,r,c.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,i,o=t.index,a=this.chart;for(n=0,r=(a.data.datasets||[]).length;n<r;++n)i=a.getDatasetMeta(n),i.data[o]&&(i.data[o].hidden=!i.data[o].hidden);a.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],r=": "+t.datasets[e.datasetIndex].data[e.index];return o.isArray(n)?(n=n.slice(),n[0]+=r):n+=r,n}}}}),r._set("pie",o.clone(r.doughnut)),r._set("pie",{cutoutPercentage:0}),t.exports=function(e){e.controllers.doughnut=e.controllers.pie=e.DatasetController.extend({dataElementType:i.Arc,linkScales:o.noop,getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t=this,n=t.chart,r=n.chartArea,i=n.options,a=i.elements.arc,s=r.right-r.left-a.borderWidth,l=r.bottom-r.top-a.borderWidth,u=Math.min(s,l),c={x:0,y:0},d=t.getMeta(),h=i.cutoutPercentage,f=i.circumference;if(f<2*Math.PI){var p=i.rotation%(2*Math.PI);p+=2*Math.PI*(p>=Math.PI?-1:p<-Math.PI?1:0);var g=p+f,m={x:Math.cos(p),y:Math.sin(p)},v={x:Math.cos(g),y:Math.sin(g)},y=p<=0&&g>=0||p<=2*Math.PI&&2*Math.PI<=g,b=p<=.5*Math.PI&&.5*Math.PI<=g||p<=2.5*Math.PI&&2.5*Math.PI<=g,x=p<=-Math.PI&&-Math.PI<=g||p<=Math.PI&&Math.PI<=g,w=p<=.5*-Math.PI&&.5*-Math.PI<=g||p<=1.5*Math.PI&&1.5*Math.PI<=g,k=h/100,_={x:x?-1:Math.min(m.x*(m.x<0?1:k),v.x*(v.x<0?1:k)),y:w?-1:Math.min(m.y*(m.y<0?1:k),v.y*(v.y<0?1:k))},S={x:y?1:Math.max(m.x*(m.x>0?1:k),v.x*(v.x>0?1:k)),y:b?1:Math.max(m.y*(m.y>0?1:k),v.y*(v.y>0?1:k))},C={width:.5*(S.x-_.x),height:.5*(S.y-_.y)};u=Math.min(s/C.width,l/C.height),c={x:-.5*(S.x+_.x),y:-.5*(S.y+_.y)}}n.borderWidth=t.getMaxBorderWidth(d.data),n.outerRadius=Math.max((u-n.borderWidth)/2,0),n.innerRadius=Math.max(h?n.outerRadius/100*h:0,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),n.offsetX=c.x*n.outerRadius,n.offsetY=c.y*n.outerRadius,d.total=t.calculateTotal(),t.outerRadius=n.outerRadius-n.radiusLength*t.getRingIndex(t.index),t.innerRadius=Math.max(t.outerRadius-n.radiusLength,0),o.each(d.data,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,i=r.chart,a=i.chartArea,s=i.options,l=s.animation,u=(a.left+a.right)/2,c=(a.top+a.bottom)/2,d=s.rotation,h=s.rotation,f=r.getDataset(),p=n&&l.animateRotate?0:e.hidden?0:r.calculateCircumference(f.data[t])*(s.circumference/(2*Math.PI)),g=n&&l.animateScale?0:r.innerRadius,m=n&&l.animateScale?0:r.outerRadius,v=o.valueAtIndexOrDefault;o.extend(e,{_datasetIndex:r.index,_index:t,_model:{x:u+i.offsetX,y:c+i.offsetY,startAngle:d,endAngle:h,circumference:p,outerRadius:m,innerRadius:g,label:v(f.label,t,i.data.labels[t])}});var y=e._model;this.removeHoverStyle(e),n&&l.animateRotate||(y.startAngle=0===t?s.rotation:r.getMeta().data[t-1]._model.endAngle,y.endAngle=y.startAngle+y.circumference),e.pivot()},removeHoverStyle:function(t){e.DatasetController.prototype.removeHoverStyle.call(this,t,this.chart.options.elements.arc)},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),r=0;return o.each(n.data,function(n,i){e=t.data[i],isNaN(e)||n.hidden||(r+=Math.abs(e))}),r},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(e/t):0},getMaxBorderWidth:function(e){for(var t,n,r=0,i=this.index,o=e.length,a=0;a<o;a++)t=e[a]._model?e[a]._model.borderWidth:0,n=e[a]._chart?e[a]._chart.config.data.datasets[i].hoverBorderWidth:0,r=t>r?t:r,r=n>r?n:r;return r}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],12:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}}),t.exports=function(e){function t(e,t){return o.valueOrDefault(e.showLine,t.showLines)}e.controllers.line=e.DatasetController.extend({datasetElementType:i.Line,dataElementType:i.Point,update:function(e){var n,r,i,a=this,s=a.getMeta(),l=s.dataset,u=s.data||[],c=a.chart.options,d=c.elements.line,h=a.getScaleForId(s.yAxisID),f=a.getDataset(),p=t(f,c);for(p&&(i=l.custom||{},void 0!==f.tension&&void 0===f.lineTension&&(f.lineTension=f.tension),l._scale=h,l._datasetIndex=a.index,l._children=u,l._model={spanGaps:f.spanGaps?f.spanGaps:c.spanGaps,tension:i.tension?i.tension:o.valueOrDefault(f.lineTension,d.tension),backgroundColor:i.backgroundColor?i.backgroundColor:f.backgroundColor||d.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:f.borderWidth||d.borderWidth,borderColor:i.borderColor?i.borderColor:f.borderColor||d.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:f.borderCapStyle||d.borderCapStyle,borderDash:i.borderDash?i.borderDash:f.borderDash||d.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:f.borderDashOffset||d.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:f.borderJoinStyle||d.borderJoinStyle,fill:i.fill?i.fill:void 0!==f.fill?f.fill:d.fill,steppedLine:i.steppedLine?i.steppedLine:o.valueOrDefault(f.steppedLine,d.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:o.valueOrDefault(f.cubicInterpolationMode,d.cubicInterpolationMode)},l.pivot()),n=0,r=u.length;n<r;++n)a.updateElement(u[n],n,e);for(p&&0!==l._model.tension&&a.updateBezierControlPoints(),n=0,r=u.length;n<r;++n)u[n].pivot()},getPointBackgroundColor:function(e,t){var n=this.chart.options.elements.point.backgroundColor,r=this.getDataset(),i=e.custom||{};return i.backgroundColor?n=i.backgroundColor:r.pointBackgroundColor?n=o.valueAtIndexOrDefault(r.pointBackgroundColor,t,n):r.backgroundColor&&(n=r.backgroundColor),n},getPointBorderColor:function(e,t){var n=this.chart.options.elements.point.borderColor,r=this.getDataset(),i=e.custom||{};return i.borderColor?n=i.borderColor:r.pointBorderColor?n=o.valueAtIndexOrDefault(r.pointBorderColor,t,n):r.borderColor&&(n=r.borderColor),n},getPointBorderWidth:function(e,t){var n=this.chart.options.elements.point.borderWidth,r=this.getDataset(),i=e.custom||{};return isNaN(i.borderWidth)?!isNaN(r.pointBorderWidth)||o.isArray(r.pointBorderWidth)?n=o.valueAtIndexOrDefault(r.pointBorderWidth,t,n):isNaN(r.borderWidth)||(n=r.borderWidth):n=i.borderWidth,n},updateElement:function(e,t,n){var r,i,a=this,s=a.getMeta(),l=e.custom||{},u=a.getDataset(),c=a.index,d=u.data[t],h=a.getScaleForId(s.yAxisID),f=a.getScaleForId(s.xAxisID),p=a.chart.options.elements.point;void 0!==u.radius&&void 0===u.pointRadius&&(u.pointRadius=u.radius),void 0!==u.hitRadius&&void 0===u.pointHitRadius&&(u.pointHitRadius=u.hitRadius),r=f.getPixelForValue("object"==typeof d?d:NaN,t,c),i=n?h.getBasePixel():a.calculatePointY(d,t,c),e._xScale=f,e._yScale=h,e._datasetIndex=c,e._index=t,e._model={x:r,y:i,skip:l.skip||isNaN(r)||isNaN(i),radius:l.radius||o.valueAtIndexOrDefault(u.pointRadius,t,p.radius),pointStyle:l.pointStyle||o.valueAtIndexOrDefault(u.pointStyle,t,p.pointStyle),backgroundColor:a.getPointBackgroundColor(e,t),borderColor:a.getPointBorderColor(e,t),borderWidth:a.getPointBorderWidth(e,t),tension:s.dataset._model?s.dataset._model.tension:0,steppedLine:!!s.dataset._model&&s.dataset._model.steppedLine,hitRadius:l.hitRadius||o.valueAtIndexOrDefault(u.pointHitRadius,t,p.hitRadius)}},calculatePointY:function(e,t,n){var r,i,o,a=this,s=a.chart,l=a.getMeta(),u=a.getScaleForId(l.yAxisID),c=0,d=0;if(u.options.stacked){for(r=0;r<n;r++)if(i=s.data.datasets[r],o=s.getDatasetMeta(r),"line"===o.type&&o.yAxisID===u.id&&s.isDatasetVisible(r)){var h=Number(u.getRightValue(i.data[t]));h<0?d+=h||0:c+=h||0}var f=Number(u.getRightValue(e));return f<0?u.getPixelForValue(d+f):u.getPixelForValue(c+f)}return u.getPixelForValue(e)},updateBezierControlPoints:function(){function e(e,t,n){return Math.max(Math.min(e,n),t)}var t,n,r,i,a,s=this,l=s.getMeta(),u=s.chart.chartArea,c=l.data||[];if(l.dataset._model.spanGaps&&(c=c.filter(function(e){return!e._model.skip})),"monotone"===l.dataset._model.cubicInterpolationMode)o.splineCurveMonotone(c);else for(t=0,n=c.length;t<n;++t)r=c[t],i=r._model,a=o.splineCurve(o.previousItem(c,t)._model,i,o.nextItem(c,t)._model,l.dataset._model.tension),i.controlPointPreviousX=a.previous.x,i.controlPointPreviousY=a.previous.y,i.controlPointNextX=a.next.x,i.controlPointNextY=a.next.y;if(s.chart.options.elements.line.capBezierPoints)for(t=0,n=c.length;t<n;++t)i=c[t]._model,i.controlPointPreviousX=e(i.controlPointPreviousX,u.left,u.right),i.controlPointPreviousY=e(i.controlPointPreviousY,u.top,u.bottom),i.controlPointNextX=e(i.controlPointNextX,u.left,u.right),i.controlPointNextY=e(i.controlPointNextY,u.top,u.bottom)},draw:function(){var e=this,n=e.chart,r=e.getMeta(),i=r.data||[],a=n.chartArea,s=i.length,l=0;for(o.canvas.clipArea(n.ctx,a),t(e.getDataset(),n.options)&&r.dataset.draw(),o.canvas.unclipArea(n.ctx);l<s;++l)i[l].draw(a)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},i=e._model;i.radius=r.hoverRadius||o.valueAtIndexOrDefault(t.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius),i.backgroundColor=r.hoverBackgroundColor||o.valueAtIndexOrDefault(t.pointHoverBackgroundColor,n,o.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor||o.valueAtIndexOrDefault(t.pointHoverBorderColor,n,o.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth||o.valueAtIndexOrDefault(t.pointHoverBorderWidth,n,i.borderWidth)},removeHoverStyle:function(e){var t=this,n=t.chart.data.datasets[e._datasetIndex],r=e._index,i=e.custom||{},a=e._model;void 0!==n.radius&&void 0===n.pointRadius&&(n.pointRadius=n.radius),a.radius=i.radius||o.valueAtIndexOrDefault(n.pointRadius,r,t.chart.options.elements.point.radius),a.backgroundColor=t.getPointBackgroundColor(e,r),a.borderColor=t.getPointBorderColor(e,r),a.borderWidth=t.getPointBorderWidth(e,r)}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],13:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,i=n.labels;if(r.length)for(var o=0;o<r[0].data.length;++o)t.push('<li><span style="background-color:'+r[0].backgroundColor[o]+'"></span>'),i[o]&&t.push(i[o]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var i=e.getDatasetMeta(0),a=t.datasets[0],s=i.data[r],l=s.custom||{},u=o.valueAtIndexOrDefault,c=e.options.elements.arc;return{text:n,fillStyle:l.backgroundColor?l.backgroundColor:u(a.backgroundColor,r,c.backgroundColor),strokeStyle:l.borderColor?l.borderColor:u(a.borderColor,r,c.borderColor),lineWidth:l.borderWidth?l.borderWidth:u(a.borderWidth,r,c.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,i,o=t.index,a=this.chart;for(n=0,r=(a.data.datasets||[]).length;n<r;++n)i=a.getDatasetMeta(n),i.data[o].hidden=!i.data[o].hidden;a.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}}),t.exports=function(e){e.controllers.polarArea=e.DatasetController.extend({dataElementType:i.Arc,linkScales:o.noop,update:function(e){var t=this,n=t.chart,r=n.chartArea,i=t.getMeta(),a=n.options,s=a.elements.arc,l=Math.min(r.right-r.left,r.bottom-r.top);n.outerRadius=Math.max((l-s.borderWidth/2)/2,0),n.innerRadius=Math.max(a.cutoutPercentage?n.outerRadius/100*a.cutoutPercentage:1,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),t.outerRadius=n.outerRadius-n.radiusLength*t.index,t.innerRadius=t.outerRadius-n.radiusLength,i.count=t.countVisibleElements(),o.each(i.data,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){for(var r=this,i=r.chart,a=r.getDataset(),s=i.options,l=s.animation,u=i.scale,c=i.data.labels,d=r.calculateCircumference(a.data[t]),h=u.xCenter,f=u.yCenter,p=0,g=r.getMeta(),m=0;m<t;++m)isNaN(a.data[m])||g.data[m].hidden||++p;var v=s.startAngle,y=e.hidden?0:u.getDistanceFromCenterForValue(a.data[t]),b=v+d*p,x=b+(e.hidden?0:d),w=l.animateScale?0:u.getDistanceFromCenterForValue(a.data[t]);o.extend(e,{_datasetIndex:r.index,_index:t,_scale:u,_model:{x:h,y:f,innerRadius:0,outerRadius:n?w:y,startAngle:n&&l.animateRotate?v:b,endAngle:n&&l.animateRotate?v:x,label:o.valueAtIndexOrDefault(c,t,c[t])}}),r.removeHoverStyle(e),e.pivot()},removeHoverStyle:function(t){e.DatasetController.prototype.removeHoverStyle.call(this,t,this.chart.options.elements.arc)},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return o.each(t.data,function(t,r){isNaN(e.data[r])||t.hidden||n++}),n},calculateCircumference:function(e){var t=this.getMeta().count;return t>0&&!isNaN(e)?2*Math.PI/t:0}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],14:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}}),t.exports=function(e){e.controllers.radar=e.DatasetController.extend({datasetElementType:i.Line,dataElementType:i.Point,linkScales:o.noop,update:function(e){var t=this,n=t.getMeta(),r=n.dataset,i=n.data,a=r.custom||{},s=t.getDataset(),l=t.chart.options.elements.line,u=t.chart.scale;void 0!==s.tension&&void 0===s.lineTension&&(s.lineTension=s.tension),o.extend(n.dataset,{_datasetIndex:t.index,_scale:u,_children:i,_loop:!0,_model:{tension:a.tension?a.tension:o.valueOrDefault(s.lineTension,l.tension),backgroundColor:a.backgroundColor?a.backgroundColor:s.backgroundColor||l.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:s.borderWidth||l.borderWidth,borderColor:a.borderColor?a.borderColor:s.borderColor||l.borderColor,fill:a.fill?a.fill:void 0!==s.fill?s.fill:l.fill,borderCapStyle:a.borderCapStyle?a.borderCapStyle:s.borderCapStyle||l.borderCapStyle,borderDash:a.borderDash?a.borderDash:s.borderDash||l.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:s.borderDashOffset||l.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:s.borderJoinStyle||l.borderJoinStyle}}),n.dataset.pivot(),o.each(i,function(n,r){t.updateElement(n,r,e)},t),t.updateBezierControlPoints()},updateElement:function(e,t,n){var r=this,i=e.custom||{},a=r.getDataset(),s=r.chart.scale,l=r.chart.options.elements.point,u=s.getPointPositionForValue(t,a.data[t]);void 0!==a.radius&&void 0===a.pointRadius&&(a.pointRadius=a.radius),void 0!==a.hitRadius&&void 0===a.pointHitRadius&&(a.pointHitRadius=a.hitRadius),o.extend(e,{_datasetIndex:r.index,_index:t,_scale:s,_model:{x:n?s.xCenter:u.x,y:n?s.yCenter:u.y,tension:i.tension?i.tension:o.valueOrDefault(a.lineTension,r.chart.options.elements.line.tension),radius:i.radius?i.radius:o.valueAtIndexOrDefault(a.pointRadius,t,l.radius),backgroundColor:i.backgroundColor?i.backgroundColor:o.valueAtIndexOrDefault(a.pointBackgroundColor,t,l.backgroundColor),borderColor:i.borderColor?i.borderColor:o.valueAtIndexOrDefault(a.pointBorderColor,t,l.borderColor),borderWidth:i.borderWidth?i.borderWidth:o.valueAtIndexOrDefault(a.pointBorderWidth,t,l.borderWidth),pointStyle:i.pointStyle?i.pointStyle:o.valueAtIndexOrDefault(a.pointStyle,t,l.pointStyle),hitRadius:i.hitRadius?i.hitRadius:o.valueAtIndexOrDefault(a.pointHitRadius,t,l.hitRadius)}}),e._model.skip=i.skip?i.skip:isNaN(e._model.x)||isNaN(e._model.y)},updateBezierControlPoints:function(){var e=this.chart.chartArea,t=this.getMeta();o.each(t.data,function(n,r){var i=n._model,a=o.splineCurve(o.previousItem(t.data,r,!0)._model,i,o.nextItem(t.data,r,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(a.previous.x,e.right),e.left),i.controlPointPreviousY=Math.max(Math.min(a.previous.y,e.bottom),e.top),i.controlPointNextX=Math.max(Math.min(a.next.x,e.right),e.left),i.controlPointNextY=Math.max(Math.min(a.next.y,e.bottom),e.top),n.pivot()})},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e.custom||{},r=e._index,i=e._model;i.radius=n.hoverRadius?n.hoverRadius:o.valueAtIndexOrDefault(t.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius),i.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:o.valueAtIndexOrDefault(t.pointHoverBackgroundColor,r,o.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor?n.hoverBorderColor:o.valueAtIndexOrDefault(t.pointHoverBorderColor,r,o.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:o.valueAtIndexOrDefault(t.pointHoverBorderWidth,r,i.borderWidth)},removeHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e.custom||{},r=e._index,i=e._model,a=this.chart.options.elements.point;i.radius=n.radius?n.radius:o.valueAtIndexOrDefault(t.pointRadius,r,a.radius),i.backgroundColor=n.backgroundColor?n.backgroundColor:o.valueAtIndexOrDefault(t.pointBackgroundColor,r,a.backgroundColor),i.borderColor=n.borderColor?n.borderColor:o.valueAtIndexOrDefault(t.pointBorderColor,r,a.borderColor),i.borderWidth=n.borderWidth?n.borderWidth:o.valueAtIndexOrDefault(t.pointBorderWidth,r,a.borderWidth)}})}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],15:[function(e,t,n){"use strict";e("../core/core.defaults")._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}}),t.exports=function(e){e.controllers.scatter=e.controllers.line}},{"../core/core.defaults":19}],16:[function(e,t,n){"use strict";var r=e("./core.defaults"),i=e("./core.element"),o=e("../helpers/index");r._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:o.noop,onComplete:o.noop}}),t.exports=function(e){e.Animation=i.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null}),e.animationService={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(e,t,n,r){var i,o,a=this.animations;for(t.chart=e,r||(e.animating=!0),i=0,o=a.length;i<o;++i)if(a[i].chart===e)return void(a[i]=t);a.push(t),1===a.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=o.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=o.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){var e=this,t=Date.now(),n=0;e.dropFrames>1&&(n=Math.floor(e.dropFrames),e.dropFrames=e.dropFrames%1),
e.advance(1+n);var r=Date.now();e.dropFrames+=(r-t)/e.frameDuration,e.animations.length>0&&e.requestAnimationFrame()},advance:function(e){for(var t,n,r=this.animations,i=0;i<r.length;)t=r[i],n=t.chart,t.currentStep=(t.currentStep||0)+e,t.currentStep=Math.min(t.currentStep,t.numSteps),o.callback(t.render,[n,t],n),o.callback(t.onAnimationProgress,[t],n),t.currentStep>=t.numSteps?(o.callback(t.onAnimationComplete,[t],n),n.animating=!1,r.splice(i,1)):++i}},Object.defineProperty(e.Animation.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(e.Animation.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}})}},{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],17:[function(e,t,n){"use strict";var r=e("./core.defaults"),i=e("../helpers/index"),o=e("./core.interaction"),a=e("../platforms/platform");t.exports=function(e){function t(e){e=e||{};var t=e.data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=i.configMerge(r.global,r[e.type],e.options||{}),e}function n(e){var t=e.options;t.scale?e.scale.options=t.scale:t.scales&&t.scales.xAxes.concat(t.scales.yAxes).forEach(function(t){e.scales[t.id].options=t}),e.tooltip._options=t.tooltips}function s(e){return"top"===e||"bottom"===e}var l=e.plugins;e.types={},e.instances={},e.controllers={},i.extend(e.prototype,{construct:function(n,r){var o=this;r=t(r);var s=a.acquireContext(n,r),l=s&&s.canvas,u=l&&l.height,c=l&&l.width;if(o.id=i.uid(),o.ctx=s,o.canvas=l,o.config=r,o.width=c,o.height=u,o.aspectRatio=u?c/u:null,o.options=r.options,o._bufferedRender=!1,o.chart=o,o.controller=o,e.instances[o.id]=o,Object.defineProperty(o,"data",{get:function(){return o.config.data},set:function(e){o.config.data=e}}),!s||!l)return void console.error("Failed to create chart: can't acquire context from the given item");o.initialize(),o.update()},initialize:function(){var e=this;return l.notify(e,"beforeInit"),i.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildScales(),e.initToolTip(),l.notify(e,"afterInit"),e},clear:function(){return i.canvas.clear(this),this},stop:function(){return e.animationService.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,r=t.canvas,o=n.maintainAspectRatio&&t.aspectRatio||null,a=Math.max(0,Math.floor(i.getMaximumWidth(r))),s=Math.max(0,Math.floor(o?a/o:i.getMaximumHeight(r)));if((t.width!==a||t.height!==s)&&(r.width=t.width=a,r.height=t.height=s,r.style.width=a+"px",r.style.height=s+"px",i.retinaScale(t,n.devicePixelRatio),!e)){var u={width:a,height:s};l.notify(t,"resize",[u]),t.options.onResize&&t.options.onResize(t,u),t.stop(),t.update(t.options.responsiveAnimationDuration)}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;i.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),i.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),n&&(n.id=n.id||"scale")},buildScales:function(){var t=this,n=t.options,r=t.scales={},o=[];n.scales&&(o=o.concat((n.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(n.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),n.scale&&o.push({options:n.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),i.each(o,function(n){var o=n.options,a=i.valueOrDefault(o.type,n.dtype),l=e.scaleService.getScaleConstructor(a);if(l){s(o.position)!==s(n.dposition)&&(o.position=n.dposition);var u=new l({id:o.id,options:o,ctx:t.ctx,chart:t});r[u.id]=u,u.mergeTicksOptions(),n.isDefault&&(t.scale=u)}}),e.scaleService.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,n=[],r=[];return i.each(t.data.datasets,function(i,o){var a=t.getDatasetMeta(o),s=i.type||t.config.type;if(a.type&&a.type!==s&&(t.destroyDatasetMeta(o),a=t.getDatasetMeta(o)),a.type=s,n.push(a.type),a.controller)a.controller.updateIndex(o);else{var l=e.controllers[a.type];if(void 0===l)throw new Error('"'+a.type+'" is not a chart type.');a.controller=new l(t,o),r.push(a.controller)}},t),r},resetElements:function(){var e=this;i.each(e.data.datasets,function(t,n){e.getDatasetMeta(n).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var t=this;if(e&&"object"==typeof e||(e={duration:e,lazy:arguments[1]}),n(t),!1!==l.notify(t,"beforeUpdate")){t.tooltip._data=t.data;var r=t.buildOrUpdateControllers();i.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.buildOrUpdateElements()},t),t.updateLayout(),i.each(r,function(e){e.reset()}),t.updateDatasets(),l.notify(t,"afterUpdate"),t._bufferedRender?t._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:t.render(e)}},updateLayout:function(){var t=this;!1!==l.notify(t,"beforeLayout")&&(e.layoutService.update(this,this.width,this.height),l.notify(t,"afterScaleUpdate"),l.notify(t,"afterLayout"))},updateDatasets:function(){var e=this;if(!1!==l.notify(e,"beforeDatasetsUpdate")){for(var t=0,n=e.data.datasets.length;t<n;++t)e.updateDataset(t);l.notify(e,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this,n=t.getDatasetMeta(e),r={meta:n,index:e};!1!==l.notify(t,"beforeDatasetUpdate",[r])&&(n.controller.update(),l.notify(t,"afterDatasetUpdate",[r]))},render:function(t){var n=this;t&&"object"==typeof t||(t={duration:t,lazy:arguments[1]});var r=t.duration,o=t.lazy;if(!1!==l.notify(n,"beforeRender")){var a=n.options.animation,s=function(e){l.notify(n,"afterRender"),i.callback(a&&a.onComplete,[e],n)};if(a&&(void 0!==r&&0!==r||void 0===r&&0!==a.duration)){var u=new e.Animation({numSteps:(r||a.duration)/16.66,easing:t.easing||a.easing,render:function(e,t){var n=i.easing.effects[t.easing],r=t.currentStep,o=r/t.numSteps;e.draw(n(o),o,r)},onAnimationProgress:a.onProgress,onAnimationComplete:s});e.animationService.addAnimation(n,u,r,o)}else n.draw(),s(new e.Animation({numSteps:0,chart:n}));return n}},draw:function(e){var t=this;t.clear(),i.isNullOrUndef(e)&&(e=1),t.transition(e),!1!==l.notify(t,"beforeDraw",[e])&&(i.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.scale&&t.scale.draw(),t.drawDatasets(e),t.tooltip.draw(),l.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=this,n=0,r=(t.data.datasets||[]).length;n<r;++n)t.isDatasetVisible(n)&&t.getDatasetMeta(n).controller.transition(e);t.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==l.notify(t,"beforeDatasetsDraw",[e])){for(var n=(t.data.datasets||[]).length-1;n>=0;--n)t.isDatasetVisible(n)&&t.drawDataset(n,e);l.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n=this,r=n.getDatasetMeta(e),i={meta:r,index:e,easingValue:t};!1!==l.notify(n,"beforeDatasetDraw",[i])&&(r.controller.draw(t),l.notify(n,"afterDatasetDraw",[i]))},getElementAtEvent:function(e){return o.modes.single(this,e)},getElementsAtEvent:function(e){return o.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return o.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var r=o.modes[t];return"function"==typeof r?r(this,e,n):[]},getDatasetAtEvent:function(e){return o.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this,n=t.data.datasets[e];n._meta||(n._meta={});var r=n._meta[t.id];return r||(r=n._meta[t.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),r},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],r=n._meta&&n._meta[t];r&&(r.controller.destroy(),delete n._meta[t])},destroy:function(){var t,n,r=this,o=r.canvas;for(r.stop(),t=0,n=r.data.datasets.length;t<n;++t)r.destroyDatasetMeta(t);o&&(r.unbindEvents(),i.canvas.clear(r),a.releaseContext(r.ctx),r.canvas=null,r.ctx=null),l.notify(r,"destroy"),delete e.instances[r.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new e.Tooltip({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};i.each(e.options.events,function(r){a.addEventListener(e,r,n),t[r]=n}),e.options.responsive&&(n=function(){e.resize()},a.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,i.each(t,function(t,n){a.removeEventListener(e,n,t)}))},updateHoverStyle:function(e,t,n){var r,i,o,a=n?"setHoverStyle":"removeHoverStyle";for(i=0,o=e.length;i<o;++i)(r=e[i])&&this.getDatasetMeta(r._datasetIndex).controller[a](r)},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==l.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var r=t.handleEvent(e);r|=n&&n.handleEvent(e),l.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):r&&!t.animating&&(t.stop(),t.render(t.options.hover.animationDuration,!0)),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t=this,n=t.options||{},r=n.hover,o=!1;return t.lastActive=t.lastActive||[],"mouseout"===e.type?t.active=[]:t.active=t.getElementsAtEventForMode(e,r.mode,r),i.callback(n.onHover||n.hover.onHover,[e.native,t.active],t),"mouseup"!==e.type&&"click"!==e.type||n.onClick&&n.onClick.call(t,e.native,t.active),t.lastActive.length&&t.updateHoverStyle(t.lastActive,r.mode,!1),t.active.length&&r.mode&&t.updateHoverStyle(t.active,r.mode,!0),o=!i.arrayEquals(t.active,t.lastActive),t.lastActive=t.active,o}}),e.Controller=e}},{"../helpers/index":39,"../platforms/platform":42,"./core.defaults":19,"./core.interaction":22}],18:[function(e,t,n){"use strict";var r=e("../helpers/index");t.exports=function(e){function t(e,t){if(e._chartjs)return void e._chartjs.listeners.push(t);Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),i.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),i=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),o=i.apply(this,t);return r.each(e._chartjs.listeners,function(e){"function"==typeof e[n]&&e[n].apply(e,t)}),o}})})}function n(e,t){var n=e._chartjs;if(n){var r=n.listeners,o=r.indexOf(t);-1!==o&&r.splice(o,1),r.length>0||(i.forEach(function(t){delete e[t]}),delete e._chartjs)}}var i=["push","pop","shift","splice","unshift"];e.DatasetController=function(e,t){this.initialize(e,t)},r.extend(e.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){var n=this;n.chart=e,n.index=t,n.linkScales(),n.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),n=e.getDataset();null===t.xAxisID&&(t.xAxisID=n.xAxisID||e.chart.options.scales.xAxes[0].id),null===t.yAxisID&&(t.yAxisID=n.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},reset:function(){this.update(!0)},destroy:function(){this._data&&n(this._data,this)},createMetaDataset:function(){var e=this,t=e.datasetElementType;return t&&new t({_chart:e.chart,_datasetIndex:e.index})},createMetaData:function(e){var t=this,n=t.dataElementType;return n&&new n({_chart:t.chart,_datasetIndex:t.index,_index:e})},addElements:function(){var e,t,n=this,r=n.getMeta(),i=n.getDataset().data||[],o=r.data;for(e=0,t=i.length;e<t;++e)o[e]=o[e]||n.createMetaData(e);r.dataset=r.dataset||n.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e=this,r=e.getDataset(),i=r.data||(r.data=[]);e._data!==i&&(e._data&&n(e._data,e),t(i,e),e._data=i),e.resyncElements()},update:r.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],r=n.length,i=0;i<r;++i)n[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,r=0;for(e.dataset&&e.dataset.draw();r<n;++r)t[r].draw()},removeHoverStyle:function(e,t){var n=this.chart.data.datasets[e._datasetIndex],i=e._index,o=e.custom||{},a=r.valueAtIndexOrDefault,s=e._model;s.backgroundColor=o.backgroundColor?o.backgroundColor:a(n.backgroundColor,i,t.backgroundColor),s.borderColor=o.borderColor?o.borderColor:a(n.borderColor,i,t.borderColor),s.borderWidth=o.borderWidth?o.borderWidth:a(n.borderWidth,i,t.borderWidth)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,i=e.custom||{},o=r.valueAtIndexOrDefault,a=r.getHoverColor,s=e._model;s.backgroundColor=i.hoverBackgroundColor?i.hoverBackgroundColor:o(t.hoverBackgroundColor,n,a(s.backgroundColor)),s.borderColor=i.hoverBorderColor?i.hoverBorderColor:o(t.hoverBorderColor,n,a(s.borderColor)),s.borderWidth=i.hoverBorderWidth?i.hoverBorderWidth:o(t.hoverBorderWidth,n,s.borderWidth)},resyncElements:function(){var e=this,t=e.getMeta(),n=e.getDataset().data,r=t.data.length,i=n.length;i<r?t.data.splice(i,r-i):i>r&&e.insertElements(r,i-r)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),e.DatasetController.extend=r.inherits}},{"../helpers/index":39}],19:[function(e,t,n){"use strict";var r=e("../helpers/index");t.exports={_set:function(e,t){return r.merge(this[e]||(this[e]={}),t)}}},{"../helpers/index":39}],20:[function(e,t,n){"use strict";function r(e,t,n,r){var o,a,s,l,u,c,d,h,f,p=Object.keys(n);for(o=0,a=p.length;o<a;++o)if(s=p[o],c=n[s],t.hasOwnProperty(s)||(t[s]=c),(l=t[s])!==c&&"_"!==s[0]){if(e.hasOwnProperty(s)||(e[s]=l),u=e[s],(d=typeof c)===typeof u)if("string"===d){if(h=i(u),h.valid&&(f=i(c),f.valid)){t[s]=f.mix(h,r).rgbString();continue}}else if("number"===d&&isFinite(u)&&isFinite(c)){t[s]=u+(c-u)*r;continue}t[s]=c}}var i=e("chartjs-color"),o=e("../helpers/index"),a=function(e){o.extend(this,e),this.initialize.apply(this,arguments)};o.extend(a.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=o.clone(e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,i=t._start,o=t._view;return n&&1!==e?(o||(o=t._view={}),i||(i=t._start={}),r(i,o,n,e),t):(t._view=n,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return o.isNumber(this._model.x)&&o.isNumber(this._model.y)}}),a.extend=o.inherits,t.exports=a},{"../helpers/index":39,"chartjs-color":53}],21:[function(e,t,n){"use strict";var r=e("chartjs-color"),i=e("./core.defaults"),o=e("../helpers/index");t.exports=function(e){function t(e,t,n){var r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}function n(e){return void 0!==e&&null!==e&&"none"!==e}function a(e,r,i){var o=document.defaultView,a=e.parentNode,s=o.getComputedStyle(e)[r],l=o.getComputedStyle(a)[r],u=n(s),c=n(l),d=Number.POSITIVE_INFINITY;return u||c?Math.min(u?t(s,e,i):d,c?t(l,a,i):d):"none"}o.extend=function(e){for(var t=function(t,n){e[n]=t},n=1,r=arguments.length;n<r;n++)o.each(arguments[n],t);return e},o.configMerge=function(){return o.merge(o.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,n,r,i){var a=n[t]||{},s=r[t];"scales"===t?n[t]=o.scaleMerge(a,s):"scale"===t?n[t]=o.merge(a,[e.scaleService.getScaleDefaults(s.type),s]):o._merger(t,n,r,i)}})},o.scaleMerge=function(){return o.merge(o.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,n,r,i){if("xAxes"===t||"yAxes"===t){var a,s,l,u=r[t].length;for(n[t]||(n[t]=[]),a=0;a<u;++a)l=r[t][a],s=o.valueOrDefault(l.type,"xAxes"===t?"category":"linear"),a>=n[t].length&&n[t].push({}),!n[t][a].type||l.type&&l.type!==n[t][a].type?o.merge(n[t][a],[e.scaleService.getScaleDefaults(s),l]):o.merge(n[t][a],l)}else o._merger(t,n,r,i)}})},o.where=function(e,t){if(o.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return o.each(e,function(e){t(e)&&n.push(e)}),n},o.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var r=0,i=e.length;r<i;++r)if(t.call(n,e[r],r,e))return r;return-1},o.findNextWhere=function(e,t,n){o.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<e.length;r++){var i=e[r];if(t(i))return i}},o.findPreviousWhere=function(e,t,n){o.isNullOrUndef(n)&&(n=e.length);for(var r=n-1;r>=0;r--){var i=e[r];if(t(i))return i}},o.inherits=function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=t.prototype,n.prototype=new r,n.extend=o.inherits,e&&o.extend(n.prototype,e),n.__super__=t.prototype,n},o.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},o.almostEquals=function(e,t,n){return Math.abs(e-t)<n},o.almostWhole=function(e,t){var n=Math.round(e);return n-t<e&&n+t>e},o.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},o.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},o.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return e=+e,0===e||isNaN(e)?e:e>0?1:-1},o.log10=Math.log10?function(e){return Math.log10(e)}:function(e){return Math.log(e)/Math.LN10},o.toRadians=function(e){return e*(Math.PI/180)},o.toDegrees=function(e){return e*(180/Math.PI)},o.getAngleFromPoint=function(e,t){var n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r),o=Math.atan2(r,n);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:i}},o.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},o.aliasPixel=function(e){return e%2==0?0:.5},o.splineCurve=function(e,t,n,r){var i=e.skip?t:e,o=t,a=n.skip?t:n,s=Math.sqrt(Math.pow(o.x-i.x,2)+Math.pow(o.y-i.y,2)),l=Math.sqrt(Math.pow(a.x-o.x,2)+Math.pow(a.y-o.y,2)),u=s/(s+l),c=l/(s+l);u=isNaN(u)?0:u,c=isNaN(c)?0:c;var d=r*u,h=r*c;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+h*(a.x-i.x),y:o.y+h*(a.y-i.y)}}},o.EPSILON=Number.EPSILON||1e-14,o.splineCurveMonotone=function(e){var t,n,r,i,a=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),s=a.length;for(t=0;t<s;++t)if(r=a[t],!r.model.skip){if(n=t>0?a[t-1]:null,(i=t<s-1?a[t+1]:null)&&!i.model.skip){var l=i.model.x-r.model.x;r.deltaK=0!==l?(i.model.y-r.model.y)/l:0}!n||n.model.skip?r.mK=r.deltaK:!i||i.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}var u,c,d,h;for(t=0;t<s-1;++t)r=a[t],i=a[t+1],r.model.skip||i.model.skip||(o.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=i.mK=0:(u=r.mK/r.deltaK,c=i.mK/r.deltaK,(h=Math.pow(u,2)+Math.pow(c,2))<=9||(d=3/Math.sqrt(h),r.mK=u*d*r.deltaK,i.mK=c*d*r.deltaK)));var f;for(t=0;t<s;++t)r=a[t],r.model.skip||(n=t>0?a[t-1]:null,i=t<s-1?a[t+1]:null,n&&!n.model.skip&&(f=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-f,r.model.controlPointPreviousY=r.model.y-f*r.mK),i&&!i.model.skip&&(f=(i.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+f,r.model.controlPointNextY=r.model.y+f*r.mK))},o.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},o.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},o.niceNum=function(e,t){var n=Math.floor(o.log10(e)),r=e/Math.pow(10,n);return(t?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},o.requestAnimFrame=function(){return"undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)}}(),o.getRelativePosition=function(e,t){var n,r,i=e.originalEvent||e,a=e.currentTarget||e.srcElement,s=a.getBoundingClientRect(),l=i.touches;l&&l.length>0?(n=l[0].clientX,r=l[0].clientY):(n=i.clientX,r=i.clientY);var u=parseFloat(o.getStyle(a,"padding-left")),c=parseFloat(o.getStyle(a,"padding-top")),d=parseFloat(o.getStyle(a,"padding-right")),h=parseFloat(o.getStyle(a,"padding-bottom")),f=s.right-s.left-u-d,p=s.bottom-s.top-c-h;return n=Math.round((n-s.left-u)/f*a.width/t.currentDevicePixelRatio),r=Math.round((r-s.top-c)/p*a.height/t.currentDevicePixelRatio),{x:n,y:r}},o.getConstraintWidth=function(e){return a(e,"max-width","clientWidth")},o.getConstraintHeight=function(e){return a(e,"max-height","clientHeight")},o.getMaximumWidth=function(e){var t=e.parentNode;if(!t)return e.clientWidth;var n=parseInt(o.getStyle(t,"padding-left"),10),r=parseInt(o.getStyle(t,"padding-right"),10),i=t.clientWidth-n-r,a=o.getConstraintWidth(e);return isNaN(a)?i:Math.min(i,a)},o.getMaximumHeight=function(e){var t=e.parentNode;if(!t)return e.clientHeight;var n=parseInt(o.getStyle(t,"padding-top"),10),r=parseInt(o.getStyle(t,"padding-bottom"),10),i=t.clientHeight-n-r,a=o.getConstraintHeight(e);return isNaN(a)?i:Math.min(i,a)},o.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},o.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||window.devicePixelRatio||1;if(1!==n){var r=e.canvas,i=e.height,o=e.width;r.height=i*n,r.width=o*n,e.ctx.scale(n,n),r.style.height=i+"px",r.style.width=o+"px"}},o.fontString=function(e,t,n){return t+" "+e+"px "+n},o.longestText=function(e,t,n,r){r=r||{};var i=r.data=r.data||{},a=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},a=r.garbageCollect=[],r.font=t),e.font=t;var s=0;o.each(n,function(t){void 0!==t&&null!==t&&!0!==o.isArray(t)?s=o.measureText(e,i,a,s,t):o.isArray(t)&&o.each(t,function(t){void 0===t||null===t||o.isArray(t)||(s=o.measureText(e,i,a,s,t))})});var l=a.length/2;if(l>n.length){for(var u=0;u<l;u++)delete i[a[u]];a.splice(0,l)}return s},o.measureText=function(e,t,n,r,i){var o=t[i];return o||(o=t[i]=e.measureText(i).width,n.push(i)),o>r&&(r=o),r},o.numberOfLabelLines=function(e){var t=1;return o.each(e,function(e){o.isArray(e)&&e.length>t&&(t=e.length)}),t},o.color=r?function(e){return e instanceof CanvasGradient&&(e=i.global.defaultColor),r(e)}:function(e){return console.error("Color.js not found!"),e},o.getHoverColor=function(e){return e instanceof CanvasPattern?e:o.color(e).saturate(.5).darken(.1).rgbString()}}},{"../helpers/index":39,"./core.defaults":19,"chartjs-color":53}],22:[function(e,t,n){"use strict";function r(e,t){return e.native?{x:e.x,y:e.y}:u.getRelativePosition(e,t)}function i(e,t){var n,r,i,o,a,s=e.data.datasets;for(r=0,o=s.length;r<o;++r)if(e.isDatasetVisible(r))for(n=e.getDatasetMeta(r),i=0,a=n.data.length;i<a;++i){var l=n.data[i];l._view.skip||t(l)}}function o(e,t){var n=[];return i(e,function(e){e.inRange(t.x,t.y)&&n.push(e)}),n}function a(e,t,n,r){var o=Number.POSITIVE_INFINITY,a=[];return i(e,function(e){if(!n||e.inRange(t.x,t.y)){var i=e.getCenterPoint(),s=r(t,i);s<o?(a=[e],o=s):s===o&&a.push(e)}}),a}function s(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){var i=t?Math.abs(e.x-r.x):0,o=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}function l(e,t,n){var i=r(t,e);n.axis=n.axis||"x";var l=s(n.axis),u=n.intersect?o(e,i):a(e,i,!1,l),c=[];return u.length?(e.data.datasets.forEach(function(t,n){if(e.isDatasetVisible(n)){var r=e.getDatasetMeta(n),i=r.data[u[0]._index];i&&!i._view.skip&&c.push(i)}}),c):[]}var u=e("../helpers/index");t.exports={modes:{single:function(e,t){var n=r(t,e),o=[];return i(e,function(e){if(e.inRange(n.x,n.y))return o.push(e),o}),o.slice(0,1)},label:l,index:l,dataset:function(e,t,n){var i=r(t,e);n.axis=n.axis||"xy";var l=s(n.axis),u=n.intersect?o(e,i):a(e,i,!1,l);return u.length>0&&(u=e.getDatasetMeta(u[0]._datasetIndex).data),u},"x-axis":function(e,t){return l(e,t,{intersect:!0})},point:function(e,t){return o(e,r(t,e))},nearest:function(e,t,n){var i=r(t,e);n.axis=n.axis||"xy";var o=s(n.axis),l=a(e,i,n.intersect,o);return l.length>1&&l.sort(function(e,t){var n=e.getArea(),r=t.getArea(),i=n-r;return 0===i&&(i=e._datasetIndex-t._datasetIndex),i}),l.slice(0,1)},x:function(e,t,n){var o=r(t,e),a=[],s=!1;return i(e,function(e){e.inXRange(o.x)&&a.push(e),e.inRange(o.x,o.y)&&(s=!0)}),n.intersect&&!s&&(a=[]),a},y:function(e,t,n){var o=r(t,e),a=[],s=!1;return i(e,function(e){e.inYRange(o.y)&&a.push(e),e.inRange(o.x,o.y)&&(s=!0)}),n.intersect&&!s&&(a=[]),a}}}},{"../helpers/index":39}],23:[function(e,t,n){"use strict";e("./core.defaults")._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}}),t.exports=function(){var e=function(e,t){return this.construct(e,t),this};return e.Chart=e,e}},{"./core.defaults":19}],24:[function(e,t,n){"use strict";var r=e("../helpers/index");t.exports=function(e){function t(e,t){return r.where(e,function(e){return e.position===t})}function n(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,n){var r=t?n:e,i=t?e:n;return r.weight===i.weight?r._tmpIndex_-i._tmpIndex_:r.weight-i.weight}),e.forEach(function(e){delete e._tmpIndex_})}e.layoutService={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var r,i=["fullWidth","position","weight"],o=i.length,a=0;a<o;++a)r=i[a],n.hasOwnProperty(r)&&(t[r]=n[r])},update:function(e,i,o){function a(e){var t,n=e.isHorizontal();n?(t=e.update(e.fullWidth?w:D,M),T-=t.height):(t=e.update(C,S),D-=t.width),A.push({horizontal:n,minSize:t,box:e})}function s(e){var t=r.findNextWhere(A,function(t){return t.box===e});if(t)if(e.isHorizontal()){var n={left:Math.max(R,O),right:Math.max(L,P),top:0,bottom:0};e.update(e.fullWidth?w:D,k/2,n)}else e.update(t.minSize.width,T)}function l(e){var t=r.findNextWhere(A,function(t){return t.box===e}),n={left:0,right:0,top:N,bottom:E};t&&e.update(t.minSize.width,T,n)}function u(e){e.isHorizontal()?(e.left=e.fullWidth?h:R,e.right=e.fullWidth?i-f:R+D,e.top=Y,e.bottom=Y+e.height,Y=e.bottom):(e.left=z,e.right=z+e.width,e.top=N,e.bottom=N+T,z=e.right)}if(e){var c=e.options.layout||{},d=r.options.toPadding(c.padding),h=d.left,f=d.right,p=d.top,g=d.bottom,m=t(e.boxes,"left"),v=t(e.boxes,"right"),y=t(e.boxes,"top"),b=t(e.boxes,"bottom"),x=t(e.boxes,"chartArea");n(m,!0),n(v,!1),n(y,!0),n(b,!1);var w=i-h-f,k=o-p-g,_=w/2,S=k/2,C=(i-_)/(m.length+v.length),M=(o-S)/(y.length+b.length),D=w,T=k,A=[];r.each(m.concat(v,y,b),a);var O=0,P=0,F=0,I=0;r.each(y.concat(b),function(e){if(e.getPadding){var t=e.getPadding();O=Math.max(O,t.left),P=Math.max(P,t.right)}}),r.each(m.concat(v),function(e){if(e.getPadding){var t=e.getPadding();F=Math.max(F,t.top),I=Math.max(I,t.bottom)}});var R=h,L=f,N=p,E=g;r.each(m.concat(v),s),r.each(m,function(e){R+=e.width}),r.each(v,function(e){L+=e.width}),r.each(y.concat(b),s),r.each(y,function(e){N+=e.height}),r.each(b,function(e){E+=e.height}),r.each(m.concat(v),l),R=h,L=f,N=p,E=g,r.each(m,function(e){R+=e.width}),r.each(v,function(e){L+=e.width}),r.each(y,function(e){N+=e.height}),r.each(b,function(e){E+=e.height});var j=Math.max(O-R,0);R+=j,L+=Math.max(P-L,0);var W=Math.max(F-N,0);N+=W,E+=Math.max(I-E,0);var B=o-N-E,H=i-R-L;H===D&&B===T||(r.each(m,function(e){e.height=B}),r.each(v,function(e){e.height=B}),r.each(y,function(e){e.fullWidth||(e.width=H)}),r.each(b,function(e){e.fullWidth||(e.width=H)}),T=B,D=H);var z=h+j,Y=p+W;r.each(m.concat(y),u),z+=D,Y+=T,r.each(v,u),r.each(b,u),e.chartArea={left:R,top:N,right:R+D,bottom:N+T},r.each(x,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(D,T)})}}}}},{"../helpers/index":39}],25:[function(e,t,n){"use strict";var r=e("./core.defaults"),i=e("./core.element"),o=e("../helpers/index");r._set("global",{plugins:{}}),t.exports=function(e){e.plugins={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var r,i,o,a,s,l=this.descriptors(e),u=l.length;for(r=0;r<u;++r)if(i=l[r],o=i.plugin,"function"==typeof(s=o[t])&&(a=[e].concat(n||[]),a.push(i.options),!1===s.apply(o,a)))return!1;return!0},descriptors:function(e){var t=e._plugins||(e._plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],i=[],a=e&&e.config||{},s=a.options&&a.options.plugins||{};return this._plugins.concat(a.plugins||[]).forEach(function(e){if(-1===n.indexOf(e)){var t=e.id,a=s[t];!1!==a&&(!0===a&&(a=o.clone(r.global.plugins[t])),n.push(e),i.push({plugin:e,options:a||{}}))}}),t.descriptors=i,t.id=this._cacheId,i}},e.pluginService=e.plugins,e.PluginBase=i.extend({})}},{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],26:[function(e,t,n){"use strict";function r(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(e[t].label);return r}function i(e,t,n){var r=e.getPixelForTick(t);return n&&(r-=0===t?(e.getPixelForTick(1)-r)/2:(r-e.getPixelForTick(t-1))/2),r}var o=e("./core.defaults"),a=e("./core.element"),s=e("../helpers/index"),l=e("./core.ticks");o._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:l.formatters.values,minor:{},major:{}}}),t.exports=function(e){function t(e,t,n){return s.isArray(t)?s.longestText(e,n,t):e.measureText(t).width}function n(e){var t=s.valueOrDefault,n=o.global,r=t(e.fontSize,n.defaultFontSize),i=t(e.fontStyle,n.defaultFontStyle),a=t(e.fontFamily,n.defaultFontFamily);return{size:r,style:i,family:a,font:s.fontString(r,i,a)}}function l(e){return s.options.toLineHeight(s.valueOrDefault(e.lineHeight,1.2),s.valueOrDefault(e.fontSize,o.global.defaultFontSize))}e.Scale=a.extend({getPadding:function(){var e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1});for(var t in e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){s.callback(this.options.beforeUpdate,[this])},
update:function(e,t,n){var r,i,o,a,l,u,c=this;for(c.beforeUpdate(),c.maxWidth=e,c.maxHeight=t,c.margins=s.extend({left:0,right:0,top:0,bottom:0},n),c.longestTextCache=c.longestTextCache||{},c.beforeSetDimensions(),c.setDimensions(),c.afterSetDimensions(),c.beforeDataLimits(),c.determineDataLimits(),c.afterDataLimits(),c.beforeBuildTicks(),l=c.buildTicks()||[],c.afterBuildTicks(),c.beforeTickToLabelConversion(),o=c.convertTicksToLabels(l)||c.ticks,c.afterTickToLabelConversion(),c.ticks=o,r=0,i=o.length;r<i;++r)a=o[r],u=l[r],u?u.label=a:l.push(u={label:a,major:!1});return c._ticks=l,c.beforeCalculateTickRotation(),c.calculateTickRotation(),c.afterCalculateTickRotation(),c.beforeFit(),c.fit(),c.afterFit(),c.afterUpdate(),c.minSize},afterUpdate:function(){s.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){s.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){s.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){s.callback(this.options.beforeDataLimits,[this])},determineDataLimits:s.noop,afterDataLimits:function(){s.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){s.callback(this.options.beforeBuildTicks,[this])},buildTicks:s.noop,afterBuildTicks:function(){s.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){s.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this,t=e.options.ticks;e.ticks=e.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){s.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){s.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,i=e.options.ticks,o=r(e._ticks),a=n(i);t.font=a.font;var l=i.minRotation||0;if(o.length&&e.options.display&&e.isHorizontal())for(var u,c=s.longestText(t,a.font,o,e.longestTextCache),d=c,h=e.getPixelForTick(1)-e.getPixelForTick(0)-6;d>h&&l<i.maxRotation;){var f=s.toRadians(l);if(u=Math.cos(f),Math.sin(f)*c>e.maxHeight){l--;break}l++,d=u*c}e.labelRotation=l},afterCalculateTickRotation:function(){s.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){s.callback(this.options.beforeFit,[this])},fit:function(){var e=this,i=e.minSize={width:0,height:0},o=r(e._ticks),a=e.options,u=a.ticks,c=a.scaleLabel,d=a.gridLines,h=a.display,f=e.isHorizontal(),p=n(u),g=a.gridLines.tickMarkLength;if(i.width=f?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:h&&d.drawTicks?g:0,i.height=f?h&&d.drawTicks?g:0:e.maxHeight,c.display&&h){var m=l(c),v=s.options.toPadding(c.padding),y=m+v.height;f?i.height+=y:i.width+=y}if(u.display&&h){var b=s.longestText(e.ctx,p.font,o,e.longestTextCache),x=s.numberOfLabelLines(o),w=.5*p.size,k=e.options.ticks.padding;if(f){e.longestLabelWidth=b;var _=s.toRadians(e.labelRotation),S=Math.cos(_),C=Math.sin(_),M=C*b+p.size*x+w*(x-1)+w;i.height=Math.min(e.maxHeight,i.height+M+k),e.ctx.font=p.font;var D=t(e.ctx,o[0],p.font),T=t(e.ctx,o[o.length-1],p.font);0!==e.labelRotation?(e.paddingLeft="bottom"===a.position?S*D+3:S*w+3,e.paddingRight="bottom"===a.position?S*w+3:S*T+3):(e.paddingLeft=D/2+3,e.paddingRight=T/2+3)}else u.mirror?b=0:b+=k+w,i.width=Math.min(e.maxWidth,i.width+b),e.paddingTop=p.size/2,e.paddingBottom=p.size/2}e.handleMargins(),e.width=i.width,e.height=i.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){s.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(s.isNullOrUndef(e))return NaN;if("number"==typeof e&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:s.noop,getPixelForValue:s.noop,getValueForPixel:s.noop,getPixelForTick:function(e){var t=this,n=t.options.offset;if(t.isHorizontal()){var r=t.width-(t.paddingLeft+t.paddingRight),i=r/Math.max(t._ticks.length-(n?0:1),1),o=i*e+t.paddingLeft;n&&(o+=i/2);var a=t.left+Math.round(o);return a+=t.isFullWidth()?t.margins.left:0}var s=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(s/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var n=t.width-(t.paddingLeft+t.paddingRight),r=n*e+t.paddingLeft,i=t.left+Math.round(r);return i+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this,t=e.min,n=e.max;return e.beginAtZero?0:t<0&&n<0?n:t>0&&n>0?t:0},_autoSkip:function(e){var t,n,r,i,o,a=this,l=a.isHorizontal(),u=a.options.ticks.minor,c=e.length,d=s.toRadians(a.labelRotation),h=Math.cos(d),f=a.longestLabelWidth*h,p=[];for(u.maxTicksLimit&&(o=u.maxTicksLimit),l&&(t=!1,(f+u.autoSkipPadding)*c>a.width-(a.paddingLeft+a.paddingRight)&&(t=1+Math.floor((f+u.autoSkipPadding)*c/(a.width-(a.paddingLeft+a.paddingRight)))),o&&c>o&&(t=Math.max(t,Math.floor(c/o)))),n=0;n<c;n++)r=e[n],i=t>1&&n%t>0||n%t==0&&n+t>=c,(i&&n!==c-1||s.isNullOrUndef(r.label))&&delete r.label,p.push(r);return p},draw:function(e){var t=this,r=t.options;if(r.display){var a=t.ctx,u=o.global,c=r.ticks.minor,d=r.ticks.major||c,h=r.gridLines,f=r.scaleLabel,p=0!==t.labelRotation,g=t.isHorizontal(),m=c.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),v=s.valueOrDefault(c.fontColor,u.defaultFontColor),y=n(c),b=s.valueOrDefault(d.fontColor,u.defaultFontColor),x=n(d),w=h.drawTicks?h.tickMarkLength:0,k=s.valueOrDefault(f.fontColor,u.defaultFontColor),_=n(f),S=s.options.toPadding(f.padding),C=s.toRadians(t.labelRotation),M=[],D="right"===r.position?t.left:t.right-w,T="right"===r.position?t.left+w:t.right,A="bottom"===r.position?t.top:t.bottom-w,O="bottom"===r.position?t.top+w:t.bottom;if(s.each(m,function(n,o){if(void 0!==n.label){var a,l,d,f,v=n.label;o===t.zeroLineIndex&&r.offset===h.offsetGridLines?(a=h.zeroLineWidth,l=h.zeroLineColor,d=h.zeroLineBorderDash,f=h.zeroLineBorderDashOffset):(a=s.valueAtIndexOrDefault(h.lineWidth,o),l=s.valueAtIndexOrDefault(h.color,o),d=s.valueOrDefault(h.borderDash,u.borderDash),f=s.valueOrDefault(h.borderDashOffset,u.borderDashOffset));var y,b,x,k,_,S,P,F,I,R,L="middle",N="middle",E=c.padding;if(g){var j=w+E;"bottom"===r.position?(N=p?"middle":"top",L=p?"right":"center",R=t.top+j):(N=p?"middle":"bottom",L=p?"left":"center",R=t.bottom-j);var W=i(t,o,h.offsetGridLines&&m.length>1);W<t.left&&(l="rgba(0,0,0,0)"),W+=s.aliasPixel(a),I=t.getPixelForTick(o)+c.labelOffset,y=x=_=P=W,b=A,k=O,S=e.top,F=e.bottom}else{var B,H="left"===r.position;c.mirror?(L=H?"left":"right",B=E):(L=H?"right":"left",B=w+E),I=H?t.right-B:t.left+B;var z=i(t,o,h.offsetGridLines&&m.length>1);z<t.top&&(l="rgba(0,0,0,0)"),z+=s.aliasPixel(a),R=t.getPixelForTick(o)+c.labelOffset,y=D,x=T,_=e.left,P=e.right,b=k=S=F=z}M.push({tx1:y,ty1:b,tx2:x,ty2:k,x1:_,y1:S,x2:P,y2:F,labelX:I,labelY:R,glWidth:a,glColor:l,glBorderDash:d,glBorderDashOffset:f,rotation:-1*C,label:v,major:n.major,textBaseline:N,textAlign:L})}}),s.each(M,function(e){if(h.display&&(a.save(),a.lineWidth=e.glWidth,a.strokeStyle=e.glColor,a.setLineDash&&(a.setLineDash(e.glBorderDash),a.lineDashOffset=e.glBorderDashOffset),a.beginPath(),h.drawTicks&&(a.moveTo(e.tx1,e.ty1),a.lineTo(e.tx2,e.ty2)),h.drawOnChartArea&&(a.moveTo(e.x1,e.y1),a.lineTo(e.x2,e.y2)),a.stroke(),a.restore()),c.display){a.save(),a.translate(e.labelX,e.labelY),a.rotate(e.rotation),a.font=e.major?x.font:y.font,a.fillStyle=e.major?b:v,a.textBaseline=e.textBaseline,a.textAlign=e.textAlign;var t=e.label;if(s.isArray(t))for(var n=0,r=0;n<t.length;++n)a.fillText(""+t[n],0,r),r+=1.5*y.size;else a.fillText(t,0,0);a.restore()}}),f.display){var P,F,I=0,R=l(f)/2;if(g)P=t.left+(t.right-t.left)/2,F="bottom"===r.position?t.bottom-R-S.bottom:t.top+R+S.top;else{var L="left"===r.position;P=L?t.left+R+S.top:t.right-R-S.top,F=t.top+(t.bottom-t.top)/2,I=L?-.5*Math.PI:.5*Math.PI}a.save(),a.translate(P,F),a.rotate(I),a.textAlign="center",a.textBaseline="middle",a.fillStyle=k,a.font=_.font,a.fillText(f.labelString,0,0),a.restore()}if(h.drawBorder){a.lineWidth=s.valueAtIndexOrDefault(h.lineWidth,0),a.strokeStyle=s.valueAtIndexOrDefault(h.color,0);var N=t.left,E=t.right,j=t.top,W=t.bottom,B=s.aliasPixel(a.lineWidth);g?(j=W="top"===r.position?t.bottom:t.top,j+=B,W+=B):(N=E="left"===r.position?t.right:t.left,N+=B,E+=B),a.beginPath(),a.moveTo(N,j),a.lineTo(E,W),a.stroke()}}}})}},{"../helpers/index":39,"./core.defaults":19,"./core.element":20,"./core.ticks":28}],27:[function(e,t,n){"use strict";var r=e("./core.defaults"),i=e("../helpers/index");t.exports=function(e){e.scaleService={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=i.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?i.merge({},[r.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){var n=this;n.defaults.hasOwnProperty(e)&&(n.defaults[e]=i.extend(n.defaults[e],t))},addScalesToLayout:function(t){i.each(t.scales,function(n){n.fullWidth=n.options.fullWidth,n.position=n.options.position,n.weight=n.options.weight,e.layoutService.addBox(t,n)})}}}},{"../helpers/index":39,"./core.defaults":19}],28:[function(e,t,n){"use strict";var r=e("../helpers/index");t.exports={generators:{linear:function(e,t){var n,i=[];if(e.stepSize&&e.stepSize>0)n=e.stepSize;else{var o=r.niceNum(t.max-t.min,!1);n=r.niceNum(o/(e.maxTicks-1),!0)}var a=Math.floor(t.min/n)*n,s=Math.ceil(t.max/n)*n;e.min&&e.max&&e.stepSize&&r.almostWhole((e.max-e.min)/e.stepSize,n/1e3)&&(a=e.min,s=e.max);var l=(s-a)/n;l=r.almostEquals(l,Math.round(l),n/1e3)?Math.round(l):Math.ceil(l),i.push(void 0!==e.min?e.min:a);for(var u=1;u<l;++u)i.push(a+u*n);return i.push(void 0!==e.max?e.max:s),i},logarithmic:function(e,t){var n,i,o=[],a=r.valueOrDefault,s=a(e.min,Math.pow(10,Math.floor(r.log10(t.min)))),l=Math.floor(r.log10(t.max)),u=Math.ceil(t.max/Math.pow(10,l));0===s?(n=Math.floor(r.log10(t.minNotZero)),i=Math.floor(t.minNotZero/Math.pow(10,n)),o.push(s),s=i*Math.pow(10,n)):(n=Math.floor(r.log10(s)),i=Math.floor(s/Math.pow(10,n)));do{o.push(s),++i,10===i&&(i=1,++n),s=i*Math.pow(10,n)}while(n<l||n===l&&i<u);var c=a(e.max,s);return o.push(c),o}},formatters:{values:function(e){return r.isArray(e)?e:""+e},linear:function(e,t,n){var i=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(i)>1&&e!==Math.floor(e)&&(i=e-Math.floor(e));var o=r.log10(Math.abs(i)),a="";if(0!==e){var s=-1*Math.floor(o);s=Math.max(Math.min(s,20),0),a=e.toFixed(s)}else a="0";return a},logarithmic:function(e,t,n){var i=e/Math.pow(10,Math.floor(r.log10(e)));return 0===e?"0":1===i||2===i||5===i||0===t||t===n.length-1?e.toExponential():""}}}},{"../helpers/index":39}],29:[function(e,t,n){"use strict";var r=e("./core.defaults"),i=e("./core.element"),o=e("../helpers/index");r._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:o.noop,title:function(e,t){var n="",r=t.labels,i=r?r.length:0;if(e.length>0){var o=e[0];o.xLabel?n=o.xLabel:i>0&&o.index<i&&(n=r[o.index])}return n},afterTitle:o.noop,beforeBody:o.noop,beforeLabel:o.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),n+=e.yLabel},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex),r=n.data[e.index],i=r._view;return{borderColor:i.borderColor,backgroundColor:i.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:o.noop,afterBody:o.noop,beforeFooter:o.noop,footer:o.noop,afterFooter:o.noop}}}),t.exports=function(e){function t(e,t){var n=o.color(e);return n.alpha(t*n.alpha()).rgbaString()}function n(e,t){return t&&(o.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function a(e){var t=e._xScale,n=e._yScale||e._scale,r=e._index,i=e._datasetIndex;return{xLabel:t?t.getLabelForIndex(r,i):"",yLabel:n?n.getLabelForIndex(r,i):"",index:r,datasetIndex:i,x:e._model.x,y:e._model.y}}function s(e){var t=r.global,n=o.valueOrDefault;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:n(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:n(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:n(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:n(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:n(e.titleFontStyle,t.defaultFontStyle),titleFontSize:n(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:n(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:n(e.footerFontStyle,t.defaultFontStyle),footerFontSize:n(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function l(e,t){var n=e._chart.ctx,r=2*t.yPadding,i=0,a=t.body,s=a.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);s+=t.beforeBody.length+t.afterBody.length;var l=t.title.length,u=t.footer.length,c=t.titleFontSize,d=t.bodyFontSize,h=t.footerFontSize;r+=l*c,r+=l?(l-1)*t.titleSpacing:0,r+=l?t.titleMarginBottom:0,r+=s*d,r+=s?(s-1)*t.bodySpacing:0,r+=u?t.footerMarginTop:0,r+=u*h,r+=u?(u-1)*t.footerSpacing:0;var f=0,p=function(e){i=Math.max(i,n.measureText(e).width+f)};return n.font=o.fontString(c,t._titleFontStyle,t._titleFontFamily),o.each(t.title,p),n.font=o.fontString(d,t._bodyFontStyle,t._bodyFontFamily),o.each(t.beforeBody.concat(t.afterBody),p),f=t.displayColors?d+2:0,o.each(a,function(e){o.each(e.before,p),o.each(e.lines,p),o.each(e.after,p)}),f=0,n.font=o.fontString(h,t._footerFontStyle,t._footerFontFamily),o.each(t.footer,p),i+=2*t.xPadding,{width:i,height:r}}function u(e,t){var n=e._model,r=e._chart,i=e._chart.chartArea,o="center",a="center";n.y<t.height?a="top":n.y>r.height-t.height&&(a="bottom");var s,l,u,c,d,h=(i.left+i.right)/2,f=(i.top+i.bottom)/2;"center"===a?(s=function(e){return e<=h},l=function(e){return e>h}):(s=function(e){return e<=t.width/2},l=function(e){return e>=r.width-t.width/2}),u=function(e){return e+t.width>r.width},c=function(e){return e-t.width<0},d=function(e){return e<=f?"top":"bottom"},s(n.x)?(o="left",u(n.x)&&(o="center",a=d(n.y))):l(n.x)&&(o="right",c(n.x)&&(o="center",a=d(n.y)));var p=e._options;return{xAlign:p.xAlign?p.xAlign:o,yAlign:p.yAlign?p.yAlign:a}}function c(e,t,n){var r=e.x,i=e.y,o=e.caretSize,a=e.caretPadding,s=e.cornerRadius,l=n.xAlign,u=n.yAlign,c=o+a,d=s+a;return"right"===l?r-=t.width:"center"===l&&(r-=t.width/2),"top"===u?i+=c:i-="bottom"===u?t.height+c:t.height/2,"center"===u?"left"===l?r+=c:"right"===l&&(r-=c):"left"===l?r-=d:"right"===l&&(r+=d),{x:r,y:i}}e.Tooltip=i.extend({initialize:function(){this._model=s(this._options)},getTitle:function(){var e=this,t=e._options,r=t.callbacks,i=r.beforeTitle.apply(e,arguments),o=r.title.apply(e,arguments),a=r.afterTitle.apply(e,arguments),s=[];return s=n(s,i),s=n(s,o),s=n(s,a)},getBeforeBody:function(){var e=this._options.callbacks.beforeBody.apply(this,arguments);return o.isArray(e)?e:void 0!==e?[e]:[]},getBody:function(e,t){var r=this,i=r._options.callbacks,a=[];return o.each(e,function(e){var o={before:[],lines:[],after:[]};n(o.before,i.beforeLabel.call(r,e,t)),n(o.lines,i.label.call(r,e,t)),n(o.after,i.afterLabel.call(r,e,t)),a.push(o)}),a},getAfterBody:function(){var e=this._options.callbacks.afterBody.apply(this,arguments);return o.isArray(e)?e:void 0!==e?[e]:[]},getFooter:function(){var e=this,t=e._options.callbacks,r=t.beforeFooter.apply(e,arguments),i=t.footer.apply(e,arguments),o=t.afterFooter.apply(e,arguments),a=[];return a=n(a,r),a=n(a,i),a=n(a,o)},update:function(t){var n,r,i=this,d=i._options,h=i._model,f=i._model=s(d),p=i._active,g=i._data,m={xAlign:h.xAlign,yAlign:h.yAlign},v={x:h.x,y:h.y},y={width:h.width,height:h.height},b={x:h.caretX,y:h.caretY};if(p.length){f.opacity=1;var x=[],w=[];b=e.Tooltip.positioners[d.position](p,i._eventPosition);var k=[];for(n=0,r=p.length;n<r;++n)k.push(a(p[n]));d.filter&&(k=k.filter(function(e){return d.filter(e,g)})),d.itemSort&&(k=k.sort(function(e,t){return d.itemSort(e,t,g)})),o.each(k,function(e){x.push(d.callbacks.labelColor.call(i,e,i._chart)),w.push(d.callbacks.labelTextColor.call(i,e,i._chart))}),f.title=i.getTitle(k,g),f.beforeBody=i.getBeforeBody(k,g),f.body=i.getBody(k,g),f.afterBody=i.getAfterBody(k,g),f.footer=i.getFooter(k,g),f.x=Math.round(b.x),f.y=Math.round(b.y),f.caretPadding=d.caretPadding,f.labelColors=x,f.labelTextColors=w,f.dataPoints=k,y=l(this,f),m=u(this,y),v=c(f,y,m)}else f.opacity=0;return f.xAlign=m.xAlign,f.yAlign=m.yAlign,f.x=v.x,f.y=v.y,f.width=y.width,f.height=y.height,f.caretX=b.x,f.caretY=b.y,i._model=f,t&&d.custom&&d.custom.call(i,f),i},drawCaret:function(e,t){var n=this._chart.ctx,r=this._view,i=this.getCaretPosition(e,t,r);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,n){var r,i,o,a,s,l,u=n.caretSize,c=n.cornerRadius,d=n.xAlign,h=n.yAlign,f=e.x,p=e.y,g=t.width,m=t.height;if("center"===h)s=p+m/2,"left"===d?(r=f,i=r-u,o=r,a=s+u,l=s-u):(r=f+g,i=r+u,o=r,a=s-u,l=s+u);else if("left"===d?(i=f+c+u,r=i-u,o=i+u):"right"===d?(i=f+g-c-u,r=i-u,o=i+u):(i=f+g/2,r=i-u,o=i+u),"top"===h)a=p,s=a-u,l=a;else{a=p+m,s=a+u,l=a;var v=o;o=r,r=v}return{x1:r,x2:i,x3:o,y1:a,y2:s,y3:l}},drawTitle:function(e,n,r,i){var a=n.title;if(a.length){r.textAlign=n._titleAlign,r.textBaseline="top";var s=n.titleFontSize,l=n.titleSpacing;r.fillStyle=t(n.titleFontColor,i),r.font=o.fontString(s,n._titleFontStyle,n._titleFontFamily);var u,c;for(u=0,c=a.length;u<c;++u)r.fillText(a[u],e.x,e.y),e.y+=s+l,u+1===a.length&&(e.y+=n.titleMarginBottom-l)}},drawBody:function(e,n,r,i){var a=n.bodyFontSize,s=n.bodySpacing,l=n.body;r.textAlign=n._bodyAlign,r.textBaseline="top",r.font=o.fontString(a,n._bodyFontStyle,n._bodyFontFamily);var u=0,c=function(t){r.fillText(t,e.x+u,e.y),e.y+=a+s};o.each(n.beforeBody,c);var d=n.displayColors;u=d?a+2:0,o.each(l,function(s,l){o.each(s.before,c),o.each(s.lines,function(o){if(d){r.fillStyle=t(n.legendColorBackground,i),r.fillRect(e.x,e.y,a,a),r.lineWidth=1,r.strokeStyle=t(n.labelColors[l].borderColor,i),r.strokeRect(e.x,e.y,a,a),r.fillStyle=t(n.labelColors[l].backgroundColor,i),r.fillRect(e.x+1,e.y+1,a-2,a-2);var s=t(n.labelTextColors[l],i);r.fillStyle=s}c(o)}),o.each(s.after,c)}),u=0,o.each(n.afterBody,c),e.y-=s},drawFooter:function(e,n,r,i){var a=n.footer;a.length&&(e.y+=n.footerMarginTop,r.textAlign=n._footerAlign,r.textBaseline="top",r.fillStyle=t(n.footerFontColor,i),r.font=o.fontString(n.footerFontSize,n._footerFontStyle,n._footerFontFamily),o.each(a,function(t){r.fillText(t,e.x,e.y),e.y+=n.footerFontSize+n.footerSpacing}))},drawBackground:function(e,n,r,i,o){r.fillStyle=t(n.backgroundColor,o),r.strokeStyle=t(n.borderColor,o),r.lineWidth=n.borderWidth;var a=n.xAlign,s=n.yAlign,l=e.x,u=e.y,c=i.width,d=i.height,h=n.cornerRadius;r.beginPath(),r.moveTo(l+h,u),"top"===s&&this.drawCaret(e,i),r.lineTo(l+c-h,u),r.quadraticCurveTo(l+c,u,l+c,u+h),"center"===s&&"right"===a&&this.drawCaret(e,i),r.lineTo(l+c,u+d-h),r.quadraticCurveTo(l+c,u+d,l+c-h,u+d),"bottom"===s&&this.drawCaret(e,i),r.lineTo(l+h,u+d),r.quadraticCurveTo(l,u+d,l,u+d-h),"center"===s&&"left"===a&&this.drawCaret(e,i),r.lineTo(l,u+h),r.quadraticCurveTo(l,u,l+h,u),r.closePath(),r.fill(),n.borderWidth>0&&r.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},r={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,o=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&o&&(this.drawBackground(r,t,e,n,i),r.x+=t.xPadding,r.y+=t.yPadding,this.drawTitle(r,t,e,i),this.drawBody(r,t,e,i),this.drawFooter(r,t,e,i))}},handleEvent:function(e){var t=this,n=t._options,r=!1;if(t._lastActive=t._lastActive||[],"mouseout"===e.type?t._active=[]:t._active=t._chart.getElementsAtEventForMode(e,n.mode,n),!(r=!o.arrayEquals(t._active,t._lastActive)))return!1;if(t._lastActive=t._active,n.enabled||n.custom){t._eventPosition={x:e.x,y:e.y};var i=t._model;t.update(!0),t.pivot(),r|=i.x!==t._model.x||i.y!==t._model.y}return r}}),e.Tooltip.positioners={average:function(e){if(!e.length)return!1;var t,n,r=0,i=0,o=0;for(t=0,n=e.length;t<n;++t){var a=e[t];if(a&&a.hasValue()){var s=a.tooltipPosition();r+=s.x,i+=s.y,++o}}return{x:Math.round(r/o),y:Math.round(i/o)}},nearest:function(e,t){var n,r,i,a=t.x,s=t.y,l=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){var u=e[n];if(u&&u.hasValue()){var c=u.getCenterPoint(),d=o.distanceBetweenPoints(t,c);d<l&&(l=d,i=u)}}if(i){var h=i.tooltipPosition();a=h.x,s=h.y}return{x:a,y:s}}}}},{"../helpers/index":39,"./core.defaults":19,"./core.element":20}],30:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../core/core.element"),o=e("../helpers/index");r._set("global",{elements:{arc:{backgroundColor:r.global.defaultColor,borderColor:"#fff",borderWidth:2}}}),t.exports=i.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var r=o.getAngleFromPoint(n,{x:e,y:t}),i=r.angle,a=r.distance,s=n.startAngle,l=n.endAngle;l<s;)l+=2*Math.PI;for(;i>l;)i-=2*Math.PI;for(;i<s;)i+=2*Math.PI;var u=i>=s&&i<=l,c=a>=n.innerRadius&&a<=n.outerRadius;return u&&c}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e=this._chart.ctx,t=this._view,n=t.startAngle,r=t.endAngle;e.beginPath(),e.arc(t.x,t.y,t.outerRadius,n,r),e.arc(t.x,t.y,t.innerRadius,r,n,!0),e.closePath(),e.strokeStyle=t.borderColor,e.lineWidth=t.borderWidth,e.fillStyle=t.backgroundColor,e.fill(),e.lineJoin="bevel",t.borderWidth&&e.stroke()}})},{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],31:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../core/core.element"),o=e("../helpers/index"),a=r.global;r._set("global",{elements:{line:{tension:.4,backgroundColor:a.defaultColor,borderWidth:3,borderColor:a.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}}),t.exports=i.extend({draw:function(){var e,t,n,r,i=this,s=i._view,l=i._chart.ctx,u=s.spanGaps,c=i._children.slice(),d=a.elements.line,h=-1;for(i._loop&&c.length&&c.push(c[0]),l.save(),l.lineCap=s.borderCapStyle||d.borderCapStyle,l.setLineDash&&l.setLineDash(s.borderDash||d.borderDash),l.lineDashOffset=s.borderDashOffset||d.borderDashOffset,l.lineJoin=s.borderJoinStyle||d.borderJoinStyle,l.lineWidth=s.borderWidth||d.borderWidth,l.strokeStyle=s.borderColor||a.defaultColor,l.beginPath(),h=-1,e=0;e<c.length;++e)t=c[e],n=o.previousItem(c,e),r=t._view,0===e?r.skip||(l.moveTo(r.x,r.y),h=e):(n=-1===h?n:c[h],r.skip||(h!==e-1&&!u||-1===h?l.moveTo(r.x,r.y):o.canvas.lineTo(l,n._view,t._view),h=e));l.stroke(),l.restore()}})},{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],32:[function(e,t,n){"use strict";function r(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hitRadius,2)}function i(e){var t=this._view;return!!t&&Math.pow(e-t.y,2)<Math.pow(t.radius+t.hitRadius,2)}var o=e("../core/core.defaults"),a=e("../core/core.element"),s=e("../helpers/index"),l=o.global.defaultColor;o._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:l,borderColor:l,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}}),t.exports=a.extend({inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:r,inXRange:r,inYRange:i,getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._model,r=this._chart.ctx,i=t.pointStyle,a=t.radius,u=t.x,c=t.y,d=s.color,h=0;t.skip||(r.strokeStyle=t.borderColor||l,r.lineWidth=s.valueOrDefault(t.borderWidth,o.global.elements.point.borderWidth),r.fillStyle=t.backgroundColor||l,void 0!==e&&(n.x<e.left||1.01*e.right<n.x||n.y<e.top||1.01*e.bottom<n.y)&&(n.x<e.left?h=(u-n.x)/(e.left-n.x):1.01*e.right<n.x?h=(n.x-u)/(n.x-e.right):n.y<e.top?h=(c-n.y)/(e.top-n.y):1.01*e.bottom<n.y&&(h=(n.y-c)/(n.y-e.bottom)),h=Math.round(100*h)/100,r.strokeStyle=d(r.strokeStyle).alpha(h).rgbString(),r.fillStyle=d(r.fillStyle).alpha(h).rgbString()),s.canvas.drawPoint(r,i,a,u,c))}})},{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],33:[function(e,t,n){"use strict";function r(e){return void 0!==e._view.width}function i(e){var t,n,i,o,a=e._view;if(r(e)){var s=a.width/2;t=a.x-s,n=a.x+s,i=Math.min(a.y,a.base),o=Math.max(a.y,a.base)}else{var l=a.height/2;t=Math.min(a.x,a.base),n=Math.max(a.x,a.base),i=a.y-l,o=a.y+l}return{left:t,top:i,right:n,bottom:o}}var o=e("../core/core.defaults"),a=e("../core/core.element");o._set("global",{elements:{rectangle:{backgroundColor:o.global.defaultColor,borderColor:o.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}}),t.exports=a.extend({draw:function(){function e(e){return v[(b+e)%4]}var t,n,r,i,o,a,s,l=this._chart.ctx,u=this._view,c=u.borderWidth;if(u.horizontal?(t=u.base,n=u.x,r=u.y-u.height/2,i=u.y+u.height/2,o=n>t?1:-1,a=1,s=u.borderSkipped||"left"):(t=u.x-u.width/2,n=u.x+u.width/2,r=u.y,i=u.base,o=1,a=i>r?1:-1,s=u.borderSkipped||"bottom"),c){var d=Math.min(Math.abs(t-n),Math.abs(r-i));c=c>d?d:c;var h=c/2,f=t+("left"!==s?h*o:0),p=n+("right"!==s?-h*o:0),g=r+("top"!==s?h*a:0),m=i+("bottom"!==s?-h*a:0);f!==p&&(r=g,i=m),g!==m&&(t=f,n=p)}l.beginPath(),l.fillStyle=u.backgroundColor,l.strokeStyle=u.borderColor,l.lineWidth=c;var v=[[t,i],[t,r],[n,r],[n,i]],y=["bottom","left","top","right"],b=y.indexOf(s,0);-1===b&&(b=0);var x=e(0);l.moveTo(x[0],x[1]);for(var w=1;w<4;w++)x=e(w),l.lineTo(x[0],x[1]);l.fill(),c&&l.stroke()},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){var n=!1;if(this._view){var r=i(this);n=e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom}return n},inLabelRange:function(e,t){var n=this;if(!n._view)return!1;var o=i(n);return r(n)?e>=o.left&&e<=o.right:t>=o.top&&t<=o.bottom},inXRange:function(e){var t=i(this);return e>=t.left&&e<=t.right},inYRange:function(e){var t=i(this);return e>=t.top&&e<=t.bottom},getCenterPoint:function(){var e,t,n=this._view;return r(this)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return e.width*Math.abs(e.y-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}})},{"../core/core.defaults":19,"../core/core.element":20}],34:[function(e,t,n){"use strict";t.exports={},t.exports.Arc=e("./element.arc"),t.exports.Line=e("./element.line"),t.exports.Point=e("./element.point"),t.exports.Rectangle=e("./element.rectangle")},{"./element.arc":30,"./element.line":31,"./element.point":32,"./element.rectangle":33}],35:[function(e,t,n){"use strict";var r=e("./helpers.core"),n=t.exports={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,r,i,o){if(o){var a=Math.min(o,r/2),s=Math.min(o,i/2);e.moveTo(t+a,n),e.lineTo(t+r-a,n),e.quadraticCurveTo(t+r,n,t+r,n+s),e.lineTo(t+r,n+i-s),e.quadraticCurveTo(t+r,n+i,t+r-a,n+i),e.lineTo(t+a,n+i),e.quadraticCurveTo(t,n+i,t,n+i-s),e.lineTo(t,n+s),e.quadraticCurveTo(t,n,t+a,n)}else e.rect(t,n,r,i)},drawPoint:function(e,t,n,r,i){var o,a,s,l,u,c;if("object"==typeof t&&("[object HTMLImageElement]"===(o=t.toString())||"[object HTMLCanvasElement]"===o))return void e.drawImage(t,r-t.width/2,i-t.height/2,t.width,t.height);if(!(isNaN(n)||n<=0)){switch(t){default:e.beginPath(),e.arc(r,i,n,0,2*Math.PI),e.closePath(),e.fill();break;case"triangle":e.beginPath(),a=3*n/Math.sqrt(3),u=a*Math.sqrt(3)/2,e.moveTo(r-a/2,i+u/3),e.lineTo(r+a/2,i+u/3),e.lineTo(r,i-2*u/3),e.closePath(),e.fill();break;case"rect":c=1/Math.SQRT2*n,e.beginPath(),e.fillRect(r-c,i-c,2*c,2*c),e.strokeRect(r-c,i-c,2*c,2*c);break;case"rectRounded":var d=n/Math.SQRT2,h=r-d,f=i-d,p=Math.SQRT2*n;e.beginPath(),this.roundedRect(e,h,f,p,p,n/2),e.closePath(),e.fill();break;case"rectRot":c=1/Math.SQRT2*n,e.beginPath(),e.moveTo(r-c,i),e.lineTo(r,i+c),e.lineTo(r+c,i),e.lineTo(r,i-c),e.closePath(),e.fill();break;case"cross":e.beginPath(),e.moveTo(r,i+n),e.lineTo(r,i-n),e.moveTo(r-n,i),e.lineTo(r+n,i),e.closePath();break;case"crossRot":e.beginPath(),s=Math.cos(Math.PI/4)*n,l=Math.sin(Math.PI/4)*n,e.moveTo(r-s,i-l),e.lineTo(r+s,i+l),e.moveTo(r-s,i+l),e.lineTo(r+s,i-l),e.closePath();break;case"star":e.beginPath(),e.moveTo(r,i+n),e.lineTo(r,i-n),e.moveTo(r-n,i),e.lineTo(r+n,i),s=Math.cos(Math.PI/4)*n,l=Math.sin(Math.PI/4)*n,e.moveTo(r-s,i-l),e.lineTo(r+s,i+l),e.moveTo(r-s,i+l),e.lineTo(r+s,i-l),e.closePath();break;case"line":e.beginPath(),e.moveTo(r-n,i),e.lineTo(r+n,i),e.closePath();break;case"dash":e.beginPath(),e.moveTo(r,i),e.lineTo(r+n,i),e.closePath()}e.stroke()}},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,r){return n.steppedLine?("after"===n.steppedLine&&!r||"after"!==n.steppedLine&&r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y),void e.lineTo(n.x,n.y)):n.tension?void e.bezierCurveTo(r?t.controlPointPreviousX:t.controlPointNextX,r?t.controlPointPreviousY:t.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):void e.lineTo(n.x,n.y)}};r.clear=n.clear,r.drawRoundedRectangle=function(e){e.beginPath(),n.roundedRect.apply(n,arguments),e.closePath()}},{"./helpers.core":36}],36:[function(e,t,n){"use strict";var r={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||void 0===e},isArray:Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){
return r.valueOrDefault(r.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,i){var o,a,s;if(r.isArray(e))if(a=e.length,i)for(o=a-1;o>=0;o--)t.call(n,e[o],o);else for(o=0;o<a;o++)t.call(n,e[o],o);else if(r.isObject(e))for(s=Object.keys(e),a=s.length,o=0;o<a;o++)t.call(n,e[s[o]],s[o])},arrayEquals:function(e,t){var n,i,o,a;if(!e||!t||e.length!==t.length)return!1;for(n=0,i=e.length;n<i;++n)if(o=e[n],a=t[n],o instanceof Array&&a instanceof Array){if(!r.arrayEquals(o,a))return!1}else if(o!==a)return!1;return!0},clone:function(e){if(r.isArray(e))return e.map(r.clone);if(r.isObject(e)){for(var t={},n=Object.keys(e),i=n.length,o=0;o<i;++o)t[n[o]]=r.clone(e[n[o]]);return t}return e},_merger:function(e,t,n,i){var o=t[e],a=n[e];r.isObject(o)&&r.isObject(a)?r.merge(o,a,i):t[e]=r.clone(a)},_mergerIf:function(e,t,n){var i=t[e],o=n[e];r.isObject(i)&&r.isObject(o)?r.mergeIf(i,o):t.hasOwnProperty(e)||(t[e]=r.clone(o))},merge:function(e,t,n){var i,o,a,s,l,u=r.isArray(t)?t:[t],c=u.length;if(!r.isObject(e))return e;for(n=n||{},i=n.merger||r._merger,o=0;o<c;++o)if(t=u[o],r.isObject(t))for(a=Object.keys(t),l=0,s=a.length;l<s;++l)i(a[l],e,t,n);return e},mergeIf:function(e,t){return r.merge(e,t,{merger:r._mergerIf})}};t.exports=r,r.callCallback=r.callback,r.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},r.getValueOrDefault=r.valueOrDefault,r.getValueAtIndexOrDefault=r.valueAtIndexOrDefault},{}],37:[function(e,t,n){"use strict";var r=e("./helpers.core"),i={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),e<1?r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-i.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*i.easeInBounce(2*e):.5*i.easeOutBounce(2*e-1)+.5}};t.exports={effects:i},r.easingEffects=i},{"./helpers.core":36}],38:[function(e,t,n){"use strict";var r=e("./helpers.core");t.exports={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,i,o;return r.isObject(e)?(t=+e.top||0,n=+e.right||0,i=+e.bottom||0,o=+e.left||0):t=n=i=o=+e||0,{top:t,right:n,bottom:i,left:o,height:t+i,width:o+n}},resolve:function(e,t,n){var i,o,a;for(i=0,o=e.length;i<o;++i)if(void 0!==(a=e[i])&&(void 0!==t&&"function"==typeof a&&(a=a(t)),void 0!==n&&r.isArray(a)&&(a=a[n]),void 0!==a))return a}}},{"./helpers.core":36}],39:[function(e,t,n){"use strict";t.exports=e("./helpers.core"),t.exports.easing=e("./helpers.easing"),t.exports.canvas=e("./helpers.canvas"),t.exports.options=e("./helpers.options")},{"./helpers.canvas":35,"./helpers.core":36,"./helpers.easing":37,"./helpers.options":38}],40:[function(e,t,n){t.exports={acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}}},{}],41:[function(e,t,n){"use strict";function r(e,t){var n=m.getStyle(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?Number(r[1]):void 0}function i(e,t){var n=e.style,i=e.getAttribute("height"),o=e.getAttribute("width");if(e[v]={initial:{height:i,width:o,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===o||""===o){var a=r(e,"width");void 0!==a&&(e.width=a)}if(null===i||""===i)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var s=r(e,"height");void 0!==a&&(e.height=s)}return e}function o(e,t,n){e.addEventListener(t,n,S)}function a(e,t,n){e.removeEventListener(t,n,S)}function s(e,t,n,r,i){return{type:e,chart:t,native:i||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function l(e,t){var n=k[e.type]||e.type,r=m.getRelativePosition(e,t);return s(n,t,r.x,r.y,e)}function u(e,t){var n=!1,r=[];return function(){r=Array.prototype.slice.call(arguments),t=t||this,n||(n=!0,m.requestAnimFrame.call(window,function(){n=!1,e.apply(t,r)}))}}function c(e){var t=document.createElement("div"),n=y+"size-monitor",r="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";t.style.cssText=r,t.className=n,t.innerHTML='<div class="'+n+'-expand" style="'+r+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+n+'-shrink" style="'+r+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=t.childNodes[0],a=t.childNodes[1];t._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var s=function(){t._reset(),e()};return o(i,"scroll",s.bind(i,"expand")),o(a,"scroll",s.bind(a,"shrink")),t}function d(e,t){var n=e[v]||(e[v]={}),r=n.renderProxy=function(e){e.animationName===x&&t()};m.each(w,function(t){o(e,t,r)}),e.classList.add(b)}function h(e){var t=e[v]||{},n=t.renderProxy;n&&(m.each(w,function(t){a(e,t,n)}),delete t.renderProxy),e.classList.remove(b)}function f(e,t,n){var r=e[v]||(e[v]={}),i=r.resizer=c(u(function(){if(r.resizer)return t(s("resize",n))}));d(e,function(){if(r.resizer){var t=e.parentNode;t&&t!==i.parentNode&&t.insertBefore(i,t.firstChild),i._reset()}})}function p(e){var t=e[v]||{},n=t.resizer;delete t.resizer,h(e),n&&n.parentNode&&n.parentNode.removeChild(n)}function g(e,t){var n=e._style||document.createElement("style");e._style||(e._style=n,t="/* Chart.js */\n"+t,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(t))}var m=e("../helpers/index"),v="$chartjs",y="chartjs-",b=y+"render-monitor",x=y+"render-animation",w=["animationstart","webkitAnimationStart"],k={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},_=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}(),S=!!_&&{passive:!0};t.exports={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var e="from{opacity:0.99}to{opacity:1}";g(this,"@-webkit-keyframes "+x+"{"+e+"}@keyframes "+x+"{"+e+"}."+b+"{-webkit-animation:"+x+" 0.001s;animation:"+x+" 0.001s;}")},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(i(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t[v]){var n=t[v].initial;["height","width"].forEach(function(e){var r=n[e];m.isNullOrUndef(r)?t.removeAttribute(e):t.setAttribute(e,r)}),m.each(n.style||{},function(e,n){t.style[n]=e}),t.width=t.width,delete t[v]}},addEventListener:function(e,t,n){var r=e.canvas;if("resize"===t)return void f(r,n,e);var i=n[v]||(n[v]={});o(r,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){n(l(t,e))})},removeEventListener:function(e,t,n){var r=e.canvas;if("resize"===t)return void p(r);var i=n[v]||{},o=i.proxies||{},s=o[e.id+"_"+t];s&&a(r,t,s)}},m.addEvent=o,m.removeEvent=a},{"../helpers/index":39}],42:[function(e,t,n){"use strict";var r=e("../helpers/index"),i=e("./platform.basic"),o=e("./platform.dom"),a=o._enabled?o:i;t.exports=r.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},a)},{"../helpers/index":39,"./platform.basic":40,"./platform.dom":41}],43:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../elements/index"),o=e("../helpers/index");r._set("global",{plugins:{filler:{propagate:!0}}}),t.exports=function(){function e(e,t,n){var r,i=e._model||{},o=i.fill;if(void 0===o&&(o=!!i.backgroundColor),!1===o||null===o)return!1;if(!0===o)return"origin";if(r=parseFloat(o,10),isFinite(r)&&Math.floor(r)===r)return"-"!==o[0]&&"+"!==o[0]||(r=t+r),!(r===t||r<0||r>=n)&&r;switch(o){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return o;default:return!1}}function t(e){var t,n=e.el._model||{},r=e.el._scale||{},i=e.fill,o=null;if(isFinite(i))return null;if("start"===i?o=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===i?o=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?o=n.scaleZero:r.getBasePosition?o=r.getBasePosition():r.getBasePixel&&(o=r.getBasePixel()),void 0!==o&&null!==o){if(void 0!==o.x&&void 0!==o.y)return o;if("number"==typeof o&&isFinite(o))return t=r.isHorizontal(),{x:t?o:null,y:t?null:o}}return null}function n(e,t,n){var r,i=e[t],o=i.fill,a=[t];if(!n)return o;for(;!1!==o&&-1===a.indexOf(o);){if(!isFinite(o))return o;if(!(r=e[o]))return!1;if(r.visible)return o;a.push(o),o=r.fill}return!1}function a(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),c[n](e))}function s(e){return e&&!e.skip}function l(e,t,n,r,i){var a;if(r&&i){for(e.moveTo(t[0].x,t[0].y),a=1;a<r;++a)o.canvas.lineTo(e,t[a-1],t[a]);for(e.lineTo(n[i-1].x,n[i-1].y),a=i-1;a>0;--a)o.canvas.lineTo(e,n[a],n[a-1],!0)}}function u(e,t,n,r,i,o){var a,u,c,d,h,f,p,g=t.length,m=r.spanGaps,v=[],y=[],b=0,x=0;for(e.beginPath(),a=0,u=g+!!o;a<u;++a)c=a%g,d=t[c]._view,h=n(d,c,r),f=s(d),p=s(h),f&&p?(b=v.push(d),x=y.push(h)):b&&x&&(m?(f&&v.push(d),p&&y.push(h)):(l(e,v,y,b,x),b=x=0,v=[],y=[]));l(e,v,y,b,x),e.closePath(),e.fillStyle=i,e.fill()}var c={dataset:function(e){var t=e.fill,n=e.chart,r=n.getDatasetMeta(t),i=r&&n.isDatasetVisible(t),o=i&&r.dataset._children||[],a=o.length||0;return a?function(e,t){return t<a&&o[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,r=t?t.y:null;return function(e){return{x:null===n?e.x:n,y:null===r?e.y:r}}}};return{id:"filler",afterDatasetsUpdate:function(r,o){var s,l,u,c,d=(r.data.datasets||[]).length,h=o.propagate,f=[];for(l=0;l<d;++l)s=r.getDatasetMeta(l),u=s.dataset,c=null,u&&u._model&&u instanceof i.Line&&(c={visible:r.isDatasetVisible(l),fill:e(u,l,d),chart:r,el:u}),s.$filler=c,f.push(c);for(l=0;l<d;++l)(c=f[l])&&(c.fill=n(f,l,h),c.boundary=t(c),c.mapper=a(c))},beforeDatasetDraw:function(e,t){var n=t.meta.$filler;if(n){var i=e.ctx,a=n.el,s=a._view,l=a._children||[],c=n.mapper,d=s.backgroundColor||r.global.defaultColor;c&&d&&l.length&&(o.canvas.clipArea(i,e.chartArea),u(i,l,c,s,d,a._loop),o.canvas.unclipArea(i))}}}}},{"../core/core.defaults":19,"../elements/index":34,"../helpers/index":39}],44:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../core/core.element"),o=e("../helpers/index");r._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,r=this.chart,i=r.getDatasetMeta(n);i.hidden=null===i.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return o.isArray(t.datasets)?t.datasets.map(function(t,n){return{text:t.label,fillStyle:o.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(n),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var n=0;n<e.data.datasets.length;n++)t.push('<li><span style="background-color:'+e.data.datasets[n].backgroundColor+'"></span>'),e.data.datasets[n].label&&t.push(e.data.datasets[n].label),t.push("</li>");return t.push("</ul>"),t.join("")}}),t.exports=function(e){function t(e,t){return e.usePointStyle?t*Math.SQRT2:e.boxWidth}function n(t,n){var r=new e.Legend({ctx:t.ctx,options:n,chart:t});a.configure(t,r,n),a.addBox(t,r),t.legend=r}var a=e.layoutService,s=o.noop;return e.Legend=i.extend({initialize:function(e){o.extend(this,e),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:s,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:s,beforeSetDimensions:s,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:s,beforeBuildLabels:s,buildLabels:function(){var e=this,t=e.options.labels||{},n=o.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter(function(n){return t.filter(n,e.chart.data)})),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:s,beforeFit:s,fit:function(){var e=this,n=e.options,i=n.labels,a=n.display,s=e.ctx,l=r.global,u=o.valueOrDefault,c=u(i.fontSize,l.defaultFontSize),d=u(i.fontStyle,l.defaultFontStyle),h=u(i.fontFamily,l.defaultFontFamily),f=o.fontString(c,d,h),p=e.legendHitBoxes=[],g=e.minSize,m=e.isHorizontal();if(m?(g.width=e.maxWidth,g.height=a?10:0):(g.width=a?10:0,g.height=e.maxHeight),a)if(s.font=f,m){var v=e.lineWidths=[0],y=e.legendItems.length?c+i.padding:0;s.textAlign="left",s.textBaseline="top",o.each(e.legendItems,function(n,r){var o=t(i,c),a=o+c/2+s.measureText(n.text).width;v[v.length-1]+a+i.padding>=e.width&&(y+=c+i.padding,v[v.length]=e.left),p[r]={left:0,top:0,width:a,height:c},v[v.length-1]+=a+i.padding}),g.height+=y}else{var b=i.padding,x=e.columnWidths=[],w=i.padding,k=0,_=0,S=c+b;o.each(e.legendItems,function(e,n){var r=t(i,c),o=r+c/2+s.measureText(e.text).width;_+S>g.height&&(w+=k+i.padding,x.push(k),k=0,_=0),k=Math.max(k,o),_+=S,p[n]={left:0,top:0,width:o,height:c}}),w+=k,x.push(k),g.width+=w}e.width=g.width,e.height=g.height},afterFit:s,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,n=e.options,i=n.labels,a=r.global,s=a.elements.line,l=e.width,u=e.lineWidths;if(n.display){var c,d=e.ctx,h=o.valueOrDefault,f=h(i.fontColor,a.defaultFontColor),p=h(i.fontSize,a.defaultFontSize),g=h(i.fontStyle,a.defaultFontStyle),m=h(i.fontFamily,a.defaultFontFamily),v=o.fontString(p,g,m);d.textAlign="left",d.textBaseline="middle",d.lineWidth=.5,d.strokeStyle=f,d.fillStyle=f,d.font=v;var y=t(i,p),b=e.legendHitBoxes,x=function(e,t,r){if(!(isNaN(y)||y<=0)){d.save(),d.fillStyle=h(r.fillStyle,a.defaultColor),d.lineCap=h(r.lineCap,s.borderCapStyle),d.lineDashOffset=h(r.lineDashOffset,s.borderDashOffset),d.lineJoin=h(r.lineJoin,s.borderJoinStyle),d.lineWidth=h(r.lineWidth,s.borderWidth),d.strokeStyle=h(r.strokeStyle,a.defaultColor);var i=0===h(r.lineWidth,s.borderWidth);if(d.setLineDash&&d.setLineDash(h(r.lineDash,s.borderDash)),n.labels&&n.labels.usePointStyle){var l=p*Math.SQRT2/2,u=l/Math.SQRT2,c=e+u,f=t+u;o.canvas.drawPoint(d,r.pointStyle,l,c,f)}else i||d.strokeRect(e,t,y,p),d.fillRect(e,t,y,p);d.restore()}},w=function(e,t,n,r){var i=p/2,o=y+i+e,a=t+i;d.fillText(n.text,o,a),n.hidden&&(d.beginPath(),d.lineWidth=2,d.moveTo(o,a),d.lineTo(o+r,a),d.stroke())},k=e.isHorizontal();c=k?{x:e.left+(l-u[0])/2,y:e.top+i.padding,line:0}:{x:e.left+i.padding,y:e.top+i.padding,line:0};var _=p+i.padding;o.each(e.legendItems,function(t,n){var r=d.measureText(t.text).width,o=y+p/2+r,a=c.x,s=c.y;k?a+o>=l&&(s=c.y+=_,c.line++,a=c.x=e.left+(l-u[c.line])/2):s+_>e.bottom&&(a=c.x=a+e.columnWidths[c.line]+i.padding,s=c.y=e.top+i.padding,c.line++),x(a,s,t),b[n].left=a,b[n].top=s,w(a,s,t,r),k?c.x+=o+i.padding:c.y+=_})}},handleEvent:function(e){var t=this,n=t.options,r="mouseup"===e.type?"click":e.type,i=!1;if("mousemove"===r){if(!n.onHover)return}else{if("click"!==r)return;if(!n.onClick)return}var o=e.x,a=e.y;if(o>=t.left&&o<=t.right&&a>=t.top&&a<=t.bottom)for(var s=t.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(o>=u.left&&o<=u.left+u.width&&a>=u.top&&a<=u.top+u.height){if("click"===r){n.onClick.call(t,e.native,t.legendItems[l]),i=!0;break}if("mousemove"===r){n.onHover.call(t,e.native,t.legendItems[l]),i=!0;break}}}return i}}),{id:"legend",beforeInit:function(e){var t=e.options.legend;t&&n(e,t)},beforeUpdate:function(e){var t=e.options.legend,i=e.legend;t?(o.mergeIf(t,r.global.legend),i?(a.configure(e,i,t),i.options=t):n(e,t)):i&&(a.removeBox(e,i),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}}}},{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],45:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../core/core.element"),o=e("../helpers/index");r._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}}),t.exports=function(e){function t(t,r){var i=new e.Title({ctx:t.ctx,options:r,chart:t});n.configure(t,i,r),n.addBox(t,i),t.titleBlock=i}var n=e.layoutService,a=o.noop;return e.Title=i.extend({initialize:function(e){var t=this;o.extend(t,e),t.legendHitBoxes=[]},beforeUpdate:a,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:a,beforeSetDimensions:a,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:a,beforeBuildLabels:a,buildLabels:a,afterBuildLabels:a,beforeFit:a,fit:function(){var e=this,t=o.valueOrDefault,n=e.options,i=n.display,a=t(n.fontSize,r.global.defaultFontSize),s=e.minSize,l=o.isArray(n.text)?n.text.length:1,u=o.options.toLineHeight(n.lineHeight,a),c=i?l*u+2*n.padding:0;e.isHorizontal()?(s.width=e.maxWidth,s.height=c):(s.width=c,s.height=e.maxHeight),e.width=s.width,e.height=s.height},afterFit:a,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=o.valueOrDefault,i=e.options,a=r.global;if(i.display){var s,l,u,c=n(i.fontSize,a.defaultFontSize),d=n(i.fontStyle,a.defaultFontStyle),h=n(i.fontFamily,a.defaultFontFamily),f=o.fontString(c,d,h),p=o.options.toLineHeight(i.lineHeight,c),g=p/2+i.padding,m=0,v=e.top,y=e.left,b=e.bottom,x=e.right;t.fillStyle=n(i.fontColor,a.defaultFontColor),t.font=f,e.isHorizontal()?(l=y+(x-y)/2,u=v+g,s=x-y):(l="left"===i.position?y+g:x-g,u=v+(b-v)/2,s=b-v,m=Math.PI*("left"===i.position?-.5:.5)),t.save(),t.translate(l,u),t.rotate(m),t.textAlign="center",t.textBaseline="middle";var w=i.text;if(o.isArray(w))for(var k=0,_=0;_<w.length;++_)t.fillText(w[_],0,k,s),k+=p;else t.fillText(w,0,0,s);t.restore()}}}),{id:"title",beforeInit:function(e){var n=e.options.title;n&&t(e,n)},beforeUpdate:function(i){var a=i.options.title,s=i.titleBlock;a?(o.mergeIf(a,r.global.title),s?(n.configure(i,s,a),s.options=a):t(i,a)):s&&(e.layoutService.removeBox(i,s),delete i.titleBlock)}}}},{"../core/core.defaults":19,"../core/core.element":20,"../helpers/index":39}],46:[function(e,t,n){"use strict";t.exports=function(e){var t={position:"bottom"},n=e.Scale.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e=this,t=e.getLabels();e.minIndex=0,e.maxIndex=t.length-1;var n;void 0!==e.options.ticks.min&&(n=t.indexOf(e.options.ticks.min),e.minIndex=-1!==n?n:e.minIndex),void 0!==e.options.ticks.max&&(n=t.indexOf(e.options.ticks.max),e.maxIndex=-1!==n?n:e.maxIndex),e.min=t[e.minIndex],e.max=t[e.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var n=this,r=n.chart.data,i=n.isHorizontal();return r.yLabels&&!i?n.getRightValue(r.datasets[t].data[e]):n.ticks[e-n.minIndex]},getPixelForValue:function(e,t){var n,r=this,i=r.options.offset,o=Math.max(r.maxIndex+1-r.minIndex-(i?0:1),1);if(void 0!==e&&null!==e&&(n=r.isHorizontal()?e.x:e.y),void 0!==n||void 0!==e&&isNaN(t)){var a=r.getLabels();e=n||e;var s=a.indexOf(e);t=-1!==s?s:t}if(r.isHorizontal()){var l=r.width/o,u=l*(t-r.minIndex);return i&&(u+=l/2),r.left+Math.round(u)}var c=r.height/o,d=c*(t-r.minIndex);return i&&(d+=c/2),r.top+Math.round(d)},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,n=t.options.offset,r=Math.max(t._ticks.length-(n?0:1),1),i=t.isHorizontal(),o=(i?t.width:t.height)/r;return e-=i?t.left:t.top,n&&(e-=o/2),(e<=0?0:Math.round(e/o))+t.minIndex},getBasePixel:function(){return this.bottom}});e.scaleService.registerScaleType("category",n,t)}},{}],47:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../helpers/index"),o=e("../core/core.ticks");t.exports=function(e){var t={position:"left",ticks:{callback:o.formatters.linear}},n=e.LinearScaleBase.extend({determineDataLimits:function(){function e(e){return s?e.xAxisID===t.id:e.yAxisID===t.id}var t=this,n=t.options,r=t.chart,o=r.data,a=o.datasets,s=t.isHorizontal();t.min=null,t.max=null;var l=n.stacked;if(void 0===l&&i.each(a,function(t,n){if(!l){var i=r.getDatasetMeta(n);r.isDatasetVisible(n)&&e(i)&&void 0!==i.stack&&(l=!0)}}),n.stacked||l){var u={};i.each(a,function(o,a){var s=r.getDatasetMeta(a),l=[s.type,void 0===n.stacked&&void 0===s.stack?a:"",s.stack].join(".");void 0===u[l]&&(u[l]={positiveValues:[],negativeValues:[]});var c=u[l].positiveValues,d=u[l].negativeValues;r.isDatasetVisible(a)&&e(s)&&i.each(o.data,function(e,r){var i=+t.getRightValue(e);isNaN(i)||s.data[r].hidden||(c[r]=c[r]||0,d[r]=d[r]||0,n.relativePoints?c[r]=100:i<0?d[r]+=i:c[r]+=i)})}),i.each(u,function(e){var n=e.positiveValues.concat(e.negativeValues),r=i.min(n),o=i.max(n);t.min=null===t.min?r:Math.min(t.min,r),t.max=null===t.max?o:Math.max(t.max,o)})}else i.each(a,function(n,o){var a=r.getDatasetMeta(o);r.isDatasetVisible(o)&&e(a)&&i.each(n.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||a.data[n].hidden||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r))})});t.min=isFinite(t.min)&&!isNaN(t.min)?t.min:0,t.max=isFinite(t.max)&&!isNaN(t.max)?t.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var e,t=this,n=t.options.ticks;if(t.isHorizontal())e=Math.min(n.maxTicksLimit?n.maxTicksLimit:11,Math.ceil(t.width/50));else{var o=i.valueOrDefault(n.fontSize,r.global.defaultFontSize);e=Math.min(n.maxTicksLimit?n.maxTicksLimit:11,Math.ceil(t.height/(2*o)))}return e},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t,n=this,r=n.start,i=+n.getRightValue(e),o=n.end-r;return n.isHorizontal()?(t=n.left+n.width/o*(i-r),Math.round(t)):(t=n.bottom-n.height/o*(i-r),Math.round(t))},getValueForPixel:function(e){var t=this,n=t.isHorizontal(),r=n?t.width:t.height,i=(n?e-t.left:t.bottom-e)/r;return t.start+(t.end-t.start)*i},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}});e.scaleService.registerScaleType("linear",n,t)}},{"../core/core.defaults":19,"../core/core.ticks":28,"../helpers/index":39}],48:[function(e,t,n){"use strict";var r=e("../helpers/index"),i=e("../core/core.ticks");t.exports=function(e){var t=r.noop;e.LinearScaleBase=e.Scale.extend({getRightValue:function(t){return"string"==typeof t?+t:e.Scale.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var e=this,t=e.options,n=t.ticks;if(n.beginAtZero){var i=r.sign(e.min),o=r.sign(e.max);i<0&&o<0?e.max=0:i>0&&o>0&&(e.min=0)}var a=void 0!==n.min||void 0!==n.suggestedMin,s=void 0!==n.max||void 0!==n.suggestedMax;void 0!==n.min?e.min=n.min:void 0!==n.suggestedMin&&(null===e.min?e.min=n.suggestedMin:e.min=Math.min(e.min,n.suggestedMin)),void 0!==n.max?e.max=n.max:void 0!==n.suggestedMax&&(null===e.max?e.max=n.suggestedMax:e.max=Math.max(e.max,n.suggestedMax)),a!==s&&e.min>=e.max&&(a?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,n.beginAtZero||e.min--)},getTickLimit:t,handleDirectionalChanges:t,buildTicks:function(){var e=this,t=e.options,n=t.ticks,o=e.getTickLimit();o=Math.max(2,o);var a={maxTicks:o,min:n.min,max:n.max,stepSize:r.valueOrDefault(n.fixedStepSize,n.stepSize)},s=e.ticks=i.generators.linear(a,e);e.handleDirectionalChanges(),e.max=r.max(s),e.min=r.min(s),n.reverse?(s.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),e.Scale.prototype.convertTicksToLabels.call(t)}})}},{"../core/core.ticks":28,"../helpers/index":39}],49:[function(e,t,n){"use strict";var r=e("../helpers/index"),i=e("../core/core.ticks");t.exports=function(e){var t={position:"left",ticks:{callback:i.formatters.logarithmic}},n=e.Scale.extend({determineDataLimits:function(){function e(e){return u?e.xAxisID===t.id:e.yAxisID===t.id}var t=this,n=t.options,i=n.ticks,o=t.chart,a=o.data,s=a.datasets,l=r.valueOrDefault,u=t.isHorizontal();t.min=null,t.max=null,t.minNotZero=null;var c=n.stacked;if(void 0===c&&r.each(s,function(t,n){if(!c){var r=o.getDatasetMeta(n);o.isDatasetVisible(n)&&e(r)&&void 0!==r.stack&&(c=!0)}}),n.stacked||c){var d={};r.each(s,function(i,a){var s=o.getDatasetMeta(a),l=[s.type,void 0===n.stacked&&void 0===s.stack?a:"",s.stack].join(".");o.isDatasetVisible(a)&&e(s)&&(void 0===d[l]&&(d[l]=[]),r.each(i.data,function(e,r){var i=d[l],o=+t.getRightValue(e);isNaN(o)||s.data[r].hidden||(i[r]=i[r]||0,n.relativePoints?i[r]=100:i[r]+=o)}))}),r.each(d,function(e){var n=r.min(e),i=r.max(e);t.min=null===t.min?n:Math.min(t.min,n),t.max=null===t.max?i:Math.max(t.max,i)})}else r.each(s,function(n,i){var a=o.getDatasetMeta(i);o.isDatasetVisible(i)&&e(a)&&r.each(n.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||a.data[n].hidden||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r),0!==r&&(null===t.minNotZero||r<t.minNotZero)&&(t.minNotZero=r))})});t.min=l(i.min,t.min),t.max=l(i.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(r.log10(t.min))-1),t.max=Math.pow(10,Math.floor(r.log10(t.max))+1)):(t.min=1,t.max=10))},buildTicks:function(){var e=this,t=e.options,n=t.ticks,o={min:n.min,max:n.max},a=e.ticks=i.generators.logarithmic(o,e);e.isHorizontal()||a.reverse(),e.max=r.max(a),e.min=r.min(a),n.reverse?(a.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),e.Scale.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},getPixelForValue:function(e){var t,n,i,o=this,a=o.start,s=+o.getRightValue(e),l=o.options,u=l.ticks;return o.isHorizontal()?(i=r.log10(o.end)-r.log10(a),0===s?n=o.left:(t=o.width,n=o.left+t/i*(r.log10(s)-r.log10(a)))):(t=o.height,0!==a||u.reverse?0===o.end&&u.reverse?(i=r.log10(o.start)-r.log10(o.minNotZero),n=s===o.end?o.top:s===o.minNotZero?o.top+.02*t:o.top+.02*t+.98*t/i*(r.log10(s)-r.log10(o.minNotZero))):0===s?n=u.reverse?o.top:o.bottom:(i=r.log10(o.end)-r.log10(a),t=o.height,n=o.bottom-t/i*(r.log10(s)-r.log10(a))):(i=r.log10(o.end)-r.log10(o.minNotZero),n=s===a?o.bottom:s===o.minNotZero?o.bottom-.02*t:o.bottom-.02*t-.98*t/i*(r.log10(s)-r.log10(o.minNotZero)))),n},getValueForPixel:function(e){var t,n,i=this,o=r.log10(i.end)-r.log10(i.start);return i.isHorizontal()?(n=i.width,t=i.start*Math.pow(10,(e-i.left)*o/n)):(n=i.height,t=Math.pow(10,(i.bottom-e)*o/n)/i.start),t}});e.scaleService.registerScaleType("logarithmic",n,t)}},{"../core/core.ticks":28,"../helpers/index":39}],50:[function(e,t,n){"use strict";var r=e("../core/core.defaults"),i=e("../helpers/index"),o=e("../core/core.ticks");t.exports=function(e){function t(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function n(e){var t=e.options.pointLabels,n=i.valueOrDefault(t.fontSize,m.defaultFontSize),r=i.valueOrDefault(t.fontStyle,m.defaultFontStyle),o=i.valueOrDefault(t.fontFamily,m.defaultFontFamily);return{size:n,style:r,family:o,font:i.fontString(n,r,o)}}function a(e,t,n){return i.isArray(n)?{w:i.longestText(e,e.font,n),h:n.length*t+1.5*(n.length-1)*t}:{w:e.measureText(n).width,h:t}}function s(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n-5,end:t}:{start:t,end:t+n+5}}function l(e){var r,o,l,u=n(e),c=Math.min(e.height/2,e.width/2),d={r:e.width,l:0,t:e.height,b:0},h={};e.ctx.font=u.font,e._pointLabelSizes=[];var f=t(e);for(r=0;r<f;r++){l=e.getPointPosition(r,c),o=a(e.ctx,u.size,e.pointLabels[r]||""),e._pointLabelSizes[r]=o;var p=e.getIndexAngle(r),g=i.toDegrees(p)%360,m=s(g,l.x,o.w,0,180),v=s(g,l.y,o.h,90,270);m.start<d.l&&(d.l=m.start,h.l=p),m.end>d.r&&(d.r=m.end,h.r=p),v.start<d.t&&(d.t=v.start,h.t=p),v.end>d.b&&(d.b=v.end,h.b=p)}e.setReductions(c,d,h)}function u(e){var t=Math.min(e.height/2,e.width/2);e.drawingArea=Math.round(t),e.setCenterPoint(0,0,0,0)}function c(e){return 0===e||180===e?"center":e<180?"left":"right"}function d(e,t,n,r){if(i.isArray(t))for(var o=n.y,a=1.5*r,s=0;s<t.length;++s)e.fillText(t[s],n.x,o),o+=a;else e.fillText(t,n.x,n.y)}function h(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function f(e){var r=e.ctx,o=i.valueOrDefault,a=e.options,s=a.angleLines,l=a.pointLabels;r.lineWidth=s.lineWidth,r.strokeStyle=s.color;var u=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),f=n(e);r.textBaseline="top";for(var p=t(e)-1;p>=0;p--){if(s.display){
var g=e.getPointPosition(p,u);r.beginPath(),r.moveTo(e.xCenter,e.yCenter),r.lineTo(g.x,g.y),r.stroke(),r.closePath()}if(l.display){var v=e.getPointPosition(p,u+5),y=o(l.fontColor,m.defaultFontColor);r.font=f.font,r.fillStyle=y;var b=e.getIndexAngle(p),x=i.toDegrees(b);r.textAlign=c(x),h(x,e._pointLabelSizes[p],v),d(r,e.pointLabels[p]||"",v,f.size)}}}function p(e,n,r,o){var a=e.ctx;if(a.strokeStyle=i.valueAtIndexOrDefault(n.color,o-1),a.lineWidth=i.valueAtIndexOrDefault(n.lineWidth,o-1),e.options.gridLines.circular)a.beginPath(),a.arc(e.xCenter,e.yCenter,r,0,2*Math.PI),a.closePath(),a.stroke();else{var s=t(e);if(0===s)return;a.beginPath();var l=e.getPointPosition(0,r);a.moveTo(l.x,l.y);for(var u=1;u<s;u++)l=e.getPointPosition(u,r),a.lineTo(l.x,l.y);a.closePath(),a.stroke()}}function g(e){return i.isNumber(e)?e:0}var m=r.global,v={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:o.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}},y=e.LinearScaleBase.extend({setDimensions:function(){var e=this,t=e.options,n=t.ticks;e.width=e.maxWidth,e.height=e.maxHeight,e.xCenter=Math.round(e.width/2),e.yCenter=Math.round(e.height/2);var r=i.min([e.height,e.width]),o=i.valueOrDefault(n.fontSize,m.defaultFontSize);e.drawingArea=t.display?r/2-(o/2+n.backdropPaddingY):r/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;i.each(t.data.datasets,function(o,a){if(t.isDatasetVisible(a)){var s=t.getDatasetMeta(a);i.each(o.data,function(t,i){var o=+e.getRightValue(t);isNaN(o)||s.data[i].hidden||(n=Math.min(o,n),r=Math.max(o,r))})}}),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=r===Number.NEGATIVE_INFINITY?0:r,e.handleTickRangeOptions()},getTickLimit:function(){var e=this.options.ticks,t=i.valueOrDefault(e.fontSize,m.defaultFontSize);return Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*t)))},convertTicksToLabels:function(){var t=this;e.LinearScaleBase.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){this.options.pointLabels.display?l(this):u(this)},setReductions:function(e,t,n){var r=this,i=t.l/Math.sin(n.l),o=Math.max(t.r-r.width,0)/Math.sin(n.r),a=-t.t/Math.cos(n.t),s=-Math.max(t.b-r.height,0)/Math.cos(n.b);i=g(i),o=g(o),a=g(a),s=g(s),r.drawingArea=Math.min(Math.round(e-(i+o)/2),Math.round(e-(a+s)/2)),r.setCenterPoint(i,o,a,s)},setCenterPoint:function(e,t,n,r){var i=this,o=i.width-t-i.drawingArea,a=e+i.drawingArea,s=n+i.drawingArea,l=i.height-r-i.drawingArea;i.xCenter=Math.round((a+o)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(e){return e*(2*Math.PI/t(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this,r=n.getIndexAngle(e)-Math.PI/2;return{x:Math.round(Math.cos(r)*t)+n.xCenter,y:Math.round(Math.sin(r)*t)+n.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this,t=e.min,n=e.max;return e.getPointPositionForValue(0,e.beginAtZero?0:t<0&&n<0?n:t>0&&n>0?t:0)},draw:function(){var e=this,t=e.options,n=t.gridLines,r=t.ticks,o=i.valueOrDefault;if(t.display){var a=e.ctx,s=this.getIndexAngle(0),l=o(r.fontSize,m.defaultFontSize),u=o(r.fontStyle,m.defaultFontStyle),c=o(r.fontFamily,m.defaultFontFamily),d=i.fontString(l,u,c);i.each(e.ticks,function(t,i){if(i>0||r.reverse){var u=e.getDistanceFromCenterForValue(e.ticksAsNumbers[i]);if(n.display&&0!==i&&p(e,n,u,i),r.display){var c=o(r.fontColor,m.defaultFontColor);if(a.font=d,a.save(),a.translate(e.xCenter,e.yCenter),a.rotate(s),r.showLabelBackdrop){var h=a.measureText(t).width;a.fillStyle=r.backdropColor,a.fillRect(-h/2-r.backdropPaddingX,-u-l/2-r.backdropPaddingY,h+2*r.backdropPaddingX,l+2*r.backdropPaddingY)}a.textAlign="center",a.textBaseline="middle",a.fillStyle=c,a.fillText(t,0,-u),a.restore()}}}),(t.angleLines.display||t.pointLabels.display)&&f(e)}}});e.scaleService.registerScaleType("radialLinear",y,v)}},{"../core/core.defaults":19,"../core/core.ticks":28,"../helpers/index":39}],51:[function(e,t,n){"use strict";function r(e,t){return e-t}function i(e){var t,n,r,i={},o=[];for(t=0,n=e.length;t<n;++t)r=e[t],i[r]||(i[r]=!0,o.push(r));return o}function o(e,t,n,r){if("linear"===r||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var i,o,a,s,l,u=[],c=[t];for(i=0,o=e.length;i<o;++i)(s=e[i])>t&&s<n&&c.push(s);for(c.push(n),i=0,o=c.length;i<o;++i)l=c[i+1],a=c[i-1],s=c[i],void 0!==a&&void 0!==l&&Math.round((l+a)/2)===s||u.push({time:s,pos:i/(o-1)});return u}function a(e,t,n){for(var r,i,o,a=0,s=e.length-1;a>=0&&a<=s;){if(r=a+s>>1,i=e[r-1]||null,o=e[r],!i)return{lo:null,hi:o};if(o[t]<n)a=r+1;else{if(!(i[t]>n))return{lo:i,hi:o};s=r-1}}return{lo:o,hi:null}}function s(e,t,n,r){var i=a(e,t,n),o=i.lo?i.hi?i.lo:e[e.length-2]:e[0],s=i.lo?i.hi?i.hi:e[e.length-1]:e[1],l=s[t]-o[t],u=l?(n-o[t])/l:0,c=(s[r]-o[r])*u;return o[r]+c}function l(e,t){var n=t.parser,r=t.parser||t.format;return"function"==typeof n?n(e):"string"==typeof e&&"string"==typeof r?m(e,r):(e instanceof m||(e=m(e)),e.isValid()?e:"function"==typeof r?r(e):e)}function u(e,t){if(y.isNullOrUndef(e))return null;var n=t.options.time,r=l(t.getRightValue(e),n);return r.isValid()?(n.round&&r.startOf(n.round),r.valueOf()):null}function c(e,t,n,r){var i,o,a,s=t-e,l=w[n],u=l.size,c=l.steps;if(!c)return Math.ceil(s/((r||1)*u));for(i=0,o=c.length;i<o&&(a=c[i],!(Math.ceil(s/(u*a))<=r));++i);return a}function d(e,t,n,r){var i,o,a,s=k.length;for(i=k.indexOf(e);i<s-1;++i)if(o=w[k[i]],a=o.steps?o.steps[o.steps.length-1]:x,Math.ceil((n-t)/(a*o.size))<=r)return k[i];return k[s-1]}function h(e){for(var t=k.indexOf(e)+1,n=k.length;t<n;++t)if(w[k[t]].major)return k[t]}function f(e,t,n,r,i,o){var a,s=o.time,l=y.valueOrDefault(s.stepSize,s.unitStepSize),u="week"===n&&s.isoWeekday,d=o.ticks.major.enabled,h=w[n],f=m(e),p=m(t),g=[];for(l||(l=c(e,t,n,i)),u&&(f=f.isoWeekday(u),p=p.isoWeekday(u)),f=f.startOf(u?"day":n),p=p.startOf(u?"day":n),p<t&&p.add(1,n),a=m(f),d&&r&&!u&&!s.round&&(a.startOf(r),a.add(~~((f-a)/(h.size*l))*l,n));a<p;a.add(l,n))g.push(+a);return g.push(+a),g}function p(e,t,n,r,i){var o,a,l=0,u=0;return i.offset&&t.length&&(i.time.min||(o=t.length>1?t[1]:r,a=t[0],l=(s(e,"time",o,"pos")-s(e,"time",a,"pos"))/2),i.time.max||(o=t[t.length-1],a=t.length>1?t[t.length-2]:n,u=(s(e,"time",o,"pos")-s(e,"time",a,"pos"))/2)),{left:l,right:u}}function g(e,t){var n,r,i,o,a=[];for(n=0,r=e.length;n<r;++n)i=e[n],o=!!t&&i===+m(i).startOf(t),a.push({value:i,major:o});return a}var m=e("moment");m="function"==typeof m?m:window.moment;var v=e("../core/core.defaults"),y=e("../helpers/index"),b=Number.MIN_SAFE_INTEGER||-9007199254740991,x=Number.MAX_SAFE_INTEGER||9007199254740991,w={millisecond:{major:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{major:!0,size:1e3,steps:[1,2,5,10,30]},minute:{major:!0,size:6e4,steps:[1,2,5,10,30]},hour:{major:!0,size:36e5,steps:[1,2,3,6,12]},day:{major:!0,size:864e5,steps:[1,2,5]},week:{major:!1,size:6048e5,steps:[1,2,3,4]},month:{major:!0,size:2628e6,steps:[1,2,3]},quarter:{major:!1,size:7884e6,steps:[1,2,3,4]},year:{major:!0,size:3154e7}},k=Object.keys(w);t.exports=function(e){var t={position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}},n=e.Scale.extend({initialize:function(){if(!m)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),e.Scale.prototype.initialize.call(this)},update:function(){var t=this,n=t.options;return n.time&&n.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),e.Scale.prototype.update.apply(t,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),e.Scale.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var e,t,n,o,a,s,l=this,c=l.chart,d=l.options.time,h=u(d.min,l)||x,f=u(d.max,l)||b,p=[],g=[],v=[];for(e=0,n=c.data.labels.length;e<n;++e)v.push(u(c.data.labels[e],l));for(e=0,n=(c.data.datasets||[]).length;e<n;++e)if(c.isDatasetVisible(e))if(a=c.data.datasets[e].data,y.isObject(a[0]))for(g[e]=[],t=0,o=a.length;t<o;++t)s=u(a[t],l),p.push(s),g[e][t]=s;else p.push.apply(p,v),g[e]=v.slice(0);else g[e]=[];v.length&&(v=i(v).sort(r),h=Math.min(h,v[0]),f=Math.max(f,v[v.length-1])),p.length&&(p=i(p).sort(r),h=Math.min(h,p[0]),f=Math.max(f,p[p.length-1])),h=h===x?+m().startOf("day"):h,f=f===b?+m().endOf("day")+1:f,l.min=Math.min(h,f),l.max=Math.max(h+1,f),l._horizontal=l.isHorizontal(),l._table=[],l._timestamps={data:p,datasets:g,labels:v}},buildTicks:function(){var e,t,n,r=this,i=r.min,a=r.max,s=r.options,l=s.time,c=l.displayFormats,m=r.getLabelCapacity(i),v=l.unit||d(l.minUnit,i,a,m),y=h(v),b=[],x=[];switch(s.ticks.source){case"data":b=r._timestamps.data;break;case"labels":b=r._timestamps.labels;break;case"auto":default:b=f(i,a,v,y,m,s)}for("ticks"===s.bounds&&b.length&&(i=b[0],a=b[b.length-1]),i=u(l.min,r)||i,a=u(l.max,r)||a,e=0,t=b.length;e<t;++e)(n=b[e])>=i&&n<=a&&x.push(n);return r.min=i,r.max=a,r._unit=v,r._majorUnit=y,r._minorFormat=c[v],r._majorFormat=c[y],r._table=o(r._timestamps.data,i,a,s.distribution),r._offsets=p(r._table,x,i,a,s),g(x,y)},getLabelForIndex:function(e,t){var n=this,r=n.chart.data,i=n.options.time,o=r.labels&&e<r.labels.length?r.labels[e]:"",a=r.datasets[t].data[e];return y.isObject(a)&&(o=n.getRightValue(a)),i.tooltipFormat&&(o=l(o,i).format(i.tooltipFormat)),o},tickFormatFunction:function(e,t,n){var r=this,i=r.options,o=e.valueOf(),a=r._majorUnit,s=r._majorFormat,l=e.clone().startOf(r._majorUnit).valueOf(),u=i.ticks.major,c=u.enabled&&a&&s&&o===l,d=e.format(c?s:r._minorFormat),h=c?u:i.ticks.minor,f=y.valueOrDefault(h.callback,h.userCallback);return f?f(d,t,n):d},convertTicksToLabels:function(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(this.tickFormatFunction(m(e[t].value),t,e));return r},getPixelForOffset:function(e){var t=this,n=t._horizontal?t.width:t.height,r=t._horizontal?t.left:t.top,i=s(t._table,"time",e,"pos");return r+n*(t._offsets.left+i)/(t._offsets.left+1+t._offsets.right)},getPixelForValue:function(e,t,n){var r=this,i=null;if(void 0!==t&&void 0!==n&&(i=r._timestamps.datasets[n][t]),null===i&&(i=u(e,r)),null!==i)return r.getPixelForOffset(i)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,n=t._horizontal?t.width:t.height,r=t._horizontal?t.left:t.top,i=(n?(e-r)/n:0)*(t._offsets.left+1+t._offsets.left)-t._offsets.right,o=s(t._table,"pos",i,"time");return m(o)},getLabelWidth:function(e){var t=this,n=t.options.ticks,r=t.ctx.measureText(e).width,i=y.toRadians(n.maxRotation),o=Math.cos(i),a=Math.sin(i);return r*o+y.valueOrDefault(n.fontSize,v.global.defaultFontSize)*a},getLabelCapacity:function(e){var t=this;t._minorFormat=t.options.time.displayFormats.millisecond;var n=t.tickFormatFunction(m(e),0,[]),r=t.getLabelWidth(n),i=t.isHorizontal()?t.width:t.height;return Math.floor(i/r)}});e.scaleService.registerScaleType("time",n,t)}},{"../core/core.defaults":19,"../helpers/index":39,moment:58}],52:[function(e,t,n){function r(e){if(e){var t=/^#([a-fA-F0-9]{3})$/i,n=/^#([a-fA-F0-9]{6})$/i,r=/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,i=/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,o=/(\w+)/,a=[0,0,0],s=1,l=e.match(t);if(l){l=l[1];for(var u=0;u<a.length;u++)a[u]=parseInt(l[u]+l[u],16)}else if(l=e.match(n)){l=l[1];for(var u=0;u<a.length;u++)a[u]=parseInt(l.slice(2*u,2*u+2),16)}else if(l=e.match(r)){for(var u=0;u<a.length;u++)a[u]=parseInt(l[u+1]);s=parseFloat(l[4])}else if(l=e.match(i)){for(var u=0;u<a.length;u++)a[u]=Math.round(2.55*parseFloat(l[u+1]));s=parseFloat(l[4])}else if(l=e.match(o)){if("transparent"==l[1])return[0,0,0,0];if(!(a=x[l[1]]))return}for(var u=0;u<a.length;u++)a[u]=y(a[u],0,255);return s=s||0==s?y(s,0,1):1,a[3]=s,a}}function i(e){if(e){var t=/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,n=e.match(t);if(n){var r=parseFloat(n[4]);return[y(parseInt(n[1]),0,360),y(parseFloat(n[2]),0,100),y(parseFloat(n[3]),0,100),y(isNaN(r)?1:r,0,1)]}}}function o(e){if(e){var t=/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,n=e.match(t);if(n){var r=parseFloat(n[4]);return[y(parseInt(n[1]),0,360),y(parseFloat(n[2]),0,100),y(parseFloat(n[3]),0,100),y(isNaN(r)?1:r,0,1)]}}}function a(e){var t=r(e);return t&&t.slice(0,3)}function s(e){var t=i(e);return t&&t.slice(0,3)}function l(e){var t=r(e);return t?t[3]:(t=i(e))?t[3]:(t=o(e))?t[3]:void 0}function u(e){return"#"+b(e[0])+b(e[1])+b(e[2])}function c(e,t){return t<1||e[3]&&e[3]<1?d(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"}function d(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function h(e,t){return t<1||e[3]&&e[3]<1?f(e,t):"rgb("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%)"}function f(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function p(e,t){return t<1||e[3]&&e[3]<1?g(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"}function g(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function m(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"}function v(e){return w[e.slice(0,3)]}function y(e,t,n){return Math.min(Math.max(t,e),n)}function b(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var x=e("color-name");t.exports={getRgba:r,getHsla:i,getRgb:a,getHsl:s,getHwb:o,getAlpha:l,hexString:u,rgbString:c,rgbaString:d,percentString:h,percentaString:f,hslString:p,hslaString:g,hwbString:m,keyword:v};var w={};for(var k in x)w[x[k]]=k},{"color-name":56}],53:[function(e,t,n){var r=e("color-convert"),i=e("chartjs-color-string"),o=function(e){if(e instanceof o)return e;if(!(this instanceof o))return new o(e);this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1};var t;"string"==typeof e?(t=i.getRgba(e),t?this.setValues("rgb",t):(t=i.getHsla(e))?this.setValues("hsl",t):(t=i.getHwb(e))&&this.setValues("hwb",t)):"object"==typeof e&&(t=e,void 0!==t.r||void 0!==t.red?this.setValues("rgb",t):void 0!==t.l||void 0!==t.lightness?this.setValues("hsl",t):void 0!==t.v||void 0!==t.value?this.setValues("hsv",t):void 0!==t.w||void 0!==t.whiteness?this.setValues("hwb",t):void 0===t.c&&void 0===t.cyan||this.setValues("cmyk",t))};o.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e%=360,e=e<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return i.hexString(this.values.rgb)},rgbString:function(){return i.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return i.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return i.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return i.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return i.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return i.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return i.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var r=e[n]/255;t[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=this,r=e,i=void 0===t?.5:t,o=2*i-1,a=n.alpha()-r.alpha(),s=((o*a==-1?o:(o+a)/(1+o*a))+1)/2,l=1-s;return this.rgb(s*n.red()+l*r.red(),s*n.green()+l*r.green(),s*n.blue()+l*r.blue()).alpha(n.alpha()*i+r.alpha()*(1-i))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new o,r=this.values,i=n.values;for(var a in r)r.hasOwnProperty(a)&&(e=r[a],t={}.toString.call(e),"[object Array]"===t?i[a]=e.slice(0):"[object Number]"===t?i[a]=e:console.error("unexpected color value:",e));return n}},o.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},o.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},o.prototype.getValues=function(e){for(var t=this.values,n={},r=0;r<e.length;r++)n[e.charAt(r)]=t[e][r];return 1!==t.alpha&&(n.a=t.alpha),n},o.prototype.setValues=function(e,t){var n,i=this.values,o=this.spaces,a=this.maxes,s=1;if(this.valid=!0,"alpha"===e)s=t;else if(t.length)i[e]=t.slice(0,e.length),s=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)i[e][n]=t[e.charAt(n)];s=t.a}else if(void 0!==t[o[e][0]]){var l=o[e];for(n=0;n<e.length;n++)i[e][n]=t[l[n]];s=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===e)return!1;var u;for(n=0;n<e.length;n++)u=Math.max(0,Math.min(a[e][n],i[e][n])),i[e][n]=Math.round(u);for(var c in o)c!==e&&(i[c]=r[e][c](i[e]));return!0},o.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},o.prototype.setChannel=function(e,t,n){var r=this.values[e];return void 0===n?r[t]:n===r[t]?this:(r[t]=n,this.setValues(e,r),this)},"undefined"!=typeof window&&(window.Color=o),t.exports=o},{"chartjs-color-string":52,"color-convert":55}],54:[function(e,t,n){function i(e){var t,n,r,i=e[0]/255,o=e[1]/255,a=e[2]/255,s=Math.min(i,o,a),l=Math.max(i,o,a),u=l-s;return l==s?t=0:i==l?t=(o-a)/u:o==l?t=2+(a-i)/u:a==l&&(t=4+(i-o)/u),t=Math.min(60*t,360),t<0&&(t+=360),r=(s+l)/2,n=l==s?0:r<=.5?u/(l+s):u/(2-l-s),[t,100*n,100*r]}function o(e){var t,n,r,i=e[0],o=e[1],a=e[2],s=Math.min(i,o,a),l=Math.max(i,o,a),u=l-s;return n=0==l?0:u/l*1e3/10,l==s?t=0:i==l?t=(o-a)/u:o==l?t=2+(a-i)/u:a==l&&(t=4+(i-o)/u),t=Math.min(60*t,360),t<0&&(t+=360),r=l/255*1e3/10,[t,n,r]}function a(e){var t=e[0],n=e[1],r=e[2],o=i(e)[0],a=1/255*Math.min(t,Math.min(n,r)),r=1-1/255*Math.max(t,Math.max(n,r));return[o,100*a,100*r]}function s(e){var t,n,r,i,o=e[0]/255,a=e[1]/255,s=e[2]/255;return i=Math.min(1-o,1-a,1-s),t=(1-o-i)/(1-i)||0,n=(1-a-i)/(1-i)||0,r=(1-s-i)/(1-i)||0,[100*t,100*n,100*r,100*i]}function l(e){return J[JSON.stringify(e)]}function u(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92,n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92,r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,[100*(.4124*t+.3576*n+.1805*r),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]}function c(e){var t,n,r,i=u(e),o=i[0],a=i[1],s=i[2];return o/=95.047,a/=100,s/=108.883,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,s=s>.008856?Math.pow(s,1/3):7.787*s+16/116,t=116*a-16,n=500*(o-a),r=200*(a-s),[t,n,r]}function d(e){return j(c(e))}function h(e){var t,n,r,i,o,a=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return o=255*l,[o,o,o];n=l<.5?l*(1+s):l+s-l*s,t=2*l-n,i=[0,0,0];for(var u=0;u<3;u++)r=a+1/3*-(u-1),r<0&&r++,r>1&&r--,o=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,i[u]=255*o;return i}function f(e){var t,n,r=e[0],i=e[1]/100,o=e[2]/100;return 0===o?[0,0,0]:(o*=2,i*=o<=1?o:2-o,n=(o+i)/2,t=2*i/(o+i),[r,100*t,100*n])}function p(e){return a(h(e))}function m(e){return s(h(e))}function v(e){return l(h(e))}function y(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,i=Math.floor(t)%6,o=t-Math.floor(t),a=255*r*(1-n),s=255*r*(1-n*o),l=255*r*(1-n*(1-o)),r=255*r;switch(i){case 0:return[r,l,a];case 1:return[s,r,a];case 2:return[a,r,l];case 3:return[a,s,r];case 4:return[l,a,r];case 5:return[r,a,s]}}function x(e){var t,n,r=e[0],i=e[1]/100,o=e[2]/100;return n=(2-i)*o,t=i*o,t/=n<=1?n:2-n,t=t||0,n/=2,[r,100*t,100*n]}function w(e){return a(y(e))}function k(e){return s(y(e))}function _(e){return l(y(e))}function S(e){var t,n,i,o,a=e[0]/360,s=e[1]/100,l=e[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),t=Math.floor(6*a),n=1-l,i=6*a-t,0!=(1&t)&&(i=1-i),o=s+i*(n-s),t){default:case 6:case 0:r=n,g=o,b=s;break;case 1:r=o,g=n,b=s;break;case 2:r=s,g=n,b=o;break;case 3:r=s,g=o,b=n;break;case 4:r=o,g=s,b=n;break;case 5:r=n,g=s,b=o}return[255*r,255*g,255*b]}function C(e){return i(S(e))}function M(e){return o(S(e))}function D(e){return s(S(e))}function T(e){return l(S(e))}function A(e){var t,n,r,i=e[0]/100,o=e[1]/100,a=e[2]/100,s=e[3]/100;return t=1-Math.min(1,i*(1-s)+s),n=1-Math.min(1,o*(1-s)+s),r=1-Math.min(1,a*(1-s)+s),[255*t,255*n,255*r]}function O(e){return i(A(e))}function P(e){return o(A(e))}function F(e){return a(A(e))}function I(e){return l(A(e))}function R(e){var t,n,r,i=e[0]/100,o=e[1]/100,a=e[2]/100;return t=3.2406*i+-1.5372*o+-.4986*a,n=-.9689*i+1.8758*o+.0415*a,r=.0557*i+-.204*o+1.057*a,t=t>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,t=Math.min(Math.max(0,t),1),n=Math.min(Math.max(0,n),1),r=Math.min(Math.max(0,r),1),[255*t,255*n,255*r]}function L(e){var t,n,r,i=e[0],o=e[1],a=e[2];return i/=95.047,o/=100,a/=108.883,i=i>.008856?Math.pow(i,1/3):7.787*i+16/116,o=o>.008856?Math.pow(o,1/3):7.787*o+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,t=116*o-16,n=500*(i-o),r=200*(o-a),[t,n,r]}function N(e){return j(L(e))}function E(e){var t,n,r,i,o=e[0],a=e[1],s=e[2];return o<=8?(n=100*o/903.3,i=n/100*7.787+16/116):(n=100*Math.pow((o+16)/116,3),i=Math.pow(n/100,1/3)),t=t/95.047<=.008856?t=95.047*(a/500+i-16/116)/7.787:95.047*Math.pow(a/500+i,3),r=r/108.883<=.008859?r=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3),[t,n,r]}function j(e){var t,n,r,i=e[0],o=e[1],a=e[2];return t=Math.atan2(a,o),n=360*t/2/Math.PI,n<0&&(n+=360),r=Math.sqrt(o*o+a*a),[i,r,n]}function W(e){return R(E(e))}function B(e){var t,n,r,i=e[0],o=e[1],a=e[2];return r=a/360*2*Math.PI,t=o*Math.cos(r),n=o*Math.sin(r),[i,t,n]}function H(e){return E(B(e))}function z(e){return W(B(e))}function Y(e){return Z[e]}function V(e){return i(Y(e))}function q(e){return o(Y(e))}function U(e){return a(Y(e))}function G(e){return s(Y(e))}function $(e){return c(Y(e))}function X(e){return u(Y(e))}t.exports={rgb2hsl:i,rgb2hsv:o,rgb2hwb:a,rgb2cmyk:s,rgb2keyword:l,rgb2xyz:u,rgb2lab:c,rgb2lch:d,hsl2rgb:h,hsl2hsv:f,hsl2hwb:p,hsl2cmyk:m,hsl2keyword:v,hsv2rgb:y,hsv2hsl:x,hsv2hwb:w,hsv2cmyk:k,hsv2keyword:_,hwb2rgb:S,hwb2hsl:C,hwb2hsv:M,hwb2cmyk:D,hwb2keyword:T,cmyk2rgb:A,cmyk2hsl:O,cmyk2hsv:P,cmyk2hwb:F,cmyk2keyword:I,keyword2rgb:Y,keyword2hsl:V,keyword2hsv:q,keyword2hwb:U,keyword2cmyk:G,keyword2lab:$,keyword2xyz:X,xyz2rgb:R,xyz2lab:L,xyz2lch:N,lab2xyz:E,lab2rgb:W,lab2lch:j,lch2lab:B,lch2xyz:H,lch2rgb:z};var Z={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},J={};for(var K in Z)J[JSON.stringify(Z[K])]=K},{}],55:[function(e,t,n){var r=e("./conversions"),i=function(){return new u};for(var o in r){i[o+"Raw"]=function(e){return function(t){return"number"==typeof t&&(t=Array.prototype.slice.call(arguments)),r[e](t)}}(o);var a=/(\w+)2(\w+)/.exec(o),s=a[1],l=a[2];i[s]=i[s]||{},i[s][l]=i[o]=function(e){return function(t){"number"==typeof t&&(t=Array.prototype.slice.call(arguments));var n=r[e](t);if("string"==typeof n||void 0===n)return n;for(var i=0;i<n.length;i++)n[i]=Math.round(n[i]);return n}}(o)}var u=function(){this.convs={}};u.prototype.routeSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n))},u.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},u.prototype.getValues=function(e){var t=this.convs[e];if(!t){var n=this.space,r=this.convs[n];t=i[n][e](r),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){u.prototype[e]=function(t){return this.routeSpace(e,arguments)}}),t.exports=i},{"./conversions":54}],56:[function(e,t,n){"use strict";t.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],
darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},{}],57:[function(e,t,n){!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function r(e){var t=!!e&&"length"in e&&e.length,n=pe.type(e);return"function"!==n&&!pe.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function i(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function o(e,t,n){return pe.isFunction(t)?pe.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?pe.grep(e,function(e){return e===t!==n}):"string"!=typeof t?pe.grep(e,function(e){return se.call(t,e)>-1!==n}):Se.test(t)?pe.filter(t,e,n):(t=pe.filter(t,e),pe.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return pe.each(e.match(Ae)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function u(e){throw e}function c(e,t,n,r){var i;try{e&&pe.isFunction(i=e.promise)?i.call(e).done(t).fail(n):e&&pe.isFunction(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),pe.ready()}function h(){this.expando=pe.expando+h.uid++}function f(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ne.test(e)?JSON.parse(e):e)}function p(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=f(n)}catch(e){}Le.set(e,t,n)}else n=void 0;return n}function g(e,t,n,r){var i,o=1,a=20,s=r?function(){return r.cur()}:function(){return pe.css(e,t,"")},l=s(),u=n&&n[3]||(pe.cssNumber[t]?"":"px"),c=(pe.cssNumber[t]||"px"!==u&&+l)&&We.exec(pe.css(e,t));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do{o=o||".5",c/=o,pe.style(e,t,c+u)}while(o!==(o=s()/l)&&1!==o&&--a)}return n&&(c=+c||+l||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=i)),i}function m(e){var t,n=e.ownerDocument,r=e.nodeName,i=Ye[r];return i||(t=n.body.appendChild(n.createElement(r)),i=pe.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),Ye[r]=i,i)}function v(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)r=e[o],r.style&&(n=r.style.display,t?("none"===n&&(i[o]=Re.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&He(r)&&(i[o]=m(r))):"none"!==n&&(i[o]="none",Re.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}function y(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&i(e,t)?pe.merge([e],n):n}function b(e,t){for(var n=0,r=e.length;n<r;n++)Re.set(e[n],"globalEval",!t||Re.get(t[n],"globalEval"))}function x(e,t,n,r,i){for(var o,a,s,l,u,c,d=t.createDocumentFragment(),h=[],f=0,p=e.length;f<p;f++)if((o=e[f])||0===o)if("object"===pe.type(o))pe.merge(h,o.nodeType?[o]:o);else if($e.test(o)){for(a=a||d.appendChild(t.createElement("div")),s=(qe.exec(o)||["",""])[1].toLowerCase(),l=Ge[s]||Ge._default,a.innerHTML=l[1]+pe.htmlPrefilter(o)+l[2],c=l[0];c--;)a=a.lastChild;pe.merge(h,a.childNodes),a=d.firstChild,a.textContent=""}else h.push(t.createTextNode(o));for(d.textContent="",f=0;o=h[f++];)if(r&&pe.inArray(o,r)>-1)i&&i.push(o);else if(u=pe.contains(o.ownerDocument,o),a=y(d.appendChild(o),"script"),u&&b(a),n)for(c=0;o=a[c++];)Ue.test(o.type||"")&&n.push(o);return d}function w(){return!0}function k(){return!1}function _(){try{return ne.activeElement}catch(e){}}function S(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)S(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=k;else if(!i)return e;return 1===o&&(a=i,i=function(e){return pe().off(e),a.apply(this,arguments)},i.guid=a.guid||(a.guid=pe.guid++)),e.each(function(){pe.event.add(this,t,i,r,n)})}function C(e,t){return i(e,"table")&&i(11!==t.nodeType?t:t.firstChild,"tr")?pe(">tbody",e)[0]||e:e}function M(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function T(e,t){var n,r,i,o,a,s,l,u;if(1===t.nodeType){if(Re.hasData(e)&&(o=Re.access(e),a=Re.set(t,o),u=o.events)){delete a.handle,a.events={};for(i in u)for(n=0,r=u[i].length;n<r;n++)pe.event.add(t,i,u[i][n])}Le.hasData(e)&&(s=Le.access(e),l=pe.extend({},s),Le.set(t,l))}}function A(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ve.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function O(e,t,r,i){t=oe.apply([],t);var o,a,s,l,u,c,d=0,h=e.length,f=h-1,p=t[0],g=pe.isFunction(p);if(g||h>1&&"string"==typeof p&&!fe.checkClone&&tt.test(p))return e.each(function(n){var o=e.eq(n);g&&(t[0]=p.call(this,n,o.html())),O(o,t,r,i)});if(h&&(o=x(t,e[0].ownerDocument,!1,e,i),a=o.firstChild,1===o.childNodes.length&&(o=a),a||i)){for(s=pe.map(y(o,"script"),M),l=s.length;d<h;d++)u=o,d!==f&&(u=pe.clone(u,!0,!0),l&&pe.merge(s,y(u,"script"))),r.call(e[d],u,d);if(l)for(c=s[s.length-1].ownerDocument,pe.map(s,D),d=0;d<l;d++)u=s[d],Ue.test(u.type||"")&&!Re.access(u,"globalEval")&&pe.contains(c,u)&&(u.src?pe._evalUrl&&pe._evalUrl(u.src):n(u.textContent.replace(rt,""),c))}return e}function P(e,t,n){for(var r,i=t?pe.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||pe.cleanData(y(r)),r.parentNode&&(n&&pe.contains(r.ownerDocument,r)&&b(y(r,"script")),r.parentNode.removeChild(r));return e}function F(e,t,n){var r,i,o,a,s=e.style;return n=n||at(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||pe.contains(e.ownerDocument,e)||(a=pe.style(e,t)),!fe.pixelMarginRight()&&ot.test(a)&&it.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function I(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function R(e){if(e in ht)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ht)return e}function L(e){var t=pe.cssProps[e];return t||(t=pe.cssProps[e]=R(e)||e),t}function N(e,t,n){var r=We.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function E(e,t,n,r,i){var o,a=0;for(o=n===(r?"border":"content")?4:"width"===t?1:0;o<4;o+=2)"margin"===n&&(a+=pe.css(e,n+Be[o],!0,i)),r?("content"===n&&(a-=pe.css(e,"padding"+Be[o],!0,i)),"margin"!==n&&(a-=pe.css(e,"border"+Be[o]+"Width",!0,i))):(a+=pe.css(e,"padding"+Be[o],!0,i),"padding"!==n&&(a+=pe.css(e,"border"+Be[o]+"Width",!0,i)));return a}function j(e,t,n){var r,i=at(e),o=F(e,t,i),a="border-box"===pe.css(e,"boxSizing",!1,i);return ot.test(o)?o:(r=a&&(fe.boxSizingReliable()||o===e.style[t]),"auto"===o&&(o=e["offset"+t[0].toUpperCase()+t.slice(1)]),(o=parseFloat(o)||0)+E(e,t,n||(a?"border":"content"),r,i)+"px")}function W(e,t,n,r,i){return new W.prototype.init(e,t,n,r,i)}function B(){pt&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(B):e.setTimeout(B,pe.fx.interval),pe.fx.tick())}function H(){return e.setTimeout(function(){ft=void 0}),ft=pe.now()}function z(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)n=Be[r],i["margin"+n]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function Y(e,t,n){for(var r,i=(U.tweeners[t]||[]).concat(U.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function V(e,t,n){var r,i,o,a,s,l,u,c,d="width"in t||"height"in t,h=this,f={},p=e.style,g=e.nodeType&&He(e),m=Re.get(e,"fxshow");n.queue||(a=pe._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,pe.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],gt.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;g=!0}f[r]=m&&m[r]||pe.style(e,r)}if((l=!pe.isEmptyObject(t))||!pe.isEmptyObject(f)){d&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=m&&m.display,null==u&&(u=Re.get(e,"display")),c=pe.css(e,"display"),"none"===c&&(u?c=u:(v([e],!0),u=e.style.display||u,c=pe.css(e,"display"),v([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===pe.css(e,"float")&&(l||(h.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(r in f)l||(m?"hidden"in m&&(g=m.hidden):m=Re.access(e,"fxshow",{display:u}),o&&(m.hidden=!g),g&&v([e],!0),h.done(function(){g||v([e]),Re.remove(e,"fxshow");for(r in f)pe.style(e,r,f[r])})),l=Y(g?m[r]:0,r,h),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}}function q(e,t){var n,r,i,o,a;for(n in e)if(r=pe.camelCase(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=pe.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function U(e,t,n){var r,i,o=0,a=U.prefilters.length,s=pe.Deferred().always(function(){delete l.elem}),l=function(){if(i)return!1;for(var t=ft||H(),n=Math.max(0,u.startTime+u.duration-t),r=n/u.duration||0,o=1-r,a=0,l=u.tweens.length;a<l;a++)u.tweens[a].run(o);return s.notifyWith(e,[u,o,n]),o<1&&l?n:(l||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:pe.extend({},t),opts:pe.extend(!0,{specialEasing:{},easing:pe.easing._default},n),originalProperties:t,originalOptions:n,startTime:ft||H(),duration:n.duration,tweens:[],createTween:function(t,n){var r=pe.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),c=u.props;for(q(c,u.opts.specialEasing);o<a;o++)if(r=U.prefilters[o].call(u,e,c,u.opts))return pe.isFunction(r.stop)&&(pe._queueHooks(u.elem,u.opts.queue).stop=pe.proxy(r.stop,r)),r;return pe.map(c,Y,u),pe.isFunction(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),pe.fx.timer(pe.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function G(e){return(e.match(Ae)||[]).join(" ")}function $(e){return e.getAttribute&&e.getAttribute("class")||""}function X(e,t,n,r){var i;if(Array.isArray(t))pe.each(t,function(t,i){n||Mt.test(e)?r(e,i):X(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==pe.type(t))r(e,t);else for(i in t)X(e+"["+i+"]",t[i],n,r)}function Z(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(Ae)||[];if(pe.isFunction(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function J(e,t,n,r){function i(s){var l;return o[s]=!0,pe.each(e[s]||[],function(e,s){var u=s(t,n,r);return"string"!=typeof u||a||o[u]?a?!(l=u):void 0:(t.dataTypes.unshift(u),i(u),!1)}),l}var o={},a=e===jt;return i(t.dataTypes[0])||!o["*"]&&i("*")}function K(e,t){var n,r,i=pe.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&pe.extend(!0,e,r),e}function Q(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}function ee(e,t,n,r){var i,o,a,s,l,u={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=c.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if(s=i.split(" "),s[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var te=[],ne=e.document,re=Object.getPrototypeOf,ie=te.slice,oe=te.concat,ae=te.push,se=te.indexOf,le={},ue=le.toString,ce=le.hasOwnProperty,de=ce.toString,he=de.call(Object),fe={},pe=function(e,t){return new pe.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,ye=function(e,t){return t.toUpperCase()};pe.fn=pe.prototype={jquery:"3.2.1",constructor:pe,length:0,toArray:function(){return ie.call(this)},get:function(e){return null==e?ie.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=pe.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return pe.each(this,e)},map:function(e){return this.pushStack(pe.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(ie.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},pe.extend=pe.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||pe.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],r=e[t],a!==r&&(u&&r&&(pe.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&pe.isPlainObject(n)?n:{},a[t]=pe.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},pe.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===pe.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=pe.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ue.call(e))&&(!(t=re(e))||"function"==typeof(n=ce.call(t,"constructor")&&t.constructor)&&de.call(n)===he)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ue.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,ye)},each:function(e,t){var n,i=0;if(r(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(r(Object(e))?pe.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var i,o,a=0,s=[];if(r(e))for(i=e.length;a<i;a++)null!=(o=t(e[a],a,n))&&s.push(o);else for(a in e)null!=(o=t(e[a],a,n))&&s.push(o);return oe.apply([],s)},guid:1,proxy:function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),pe.isFunction(e))return r=ie.call(arguments,2),i=function(){return e.apply(t||this,r.concat(ie.call(arguments)))},i.guid=e.guid=e.guid||pe.guid++,i},now:Date.now,support:fe}),"function"==typeof Symbol&&(pe.fn[Symbol.iterator]=te[Symbol.iterator]),pe.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=function(e){function t(e,t,n,r){var i,o,a,s,l,c,h,f=t&&t.ownerDocument,p=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==p&&9!==p&&11!==p)return n;if(!r&&((t?t.ownerDocument||t:W)!==P&&O(t),t=t||P,I)){if(11!==p&&(l=ge.exec(e)))if(i=l[1]){if(9===p){if(!(a=t.getElementById(i)))return n;if(a.id===i)return n.push(a),n}else if(f&&(a=f.getElementById(i))&&E(t,a)&&a.id===i)return n.push(a),n}else{if(l[2])return Z.apply(n,t.getElementsByTagName(e)),n;if((i=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return Z.apply(n,t.getElementsByClassName(i)),n}if(x.qsa&&!V[e+" "]&&(!R||!R.test(e))){if(1!==p)f=t,h=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(be,xe):t.setAttribute("id",s=j),c=S(e),o=c.length;o--;)c[o]="#"+s+" "+d(c[o]);h=c.join(","),f=me.test(e)&&u(t.parentNode)||t}if(h)try{return Z.apply(n,f.querySelectorAll(h)),n}catch(e){}finally{s===j&&t.removeAttribute("id")}}}return M(e.replace(oe,"$1"),t,n,r)}function n(){function e(n,r){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=r}var t=[];return e}function r(e){return e[j]=!0,e}function i(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var n=e.split("|"),r=n.length;r--;)w.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ke(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function u(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function d(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function h(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=H++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,l){var u,c,d,h=[B,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(d=t[j]||(t[j]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=c[o])&&u[0]===B&&u[1]===s)return h[2]=u[2];if(c[o]=h,h[2]=e(t,n,l))return!0}return!1}}function f(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function p(e,n,r){for(var i=0,o=n.length;i<o;i++)t(e,n[i],r);return r}function g(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function m(e,t,n,i,o,a){return i&&!i[j]&&(i=m(i)),o&&!o[j]&&(o=m(o,a)),r(function(r,a,s,l){var u,c,d,h=[],f=[],m=a.length,v=r||p(t||"*",s.nodeType?[s]:s,[]),y=!e||!r&&t?v:g(v,h,e,s,l),b=n?o||(r?e:m||i)?[]:a:y;if(n&&n(y,b,s,l),i)for(u=g(b,f),i(u,[],s,l),c=u.length;c--;)(d=u[c])&&(b[f[c]]=!(y[f[c]]=d));if(r){if(o||e){if(o){for(u=[],c=b.length;c--;)(d=b[c])&&u.push(y[c]=d);o(null,b=[],u,l)}for(c=b.length;c--;)(d=b[c])&&(u=o?K(r,d):h[c])>-1&&(r[u]=!(a[u]=d))}}else b=g(b===a?b.splice(m,b.length):b),o?o(null,a,b,l):Z.apply(a,b)})}function v(e){for(var t,n,r,i=e.length,o=w.relative[e[0].type],a=o||w.relative[" "],s=o?1:0,l=h(function(e){return e===t},a,!0),u=h(function(e){return K(t,e)>-1},a,!0),c=[function(e,n,r){var i=!o&&(r||n!==D)||((t=n).nodeType?l(e,n,r):u(e,n,r));return t=null,i}];s<i;s++)if(n=w.relative[e[s].type])c=[h(f(c),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[j]){for(r=++s;r<i&&!w.relative[e[r].type];r++);return m(s>1&&f(c),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(oe,"$1"),n,s<r&&v(e.slice(s,r)),r<i&&v(e=e.slice(r)),r<i&&d(e))}c.push(n)}return f(c)}function y(e,n){var i=n.length>0,o=e.length>0,a=function(r,a,s,l,u){var c,d,h,f=0,p="0",m=r&&[],v=[],y=D,b=r||o&&w.find.TAG("*",u),x=B+=null==y?1:Math.random()||.1,k=b.length;for(u&&(D=a===P||a||u);p!==k&&null!=(c=b[p]);p++){if(o&&c){for(d=0,a||c.ownerDocument===P||(O(c),s=!I);h=e[d++];)if(h(c,a||P,s)){l.push(c);break}u&&(B=x)}i&&((c=!h&&c)&&f--,r&&m.push(c))}if(f+=p,i&&p!==f){for(d=0;h=n[d++];)h(m,v,a,s);if(r){if(f>0)for(;p--;)m[p]||v[p]||(v[p]=$.call(l));v=g(v)}Z.apply(l,v),u&&!r&&v.length>0&&f+n.length>1&&t.uniqueSort(l)}return u&&(B=x,D=y),m};return i?r(a):a}var b,x,w,k,_,S,C,M,D,T,A,O,P,F,I,R,L,N,E,j="sizzle"+1*new Date,W=e.document,B=0,H=0,z=n(),Y=n(),V=n(),q=function(e,t){return e===t&&(A=!0),0},U={}.hasOwnProperty,G=[],$=G.pop,X=G.push,Z=G.push,J=G.slice,K=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},Q="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",re=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",ie=new RegExp(ee+"+","g"),oe=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ue=new RegExp(re),ce=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+re),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+Q+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},he=/^(?:input|select|textarea|button)$/i,fe=/^h\d$/i,pe=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),ye=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){O()},ke=h(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{Z.apply(G=J.call(W.childNodes),W.childNodes),G[W.childNodes.length].nodeType}catch(e){Z={apply:G.length?function(e,t){X.apply(e,J.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}x=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},O=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:W;return r!==P&&9===r.nodeType&&r.documentElement?(P=r,F=P.documentElement,I=!_(P),W!==P&&(n=P.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=i(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=i(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=pe.test(P.getElementsByClassName),x.getById=i(function(e){return F.appendChild(e).id=j,!P.getElementsByName||!P.getElementsByName(j).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&I){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,ye);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&I){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&I)return t.getElementsByClassName(e)},L=[],R=[],(x.qsa=pe.test(P.querySelectorAll))&&(i(function(e){F.appendChild(e).innerHTML="<a id='"+j+"'></a><select id='"+j+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&R.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||R.push("\\["+ee+"*(?:value|"+Q+")"),e.querySelectorAll("[id~="+j+"-]").length||R.push("~="),e.querySelectorAll(":checked").length||R.push(":checked"),e.querySelectorAll("a#"+j+"+*").length||R.push(".#.+[+~]")}),i(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&R.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&R.push(":enabled",":disabled"),F.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&R.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),R.push(",.*:")})),(x.matchesSelector=pe.test(N=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&i(function(e){x.disconnectedMatch=N.call(e,"*"),N.call(e,"[s!='']:x"),L.push("!=",re)}),R=R.length&&new RegExp(R.join("|")),L=L.length&&new RegExp(L.join("|")),t=pe.test(F.compareDocumentPosition),E=t||pe.test(F.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},q=t?function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===P||e.ownerDocument===W&&E(W,e)?-1:t===P||t.ownerDocument===W&&E(W,t)?1:T?K(T,e)-K(T,t):0:4&n?-1:1)}:function(e,t){if(e===t)return A=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],l=[t];if(!i||!o)return e===P?-1:t===P?1:i?-1:o?1:T?K(T,e)-K(T,t):0;if(i===o)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[r]===l[r];)r++;return r?a(s[r],l[r]):s[r]===W?-1:l[r]===W?1:0},P):P},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==P&&O(e),n=n.replace(le,"='$1']"),x.matchesSelector&&I&&!V[n+" "]&&(!L||!L.test(n))&&(!R||!R.test(n)))try{var r=N.call(e,n);if(r||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return t(n,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&O(e),E(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&O(e);var n=w.attrHandle[t.toLowerCase()],r=n&&U.call(w.attrHandle,t.toLowerCase())?n(e,t,!I):void 0;return void 0!==r?r:x.attributes||!I?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,i=0;if(A=!x.detectDuplicates,T=!x.sortStable&&e.slice(0),e.sort(q),A){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)e.splice(n[r],1)}return T=null,e},k=t.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=k(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=k(t);return n},w=t.selectors={cacheLength:50,createPseudo:r,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,ye),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,ye),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ue.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,ye).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=z[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&z(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(i){var o=t.attr(i,e);return null==o?"!="===n:!n||(o+="",
"="===n?o===r:"!="===n?o!==r:"^="===n?r&&0===o.indexOf(r):"*="===n?r&&o.indexOf(r)>-1:"$="===n?r&&o.slice(-r.length)===r:"~="===n?(" "+o.replace(ie," ")+" ").indexOf(r)>-1:"|="===n&&(o===r||o.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,c,d,h,f,p,g=o!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,b=!1;if(m){if(o){for(;g;){for(h=t;h=h[g];)if(s?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;p=g="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?m.firstChild:m.lastChild],a&&y){for(h=m,d=h[j]||(h[j]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),u=c[e]||[],f=u[0]===B&&u[1],b=f&&u[2],h=f&&m.childNodes[f];h=++f&&h&&h[g]||(b=f=0)||p.pop();)if(1===h.nodeType&&++b&&h===t){c[e]=[B,f,b];break}}else if(y&&(h=t,d=h[j]||(h[j]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),u=c[e]||[],f=u[0]===B&&u[1],b=f),!1===b)for(;(h=++f&&h&&h[g]||(b=f=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&(d=h[j]||(h[j]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),c[e]=[B,b]),h!==t)););return(b-=i)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var i,o=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[j]?o(n):o.length>1?(i=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)r=K(e,i[a]),e[r]=!(t[r]=i[a])}):function(e){return o(e,0,i)}):o}},pseudos:{not:r(function(e){var t=[],n=[],i=C(e.replace(oe,"$1"));return i[j]?r(function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ve,ye),function(t){return(t.textContent||t.innerText||k(t)).indexOf(e)>-1}}),lang:r(function(e){return ce.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,ye).toLowerCase(),function(t){var n;do{if(n=I?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===F},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return fe.test(e.nodeName)},input:function(e){return he.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},w.pseudos.nth=w.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[b]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(b);for(b in{submit:!0,reset:!0})w.pseudos[b]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(b);return c.prototype=w.filters=w.pseudos,w.setFilters=new c,S=t.tokenize=function(e,n){var r,i,o,a,s,l,u,c=Y[e+" "];if(c)return n?0:c.slice(0);for(s=e,l=[],u=w.preFilter;s;){r&&!(i=ae.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),r=!1,(i=se.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(oe," ")}),s=s.slice(r.length));for(a in w.filter)!(i=de[a].exec(s))||u[a]&&!(i=u[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?t.error(e):Y(e,l).slice(0)},C=t.compile=function(e,t){var n,r=[],i=[],o=V[e+" "];if(!o){for(t||(t=S(e)),n=t.length;n--;)o=v(t[n]),o[j]?r.push(o):i.push(o);o=V(e,y(i,r)),o.selector=e}return o},M=t.select=function(e,t,n,r){var i,o,a,s,l,c="function"==typeof e&&e,h=!r&&S(e=c.selector||e);if(n=n||[],1===h.length){if(o=h[0]=h[0].slice(0),o.length>2&&"ID"===(a=o[0]).type&&9===t.nodeType&&I&&w.relative[o[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ve,ye),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(i=de.needsContext.test(e)?0:o.length;i--&&(a=o[i],!w.relative[s=a.type]);)if((l=w.find[s])&&(r=l(a.matches[0].replace(ve,ye),me.test(o[0].type)&&u(t.parentNode)||t))){if(o.splice(i,1),!(e=r.length&&d(o)))return Z.apply(n,r),n;break}}return(c||C(e,h))(r,t,!I,n,!t||me.test(e)&&u(t.parentNode)||t),n},x.sortStable=j.split("").sort(q).join("")===j,x.detectDuplicates=!!A,O(),x.sortDetached=i(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),i(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&i(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),i(function(e){return null==e.getAttribute("disabled")})||o(Q,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(e);pe.find=be,pe.expr=be.selectors,pe.expr[":"]=pe.expr.pseudos,pe.uniqueSort=pe.unique=be.uniqueSort,pe.text=be.getText,pe.isXMLDoc=be.isXML,pe.contains=be.contains,pe.escapeSelector=be.escape;var xe=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&pe(e).is(n))break;r.push(e)}return r},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=pe.expr.match.needsContext,_e=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Se=/^.[^:#\[\.,]*$/;pe.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?pe.find.matchesSelector(r,e)?[r]:[]:pe.find.matches(e,pe.grep(t,function(e){return 1===e.nodeType}))},pe.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(pe(e).filter(function(){for(t=0;t<r;t++)if(pe.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)pe.find(e,i[t],n);return r>1?pe.uniqueSort(n):n},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(e){return!!o(this,"string"==typeof e&&ke.test(e)?pe(e):e||[],!1).length}});var Ce,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(pe.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||Ce,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Me.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof pe?t[0]:t,pe.merge(this,pe.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),_e.test(r[1])&&pe.isPlainObject(t))for(r in t)pe.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=ne.getElementById(r[2]),i&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):pe.isFunction(e)?void 0!==n.ready?n.ready(e):e(pe):pe.makeArray(e,this)}).prototype=pe.fn,Ce=pe(ne);var De=/^(?:parents|prev(?:Until|All))/,Te={children:!0,contents:!0,next:!0,prev:!0};pe.fn.extend({has:function(e){var t=pe(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(pe.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&pe(e);if(!ke.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&pe.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?pe.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?se.call(pe(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(pe.uniqueSort(pe.merge(this.get(),pe(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),pe.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return i(e,"iframe")?e.contentDocument:(i(e,"template")&&(e=e.content||e),pe.merge([],e.childNodes))}},function(e,t){pe.fn[e]=function(n,r){var i=pe.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=pe.filter(r,i)),this.length>1&&(Te[e]||pe.uniqueSort(i),De.test(e)&&i.reverse()),this.pushStack(i)}});var Ae=/[^\x20\t\r\n\f]+/g;pe.Callbacks=function(e){e="string"==typeof e?s(e):pe.extend({},e);var t,n,r,i,o=[],a=[],l=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<o.length;)!1===o[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(l=o.length-1,a.push(n)),function t(n){pe.each(n,function(n,r){pe.isFunction(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==pe.type(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return pe.each(arguments,function(e,t){for(var n;(n=pe.inArray(t,o,n))>-1;)o.splice(n,1),n<=l&&l--}),this},has:function(e){return e?pe.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},pe.extend({Deferred:function(t){var n=[["notify","progress",pe.Callbacks("memory"),pe.Callbacks("memory"),2],["resolve","done",pe.Callbacks("once memory"),pe.Callbacks("once memory"),0,"resolved"],["reject","fail",pe.Callbacks("once memory"),pe.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return pe.Deferred(function(t){pe.each(n,function(n,r){var i=pe.isFunction(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&pe.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){function o(t,n,r,i){return function(){var s=this,c=arguments,d=function(){var e,d;if(!(t<a)){if((e=r.apply(s,c))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,pe.isFunction(d)?i?d.call(e,o(a,n,l,i),o(a,n,u,i)):(a++,d.call(e,o(a,n,l,i),o(a,n,u,i),o(a,n,l,n.notifyWith))):(r!==l&&(s=void 0,c=[e]),(i||n.resolveWith)(s,c))}},h=i?d:function(){try{d()}catch(e){pe.Deferred.exceptionHook&&pe.Deferred.exceptionHook(e,h.stackTrace),t+1>=a&&(r!==u&&(s=void 0,c=[e]),n.rejectWith(s,c))}};t?h():(pe.Deferred.getStackHook&&(h.stackTrace=pe.Deferred.getStackHook()),e.setTimeout(h))}}var a=0;return pe.Deferred(function(e){n[0][3].add(o(0,e,pe.isFunction(i)?i:l,e.notifyWith)),n[1][3].add(o(0,e,pe.isFunction(t)?t:l)),n[2][3].add(o(0,e,pe.isFunction(r)?r:u))}).promise()},promise:function(e){return null!=e?pe.extend(e,i):i}},o={};return pe.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=ie.call(arguments),o=pe.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?ie.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(c(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||pe.isFunction(i[n]&&i[n].then)))return o.then();for(;n--;)c(i[n],a(n),o.reject);return o.promise()}});var Oe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;pe.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Oe.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},pe.readyException=function(t){e.setTimeout(function(){throw t})};var Pe=pe.Deferred();pe.fn.ready=function(e){return Pe.then(e).catch(function(e){pe.readyException(e)}),this},pe.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--pe.readyWait:pe.isReady)||(pe.isReady=!0,!0!==e&&--pe.readyWait>0||Pe.resolveWith(ne,[pe]))}}),pe.ready.then=Pe.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(pe.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Fe=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===pe.type(n)){i=!0;for(s in n)Fe(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,pe.isFunction(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(pe(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};h.uid=1,h.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[pe.camelCase(t)]=n;else for(r in t)i[pe.camelCase(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][pe.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){Array.isArray(t)?t=t.map(pe.camelCase):(t=pe.camelCase(t),t=t in r?[t]:t.match(Ae)||[]),n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||pe.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!pe.isEmptyObject(t)}};var Re=new h,Le=new h,Ne=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ee=/[A-Z]/g;pe.extend({hasData:function(e){return Le.hasData(e)||Re.hasData(e)},data:function(e,t,n){return Le.access(e,t,n)},removeData:function(e,t){Le.remove(e,t)},_data:function(e,t,n){return Re.access(e,t,n)},_removeData:function(e,t){Re.remove(e,t)}}),pe.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Le.get(o),1===o.nodeType&&!Re.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(r=a[n].name,0===r.indexOf("data-")&&(r=pe.camelCase(r.slice(5)),p(o,r,i[r])));Re.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Le.set(this,e)}):Fe(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=Le.get(o,e)))return n;if(void 0!==(n=p(o,e)))return n}else this.each(function(){Le.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Le.remove(this,e)})}}),pe.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Re.get(e,t),n&&(!r||Array.isArray(n)?r=Re.access(e,t,pe.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=pe.queue(e,t),r=n.length,i=n.shift(),o=pe._queueHooks(e,t),a=function(){pe.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Re.get(e,n)||Re.access(e,n,{empty:pe.Callbacks("once memory").add(function(){Re.remove(e,[t+"queue",n])})})}}),pe.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?pe.queue(this[0],e):void 0===t?this:this.each(function(){var n=pe.queue(this,e,t);pe._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&pe.dequeue(this,e)})},dequeue:function(e){return this.each(function(){pe.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=pe.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Re.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var je=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,We=new RegExp("^(?:([+-])=|)("+je+")([a-z%]*)$","i"),Be=["Top","Right","Bottom","Left"],He=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&pe.contains(e.ownerDocument,e)&&"none"===pe.css(e,"display")},ze=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i},Ye={};pe.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){He(this)?pe(this).show():pe(this).hide()})}});var Ve=/^(?:checkbox|radio)$/i,qe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ue=/^$|\/(?:java|ecma)script/i,Ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ge.optgroup=Ge.option,Ge.tbody=Ge.tfoot=Ge.colgroup=Ge.caption=Ge.thead,Ge.th=Ge.td;var $e=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),fe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",fe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Xe=ne.documentElement,Ze=/^key/,Je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ke=/^([^.]*)(?:\.(.+)|)/;pe.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,c,d,h,f,p,g,m=Re.get(e);if(m)for(n.handler&&(o=n,n=o.handler,i=o.selector),i&&pe.find.matchesSelector(Xe,i),n.guid||(n.guid=pe.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==pe&&pe.event.triggered!==t.type?pe.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Ae)||[""],u=t.length;u--;)s=Ke.exec(t[u])||[],f=g=s[1],p=(s[2]||"").split(".").sort(),f&&(d=pe.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=pe.event.special[f]||{},c=pe.extend({type:f,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&pe.expr.match.needsContext.test(i),namespace:p.join(".")},o),(h=l[f])||(h=l[f]=[],h.delegateCount=0,d.setup&&!1!==d.setup.call(e,r,p,a)||e.addEventListener&&e.addEventListener(f,a)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,c):h.push(c),pe.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,c,d,h,f,p,g,m=Re.hasData(e)&&Re.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Ae)||[""],u=t.length;u--;)if(s=Ke.exec(t[u])||[],f=g=s[1],p=(s[2]||"").split(".").sort(),f){for(d=pe.event.special[f]||{},f=(r?d.delegateType:d.bindType)||f,h=l[f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=h.length;o--;)c=h[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));a&&!h.length&&(d.teardown&&!1!==d.teardown.call(e,p,m.handle)||pe.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)pe.event.remove(e,f+t[u],n,r,!0);pe.isEmptyObject(l)&&Re.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=pe.event.fix(e),l=new Array(arguments.length),u=(Re.get(this,"events")||{})[s.type]||[],c=pe.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=pe.event.handlers.call(this,s,u),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((pe.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)r=t[n],i=r.selector+" ",void 0===a[i]&&(a[i]=r.needsContext?pe(i,this).index(u)>-1:pe.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(pe.Event.prototype,e,{enumerable:!0,configurable:!0,get:pe.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[pe.expando]?e:new pe.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==_()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===_()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&i(this,"input"))return this.click(),!1},_default:function(e){return i(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},pe.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},pe.Event=function(e,t){if(!(this instanceof pe.Event))return new pe.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:k,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&pe.extend(this,t),this.timeStamp=e&&e.timeStamp||pe.now(),this[pe.expando]=!0},pe.Event.prototype={constructor:pe.Event,isDefaultPrevented:k,isPropagationStopped:k,isImmediatePropagationStopped:k,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},pe.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ze.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},pe.event.addProp),pe.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){pe.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||pe.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),pe.fn.extend({on:function(e,t,n,r){return S(this,e,t,n,r)},one:function(e,t,n,r){return S(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,pe(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=k),this.each(function(){pe.event.remove(this,e,n,t)})}});var Qe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,rt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;pe.extend({htmlPrefilter:function(e){return e.replace(Qe,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=pe.contains(e.ownerDocument,e);if(!(fe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||pe.isXMLDoc(e)))for(a=y(s),o=y(e),r=0,i=o.length;r<i;r++)A(o[r],a[r]);if(t)if(n)for(o=o||y(e),a=a||y(s),r=0,i=o.length;r<i;r++)T(o[r],a[r]);else T(e,s);return a=y(s,"script"),a.length>0&&b(a,!l&&y(e,"script")),s},cleanData:function(e){for(var t,n,r,i=pe.event.special,o=0;void 0!==(n=e[o]);o++)if(Ie(n)){if(t=n[Re.expando]){if(t.events)for(r in t.events)i[r]?pe.event.remove(n,r):pe.removeEvent(n,r,t.handle);n[Re.expando]=void 0}n[Le.expando]&&(n[Le.expando]=void 0)}}}),pe.fn.extend({detach:function(e){return P(this,e,!0)},remove:function(e){return P(this,e)},text:function(e){return Fe(this,function(e){return void 0===e?pe.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return O(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){C(this,e).appendChild(e)}})},prepend:function(){return O(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=C(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return O(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(pe.cleanData(y(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return pe.clone(this,e,t)})},html:function(e){return Fe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ge[(qe.exec(e)||["",""])[1].toLowerCase()]){e=pe.htmlPrefilter(e);try{for(;n<r;n++)t=this[n]||{},1===t.nodeType&&(pe.cleanData(y(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return O(this,arguments,function(t){var n=this.parentNode;pe.inArray(this,e)<0&&(pe.cleanData(y(this)),n&&n.replaceChild(t,this))},e)}}),pe.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){pe.fn[e]=function(e){for(var n,r=[],i=pe(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),pe(i[a])[t](n),ae.apply(r,n.get());return this.pushStack(r)}});var it=/^margin/,ot=new RegExp("^("+je+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Xe.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,o="2px"===t.marginLeft,r="4px"===t.width,s.style.marginRight="50%",i="4px"===t.marginRight,Xe.removeChild(a),s=null}}var n,r,i,o,a=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",fe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),pe.extend(fe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),r},pixelMarginRight:function(){return t(),i},reliableMarginLeft:function(){return t(),o}}))}();var st=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ut={position:"absolute",visibility:"hidden",display:"block"},ct={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ht=ne.createElement("div").style;pe.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=F(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=pe.camelCase(t),l=lt.test(t),u=e.style;if(l||(t=L(s)),a=pe.cssHooks[t]||pe.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];o=typeof n,"string"===o&&(i=We.exec(n))&&i[1]&&(n=g(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(pe.cssNumber[s]?"":"px")),fe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=pe.camelCase(t);return lt.test(t)||(t=L(s)),a=pe.cssHooks[t]||pe.cssHooks[s],a&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=F(e,t,r)),"normal"===i&&t in ct&&(i=ct[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),pe.each(["height","width"],function(e,t){pe.cssHooks[t]={get:function(e,n,r){if(n)return!st.test(pe.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?j(e,t,r):ze(e,ut,function(){return j(e,t,r)})},set:function(e,n,r){var i,o=r&&at(e),a=r&&E(e,t,r,"border-box"===pe.css(e,"boxSizing",!1,o),o);return a&&(i=We.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=pe.css(e,t)),N(e,n,a)}}}),pe.cssHooks.marginLeft=I(fe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(F(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),pe.each({margin:"",padding:"",border:"Width"},function(e,t){pe.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+Be[r]+t]=o[r]||o[r-2]||o[0];return i}},it.test(e)||(pe.cssHooks[e+t].set=N)}),pe.fn.extend({css:function(e,t){return Fe(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=at(e),i=t.length;a<i;a++)o[t[a]]=pe.css(e,t[a],!1,r);return o}return void 0!==n?pe.style(e,t,n):pe.css(e,t)},e,t,arguments.length>1)}}),pe.Tween=W,W.prototype={constructor:W,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||pe.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(pe.cssNumber[n]?"":"px")},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t,n=W.propHooks[this.prop]
;return this.options.duration?this.pos=t=pe.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=pe.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){pe.fx.step[e.prop]?pe.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[pe.cssProps[e.prop]]&&!pe.cssHooks[e.prop]?e.elem[e.prop]=e.now:pe.style(e.elem,e.prop,e.now+e.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},pe.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},pe.fx=W.prototype.init,pe.fx.step={};var ft,pt,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;pe.Animation=pe.extend(U,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,We.exec(t),n),n}]},tweener:function(e,t){pe.isFunction(e)?(t=e,e=["*"]):e=e.match(Ae);for(var n,r=0,i=e.length;r<i;r++)n=e[r],U.tweeners[n]=U.tweeners[n]||[],U.tweeners[n].unshift(t)},prefilters:[V],prefilter:function(e,t){t?U.prefilters.unshift(e):U.prefilters.push(e)}}),pe.speed=function(e,t,n){var r=e&&"object"==typeof e?pe.extend({},e):{complete:n||!n&&t||pe.isFunction(e)&&e,duration:e,easing:n&&t||t&&!pe.isFunction(t)&&t};return pe.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in pe.fx.speeds?r.duration=pe.fx.speeds[r.duration]:r.duration=pe.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){pe.isFunction(r.old)&&r.old.call(this),r.queue&&pe.dequeue(this,r.queue)},r},pe.fn.extend({fadeTo:function(e,t,n,r){return this.filter(He).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=pe.isEmptyObject(e),o=pe.speed(t,n,r),a=function(){var t=U(this,pe.extend({},e),o);(i||Re.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=pe.timers,a=Re.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&mt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||pe.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Re.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=pe.timers,a=r?r.length:0;for(n.finish=!0,pe.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),pe.each(["toggle","show","hide"],function(e,t){var n=pe.fn[t];pe.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(z(t,!0),e,r,i)}}),pe.each({slideDown:z("show"),slideUp:z("hide"),slideToggle:z("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){pe.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),pe.timers=[],pe.fx.tick=function(){var e,t=0,n=pe.timers;for(ft=pe.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||pe.fx.stop(),ft=void 0},pe.fx.timer=function(e){pe.timers.push(e),pe.fx.start()},pe.fx.interval=13,pe.fx.start=function(){pt||(pt=!0,B())},pe.fx.stop=function(){pt=null},pe.fx.speeds={slow:600,fast:200,_default:400},pe.fn.delay=function(t,n){return t=pe.fx?pe.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",fe.checkOn=""!==e.value,fe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",fe.radioValue="t"===e.value}();var vt,yt=pe.expr.attrHandle;pe.fn.extend({attr:function(e,t){return Fe(this,pe.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){pe.removeAttr(this,e)})}}),pe.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?pe.prop(e,t,n):(1===o&&pe.isXMLDoc(e)||(i=pe.attrHooks[t.toLowerCase()]||(pe.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void pe.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:(r=pe.find.attr(e,t),null==r?void 0:r))},attrHooks:{type:{set:function(e,t){if(!fe.radioValue&&"radio"===t&&i(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(Ae);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?pe.removeAttr(e,n):e.setAttribute(n,n),n}},pe.each(pe.expr.match.bool.source.match(/\w+/g),function(e,t){var n=yt[t]||pe.find.attr;yt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=yt[a],yt[a]=i,i=null!=n(e,t,r)?a:null,yt[a]=o),i}});var bt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;pe.fn.extend({prop:function(e,t){return Fe(this,pe.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[pe.propFix[e]||e]})}}),pe.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&pe.isXMLDoc(e)||(t=pe.propFix[t]||t,i=pe.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=pe.find.attr(e,"tabindex");return t?parseInt(t,10):bt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),fe.optSelected||(pe.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),pe.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){pe.propFix[this.toLowerCase()]=this}),pe.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).addClass(e.call(this,t,$(this)))});if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(i=$(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");s=G(r),i!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(pe.isFunction(e))return this.each(function(t){pe(this).removeClass(e.call(this,t,$(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Ae)||[];n=this[l++];)if(i=$(n),r=1===n.nodeType&&" "+G(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");s=G(r),i!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):pe.isFunction(e)?this.each(function(n){pe(this).toggleClass(e.call(this,n,$(this),t),t)}):this.each(function(){var t,r,i,o;if("string"===n)for(r=0,i=pe(this),o=e.match(Ae)||[];t=o[r++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||(t=$(this),t&&Re.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Re.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+G($(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;pe.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=pe.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,pe(this).val()):e,null==i?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=pe.map(i,function(e){return null==e?"":e+""})),(t=pe.valHooks[this.type]||pe.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=pe.valHooks[i.type]||pe.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:(n=i.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),pe.extend({valHooks:{option:{get:function(e){var t=pe.find.attr(e,"value");return null!=t?t:G(pe.text(e))}},select:{get:function(e){var t,n,r,o=e.options,a=e.selectedIndex,s="select-one"===e.type,l=s?null:[],u=s?a+1:o.length;for(r=a<0?u:s?a:0;r<u;r++)if(n=o[r],(n.selected||r===a)&&!n.disabled&&(!n.parentNode.disabled||!i(n.parentNode,"optgroup"))){if(t=pe(n).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var n,r,i=e.options,o=pe.makeArray(t),a=i.length;a--;)r=i[a],(r.selected=pe.inArray(pe.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),pe.each(["radio","checkbox"],function(){pe.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=pe.inArray(pe(e).val(),t)>-1}},fe.checkOn||(pe.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var kt=/^(?:focusinfocus|focusoutblur)$/;pe.extend(pe.event,{trigger:function(t,n,r,i){var o,a,s,l,u,c,d,h=[r||ne],f=ce.call(t,"type")?t.type:t,p=ce.call(t,"namespace")?t.namespace.split("."):[];if(a=s=r=r||ne,3!==r.nodeType&&8!==r.nodeType&&!kt.test(f+pe.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[pe.expando]?t:new pe.Event(f,"object"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:pe.makeArray(n,[t]),d=pe.event.special[f]||{},i||!d.trigger||!1!==d.trigger.apply(r,n))){if(!i&&!d.noBubble&&!pe.isWindow(r)){for(l=d.delegateType||f,kt.test(l+f)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(r.ownerDocument||ne)&&h.push(s.defaultView||s.parentWindow||e)}for(o=0;(a=h[o++])&&!t.isPropagationStopped();)t.type=o>1?l:d.bindType||f,c=(Re.get(a,"events")||{})[t.type]&&Re.get(a,"handle"),c&&c.apply(a,n),(c=u&&a[u])&&c.apply&&Ie(a)&&(t.result=c.apply(a,n),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),n)||!Ie(r)||u&&pe.isFunction(r[f])&&!pe.isWindow(r)&&(s=r[u],s&&(r[u]=null),pe.event.triggered=f,r[f](),pe.event.triggered=void 0,s&&(r[u]=s)),t.result}},simulate:function(e,t,n){var r=pe.extend(new pe.Event,n,{type:e,isSimulated:!0});pe.event.trigger(r,null,t)}}),pe.fn.extend({trigger:function(e,t){return this.each(function(){pe.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return pe.event.trigger(e,t,n,!0)}}),pe.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){pe.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),pe.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),fe.focusin="onfocusin"in e,fe.focusin||pe.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){pe.event.simulate(t,e.target,pe.event.fix(e))};pe.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Re.access(r,t);i||r.addEventListener(e,n,!0),Re.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Re.access(r,t)-1;i?Re.access(r,t,i):(r.removeEventListener(e,n,!0),Re.remove(r,t))}}});var _t=e.location,St=pe.now(),Ct=/\?/;pe.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||pe.error("Invalid XML: "+t),n};var Mt=/\[\]$/,Dt=/\r?\n/g,Tt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;pe.param=function(e,t){var n,r=[],i=function(e,t){var n=pe.isFunction(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!pe.isPlainObject(e))pe.each(e,function(){i(this.name,this.value)});else for(n in e)X(n,e[n],t,i);return r.join("&")},pe.fn.extend({serialize:function(){return pe.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=pe.prop(this,"elements");return e?pe.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!pe(this).is(":disabled")&&At.test(this.nodeName)&&!Tt.test(e)&&(this.checked||!Ve.test(e))}).map(function(e,t){var n=pe(this).val();return null==n?null:Array.isArray(n)?pe.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var Ot=/%20/g,Pt=/#.*$/,Ft=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Rt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lt=/^(?:GET|HEAD)$/,Nt=/^\/\//,Et={},jt={},Wt="*/".concat("*"),Bt=ne.createElement("a");Bt.href=_t.href,pe.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:Rt.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":pe.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?K(K(e,pe.ajaxSettings),t):K(pe.ajaxSettings,e)},ajaxPrefilter:Z(Et),ajaxTransport:Z(jt),ajax:function(t,n){function r(t,n,r,s){var u,h,f,x,w,k=n;c||(c=!0,l&&e.clearTimeout(l),i=void 0,a=s||"",_.readyState=t>0?4:0,u=t>=200&&t<300||304===t,r&&(x=Q(p,_,r)),x=ee(p,x,_,u),u?(p.ifModified&&(w=_.getResponseHeader("Last-Modified"),w&&(pe.lastModified[o]=w),(w=_.getResponseHeader("etag"))&&(pe.etag[o]=w)),204===t||"HEAD"===p.type?k="nocontent":304===t?k="notmodified":(k=x.state,h=x.data,f=x.error,u=!f)):(f=k,!t&&k||(k="error",t<0&&(t=0))),_.status=t,_.statusText=(n||k)+"",u?v.resolveWith(g,[h,k,_]):v.rejectWith(g,[_,k,f]),_.statusCode(b),b=void 0,d&&m.trigger(u?"ajaxSuccess":"ajaxError",[_,p,u?h:f]),y.fireWith(g,[_,k]),d&&(m.trigger("ajaxComplete",[_,p]),--pe.active||pe.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,l,u,c,d,h,f,p=pe.ajaxSetup({},n),g=p.context||p,m=p.context&&(g.nodeType||g.jquery)?pe(g):pe.event,v=pe.Deferred(),y=pe.Callbacks("once memory"),b=p.statusCode||{},x={},w={},k="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=It.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)_.always(e[_.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return i&&i.abort(t),r(0,t),this}};if(v.promise(_),p.url=((t||p.url||_t.href)+"").replace(Nt,_t.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(Ae)||[""],null==p.crossDomain){u=ne.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Bt.protocol+"//"+Bt.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=pe.param(p.data,p.traditional)),J(Et,p,n,_),c)return _;d=pe.event&&p.global,d&&0==pe.active++&&pe.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Lt.test(p.type),o=p.url.replace(Pt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ot,"+")):(f=p.url.slice(o.length),p.data&&(o+=(Ct.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(Ft,"$1"),f=(Ct.test(o)?"&":"?")+"_="+St+++f),p.url=o+f),p.ifModified&&(pe.lastModified[o]&&_.setRequestHeader("If-Modified-Since",pe.lastModified[o]),pe.etag[o]&&_.setRequestHeader("If-None-Match",pe.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&_.setRequestHeader("Content-Type",p.contentType),_.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Wt+"; q=0.01":""):p.accepts["*"]);for(h in p.headers)_.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(g,_,p)||c))return _.abort();if(k="abort",y.add(p.complete),_.done(p.success),_.fail(p.error),i=J(jt,p,n,_)){if(_.readyState=1,d&&m.trigger("ajaxSend",[_,p]),c)return _;p.async&&p.timeout>0&&(l=e.setTimeout(function(){_.abort("timeout")},p.timeout));try{c=!1,i.send(x,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return _},getJSON:function(e,t,n){return pe.get(e,t,n,"json")},getScript:function(e,t){return pe.get(e,void 0,t,"script")}}),pe.each(["get","post"],function(e,t){pe[t]=function(e,n,r,i){return pe.isFunction(n)&&(i=i||r,r=n,n=void 0),pe.ajax(pe.extend({url:e,type:t,dataType:i,data:n,success:r},pe.isPlainObject(e)&&e))}}),pe._evalUrl=function(e){return pe.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},pe.fn.extend({wrapAll:function(e){var t;return this[0]&&(pe.isFunction(e)&&(e=e.call(this[0])),t=pe(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return pe.isFunction(e)?this.each(function(t){pe(this).wrapInner(e.call(this,t))}):this.each(function(){var t=pe(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=pe.isFunction(e);return this.each(function(n){pe(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){pe(this).replaceWith(this.childNodes)}),this}}),pe.expr.pseudos.hidden=function(e){return!pe.expr.pseudos.visible(e)},pe.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},pe.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Ht={0:200,1223:204},zt=pe.ajaxSettings.xhr();fe.cors=!!zt&&"withCredentials"in zt,fe.ajax=zt=!!zt,pe.ajaxTransport(function(t){var n,r;if(fe.cors||zt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ht[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),pe.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),pe.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return pe.globalEval(e),e}}}),pe.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),pe.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=pe("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Vt=/(=)\?(?=&|$)|\?\?/;pe.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||pe.expando+"_"+St++;return this[e]=!0,e}}),pe.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Vt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=pe.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Vt,"$1"+i):!1!==t.jsonp&&(t.url+=(Ct.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||pe.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?pe(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&pe.isFunction(o)&&o(a[0]),a=o=void 0}),"script"}),fe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),pe.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var r,i,o;return t||(fe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),r=t.createElement("base"),r.href=ne.location.href,t.head.appendChild(r)):t=ne),i=_e.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=x([e],t,o),o&&o.length&&pe(o).remove(),pe.merge([],i.childNodes))},pe.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=G(e.slice(s)),e=e.slice(0,s)),pe.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&pe.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?pe("<div>").append(pe.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},pe.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){pe.fn[t]=function(e){return this.on(t,e)}}),pe.expr.pseudos.animated=function(e){return pe.grep(pe.timers,function(t){return e===t.elem}).length},pe.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u,c=pe.css(e,"position"),d=pe(e),h={};"static"===c&&(e.style.position="relative"),s=d.offset(),o=pe.css(e,"top"),l=pe.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(r=d.position(),a=r.top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),pe.isFunction(t)&&(t=t.call(e,n,pe.extend({},s))),null!=t.top&&(h.top=t.top-s.top+a),null!=t.left&&(h.left=t.left-s.left+i),"using"in t?t.using.call(e,h):d.css(h)}},pe.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){pe.offset.setOffset(this,e,t)});var t,n,r,i,o=this[0];if(o)return o.getClientRects().length?(r=o.getBoundingClientRect(),t=o.ownerDocument,n=t.documentElement,i=t.defaultView,{top:r.top+i.pageYOffset-n.clientTop,left:r.left+i.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return"fixed"===pe.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),i(e[0],"html")||(r=e.offset()),r={top:r.top+pe.css(e[0],"borderTopWidth",!0),left:r.left+pe.css(e[0],"borderLeftWidth",!0)}),{top:t.top-r.top-pe.css(n,"marginTop",!0),left:t.left-r.left-pe.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===pe.css(e,"position");)e=e.offsetParent;return e||Xe})}}),pe.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;pe.fn[e]=function(r){return Fe(this,function(e,r,i){var o;if(pe.isWindow(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),pe.each(["top","left"],function(e,t){pe.cssHooks[t]=I(fe.pixelPosition,function(e,n){if(n)return n=F(e,t),ot.test(n)?pe(e).position()[t]+"px":n})}),pe.each({Height:"height",Width:"width"},function(e,t){pe.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){pe.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Fe(this,function(t,n,i){var o;return pe.isWindow(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?pe.css(t,n,s):pe.style(t,n,i,s)},t,a?i:void 0,a)}})}),pe.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),pe.holdReady=function(e){e?pe.readyWait++:pe.ready(!0)},pe.isArray=Array.isArray,pe.parseJSON=JSON.parse,pe.nodeName=i,"function"==typeof define&&define.amd&&define("jquery",[],function(){return pe});var qt=e.jQuery,Ut=e.$;return pe.noConflict=function(t){return e.$===pe&&(e.$=Ut),t&&e.jQuery===pe&&(e.jQuery=qt),pe},t||(e.jQuery=e.$=pe),pe})},{}],58:[function(e,t,n){!function(e,r){"object"==typeof n&&void 0!==t?t.exports=r():"function"==typeof define&&define.amd?define(r):e.moment=r()}(this,function(){"use strict";function n(){return xr.apply(null,arguments)}function r(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){var t;for(t in e)return!1;return!0}function a(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return bt(e,t,n,r,!0).utc()}function f(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function p(e){return null==e._pf&&(e._pf=f()),e._pf}function g(e){if(null==e._isValid){var t=p(e),n=kr.call(t.parsedDateParts,function(e){return null!=e}),r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(r=r&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return r;e._isValid=r}return e._isValid}function m(e){var t=h(NaN);return null!=e?d(p(t),e):p(t).userInvalidated=!0,t}function v(e,t){var n,r,i;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=p(t)),a(t._locale)||(e._locale=t._locale),_r.length>0)for(n=0;n<_r.length;n++)r=_r[n],i=t[r],a(i)||(e[r]=i);return e}function y(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===Sr&&(Sr=!0,n.updateOffset(this),Sr=!1)}function b(e){return e instanceof y||null!=e&&null!=e._isAMomentObject}function x(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=x(t)),n}function k(e,t,n){var r,i=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),a=0;for(r=0;r<i;r++)(n&&e[r]!==t[r]||!n&&w(e[r])!==w(t[r]))&&a++;return a+o}function _(e){!1===n.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function S(e,t){var r=!0;return d(function(){if(null!=n.deprecationHandler&&n.deprecationHandler(null,e),r){for(var i,o=[],a=0;a<arguments.length;a++){if(i="","object"==typeof arguments[a]){i+="\n["+a+"] ";for(var s in arguments[0])i+=s+": "+arguments[0][s]+", ";i=i.slice(0,-2)}else i=arguments[a];o.push(i)}_(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),r=!1}return t.apply(this,arguments)},t)}function C(e,t){null!=n.deprecationHandler&&n.deprecationHandler(e,t),Cr[e]||(_(t),Cr[e]=!0)}function M(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e){var t,n;for(n in e)t=e[n],M(t)?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function T(e,t){var n,r=d({},e);for(n in t)c(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},d(r[n],e[n]),d(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&i(e[n])&&(r[n]=d({},r[n]));return r}function A(e){null!=e&&this.set(e)}function O(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return M(r)?r.call(t,n):r}function P(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function F(){return this._invalidDate}function I(e){return this._ordinal.replace("%d",e)}function R(e,t,n,r){var i=this._relativeTime[n];return M(i)?i(e,t,n,r):i.replace(/%d/i,e)}function L(e,t){var n=this._relativeTime[e>0?"future":"past"];return M(n)?n(t):n.replace(/%s/i,t)}function N(e,t){var n=e.toLowerCase();Ir[n]=Ir[n+"s"]=Ir[t]=e}function E(e){return"string"==typeof e?Ir[e]||Ir[e.toLowerCase()]:void 0}function j(e){var t,n,r={};for(n in e)c(e,n)&&(t=E(n))&&(r[t]=e[n]);return r}function W(e,t){Rr[e]=t}function B(e){var t=[];for(var n in e)t.push({unit:n,priority:Rr[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function H(e,t){return function(r){return null!=r?(Y(this,e,r),n.updateOffset(this,t),this):z(this,e)}}function z(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Y(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function V(e){return e=E(e),M(this[e])?this[e]():this}function q(e,t){if("object"==typeof e){e=j(e);for(var n=B(e),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit])}else if(e=E(e),M(this[e]))return this[e](t);return this}function U(e,t,n){var r=""+Math.abs(e),i=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}function G(e,t,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),e&&(jr[e]=i),t&&(jr[t[0]]=function(){return U(i.apply(this,arguments),t[1],t[2])}),n&&(jr[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function $(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function X(e){var t,n,r=e.match(Lr);for(t=0,n=r.length;t<n;t++)jr[r[t]]?r[t]=jr[r[t]]:r[t]=$(r[t]);return function(t){var i,o="";for(i=0;i<n;i++)o+=M(r[i])?r[i].call(t,e):r[i];return o}}function Z(e,t){return e.isValid()?(t=J(t,e.localeData()),Er[t]=Er[t]||X(t),Er[t](e)):e.localeData().invalidDate()}function J(e,t){function n(e){return t.longDateFormat(e)||e}var r=5;for(Nr.lastIndex=0;r>=0&&Nr.test(e);)e=e.replace(Nr,n),Nr.lastIndex=0,r-=1;return e}function K(e,t,n){ni[e]=M(t)?t:function(e,r){return e&&n?n:t}}function Q(e,t){return c(ni,e)?ni[e](t._strict,t._locale):new RegExp(ee(e))}function ee(e){
return te(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,i){return t||n||r||i}))}function te(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ne(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=w(e)}),n=0;n<e.length;n++)ri[e[n]]=r}function re(e,t){ne(e,function(e,n,r,i){r._w=r._w||{},t(e,r._w,r,i)})}function ie(e,t,n){null!=t&&c(ri,e)&&ri[e](t,n._a,n,e)}function oe(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ae(e,t){return e?r(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||pi).test(t)?"format":"standalone"][e.month()]:r(this._months)?this._months:this._months.standalone}function se(e,t){return e?r(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[pi.test(t)?"format":"standalone"][e.month()]:r(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function le(e,t,n){var r,i,o,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?(i=fi.call(this._shortMonthsParse,a),-1!==i?i:null):(i=fi.call(this._longMonthsParse,a),-1!==i?i:null):"MMM"===t?-1!==(i=fi.call(this._shortMonthsParse,a))?i:(i=fi.call(this._longMonthsParse,a),-1!==i?i:null):-1!==(i=fi.call(this._longMonthsParse,a))?i:(i=fi.call(this._shortMonthsParse,a),-1!==i?i:null)}function ue(e,t,n){var r,i,o;if(this._monthsParseExact)return le.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(i=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}}function ce(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=w(t);else if(t=e.localeData().monthsParse(t),!s(t))return e;return n=Math.min(e.date(),oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function de(e){return null!=e?(ce(this,e),n.updateOffset(this,!0),this):z(this,"Month")}function he(){return oe(this.year(),this.month())}function fe(e){return this._monthsParseExact?(c(this,"_monthsRegex")||ge.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=vi),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function pe(e){return this._monthsParseExact?(c(this,"_monthsRegex")||ge.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=yi),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function ge(){function e(e,t){return t.length-e.length}var t,n,r=[],i=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),i.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(e),i.sort(e),o.sort(e),t=0;t<12;t++)r[t]=te(r[t]),i[t]=te(i[t]);for(t=0;t<24;t++)o[t]=te(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function me(e){return ve(e)?366:365}function ve(e){return e%4==0&&e%100!=0||e%400==0}function ye(){return ve(this.year())}function be(e,t,n,r,i,o,a){var s=new Date(e,t,n,r,i,o,a);return e<100&&e>=0&&isFinite(s.getFullYear())&&s.setFullYear(e),s}function xe(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function we(e,t,n){var r=7+t-n;return-(7+xe(e,0,r).getUTCDay()-t)%7+r-1}function ke(e,t,n,r,i){var o,a,s=(7+n-r)%7,l=we(e,r,i),u=1+7*(t-1)+s+l;return u<=0?(o=e-1,a=me(o)+u):u>me(e)?(o=e+1,a=u-me(e)):(o=e,a=u),{year:o,dayOfYear:a}}function _e(e,t,n){var r,i,o=we(e.year(),t,n),a=Math.floor((e.dayOfYear()-o-1)/7)+1;return a<1?(i=e.year()-1,r=a+Se(i,t,n)):a>Se(e.year(),t,n)?(r=a-Se(e.year(),t,n),i=e.year()+1):(i=e.year(),r=a),{week:r,year:i}}function Se(e,t,n){var r=we(e,t,n),i=we(e+1,t,n);return(me(e)-r+i)/7}function Ce(e){return _e(e,this._week.dow,this._week.doy).week}function Me(){return this._week.dow}function De(){return this._week.doy}function Te(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Ae(e){var t=_e(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Oe(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Pe(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Fe(e,t){return e?r(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:r(this._weekdays)?this._weekdays:this._weekdays.standalone}function Ie(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Re(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Le(e,t,n){var r,i,o,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?(i=fi.call(this._weekdaysParse,a),-1!==i?i:null):"ddd"===t?(i=fi.call(this._shortWeekdaysParse,a),-1!==i?i:null):(i=fi.call(this._minWeekdaysParse,a),-1!==i?i:null):"dddd"===t?-1!==(i=fi.call(this._weekdaysParse,a))?i:-1!==(i=fi.call(this._shortWeekdaysParse,a))?i:(i=fi.call(this._minWeekdaysParse,a),-1!==i?i:null):"ddd"===t?-1!==(i=fi.call(this._shortWeekdaysParse,a))?i:-1!==(i=fi.call(this._weekdaysParse,a))?i:(i=fi.call(this._minWeekdaysParse,a),-1!==i?i:null):-1!==(i=fi.call(this._minWeekdaysParse,a))?i:-1!==(i=fi.call(this._weekdaysParse,a))?i:(i=fi.call(this._shortWeekdaysParse,a),-1!==i?i:null)}function Ne(e,t,n){var r,i,o;if(this._weekdaysParseExact)return Le.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(i=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(i,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(i,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(i,"").replace(".",".?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}}function Ee(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Oe(e,this.localeData()),this.add(e-t,"d")):t}function je(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function We(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Pe(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function Be(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ye.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Si),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function He(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ye.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ci),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function ze(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Ye.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Mi),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function Ye(){function e(e,t){return t.length-e.length}var t,n,r,i,o,a=[],s=[],l=[],u=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),o=this.weekdays(n,""),a.push(r),s.push(i),l.push(o),u.push(r),u.push(i),u.push(o);for(a.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)s[t]=te(s[t]),l[t]=te(l[t]),u[t]=te(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function Ve(){return this.hours()%12||12}function qe(){return this.hours()||24}function Ue(e,t){G(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ge(e,t){return t._meridiemParse}function $e(e){return"p"===(e+"").toLowerCase().charAt(0)}function Xe(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Ze(e){return e?e.toLowerCase().replace("_","-"):e}function Je(e){for(var t,n,r,i,o=0;o<e.length;){for(i=Ze(e[o]).split("-"),t=i.length,n=Ze(e[o+1]),n=n?n.split("-"):null;t>0;){if(r=Ke(i.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(i,n,!0)>=t-1)break;t--}o++}return null}function Ke(n){var r=null;if(!Pi[n]&&void 0!==t&&t&&t.exports)try{r=Di._abbr,e("./locale/"+n),Qe(r)}catch(e){}return Pi[n]}function Qe(e,t){var n;return e&&(n=a(t)?nt(e):et(e,t))&&(Di=n),Di._abbr}function et(e,t){if(null!==t){var n=Oi;if(t.abbr=e,null!=Pi[e])C("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Pi[e]._config;else if(null!=t.parentLocale){if(null==Pi[t.parentLocale])return Fi[t.parentLocale]||(Fi[t.parentLocale]=[]),Fi[t.parentLocale].push({name:e,config:t}),null;n=Pi[t.parentLocale]._config}return Pi[e]=new A(T(n,t)),Fi[e]&&Fi[e].forEach(function(e){et(e.name,e.config)}),Qe(e),Pi[e]}return delete Pi[e],null}function tt(e,t){if(null!=t){var n,r=Oi;null!=Pi[e]&&(r=Pi[e]._config),t=T(r,t),n=new A(t),n.parentLocale=Pi[e],Pi[e]=n,Qe(e)}else null!=Pi[e]&&(null!=Pi[e].parentLocale?Pi[e]=Pi[e].parentLocale:null!=Pi[e]&&delete Pi[e]);return Pi[e]}function nt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Di;if(!r(e)){if(t=Ke(e))return t;e=[e]}return Je(e)}function rt(){return Tr(Pi)}function it(e){var t,n=e._a;return n&&-2===p(e).overflow&&(t=n[oi]<0||n[oi]>11?oi:n[ai]<1||n[ai]>oe(n[ii],n[oi])?ai:n[si]<0||n[si]>24||24===n[si]&&(0!==n[li]||0!==n[ui]||0!==n[ci])?si:n[li]<0||n[li]>59?li:n[ui]<0||n[ui]>59?ui:n[ci]<0||n[ci]>999?ci:-1,p(e)._overflowDayOfYear&&(t<ii||t>ai)&&(t=ai),p(e)._overflowWeeks&&-1===t&&(t=di),p(e)._overflowWeekday&&-1===t&&(t=hi),p(e).overflow=t),e}function ot(e){var t,n,r,i,o,a,s=e._i,l=Ii.exec(s)||Ri.exec(s);if(l){for(p(e).iso=!0,t=0,n=Ni.length;t<n;t++)if(Ni[t][1].exec(l[1])){i=Ni[t][0],r=!1!==Ni[t][2];break}if(null==i)return void(e._isValid=!1);if(l[3]){for(t=0,n=Ei.length;t<n;t++)if(Ei[t][1].exec(l[3])){o=(l[2]||" ")+Ei[t][0];break}if(null==o)return void(e._isValid=!1)}if(!r&&null!=o)return void(e._isValid=!1);if(l[4]){if(!Li.exec(l[4]))return void(e._isValid=!1);a="Z"}e._f=i+(o||"")+(a||""),ht(e)}else e._isValid=!1}function at(e){var t,n,r,i,o,a,s,l,u={" GMT":" +0000"," EDT":" -0400"," EST":" -0500"," CDT":" -0500"," CST":" -0600"," MDT":" -0600"," MST":" -0700"," PDT":" -0700"," PST":" -0800"},c="YXWVUTSRQPONZABCDEFGHIKLM";if(t=e._i.replace(/\([^\)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s|\s$/g,""),n=Wi.exec(t)){if(r=n[1]?"ddd"+(5===n[1].length?", ":" "):"",i="D MMM "+(n[2].length>10?"YYYY ":"YY "),o="HH:mm"+(n[4]?":ss":""),n[1]){var d=new Date(n[2]),h=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][d.getDay()];if(n[1].substr(0,3)!==h)return p(e).weekdayMismatch=!0,void(e._isValid=!1)}switch(n[5].length){case 2:0===l?s=" +0000":(l=c.indexOf(n[5][1].toUpperCase())-12,s=(l<0?" -":" +")+(""+l).replace(/^-?/,"0").match(/..$/)[0]+"00");break;case 4:s=u[n[5]];break;default:s=u[" GMT"]}n[5]=s,e._i=n.splice(1).join(""),a=" ZZ",e._f=r+i+o+a,ht(e),p(e).rfc2822=!0}else e._isValid=!1}function st(e){var t=ji.exec(e._i);if(null!==t)return void(e._d=new Date(+t[1]));ot(e),!1===e._isValid&&(delete e._isValid,at(e),!1===e._isValid&&(delete e._isValid,n.createFromInputFallback(e)))}function lt(e,t,n){return null!=e?e:null!=t?t:n}function ut(e){var t=new Date(n.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}function ct(e){var t,n,r,i,o=[];if(!e._d){for(r=ut(e),e._w&&null==e._a[ai]&&null==e._a[oi]&&dt(e),null!=e._dayOfYear&&(i=lt(e._a[ii],r[ii]),(e._dayOfYear>me(i)||0===e._dayOfYear)&&(p(e)._overflowDayOfYear=!0),n=xe(i,0,e._dayOfYear),e._a[oi]=n.getUTCMonth(),e._a[ai]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[si]&&0===e._a[li]&&0===e._a[ui]&&0===e._a[ci]&&(e._nextDay=!0,e._a[si]=0),e._d=(e._useUTC?xe:be).apply(null,o),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[si]=24)}}function dt(e){var t,n,r,i,o,a,s,l;if(t=e._w,null!=t.GG||null!=t.W||null!=t.E)o=1,a=4,n=lt(t.GG,e._a[ii],_e(xt(),1,4).year),r=lt(t.W,1),((i=lt(t.E,1))<1||i>7)&&(l=!0);else{o=e._locale._week.dow,a=e._locale._week.doy;var u=_e(xt(),o,a);n=lt(t.gg,e._a[ii],u.year),r=lt(t.w,u.week),null!=t.d?((i=t.d)<0||i>6)&&(l=!0):null!=t.e?(i=t.e+o,(t.e<0||t.e>6)&&(l=!0)):i=o}r<1||r>Se(n,o,a)?p(e)._overflowWeeks=!0:null!=l?p(e)._overflowWeekday=!0:(s=ke(n,r,i,o,a),e._a[ii]=s.year,e._dayOfYear=s.dayOfYear)}function ht(e){if(e._f===n.ISO_8601)return void ot(e);if(e._f===n.RFC_2822)return void at(e);e._a=[],p(e).empty=!0;var t,r,i,o,a,s=""+e._i,l=s.length,u=0;for(i=J(e._f,e._locale).match(Lr)||[],t=0;t<i.length;t++)o=i[t],r=(s.match(Q(o,e))||[])[0],r&&(a=s.substr(0,s.indexOf(r)),a.length>0&&p(e).unusedInput.push(a),s=s.slice(s.indexOf(r)+r.length),u+=r.length),jr[o]?(r?p(e).empty=!1:p(e).unusedTokens.push(o),ie(o,r,e)):e._strict&&!r&&p(e).unusedTokens.push(o);p(e).charsLeftOver=l-u,s.length>0&&p(e).unusedInput.push(s),e._a[si]<=12&&!0===p(e).bigHour&&e._a[si]>0&&(p(e).bigHour=void 0),p(e).parsedDateParts=e._a.slice(0),p(e).meridiem=e._meridiem,e._a[si]=ft(e._locale,e._a[si],e._meridiem),ct(e),it(e)}function ft(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(r=e.isPM(n),r&&t<12&&(t+=12),r||12!==t||(t=0),t):t}function pt(e){var t,n,r,i,o;if(0===e._f.length)return p(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)o=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],ht(t),g(t)&&(o+=p(t).charsLeftOver,o+=10*p(t).unusedTokens.length,p(t).score=o,(null==r||o<r)&&(r=o,n=t));d(e,n||t)}function gt(e){if(!e._d){var t=j(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),ct(e)}}function mt(e){var t=new y(it(vt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function vt(e){var t=e._i,n=e._f;return e._locale=e._locale||nt(e._l),null===t||void 0===n&&""===t?m({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new y(it(t)):(l(t)?e._d=t:r(n)?pt(e):n?ht(e):yt(e),g(e)||(e._d=null),e))}function yt(e){var t=e._i;a(t)?e._d=new Date(n.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?st(e):r(t)?(e._a=u(t.slice(0),function(e){return parseInt(e,10)}),ct(e)):i(t)?gt(e):s(t)?e._d=new Date(t):n.createFromInputFallback(e)}function bt(e,t,n,a,s){var l={};return!0!==n&&!1!==n||(a=n,n=void 0),(i(e)&&o(e)||r(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=s,l._l=n,l._i=e,l._f=t,l._strict=a,mt(l)}function xt(e,t,n,r){return bt(e,t,n,r,!1)}function wt(e,t){var n,i;if(1===t.length&&r(t[0])&&(t=t[0]),!t.length)return xt();for(n=t[0],i=1;i<t.length;++i)t[i].isValid()&&!t[i][e](n)||(n=t[i]);return n}function kt(){return wt("isBefore",[].slice.call(arguments,0))}function _t(){return wt("isAfter",[].slice.call(arguments,0))}function St(e){for(var t in e)if(-1===Yi.indexOf(t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Yi.length;++r)if(e[Yi[r]]){if(n)return!1;parseFloat(e[Yi[r]])!==w(e[Yi[r]])&&(n=!0)}return!0}function Ct(){return this._isValid}function Mt(){return qt(NaN)}function Dt(e){var t=j(e),n=t.year||0,r=t.quarter||0,i=t.month||0,o=t.week||0,a=t.day||0,s=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=St(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*s*60*60,this._days=+a+7*o,this._months=+i+3*r+12*n,this._data={},this._locale=nt(),this._bubble()}function Tt(e){return e instanceof Dt}function At(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ot(e,t){G(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+U(~~(e/60),2)+t+U(~~e%60,2)})}function Pt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],i=(r+"").match(Vi)||["-",0,0],o=60*i[1]+w(i[2]);return 0===o?0:"+"===i[0]?o:-o}function Ft(e,t){var r,i;return t._isUTC?(r=t.clone(),i=(b(e)||l(e)?e.valueOf():xt(e).valueOf())-r.valueOf(),r._d.setTime(r._d.valueOf()+i),n.updateOffset(r,!1),r):xt(e).local()}function It(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Rt(e,t,r){var i,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Pt(Qr,e)))return this}else Math.abs(e)<16&&!r&&(e*=60);return!this._isUTC&&t&&(i=It(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),o!==e&&(!t||this._changeInProgress?Zt(this,qt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:It(this)}function Lt(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Nt(e){return this.utcOffset(0,e)}function Et(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(It(this),"m")),this}function jt(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Pt(Kr,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Wt(e){return!!this.isValid()&&(e=e?xt(e).utcOffset():0,(this.utcOffset()-e)%60==0)}function Bt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Ht(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),e=vt(e),e._a){var t=e._isUTC?h(e._a):xt(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function zt(){return!!this.isValid()&&!this._isUTC}function Yt(){return!!this.isValid()&&this._isUTC}function Vt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function qt(e,t){var n,r,i,o=e,a=null;return Tt(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(o={},t?o[t]=e:o.milliseconds=e):(a=qi.exec(e))?(n="-"===a[1]?-1:1,o={y:0,d:w(a[ai])*n,h:w(a[si])*n,m:w(a[li])*n,s:w(a[ui])*n,ms:w(At(1e3*a[ci]))*n}):(a=Ui.exec(e))?(n="-"===a[1]?-1:1,o={y:Ut(a[2],n),M:Ut(a[3],n),w:Ut(a[4],n),d:Ut(a[5],n),h:Ut(a[6],n),m:Ut(a[7],n),s:Ut(a[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(i=$t(xt(o.from),xt(o.to)),o={},o.ms=i.milliseconds,o.M=i.months),r=new Dt(o),Tt(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function Ut(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Gt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function $t(e,t){var n;return e.isValid()&&t.isValid()?(t=Ft(t,e),e.isBefore(t)?n=Gt(e,t):(n=Gt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Xt(e,t){return function(n,r){var i,o;return null===r||isNaN(+r)||(C(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),o=n,n=r,r=o),n="string"==typeof n?+n:n,i=qt(n,r),Zt(this,i,e),this}}function Zt(e,t,r,i){var o=t._milliseconds,a=At(t._days),s=At(t._months);e.isValid()&&(i=null==i||i,o&&e._d.setTime(e._d.valueOf()+o*r),a&&Y(e,"Date",z(e,"Date")+a*r),s&&ce(e,z(e,"Month")+s*r),i&&n.updateOffset(e,a||s))}function Jt(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Kt(e,t){var r=e||xt(),i=Ft(r,this).startOf("day"),o=n.calendarFormat(this,i)||"sameElse",a=t&&(M(t[o])?t[o].call(this,r):t[o]);return this.format(a||this.localeData().calendar(o,this,xt(r)))}function Qt(){return new y(this)}function en(e,t){var n=b(e)?e:xt(e);return!(!this.isValid()||!n.isValid())&&(t=E(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function tn(e,t){var n=b(e)?e:xt(e);return!(!this.isValid()||!n.isValid())&&(t=E(a(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function nn(e,t,n,r){return r=r||"()",("("===r[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===r[1]?this.isBefore(t,n):!this.isAfter(t,n))}function rn(e,t){var n,r=b(e)?e:xt(e);return!(!this.isValid()||!r.isValid())&&(t=E(t||"millisecond"),"millisecond"===t?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function on(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function an(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function sn(e,t,n){var r,i,o,a;return this.isValid()?(r=Ft(e,this),r.isValid()?(i=6e4*(r.utcOffset()-this.utcOffset()),t=E(t),"year"===t||"month"===t||"quarter"===t?(a=ln(this,r),"quarter"===t?a/=3:"year"===t&&(a/=12)):(o=this-r,a="second"===t?o/1e3:"minute"===t?o/6e4:"hour"===t?o/36e5:"day"===t?(o-i)/864e5:"week"===t?(o-i)/6048e5:o),n?a:x(a)):NaN):NaN}function ln(e,t){var n,r,i=12*(t.year()-e.year())+(t.month()-e.month()),o=e.clone().add(i,"months");return t-o<0?(n=e.clone().add(i-1,"months"),r=(t-o)/(o-n)):(n=e.clone().add(i+1,"months"),r=(t-o)/(n-o)),-(i+r)||0}function un(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function cn(){if(!this.isValid())return null;var e=this.clone().utc();return e.year()<0||e.year()>9999?Z(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):M(Date.prototype.toISOString)?this.toDate().toISOString():Z(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function dn(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+i)}function hn(e){e||(e=this.isUtc()?n.defaultFormatUtc:n.defaultFormat);var t=Z(this,e);return this.localeData().postformat(t)}function fn(e,t){return this.isValid()&&(b(e)&&e.isValid()||xt(e).isValid())?qt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function pn(e){return this.from(xt(),e)}function gn(e,t){return this.isValid()&&(b(e)&&e.isValid()||xt(e).isValid())?qt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function mn(e){return this.to(xt(),e)}function vn(e){var t;return void 0===e?this._locale._abbr:(t=nt(e),null!=t&&(this._locale=t),this)}function yn(){return this._locale}function bn(e){switch(e=E(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function xn(e){return void 0===(e=E(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function wn(){return this._d.valueOf()-6e4*(this._offset||0)}function kn(){return Math.floor(this.valueOf()/1e3)}function _n(){return new Date(this.valueOf())}function Sn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function Cn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function Mn(){return this.isValid()?this.toISOString():null}function Dn(){return g(this)}function Tn(){return d({},p(this))}function An(){return p(this).overflow}function On(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Pn(e,t){G(0,[e,e.length],0,t)}function Fn(e){return Nn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function In(e){return Nn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Rn(){return Se(this.year(),1,4)}function Ln(){var e=this.localeData()._week;return Se(this.year(),e.dow,e.doy)}function Nn(e,t,n,r,i){var o;return null==e?_e(this,r,i).year:(o=Se(e,r,i),t>o&&(t=o),En.call(this,e,t,n,r,i))}function En(e,t,n,r,i){var o=ke(e,t,n,r,i),a=xe(o.year,0,o.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}function jn(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Wn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function Bn(e,t){t[ci]=w(1e3*("0."+e))}function Hn(){return this._isUTC?"UTC":""}function zn(){return this._isUTC?"Coordinated Universal Time":""}function Yn(e){return xt(1e3*e)}function Vn(){return xt.apply(null,arguments).parseZone()}function qn(e){return e}function Un(e,t,n,r){var i=nt(),o=h().set(r,t);return i[n](o,e)}function Gn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return Un(e,t,n,"month");var r,i=[];for(r=0;r<12;r++)i[r]=Un(e,r,n,"month");return i}function $n(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var i=nt(),o=e?i._week.dow:0;if(null!=n)return Un(t,(n+o)%7,r,"day");var a,l=[];for(a=0;a<7;a++)l[a]=Un(t,(a+o)%7,r,"day");return l}function Xn(e,t){return Gn(e,t,"months")}function Zn(e,t){return Gn(e,t,"monthsShort")}function Jn(e,t,n){return $n(e,t,n,"weekdays")}function Kn(e,t,n){return $n(e,t,n,"weekdaysShort")}function Qn(e,t,n){return $n(e,t,n,"weekdaysMin")}function er(){var e=this._data;return this._milliseconds=ro(this._milliseconds),this._days=ro(this._days),this._months=ro(this._months),e.milliseconds=ro(e.milliseconds),e.seconds=ro(e.seconds),e.minutes=ro(e.minutes),e.hours=ro(e.hours),e.months=ro(e.months),e.years=ro(e.years),this}function tr(e,t,n,r){var i=qt(t,n);return e._milliseconds+=r*i._milliseconds,e._days+=r*i._days,e._months+=r*i._months,e._bubble()}function nr(e,t){return tr(this,e,t,1)}function rr(e,t){return tr(this,e,t,-1)}function ir(e){return e<0?Math.floor(e):Math.ceil(e)}function or(){var e,t,n,r,i,o=this._milliseconds,a=this._days,s=this._months,l=this._data;return o>=0&&a>=0&&s>=0||o<=0&&a<=0&&s<=0||(o+=864e5*ir(sr(s)+a),a=0,s=0),l.milliseconds=o%1e3,e=x(o/1e3),l.seconds=e%60,t=x(e/60),l.minutes=t%60,n=x(t/60),l.hours=n%24,a+=x(n/24),i=x(ar(a)),s+=i,a-=ir(sr(i)),r=x(s/12),s%=12,l.days=a,l.months=s,l.years=r,this}function ar(e){return 4800*e/146097}function sr(e){return 146097*e/4800}function lr(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=E(e))||"year"===e)return t=this._days+r/864e5,n=this._months+ar(t),"month"===e?n:n/12;switch(t=this._days+Math.round(sr(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}}function ur(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*w(this._months/12):NaN}function cr(e){return function(){return this.as(e)}}function dr(e){return e=E(e),this.isValid()?this[e+"s"]():NaN}function hr(e){return function(){return this.isValid()?this._data[e]:NaN}}function fr(){return x(this.days()/7)}function pr(e,t,n,r,i){return i.relativeTime(t||1,!!n,e,r)}function gr(e,t,n){var r=qt(e).abs(),i=xo(r.as("s")),o=xo(r.as("m")),a=xo(r.as("h")),s=xo(r.as("d")),l=xo(r.as("M")),u=xo(r.as("y")),c=i<=wo.ss&&["s",i]||i<wo.s&&["ss",i]||o<=1&&["m"]||o<wo.m&&["mm",o]||a<=1&&["h"]||a<wo.h&&["hh",a]||s<=1&&["d"]||s<wo.d&&["dd",s]||l<=1&&["M"]||l<wo.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=n,pr.apply(null,c)}function mr(e){return void 0===e?xo:"function"==typeof e&&(xo=e,!0)}function vr(e,t){return void 0!==wo[e]&&(void 0===t?wo[e]:(wo[e]=t,"s"===e&&(wo.ss=t-1),!0))}function yr(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=gr(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function br(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r=ko(this._milliseconds)/1e3,i=ko(this._days),o=ko(this._months);e=x(r/60),t=x(e/60),r%=60,e%=60,n=x(o/12),o%=12;var a=n,s=o,l=i,u=t,c=e,d=r,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(a?a+"Y":"")+(s?s+"M":"")+(l?l+"D":"")+(u||c||d?"T":"")+(u?u+"H":"")+(c?c+"M":"")+(d?d+"S":""):"P0D"}var xr,wr;wr=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var kr=wr,_r=n.momentProperties=[],Sr=!1,Cr={};n.suppressDeprecationWarnings=!1,n.deprecationHandler=null;var Mr;Mr=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var Dr,Tr=Mr,Ar={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Or={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Pr=/\d{1,2}/,Fr={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Ir={},Rr={},Lr=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Nr=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Er={},jr={},Wr=/\d/,Br=/\d\d/,Hr=/\d{3}/,zr=/\d{4}/,Yr=/[+-]?\d{6}/,Vr=/\d\d?/,qr=/\d\d\d\d?/,Ur=/\d\d\d\d\d\d?/,Gr=/\d{1,3}/,$r=/\d{1,4}/,Xr=/[+-]?\d{1,6}/,Zr=/\d+/,Jr=/[+-]?\d+/,Kr=/Z|[+-]\d\d:?\d\d/gi,Qr=/Z|[+-]\d\d(?::?\d\d)?/gi,ei=/[+-]?\d+(\.\d{1,3})?/,ti=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,ni={},ri={},ii=0,oi=1,ai=2,si=3,li=4,ui=5,ci=6,di=7,hi=8;Dr=Array.prototype.indexOf?Array.prototype.indexOf:function(e){
var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};var fi=Dr;G("M",["MM",2],"Mo",function(){return this.month()+1}),G("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),G("MMMM",0,0,function(e){return this.localeData().months(this,e)}),N("month","M"),W("month",8),K("M",Vr),K("MM",Vr,Br),K("MMM",function(e,t){return t.monthsShortRegex(e)}),K("MMMM",function(e,t){return t.monthsRegex(e)}),ne(["M","MM"],function(e,t){t[oi]=w(e)-1}),ne(["MMM","MMMM"],function(e,t,n,r){var i=n._locale.monthsParse(e,r,n._strict);null!=i?t[oi]=i:p(n).invalidMonth=e});var pi=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,gi="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),mi="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),vi=ti,yi=ti;G("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),G(0,["YY",2],0,function(){return this.year()%100}),G(0,["YYYY",4],0,"year"),G(0,["YYYYY",5],0,"year"),G(0,["YYYYYY",6,!0],0,"year"),N("year","y"),W("year",1),K("Y",Jr),K("YY",Vr,Br),K("YYYY",$r,zr),K("YYYYY",Xr,Yr),K("YYYYYY",Xr,Yr),ne(["YYYYY","YYYYYY"],ii),ne("YYYY",function(e,t){t[ii]=2===e.length?n.parseTwoDigitYear(e):w(e)}),ne("YY",function(e,t){t[ii]=n.parseTwoDigitYear(e)}),ne("Y",function(e,t){t[ii]=parseInt(e,10)}),n.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var bi=H("FullYear",!0);G("w",["ww",2],"wo","week"),G("W",["WW",2],"Wo","isoWeek"),N("week","w"),N("isoWeek","W"),W("week",5),W("isoWeek",5),K("w",Vr),K("ww",Vr,Br),K("W",Vr),K("WW",Vr,Br),re(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=w(e)});var xi={dow:0,doy:6};G("d",0,"do","day"),G("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),G("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),G("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),G("e",0,0,"weekday"),G("E",0,0,"isoWeekday"),N("day","d"),N("weekday","e"),N("isoWeekday","E"),W("day",11),W("weekday",11),W("isoWeekday",11),K("d",Vr),K("e",Vr),K("E",Vr),K("dd",function(e,t){return t.weekdaysMinRegex(e)}),K("ddd",function(e,t){return t.weekdaysShortRegex(e)}),K("dddd",function(e,t){return t.weekdaysRegex(e)}),re(["dd","ddd","dddd"],function(e,t,n,r){var i=n._locale.weekdaysParse(e,r,n._strict);null!=i?t.d=i:p(n).invalidWeekday=e}),re(["d","e","E"],function(e,t,n,r){t[r]=w(e)});var wi="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ki="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),_i="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Si=ti,Ci=ti,Mi=ti;G("H",["HH",2],0,"hour"),G("h",["hh",2],0,Ve),G("k",["kk",2],0,qe),G("hmm",0,0,function(){return""+Ve.apply(this)+U(this.minutes(),2)}),G("hmmss",0,0,function(){return""+Ve.apply(this)+U(this.minutes(),2)+U(this.seconds(),2)}),G("Hmm",0,0,function(){return""+this.hours()+U(this.minutes(),2)}),G("Hmmss",0,0,function(){return""+this.hours()+U(this.minutes(),2)+U(this.seconds(),2)}),Ue("a",!0),Ue("A",!1),N("hour","h"),W("hour",13),K("a",Ge),K("A",Ge),K("H",Vr),K("h",Vr),K("k",Vr),K("HH",Vr,Br),K("hh",Vr,Br),K("kk",Vr,Br),K("hmm",qr),K("hmmss",Ur),K("Hmm",qr),K("Hmmss",Ur),ne(["H","HH"],si),ne(["k","kk"],function(e,t,n){var r=w(e);t[si]=24===r?0:r}),ne(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ne(["h","hh"],function(e,t,n){t[si]=w(e),p(n).bigHour=!0}),ne("hmm",function(e,t,n){var r=e.length-2;t[si]=w(e.substr(0,r)),t[li]=w(e.substr(r)),p(n).bigHour=!0}),ne("hmmss",function(e,t,n){var r=e.length-4,i=e.length-2;t[si]=w(e.substr(0,r)),t[li]=w(e.substr(r,2)),t[ui]=w(e.substr(i)),p(n).bigHour=!0}),ne("Hmm",function(e,t,n){var r=e.length-2;t[si]=w(e.substr(0,r)),t[li]=w(e.substr(r))}),ne("Hmmss",function(e,t,n){var r=e.length-4,i=e.length-2;t[si]=w(e.substr(0,r)),t[li]=w(e.substr(r,2)),t[ui]=w(e.substr(i))});var Di,Ti=/[ap]\.?m?\.?/i,Ai=H("Hours",!0),Oi={calendar:Ar,longDateFormat:Or,invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:Pr,relativeTime:Fr,months:gi,monthsShort:mi,week:xi,weekdays:wi,weekdaysMin:_i,weekdaysShort:ki,meridiemParse:Ti},Pi={},Fi={},Ii=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ri=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Li=/Z|[+-]\d\d(?::?\d\d)?/,Ni=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Ei=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ji=/^\/?Date\((\-?\d+)/i,Wi=/^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d?\d\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(?:\d\d)?\d\d\s)(\d\d:\d\d)(\:\d\d)?(\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\d{4}))$/;n.createFromInputFallback=S("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),n.ISO_8601=function(){},n.RFC_2822=function(){};var Bi=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=xt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:m()}),Hi=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=xt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:m()}),zi=function(){return Date.now?Date.now():+new Date},Yi=["year","quarter","month","week","day","hour","minute","second","millisecond"];Ot("Z",":"),Ot("ZZ",""),K("Z",Qr),K("ZZ",Qr),ne(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Pt(Qr,e)});var Vi=/([\+\-]|\d\d)/gi;n.updateOffset=function(){};var qi=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ui=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;qt.fn=Dt.prototype,qt.invalid=Mt;var Gi=Xt(1,"add"),$i=Xt(-1,"subtract");n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",n.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Xi=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});G(0,["gg",2],0,function(){return this.weekYear()%100}),G(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Pn("gggg","weekYear"),Pn("ggggg","weekYear"),Pn("GGGG","isoWeekYear"),Pn("GGGGG","isoWeekYear"),N("weekYear","gg"),N("isoWeekYear","GG"),W("weekYear",1),W("isoWeekYear",1),K("G",Jr),K("g",Jr),K("GG",Vr,Br),K("gg",Vr,Br),K("GGGG",$r,zr),K("gggg",$r,zr),K("GGGGG",Xr,Yr),K("ggggg",Xr,Yr),re(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=w(e)}),re(["gg","GG"],function(e,t,r,i){t[i]=n.parseTwoDigitYear(e)}),G("Q",0,"Qo","quarter"),N("quarter","Q"),W("quarter",7),K("Q",Wr),ne("Q",function(e,t){t[oi]=3*(w(e)-1)}),G("D",["DD",2],"Do","date"),N("date","D"),W("date",9),K("D",Vr),K("DD",Vr,Br),K("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),ne(["D","DD"],ai),ne("Do",function(e,t){t[ai]=w(e.match(Vr)[0],10)});var Zi=H("Date",!0);G("DDD",["DDDD",3],"DDDo","dayOfYear"),N("dayOfYear","DDD"),W("dayOfYear",4),K("DDD",Gr),K("DDDD",Hr),ne(["DDD","DDDD"],function(e,t,n){n._dayOfYear=w(e)}),G("m",["mm",2],0,"minute"),N("minute","m"),W("minute",14),K("m",Vr),K("mm",Vr,Br),ne(["m","mm"],li);var Ji=H("Minutes",!1);G("s",["ss",2],0,"second"),N("second","s"),W("second",15),K("s",Vr),K("ss",Vr,Br),ne(["s","ss"],ui);var Ki=H("Seconds",!1);G("S",0,0,function(){return~~(this.millisecond()/100)}),G(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),G(0,["SSS",3],0,"millisecond"),G(0,["SSSS",4],0,function(){return 10*this.millisecond()}),G(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),G(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),G(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),G(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),G(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),N("millisecond","ms"),W("millisecond",16),K("S",Gr,Wr),K("SS",Gr,Br),K("SSS",Gr,Hr);var Qi;for(Qi="SSSS";Qi.length<=9;Qi+="S")K(Qi,Zr);for(Qi="S";Qi.length<=9;Qi+="S")ne(Qi,Bn);var eo=H("Milliseconds",!1);G("z",0,0,"zoneAbbr"),G("zz",0,0,"zoneName");var to=y.prototype;to.add=Gi,to.calendar=Kt,to.clone=Qt,to.diff=sn,to.endOf=xn,to.format=hn,to.from=fn,to.fromNow=pn,to.to=gn,to.toNow=mn,to.get=V,to.invalidAt=An,to.isAfter=en,to.isBefore=tn,to.isBetween=nn,to.isSame=rn,to.isSameOrAfter=on,to.isSameOrBefore=an,to.isValid=Dn,to.lang=Xi,to.locale=vn,to.localeData=yn,to.max=Hi,to.min=Bi,to.parsingFlags=Tn,to.set=q,to.startOf=bn,to.subtract=$i,to.toArray=Sn,to.toObject=Cn,to.toDate=_n,to.toISOString=cn,to.inspect=dn,to.toJSON=Mn,to.toString=un,to.unix=kn,to.valueOf=wn,to.creationData=On,to.year=bi,to.isLeapYear=ye,to.weekYear=Fn,to.isoWeekYear=In,to.quarter=to.quarters=jn,to.month=de,to.daysInMonth=he,to.week=to.weeks=Te,to.isoWeek=to.isoWeeks=Ae,to.weeksInYear=Ln,to.isoWeeksInYear=Rn,to.date=Zi,to.day=to.days=Ee,to.weekday=je,to.isoWeekday=We,to.dayOfYear=Wn,to.hour=to.hours=Ai,to.minute=to.minutes=Ji,to.second=to.seconds=Ki,to.millisecond=to.milliseconds=eo,to.utcOffset=Rt,to.utc=Nt,to.local=Et,to.parseZone=jt,to.hasAlignedHourOffset=Wt,to.isDST=Bt,to.isLocal=zt,to.isUtcOffset=Yt,to.isUtc=Vt,to.isUTC=Vt,to.zoneAbbr=Hn,to.zoneName=zn,to.dates=S("dates accessor is deprecated. Use date instead.",Zi),to.months=S("months accessor is deprecated. Use month instead",de),to.years=S("years accessor is deprecated. Use year instead",bi),to.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Lt),to.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Ht);var no=A.prototype;no.calendar=O,no.longDateFormat=P,no.invalidDate=F,no.ordinal=I,no.preparse=qn,no.postformat=qn,no.relativeTime=R,no.pastFuture=L,no.set=D,no.months=ae,no.monthsShort=se,no.monthsParse=ue,no.monthsRegex=pe,no.monthsShortRegex=fe,no.week=Ce,no.firstDayOfYear=De,no.firstDayOfWeek=Me,no.weekdays=Fe,no.weekdaysMin=Re,no.weekdaysShort=Ie,no.weekdaysParse=Ne,no.weekdaysRegex=Be,no.weekdaysShortRegex=He,no.weekdaysMinRegex=ze,no.isPM=$e,no.meridiem=Xe,Qe("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===w(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),n.lang=S("moment.lang is deprecated. Use moment.locale instead.",Qe),n.langData=S("moment.langData is deprecated. Use moment.localeData instead.",nt);var ro=Math.abs,io=cr("ms"),oo=cr("s"),ao=cr("m"),so=cr("h"),lo=cr("d"),uo=cr("w"),co=cr("M"),ho=cr("y"),fo=hr("milliseconds"),po=hr("seconds"),go=hr("minutes"),mo=hr("hours"),vo=hr("days"),yo=hr("months"),bo=hr("years"),xo=Math.round,wo={ss:44,s:45,m:45,h:22,d:26,M:11},ko=Math.abs,_o=Dt.prototype;return _o.isValid=Ct,_o.abs=er,_o.add=nr,_o.subtract=rr,_o.as=lr,_o.asMilliseconds=io,_o.asSeconds=oo,_o.asMinutes=ao,_o.asHours=so,_o.asDays=lo,_o.asWeeks=uo,_o.asMonths=co,_o.asYears=ho,_o.valueOf=ur,_o._bubble=or,_o.get=dr,_o.milliseconds=fo,_o.seconds=po,_o.minutes=go,_o.hours=mo,_o.days=vo,_o.weeks=fr,_o.months=yo,_o.years=bo,_o.humanize=yr,_o.toISOString=br,_o.toString=br,_o.toJSON=br,_o.locale=vn,_o.localeData=yn,_o.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",br),_o.lang=Xi,G("X",0,0,"unix"),G("x",0,0,"valueOf"),K("x",Jr),K("X",ei),ne("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ne("x",function(e,t,n){n._d=new Date(w(e))}),n.version="2.18.1",function(e){xr=e}(xt),n.fn=to,n.min=kt,n.max=_t,n.now=zi,n.utc=h,n.unix=Yn,n.months=Xn,n.isDate=l,n.locale=Qe,n.invalid=m,n.duration=qt,n.isMoment=b,n.weekdays=Jn,n.parseZone=Vn,n.localeData=nt,n.isDuration=Tt,n.monthsShort=Zn,n.weekdaysMin=Qn,n.defineLocale=et,n.updateLocale=tt,n.locales=rt,n.weekdaysShort=Kn,n.normalizeUnits=E,n.relativeTimeRounding=mr,n.relativeTimeThreshold=vr,n.calendarFormat=Jt,n.prototype=to,n})},{}],59:[function(e,t,n){(function(){var n,r,i,o,a,s=function(e,t){return function(){return e.apply(t,arguments)}},l=[].slice,u={}.hasOwnProperty,c=function(e,t){function n(){this.constructor=e}for(var r in t)u.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},d=[].indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};n={options:["prefix","templateDelimiters","rootInterface","preloadData","handler","executeFunctions"],extensions:["binders","formatters","components","adapters"],public:{binders:{},components:{},formatters:{},adapters:{},prefix:"rv",templateDelimiters:["{","}"],rootInterface:".",preloadData:!0,executeFunctions:!1,iterationAlias:function(e){return"%"+e+"%"},handler:function(e,t,n){return this.call(e,t,n.view.models)},configure:function(e){var t,r,i,o;null==e&&(e={});for(i in e)if(o=e[i],"binders"===i||"components"===i||"formatters"===i||"adapters"===i)for(r in o)t=o[r],n[i][r]=t;else n.public[i]=o},bind:function(e,t,r){var i;return null==t&&(t={}),null==r&&(r={}),i=new n.View(e,t,r),i.bind(),i},init:function(e,t,r){var i,o,a;if(null==r&&(r={}),null==t&&(t=document.createElement("div")),e=n.public.components[e],(o=e.template.call(this,t))instanceof HTMLElement){for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(o)}else t.innerHTML=o;return i=e.initialize.call(this,t,r),a=new n.View(t,i),a.bind(),a}}},window.jQuery||window.$?(i=window.jQuery||window.$,a="on"in i.prototype?["on","off"]:["bind","unbind"],r=a[0],o=a[1],n.Util={bindEvent:function(e,t,n){return i(e)[r](t,n)},unbindEvent:function(e,t,n){return i(e)[o](t,n)},getInputValue:function(e){var t;return t=i(e),"checkbox"===t.attr("type")?t.is(":checked"):t.val()}}):n.Util={bindEvent:function(){return"addEventListener"in window?function(e,t,n){return e.addEventListener(t,n,!1)}:function(e,t,n){return e.attachEvent("on"+t,n)}}(),unbindEvent:function(){return"removeEventListener"in window?function(e,t,n){return e.removeEventListener(t,n,!1)}:function(e,t,n){return e.detachEvent("on"+t,n)}}(),getInputValue:function(e){var t,n,r,i;if("checkbox"===e.type)return e.checked;if("select-multiple"===e.type){for(i=[],n=0,r=e.length;n<r;n++)t=e[n],t.selected&&i.push(t.value);return i}return e.value}},n.TypeParser=function(){function e(){}return e.types={primitive:0,keypath:1},e.parse=function(e){return/^'.*'$|^".*"$/.test(e)?{type:this.types.primitive,value:e.slice(1,-1)}:"true"===e?{type:this.types.primitive,value:!0}:"false"===e?{type:this.types.primitive,value:!1}:"null"===e?{type:this.types.primitive,value:null}:"undefined"===e?{type:this.types.primitive,value:void 0}:""===e?{type:this.types.primitive,value:void 0}:!1===isNaN(Number(e))?{type:this.types.primitive,value:Number(e)}:{type:this.types.keypath,value:e}},e}(),n.TextTemplateParser=function(){function e(){}return e.types={text:0,binding:1},e.parse=function(e,t){var n,r,i,o,a,s,l;for(s=[],o=e.length,n=0,r=0;r<o;){if((n=e.indexOf(t[0],r))<0){s.push({type:this.types.text,value:e.slice(r)});break}if(n>0&&r<n&&s.push({type:this.types.text,value:e.slice(r,n)}),r=n+t[0].length,(n=e.indexOf(t[1],r))<0){a=e.slice(r-t[1].length),i=s[s.length-1],(null!=i?i.type:void 0)===this.types.text?i.value+=a:s.push({type:this.types.text,value:a});break}l=e.slice(r,n).trim(),s.push({type:this.types.binding,value:l}),r=n+t[1].length}return s},e}(),n.View=function(){function e(e,t,r){var i,o,a,l,u,c,d,h,f,p,g,m,v;for(this.els=e,this.models=t,null==r&&(r={}),this.update=s(this.update,this),this.publish=s(this.publish,this),this.sync=s(this.sync,this),this.unbind=s(this.unbind,this),this.bind=s(this.bind,this),this.select=s(this.select,this),this.traverse=s(this.traverse,this),this.build=s(this.build,this),this.buildBinding=s(this.buildBinding,this),this.bindingRegExp=s(this.bindingRegExp,this),this.options=s(this.options,this),this.els.jquery||this.els instanceof Array||(this.els=[this.els]),f=n.extensions,u=0,d=f.length;u<d;u++){if(o=f[u],this[o]={},r[o]){p=r[o];for(i in p)a=p[i],this[o][i]=a}g=n.public[o];for(i in g)a=g[i],null==(l=this[o])[i]&&(l[i]=a)}for(m=n.options,c=0,h=m.length;c<h;c++)o=m[c],this[o]=null!=(v=r[o])?v:n.public[o];this.build()}return e.prototype.options=function(){var e,t,r,i,o;for(t={},o=n.extensions.concat(n.options),r=0,i=o.length;r<i;r++)e=o[r],t[e]=this[e];return t},e.prototype.bindingRegExp=function(){return new RegExp("^"+this.prefix+"-")},e.prototype.buildBinding=function(e,t,r,i){var o,a,s,l,u,c,d;return u={},d=function(){var e,t,n,r;for(n=i.match(/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g),r=[],e=0,t=n.length;e<t;e++)c=n[e],r.push(c.trim());return r}(),o=function(){var e,t,n,r;for(n=d.shift().split("<"),r=[],e=0,t=n.length;e<t;e++)a=n[e],r.push(a.trim());return r}(),l=o.shift(),u.formatters=d,(s=o.shift())&&(u.dependencies=s.split(/\s+/)),this.bindings.push(new n[e](this,t,r,l,u))},e.prototype.build=function(){var e,t,r,i,o;for(this.bindings=[],t=function(e){return function(r){var i,o,a,s,l,u,c,d,h,f,p,g,m;if(3===r.nodeType){if(l=n.TextTemplateParser,(a=e.templateDelimiters)&&(d=l.parse(r.data,a)).length&&(1!==d.length||d[0].type!==l.types.text)){for(h=0,p=d.length;h<p;h++)c=d[h],u=document.createTextNode(c.value),r.parentNode.insertBefore(u,r),1===c.type&&e.buildBinding("TextBinding",u,null,c.value);r.parentNode.removeChild(r)}}else 1===r.nodeType&&(i=e.traverse(r));if(!i)for(m=function(){var e,t,n,i;for(n=r.childNodes,i=[],e=0,t=n.length;e<t;e++)s=n[e],i.push(s);return i}(),f=0,g=m.length;f<g;f++)o=m[f],t(o)}}(this),o=this.els,r=0,i=o.length;r<i;r++)e=o[r],t(e);this.bindings.sort(function(e,t){var n,r;return((null!=(n=t.binder)?n.priority:void 0)||0)-((null!=(r=e.binder)?r.priority:void 0)||0)})},e.prototype.traverse=function(e){var t,r,i,o,a,s,l,u,c,d,h,f,p,g,m,v;for(o=this.bindingRegExp(),a="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,g=e.attributes,d=0,f=g.length;d<f;d++)if(t=g[d],o.test(t.name)){if(u=t.name.replace(o,""),!(i=this.binders[u])){m=this.binders;for(s in m)c=m[s],"*"!==s&&-1!==s.indexOf("*")&&(l=new RegExp("^"+s.replace(/\*/g,".+")+"$"),l.test(u)&&(i=c))}i||(i=this.binders["*"]),i.block&&(a=!0,r=[t])}for(v=r||e.attributes,h=0,p=v.length;h<p;h++)t=v[h],o.test(t.name)&&(u=t.name.replace(o,""),this.buildBinding("Binding",e,u,t.value));return a||(u=e.nodeName.toLowerCase(),this.components[u]&&!e._bound&&(this.bindings.push(new n.ComponentBinding(this,e,u)),a=!0)),a},e.prototype.select=function(e){var t,n,r,i,o;for(i=this.bindings,o=[],n=0,r=i.length;n<r;n++)t=i[n],e(t)&&o.push(t);return o},e.prototype.bind=function(){var e,t,n,r;for(r=this.bindings,t=0,n=r.length;t<n;t++)e=r[t],e.bind()},e.prototype.unbind=function(){var e,t,n,r;for(r=this.bindings,t=0,n=r.length;t<n;t++)e=r[t],e.unbind()},e.prototype.sync=function(){var e,t,n,r;for(r=this.bindings,t=0,n=r.length;t<n;t++)e=r[t],"function"==typeof e.sync&&e.sync()},e.prototype.publish=function(){var e,t,n,r;for(r=this.select(function(e){var t;return null!=(t=e.binder)?t.publishes:void 0}),t=0,n=r.length;t<n;t++)e=r[t],e.publish()},e.prototype.update=function(e){var t,n,r,i,o,a;null==e&&(e={});for(n in e)r=e[n],this.models[n]=r;for(a=this.bindings,i=0,o=a.length;i<o;i++)t=a[i],"function"==typeof t.update&&t.update(e)},e}(),n.Binding=function(){function e(e,t,n,r,i){this.view=e,this.el=t,this.type=n,this.keypath=r,this.options=null!=i?i:{},this.getValue=s(this.getValue,this),this.update=s(this.update,this),this.unbind=s(this.unbind,this),this.bind=s(this.bind,this),this.publish=s(this.publish,this),this.sync=s(this.sync,this),this.set=s(this.set,this),this.eventHandler=s(this.eventHandler,this),this.formattedValue=s(this.formattedValue,this),this.parseFormatterArguments=s(this.parseFormatterArguments,this),this.parseTarget=s(this.parseTarget,this),this.observe=s(this.observe,this),this.setBinder=s(this.setBinder,this),this.formatters=this.options.formatters||[],this.dependencies=[],this.formatterObservers={},this.model=void 0,this.setBinder()}return e.prototype.setBinder=function(){var e,t,n,r;if(!(this.binder=this.view.binders[this.type])){r=this.view.binders;for(e in r)n=r[e],"*"!==e&&-1!==e.indexOf("*")&&(t=new RegExp("^"+e.replace(/\*/g,".+")+"$"),t.test(this.type)&&(this.binder=n,this.args=new RegExp("^"+e.replace(/\*/g,"(.+)")+"$").exec(this.type),this.args.shift()))}if(this.binder||(this.binder=this.view.binders["*"]),this.binder instanceof Function)return this.binder={routine:this.binder}},e.prototype.observe=function(e,t,r){return n.sightglass(e,t,r,{root:this.view.rootInterface,adapters:this.view.adapters})},e.prototype.parseTarget=function(){var e;return e=n.TypeParser.parse(this.keypath),e.type===n.TypeParser.types.primitive?this.value=e.value:(this.observer=this.observe(this.view.models,this.keypath,this.sync),this.model=this.observer.target)},e.prototype.parseFormatterArguments=function(e,t){var r,i,o,a,s,l,u;for(e=function(){var t,r,o;for(o=[],t=0,r=e.length;t<r;t++)i=e[t],o.push(n.TypeParser.parse(i));return o}(),a=[],r=l=0,u=e.length;l<u;r=++l)i=e[r],a.push(i.type===n.TypeParser.types.primitive?i.value:((s=this.formatterObservers)[t]||(s[t]={}),(o=this.formatterObservers[t][r])||(o=this.observe(this.view.models,i.value,this.sync),this.formatterObservers[t][r]=o),o.value()));return a},e.prototype.formattedValue=function(e){var t,n,r,i,o,a,s,u,c;for(u=this.formatters,n=a=0,s=u.length;a<s;n=++a)r=u[n],t=r.match(/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g),i=t.shift(),r=this.view.formatters[i],o=this.parseFormatterArguments(t,n),(null!=r?r.read:void 0)instanceof Function?e=(c=r.read).call.apply(c,[this.model,e].concat(l.call(o))):r instanceof Function&&(e=r.call.apply(r,[this.model,e].concat(l.call(o))));return e},e.prototype.eventHandler=function(e){var t,n;return n=(t=this).view.handler,function(r){return n.call(e,this,r,t)}},e.prototype.set=function(e){var t;return e=e instanceof Function&&!this.binder.function&&n.public.executeFunctions?this.formattedValue(e.call(this.model)):this.formattedValue(e),null!=(t=this.binder.routine)?t.call(this,this.el,e):void 0},e.prototype.sync=function(){var e,t;return this.set(function(){var n,r,i,o,a,s,l;if(this.observer){if(this.model!==this.observer.target){for(a=this.dependencies,n=0,i=a.length;n<i;n++)t=a[n],t.unobserve();if(this.dependencies=[],null!=(this.model=this.observer.target)&&(null!=(s=this.options.dependencies)?s.length:void 0))for(l=this.options.dependencies,r=0,o=l.length;r<o;r++)e=l[r],t=this.observe(this.model,e,this.sync),this.dependencies.push(t)}return this.observer.value()}return this.value}.call(this))},e.prototype.publish=function(){var e,t,n,r,i,o,a,s,u,c,d,h,f;if(this.observer){for(s=this.getValue(this.el),o=this.formatters.length-1,d=this.formatters.slice(0).reverse(),n=u=0,c=d.length;u<c;n=++u)r=d[n],t=o-n,e=r.split(/\s+/),i=e.shift(),a=this.parseFormatterArguments(e,t),(null!=(h=this.view.formatters[i])?h.publish:void 0)&&(s=(f=this.view.formatters[i]).publish.apply(f,[s].concat(l.call(a))));return this.observer.setValue(s)}},e.prototype.bind=function(){var e,t,n,r,i,o,a;if(this.parseTarget(),null!=(i=this.binder.bind)&&i.call(this,this.el),null!=this.model&&(null!=(o=this.options.dependencies)?o.length:void 0))for(a=this.options.dependencies,n=0,r=a.length;n<r;n++)e=a[n],t=this.observe(this.model,e,this.sync),this.dependencies.push(t);if(this.view.preloadData)return this.sync()},e.prototype.unbind=function(){var e,t,n,r,i,o,a,s,l,u;for(null!=(a=this.binder.unbind)&&a.call(this,this.el),null!=(s=this.observer)&&s.unobserve(),l=this.dependencies,i=0,o=l.length;i<o;i++)r=l[i],r.unobserve();this.dependencies=[],u=this.formatterObservers;for(n in u){t=u[n];for(e in t)r=t[e],r.unobserve()}return this.formatterObservers={}},e.prototype.update=function(e){var t,n;return null==e&&(e={}),this.model=null!=(t=this.observer)?t.target:void 0,null!=(n=this.binder.update)?n.call(this,e):void 0},e.prototype.getValue=function(e){return this.binder&&null!=this.binder.getValue?this.binder.getValue.call(this,e):n.Util.getInputValue(e)},e}(),n.ComponentBinding=function(e){function t(e,t,r){var i,o,a,l,u,c,h,f;for(this.view=e,this.el=t,this.type=r,this.unbind=s(this.unbind,this),this.bind=s(this.bind,this),this.locals=s(this.locals,this),this.component=this.view.components[this.type],this.static={},this.observers={},this.upstreamObservers={},o=e.bindingRegExp(),h=this.el.attributes||[],u=0,c=h.length;u<c;u++)i=h[u],o.test(i.name)||(a=this.camelCase(i.name),l=n.TypeParser.parse(i.value),d.call(null!=(f=this.component.static)?f:[],a)>=0?this.static[a]=i.value:l.type===n.TypeParser.types.primitive?this.static[a]=l.value:this.observers[a]=i.value)}return c(t,e),t.prototype.sync=function(){},t.prototype.update=function(){},t.prototype.publish=function(){},t.prototype.locals=function(){var e,t,n,r,i,o;n={},i=this.static;for(e in i)r=i[e],n[e]=r;o=this.observers;for(e in o)t=o[e],n[e]=t.value();return n},t.prototype.camelCase=function(e){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})},t.prototype.bind=function(){var e,t,r,i,o,a,s,l,u,c,d,h,f,p,g,m,v,y,b,x;if(!this.bound){p=this.observers;for(t in p)r=p[t],this.observers[t]=this.observe(this.view.models,r,function(e){return function(t){return function(){return e.componentView.models[t]=e.observers[t].value()}}}(this).call(this,t));this.bound=!0}if(null!=this.componentView)this.componentView.bind();else{for(this.el.innerHTML=this.component.template.call(this),s=this.component.initialize.call(this,this.el,this.locals()),this.el._bound=!0,a={},g=n.extensions,c=0,h=g.length;c<h;c++){if(o=g[c],a[o]={},this.component[o]){m=this.component[o];for(e in m)l=m[e],a[o][e]=l}v=this.view[o];for(e in v)l=v[e],null==(u=a[o])[e]&&(u[e]=l)}for(y=n.options,d=0,f=y.length;d<f;d++)o=y[d],a[o]=null!=(b=this.component[o])?b:this.view[o];this.componentView=new n.View(Array.prototype.slice.call(this.el.childNodes),s,a),this.componentView.bind(),x=this.observers;for(t in x)i=x[t],this.upstreamObservers[t]=this.observe(this.componentView.models,t,function(e){return function(t,n){return function(){return n.setValue(e.componentView.models[t])}}}(this).call(this,t,i))}},t.prototype.unbind=function(){var e,t,n,r,i;n=this.upstreamObservers;for(e in n)t=n[e],t.unobserve();r=this.observers;for(e in r)t=r[e],t.unobserve();return null!=(i=this.componentView)?i.unbind.call(this):void 0},t}(n.Binding),n.TextBinding=function(e){function t(e,t,n,r,i){this.view=e,this.el=t,this.type=n,this.keypath=r,this.options=null!=i?i:{},this.sync=s(this.sync,this),this.formatters=this.options.formatters||[],this.dependencies=[],this.formatterObservers={}}return c(t,e),t.prototype.binder={routine:function(e,t){return e.data=null!=t?t:""}},t.prototype.sync=function(){return t.__super__.sync.apply(this,arguments)},t}(n.Binding),n.public.binders.text=function(e,t){return null!=e.textContent?e.textContent=null!=t?t:"":e.innerText=null!=t?t:""},n.public.binders.html=function(e,t){return e.innerHTML=null!=t?t:""},n.public.binders.show=function(e,t){return e.style.display=t?"":"none"},n.public.binders.hide=function(e,t){return e.style.display=t?"none":""},n.public.binders.enabled=function(e,t){return e.disabled=!t},n.public.binders.disabled=function(e,t){return e.disabled=!!t},n.public.binders.checked={publishes:!0,priority:2e3,bind:function(e){return n.Util.bindEvent(e,"change",this.publish)},unbind:function(e){return n.Util.unbindEvent(e,"change",this.publish)},routine:function(e,t){var n;return"radio"===e.type?e.checked=(null!=(n=e.value)?n.toString():void 0)===(null!=t?t.toString():void 0):e.checked=!!t}},n.public.binders.unchecked={publishes:!0,priority:2e3,bind:function(e){return n.Util.bindEvent(e,"change",this.publish)},unbind:function(e){return n.Util.unbindEvent(e,"change",this.publish)},routine:function(e,t){var n;return"radio"===e.type?e.checked=(null!=(n=e.value)?n.toString():void 0)!==(null!=t?t.toString():void 0):e.checked=!t}},n.public.binders.value={publishes:!0,priority:3e3,bind:function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return this.event="SELECT"===e.tagName?"change":"input",n.Util.bindEvent(e,this.event,this.publish)},unbind:function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return n.Util.unbindEvent(e,this.event,this.publish)},routine:function(e,t){var n,r,o,a,s,l,u;if("INPUT"===e.tagName&&"radio"===e.type)return e.setAttribute("value",t);if(null!=window.jQuery){if(e=i(e),(null!=t?t.toString():void 0)!==(null!=(a=e.val())?a.toString():void 0))return e.val(null!=t?t:"")}else if("select-multiple"===e.type){if(null!=t){for(u=[],r=0,o=e.length;r<o;r++)n=e[r],u.push(n.selected=(s=n.value,d.call(t,s)>=0));return u}}else if((null!=t?t.toString():void 0)!==(null!=(l=e.value)?l.toString():void 0))return e.value=null!=t?t:""}},n.public.binders.if={block:!0,priority:4e3,bind:function(e){var t,n;if(null==this.marker)return t=[this.view.prefix,this.type].join("-").replace("--","-"),n=e.getAttribute(t),this.marker=document.createComment(" rivets: "+this.type+" "+n+" "),this.bound=!1,e.removeAttribute(t),e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)},unbind:function(){if(this.nested)return this.nested.unbind(),this.bound=!1},routine:function(e,t){var r,i,o,a;if(!!t==!this.bound){if(t){o={},a=this.view.models;for(r in a)i=a[r],o[r]=i;return(this.nested||(this.nested=new n.View(e,o,this.view.options()))).bind(),this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.bound=!0}return e.parentNode.removeChild(e),this.nested.unbind(),this.bound=!1}},update:function(e){var t;return null!=(t=this.nested)?t.update(e):void 0}},n.public.binders.unless={block:!0,priority:4e3,bind:function(e){return n.public.binders.if.bind.call(this,e)},unbind:function(){return n.public.binders.if.unbind.call(this)},routine:function(e,t){return n.public.binders.if.routine.call(this,e,!t)},update:function(e){return n.public.binders.if.update.call(this,e)}},n.public.binders["on-*"]={function:!0,priority:1e3,unbind:function(e){if(this.handler)return n.Util.unbindEvent(e,this.args[0],this.handler)},routine:function(e,t){return this.handler&&n.Util.unbindEvent(e,this.args[0],this.handler),n.Util.bindEvent(e,this.args[0],this.handler=this.eventHandler(t))}},n.public.binders["each-*"]={block:!0,priority:4e3,bind:function(e){var t,n,r,i,o;if(null==this.marker)t=[this.view.prefix,this.type].join("-").replace("--","-"),this.marker=document.createComment(" rivets: "+this.type+" "),this.iterated=[],e.removeAttribute(t),e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e);else for(o=this.iterated,r=0,i=o.length;r<i;r++)n=o[r],n.bind()},unbind:function(e){var t,n,r,i;if(null!=this.iterated)for(i=this.iterated,n=0,r=i.length;n<r;n++)t=i[n],t.unbind()},routine:function(e,t){var r,i,o,a,s,l,u,c,d,h,f,p,g,m,v,y,b,x,w;if(l=this.args[0],t=t||[],this.iterated.length>t.length)for(b=Array(this.iterated.length-t.length),f=0,m=b.length;f<m;f++)b[f],h=this.iterated.pop(),h.unbind(),this.marker.parentNode.removeChild(h.els[0]);for(o=p=0,v=t.length;p<v;o=++p)if(s=t[o],i={index:o},i[n.public.iterationAlias(l)]=o,i[l]=s,null==this.iterated[o]){x=this.view.models;for(a in x)s=x[a],null==i[a]&&(i[a]=s)
;c=this.iterated.length?this.iterated[this.iterated.length-1].els[0]:this.marker,u=this.view.options(),u.preloadData=!0,d=e.cloneNode(!0),h=new n.View(d,i,u),h.bind(),this.iterated.push(h),this.marker.parentNode.insertBefore(d,c.nextSibling)}else this.iterated[o].models[l]!==s&&this.iterated[o].update(i);if("OPTION"===e.nodeName)for(w=this.view.bindings,g=0,y=w.length;g<y;g++)r=w[g],r.el===this.marker.parentNode&&"value"===r.type&&r.sync()},update:function(e){var t,n,r,i,o,a,s;t={};for(n in e)r=e[n],n!==this.args[0]&&(t[n]=r);for(s=this.iterated,o=0,a=s.length;o<a;o++)i=s[o],i.update(t)}},n.public.binders["class-*"]=function(e,t){var n;if(n=" "+e.className+" ",!t==(-1!==n.indexOf(" "+this.args[0]+" ")))return e.className=t?e.className+" "+this.args[0]:n.replace(" "+this.args[0]+" "," ").trim()},n.public.binders["*"]=function(e,t){return null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)},n.public.formatters.call=function(){var e,t;return t=arguments[0],e=2<=arguments.length?l.call(arguments,1):[],t.call.apply(t,[this].concat(l.call(e)))},n.public.adapters["."]={id:"_rv",counter:0,weakmap:{},weakReference:function(e){var t,n,r;return e.hasOwnProperty(this.id)||(t=this.counter++,Object.defineProperty(e,this.id,{value:t})),(n=this.weakmap)[r=e[this.id]]||(n[r]={callbacks:{}})},cleanupWeakReference:function(e,t){if(!(Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length))return delete this.weakmap[t]},stubFunction:function(e,t){var n,r,i;return r=e[t],n=this.weakReference(e),i=this.weakmap,e[t]=function(){var t,o,a,s,l,u,c,d,h;a=r.apply(e,arguments),u=n.pointers;for(o in u)for(t=u[o],h=null!=(c=null!=(d=i[o])?d.callbacks[t]:void 0)?c:[],s=0,l=h.length;s<l;s++)(0,h[s])();return a}},observeMutations:function(e,t,n){var r,i,o,a,s,l;if(Array.isArray(e)){if(o=this.weakReference(e),null==o.pointers)for(o.pointers={},i=["push","pop","shift","unshift","sort","reverse","splice"],s=0,l=i.length;s<l;s++)r=i[s],this.stubFunction(e,r);if(null==(a=o.pointers)[t]&&(a[t]=[]),d.call(o.pointers[t],n)<0)return o.pointers[t].push(n)}},unobserveMutations:function(e,t,n){var r,i,o;if(Array.isArray(e)&&null!=e[this.id]&&(i=this.weakmap[e[this.id]])&&(o=i.pointers[t]))return(r=o.indexOf(n))>=0&&o.splice(r,1),o.length||delete i.pointers[t],this.cleanupWeakReference(i,e[this.id])},observe:function(e,t,n){var r,i,o;return r=this.weakReference(e).callbacks,null==r[t]&&(r[t]=[],i=Object.getOwnPropertyDescriptor(e,t),(null!=i?i.get:void 0)||(null!=i?i.set:void 0)||(o=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return o},set:function(n){return function(i){var a,s,l,u,c;if(i!==o&&(n.unobserveMutations(o,e[n.id],t),o=i,s=n.weakmap[e[n.id]])){if(r=s.callbacks,r[t])for(c=r[t].slice(),l=0,u=c.length;l<u;l++)a=c[l],d.call(r[t],a)>=0&&a();return n.observeMutations(i,e[n.id],t)}}}(this)}))),d.call(r[t],n)<0&&r[t].push(n),this.observeMutations(e[t],e[this.id],t)},unobserve:function(e,t,n){var r,i,o;if((o=this.weakmap[e[this.id]])&&(r=o.callbacks[t]))return(i=r.indexOf(n))>=0&&(r.splice(i,1),r.length||(delete o.callbacks[t],this.unobserveMutations(e[t],e[this.id],t))),this.cleanupWeakReference(o,e[this.id])},get:function(e,t){return e[t]},set:function(e,t,n){return e[t]=n}},n.factory=function(e){return n.sightglass=e,n.public._=n,n.public},"object"==typeof(void 0!==t&&null!==t?t.exports:void 0)?t.exports=n.factory(e("sightglass")):"function"==typeof define&&define.amd?define(["sightglass"],function(e){return this.rivets=n.factory(e)}):this.rivets=n.factory(sightglass)}).call(this)},{sightglass:60}],60:[function(e,t,n){(function(){function e(e,t,r,i){return new n(e,t,r,i)}function n(e,t,n,i){this.options=i||{},this.options.adapters=this.options.adapters||{},this.obj=e,this.keypath=t,this.callback=n,this.objectPath=[],this.update=this.update.bind(this),this.parse(),r(this.target=this.realize())&&this.set(!0,this.key,this.target,this.callback)}function r(e){return"object"==typeof e&&null!==e}function i(e){throw new Error("[sightglass] "+e)}e.adapters={},n.tokenize=function(e,t,n){var r,i,o=[],a={i:n,path:""};for(r=0;r<e.length;r++)i=e.charAt(r),~t.indexOf(i)?(o.push(a),a={i:i,path:""}):a.path+=i;return o.push(a),o},n.prototype.parse=function(){var t,r,o=this.interfaces();o.length||i("Must define at least one adapter interface."),~o.indexOf(this.keypath[0])?(t=this.keypath[0],r=this.keypath.substr(1)):(void 0===(t=this.options.root||e.root)&&i("Must define a default root adapter."),r=this.keypath),this.tokens=n.tokenize(r,o,t),this.key=this.tokens.pop()},n.prototype.realize=function(){var e,t=this.obj,n=!1;return this.tokens.forEach(function(i,o){r(t)?(void 0!==this.objectPath[o]?t!==(e=this.objectPath[o])&&(this.set(!1,i,e,this.update),this.set(!0,i,t,this.update),this.objectPath[o]=t):(this.set(!0,i,t,this.update),this.objectPath[o]=t),t=this.get(i,t)):(!1===n&&(n=o),(e=this.objectPath[o])&&this.set(!1,i,e,this.update))},this),!1!==n&&this.objectPath.splice(n),t},n.prototype.update=function(){var e,t;(e=this.realize())!==this.target&&(r(this.target)&&this.set(!1,this.key,this.target,this.callback),r(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,(this.value()instanceof Function||this.value()!==t)&&this.callback())},n.prototype.value=function(){if(r(this.target))return this.get(this.key,this.target)},n.prototype.setValue=function(e){r(this.target)&&this.adapter(this.key).set(this.target,this.key.path,e)},n.prototype.get=function(e,t){return this.adapter(e).get(t,e.path)},n.prototype.set=function(e,t,n,r){var i=e?"observe":"unobserve";this.adapter(t)[i](n,t.path,r)},n.prototype.interfaces=function(){var t=Object.keys(this.options.adapters);return Object.keys(e.adapters).forEach(function(e){~t.indexOf(e)||t.push(e)}),t},n.prototype.adapter=function(t){return this.options.adapters[t.i]||e.adapters[t.i]},n.prototype.unobserve=function(){var e;this.tokens.forEach(function(t,n){(e=this.objectPath[n])&&this.set(!1,t,e,this.update)},this),r(this.target)&&this.set(!1,this.key,this.target,this.callback)},void 0!==t&&t.exports?t.exports=e:"function"==typeof define&&define.amd?define([],function(){return this.sightglass=e}):this.sightglass=e}).call(this)},{}],61:[function(e,t,n){(function(){function e(e){function t(t,n,r,i,o,a){for(;o>=0&&o<a;o+=e){var s=i?i[o]:o;r=n(r,t[s],s,t)}return r}return function(n,r,i,o){r=w(r,o,4);var a=!T(n)&&x.keys(n),s=(a||n).length,l=e>0?0:s-1;return arguments.length<3&&(i=n[a?a[l]:l],l+=e),t(n,r,i,a,l,s)}}function r(e){return function(t,n,r){n=k(n,r);for(var i=D(t),o=e>0?0:i-1;o>=0&&o<i;o+=e)if(n(t[o],o,t))return o;return-1}}function i(e,t,n){return function(r,i,o){var a=0,s=D(r);if("number"==typeof o)e>0?a=o>=0?o:Math.max(o+s,a):s=o>=0?Math.min(o+1,s):o+s+1;else if(n&&o&&s)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return o=t(h.call(r,a,s),x.isNaN),o>=0?o+a:-1;for(o=e>0?a:s-1;o>=0&&o<s;o+=e)if(r[o]===i)return o;return-1}}function o(e,t){var n=I.length,r=e.constructor,i=x.isFunction(r)&&r.prototype||u,o="constructor";for(x.has(e,o)&&!x.contains(t,o)&&t.push(o);n--;)(o=I[n])in e&&e[o]!==i[o]&&!x.contains(t,o)&&t.push(o)}var a=this,s=a._,l=Array.prototype,u=Object.prototype,c=Function.prototype,d=l.push,h=l.slice,f=u.toString,p=u.hasOwnProperty,g=Array.isArray,m=Object.keys,v=c.bind,y=Object.create,b=function(){},x=function(e){return e instanceof x?e:this instanceof x?void(this._wrapped=e):new x(e)};void 0!==n?(void 0!==t&&t.exports&&(n=t.exports=x),n._=x):a._=x,x.VERSION="1.8.3";var w=function(e,t,n){if(void 0===t)return e;switch(null==n?3:n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,o){return e.call(t,n,r,i,o)}}return function(){return e.apply(t,arguments)}},k=function(e,t,n){return null==e?x.identity:x.isFunction(e)?w(e,t,n):x.isObject(e)?x.matcher(e):x.property(e)};x.iteratee=function(e,t){return k(e,t,1/0)};var _=function(e,t){return function(n){var r=arguments.length;if(r<2||null==n)return n;for(var i=1;i<r;i++)for(var o=arguments[i],a=e(o),s=a.length,l=0;l<s;l++){var u=a[l];t&&void 0!==n[u]||(n[u]=o[u])}return n}},S=function(e){if(!x.isObject(e))return{};if(y)return y(e);b.prototype=e;var t=new b;return b.prototype=null,t},C=function(e){return function(t){return null==t?void 0:t[e]}},M=Math.pow(2,53)-1,D=C("length"),T=function(e){var t=D(e);return"number"==typeof t&&t>=0&&t<=M};x.each=x.forEach=function(e,t,n){t=w(t,n);var r,i;if(T(e))for(r=0,i=e.length;r<i;r++)t(e[r],r,e);else{var o=x.keys(e);for(r=0,i=o.length;r<i;r++)t(e[o[r]],o[r],e)}return e},x.map=x.collect=function(e,t,n){t=k(t,n);for(var r=!T(e)&&x.keys(e),i=(r||e).length,o=Array(i),a=0;a<i;a++){var s=r?r[a]:a;o[a]=t(e[s],s,e)}return o},x.reduce=x.foldl=x.inject=e(1),x.reduceRight=x.foldr=e(-1),x.find=x.detect=function(e,t,n){var r;if(void 0!==(r=T(e)?x.findIndex(e,t,n):x.findKey(e,t,n))&&-1!==r)return e[r]},x.filter=x.select=function(e,t,n){var r=[];return t=k(t,n),x.each(e,function(e,n,i){t(e,n,i)&&r.push(e)}),r},x.reject=function(e,t,n){return x.filter(e,x.negate(k(t)),n)},x.every=x.all=function(e,t,n){t=k(t,n);for(var r=!T(e)&&x.keys(e),i=(r||e).length,o=0;o<i;o++){var a=r?r[o]:o;if(!t(e[a],a,e))return!1}return!0},x.some=x.any=function(e,t,n){t=k(t,n);for(var r=!T(e)&&x.keys(e),i=(r||e).length,o=0;o<i;o++){var a=r?r[o]:o;if(t(e[a],a,e))return!0}return!1},x.contains=x.includes=x.include=function(e,t,n,r){return T(e)||(e=x.values(e)),("number"!=typeof n||r)&&(n=0),x.indexOf(e,t,n)>=0},x.invoke=function(e,t){var n=h.call(arguments,2),r=x.isFunction(t);return x.map(e,function(e){var i=r?t:e[t];return null==i?i:i.apply(e,n)})},x.pluck=function(e,t){return x.map(e,x.property(t))},x.where=function(e,t){return x.filter(e,x.matcher(t))},x.findWhere=function(e,t){return x.find(e,x.matcher(t))},x.max=function(e,t,n){var r,i,o=-1/0,a=-1/0;if(null==t&&null!=e){e=T(e)?e:x.values(e);for(var s=0,l=e.length;s<l;s++)(r=e[s])>o&&(o=r)}else t=k(t,n),x.each(e,function(e,n,r){((i=t(e,n,r))>a||i===-1/0&&o===-1/0)&&(o=e,a=i)});return o},x.min=function(e,t,n){var r,i,o=1/0,a=1/0;if(null==t&&null!=e){e=T(e)?e:x.values(e);for(var s=0,l=e.length;s<l;s++)(r=e[s])<o&&(o=r)}else t=k(t,n),x.each(e,function(e,n,r){((i=t(e,n,r))<a||i===1/0&&o===1/0)&&(o=e,a=i)});return o},x.shuffle=function(e){for(var t,n=T(e)?e:x.values(e),r=n.length,i=Array(r),o=0;o<r;o++)t=x.random(0,o),t!==o&&(i[o]=i[t]),i[t]=n[o];return i},x.sample=function(e,t,n){return null==t||n?(T(e)||(e=x.values(e)),e[x.random(e.length-1)]):x.shuffle(e).slice(0,Math.max(0,t))},x.sortBy=function(e,t,n){return t=k(t,n),x.pluck(x.map(e,function(e,n,r){return{value:e,index:n,criteria:t(e,n,r)}}).sort(function(e,t){var n=e.criteria,r=t.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return e.index-t.index}),"value")};var A=function(e){return function(t,n,r){var i={};return n=k(n,r),x.each(t,function(r,o){var a=n(r,o,t);e(i,r,a)}),i}};x.groupBy=A(function(e,t,n){x.has(e,n)?e[n].push(t):e[n]=[t]}),x.indexBy=A(function(e,t,n){e[n]=t}),x.countBy=A(function(e,t,n){x.has(e,n)?e[n]++:e[n]=1}),x.toArray=function(e){return e?x.isArray(e)?h.call(e):T(e)?x.map(e,x.identity):x.values(e):[]},x.size=function(e){return null==e?0:T(e)?e.length:x.keys(e).length},x.partition=function(e,t,n){t=k(t,n);var r=[],i=[];return x.each(e,function(e,n,o){(t(e,n,o)?r:i).push(e)}),[r,i]},x.first=x.head=x.take=function(e,t,n){if(null!=e)return null==t||n?e[0]:x.initial(e,e.length-t)},x.initial=function(e,t,n){return h.call(e,0,Math.max(0,e.length-(null==t||n?1:t)))},x.last=function(e,t,n){if(null!=e)return null==t||n?e[e.length-1]:x.rest(e,Math.max(0,e.length-t))},x.rest=x.tail=x.drop=function(e,t,n){return h.call(e,null==t||n?1:t)},x.compact=function(e){return x.filter(e,x.identity)};var O=function(e,t,n,r){for(var i=[],o=0,a=r||0,s=D(e);a<s;a++){var l=e[a];if(T(l)&&(x.isArray(l)||x.isArguments(l))){t||(l=O(l,t,n));var u=0,c=l.length;for(i.length+=c;u<c;)i[o++]=l[u++]}else n||(i[o++]=l)}return i};x.flatten=function(e,t){return O(e,t,!1)},x.without=function(e){return x.difference(e,h.call(arguments,1))},x.uniq=x.unique=function(e,t,n,r){x.isBoolean(t)||(r=n,n=t,t=!1),null!=n&&(n=k(n,r));for(var i=[],o=[],a=0,s=D(e);a<s;a++){var l=e[a],u=n?n(l,a,e):l;t?(a&&o===u||i.push(l),o=u):n?x.contains(o,u)||(o.push(u),i.push(l)):x.contains(i,l)||i.push(l)}return i},x.union=function(){return x.uniq(O(arguments,!0,!0))},x.intersection=function(e){for(var t=[],n=arguments.length,r=0,i=D(e);r<i;r++){var o=e[r];if(!x.contains(t,o)){for(var a=1;a<n&&x.contains(arguments[a],o);a++);a===n&&t.push(o)}}return t},x.difference=function(e){var t=O(arguments,!0,!0,1);return x.filter(e,function(e){return!x.contains(t,e)})},x.zip=function(){return x.unzip(arguments)},x.unzip=function(e){for(var t=e&&x.max(e,D).length||0,n=Array(t),r=0;r<t;r++)n[r]=x.pluck(e,r);return n},x.object=function(e,t){for(var n={},r=0,i=D(e);r<i;r++)t?n[e[r]]=t[r]:n[e[r][0]]=e[r][1];return n},x.findIndex=r(1),x.findLastIndex=r(-1),x.sortedIndex=function(e,t,n,r){n=k(n,r,1);for(var i=n(t),o=0,a=D(e);o<a;){var s=Math.floor((o+a)/2);n(e[s])<i?o=s+1:a=s}return o},x.indexOf=i(1,x.findIndex,x.sortedIndex),x.lastIndexOf=i(-1,x.findLastIndex),x.range=function(e,t,n){null==t&&(t=e||0,e=0),n=n||1;for(var r=Math.max(Math.ceil((t-e)/n),0),i=Array(r),o=0;o<r;o++,e+=n)i[o]=e;return i};var P=function(e,t,n,r,i){if(!(r instanceof t))return e.apply(n,i);var o=S(e.prototype),a=e.apply(o,i);return x.isObject(a)?a:o};x.bind=function(e,t){if(v&&e.bind===v)return v.apply(e,h.call(arguments,1));if(!x.isFunction(e))throw new TypeError("Bind must be called on a function");var n=h.call(arguments,2),r=function(){return P(e,r,t,this,n.concat(h.call(arguments)))};return r},x.partial=function(e){var t=h.call(arguments,1),n=function(){for(var r=0,i=t.length,o=Array(i),a=0;a<i;a++)o[a]=t[a]===x?arguments[r++]:t[a];for(;r<arguments.length;)o.push(arguments[r++]);return P(e,n,this,this,o)};return n},x.bindAll=function(e){var t,n,r=arguments.length;if(r<=1)throw new Error("bindAll must be passed function names");for(t=1;t<r;t++)n=arguments[t],e[n]=x.bind(e[n],e);return e},x.memoize=function(e,t){var n=function(r){var i=n.cache,o=""+(t?t.apply(this,arguments):r);return x.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return n.cache={},n},x.delay=function(e,t){var n=h.call(arguments,2);return setTimeout(function(){return e.apply(null,n)},t)},x.defer=x.partial(x.delay,x,1),x.throttle=function(e,t,n){var r,i,o,a=null,s=0;n||(n={});var l=function(){s=!1===n.leading?0:x.now(),a=null,o=e.apply(r,i),a||(r=i=null)};return function(){var u=x.now();s||!1!==n.leading||(s=u);var c=t-(u-s);return r=this,i=arguments,c<=0||c>t?(a&&(clearTimeout(a),a=null),s=u,o=e.apply(r,i),a||(r=i=null)):a||!1===n.trailing||(a=setTimeout(l,c)),o}},x.debounce=function(e,t,n){var r,i,o,a,s,l=function(){var u=x.now()-a;u<t&&u>=0?r=setTimeout(l,t-u):(r=null,n||(s=e.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,a=x.now();var u=n&&!r;return r||(r=setTimeout(l,t)),u&&(s=e.apply(o,i),o=i=null),s}},x.wrap=function(e,t){return x.partial(t,e)},x.negate=function(e){return function(){return!e.apply(this,arguments)}},x.compose=function(){var e=arguments,t=e.length-1;return function(){for(var n=t,r=e[t].apply(this,arguments);n--;)r=e[n].call(this,r);return r}},x.after=function(e,t){return function(){if(--e<1)return t.apply(this,arguments)}},x.before=function(e,t){var n;return function(){return--e>0&&(n=t.apply(this,arguments)),e<=1&&(t=null),n}},x.once=x.partial(x.before,2);var F=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];x.keys=function(e){if(!x.isObject(e))return[];if(m)return m(e);var t=[];for(var n in e)x.has(e,n)&&t.push(n);return F&&o(e,t),t},x.allKeys=function(e){if(!x.isObject(e))return[];var t=[];for(var n in e)t.push(n);return F&&o(e,t),t},x.values=function(e){for(var t=x.keys(e),n=t.length,r=Array(n),i=0;i<n;i++)r[i]=e[t[i]];return r},x.mapObject=function(e,t,n){t=k(t,n);for(var r,i=x.keys(e),o=i.length,a={},s=0;s<o;s++)r=i[s],a[r]=t(e[r],r,e);return a},x.pairs=function(e){for(var t=x.keys(e),n=t.length,r=Array(n),i=0;i<n;i++)r[i]=[t[i],e[t[i]]];return r},x.invert=function(e){for(var t={},n=x.keys(e),r=0,i=n.length;r<i;r++)t[e[n[r]]]=n[r];return t},x.functions=x.methods=function(e){var t=[];for(var n in e)x.isFunction(e[n])&&t.push(n);return t.sort()},x.extend=_(x.allKeys),x.extendOwn=x.assign=_(x.keys),x.findKey=function(e,t,n){t=k(t,n);for(var r,i=x.keys(e),o=0,a=i.length;o<a;o++)if(r=i[o],t(e[r],r,e))return r},x.pick=function(e,t,n){var r,i,o={},a=e;if(null==a)return o;x.isFunction(t)?(i=x.allKeys(a),r=w(t,n)):(i=O(arguments,!1,!1,1),r=function(e,t,n){return t in n},a=Object(a));for(var s=0,l=i.length;s<l;s++){var u=i[s],c=a[u];r(c,u,a)&&(o[u]=c)}return o},x.omit=function(e,t,n){if(x.isFunction(t))t=x.negate(t);else{var r=x.map(O(arguments,!1,!1,1),String);t=function(e,t){return!x.contains(r,t)}}return x.pick(e,t,n)},x.defaults=_(x.allKeys,!0),x.create=function(e,t){var n=S(e);return t&&x.extendOwn(n,t),n},x.clone=function(e){return x.isObject(e)?x.isArray(e)?e.slice():x.extend({},e):e},x.tap=function(e,t){return t(e),e},x.isMatch=function(e,t){var n=x.keys(t),r=n.length;if(null==e)return!r;for(var i=Object(e),o=0;o<r;o++){var a=n[o];if(t[a]!==i[a]||!(a in i))return!1}return!0};var R=function(e,t,n,r){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return e===t;e instanceof x&&(e=e._wrapped),t instanceof x&&(t=t._wrapped);var i=f.call(e);if(i!==f.call(t))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof t)return!1;var a=e.constructor,s=t.constructor;if(a!==s&&!(x.isFunction(a)&&a instanceof a&&x.isFunction(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}n=n||[],r=r||[];for(var l=n.length;l--;)if(n[l]===e)return r[l]===t;if(n.push(e),r.push(t),o){if((l=e.length)!==t.length)return!1;for(;l--;)if(!R(e[l],t[l],n,r))return!1}else{var u,c=x.keys(e);if(l=c.length,x.keys(t).length!==l)return!1;for(;l--;)if(u=c[l],!x.has(t,u)||!R(e[u],t[u],n,r))return!1}return n.pop(),r.pop(),!0};x.isEqual=function(e,t){return R(e,t)},x.isEmpty=function(e){return null==e||(T(e)&&(x.isArray(e)||x.isString(e)||x.isArguments(e))?0===e.length:0===x.keys(e).length)},x.isElement=function(e){return!(!e||1!==e.nodeType)},x.isArray=g||function(e){return"[object Array]"===f.call(e)},x.isObject=function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},x.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){x["is"+e]=function(t){return f.call(t)==="[object "+e+"]"}}),x.isArguments(arguments)||(x.isArguments=function(e){return x.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(x.isFunction=function(e){return"function"==typeof e||!1}),x.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},x.isNaN=function(e){return x.isNumber(e)&&e!==+e},x.isBoolean=function(e){return!0===e||!1===e||"[object Boolean]"===f.call(e)},x.isNull=function(e){return null===e},x.isUndefined=function(e){return void 0===e},x.has=function(e,t){return null!=e&&p.call(e,t)},x.noConflict=function(){return a._=s,this},x.identity=function(e){return e},x.constant=function(e){return function(){return e}},x.noop=function(){},x.property=C,x.propertyOf=function(e){return null==e?function(){}:function(t){return e[t]}},x.matcher=x.matches=function(e){return e=x.extendOwn({},e),function(t){return x.isMatch(t,e)}},x.times=function(e,t,n){var r=Array(Math.max(0,e));t=w(t,n,1);for(var i=0;i<e;i++)r[i]=t(i);return r},x.random=function(e,t){return null==t&&(t=e,e=0),e+Math.floor(Math.random()*(t-e+1))},x.now=Date.now||function(){return(new Date).getTime()};var L={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},N=x.invert(L),E=function(e){var t=function(t){return e[t]},n="(?:"+x.keys(e).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(i,t):e}};x.escape=E(L),x.unescape=E(N),x.result=function(e,t,n){var r=null==e?void 0:e[t];return void 0===r&&(r=n),x.isFunction(r)?r.call(e):r};var j=0;x.uniqueId=function(e){var t=++j+"";return e?e+t:t},x.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var W=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},H=/\\|'|\r|\n|\u2028|\u2029/g,z=function(e){return"\\"+B[e]};x.template=function(e,t,n){!t&&n&&(t=n),t=x.defaults({},t,x.templateSettings);var r=RegExp([(t.escape||W).source,(t.interpolate||W).source,(t.evaluate||W).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(r,function(t,n,r,a,s){return o+=e.slice(i,s).replace(H,z),i=s+t.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),t}),o+="';\n",t.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var a=new Function(t.variable||"obj","_",o)}catch(e){throw e.source=o,e}var s=function(e){return a.call(this,e,x)};return s.source="function("+(t.variable||"obj")+"){\n"+o+"}",s},x.chain=function(e){var t=x(e);return t._chain=!0,t};var Y=function(e,t){return e._chain?x(t).chain():t};x.mixin=function(e){x.each(x.functions(e),function(t){var n=x[t]=e[t];x.prototype[t]=function(){var e=[this._wrapped];return d.apply(e,arguments),Y(this,n.apply(x,e))}})},x.mixin(x),x.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var t=l[e];x.prototype[e]=function(){var n=this._wrapped;return t.apply(n,arguments),"shift"!==e&&"splice"!==e||0!==n.length||delete n[0],Y(this,n)}}),x.each(["concat","join","slice"],function(e){var t=l[e];x.prototype[e]=function(){return Y(this,t.apply(this._wrapped,arguments))}}),x.prototype.value=function(){return this._wrapped},x.prototype.valueOf=x.prototype.toJSON=x.prototype.value,x.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return x})}).call(this)},{}],62:[function(e,t,n){!function(e){"use strict";function t(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function n(e){return"string"!=typeof e&&(e=String(e)),e}function r(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return v.iterable&&(t[Symbol.iterator]=function(){return t}),t}function i(e){this.map={},e instanceof i?e.forEach(function(e,t){this.append(t,e)},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function o(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function a(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function s(e){var t=new FileReader,n=a(t);return t.readAsArrayBuffer(e),n}function l(e){var t=new FileReader,n=a(t);return t.readAsText(e),n}function u(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}function c(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function d(){return this.bodyUsed=!1,this._initBody=function(e){if(this._bodyInit=e,e)if("string"==typeof e)this._bodyText=e;else if(v.blob&&Blob.prototype.isPrototypeOf(e))this._bodyBlob=e;else if(v.formData&&FormData.prototype.isPrototypeOf(e))this._bodyFormData=e;else if(v.searchParams&&URLSearchParams.prototype.isPrototypeOf(e))this._bodyText=e.toString();else if(v.arrayBuffer&&v.blob&&b(e))this._bodyArrayBuffer=c(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!v.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(e)&&!x(e))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=c(e)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):v.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},v.blob&&(this.blob=function(){var e=o(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?o(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(s)}),this.text=function(){var e=o(this);if(e)return e;if(this._bodyBlob)return l(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(u(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},v.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}function h(e){var t=e.toUpperCase();return w.indexOf(t)>-1?t:e}function f(e,t){t=t||{};var n=t.body;if("string"==typeof e)this.url=e;else{if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new i(e.headers)),this.method=e.method,this.mode=e.mode,n||null==e._bodyInit||(n=e._bodyInit,e.bodyUsed=!0)}if(this.credentials=t.credentials||this.credentials||"omit",!t.headers&&this.headers||(this.headers=new i(t.headers)),this.method=h(t.method||this.method||"GET"),this.mode=t.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&n)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(n)}function p(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\+/g," "),i=n.join("=").replace(/\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(i))}}),t}function g(e){var t=new i;return e.split("\r\n").forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var i=n.join(":").trim();t.append(r,i)}}),t}function m(e,t){t||(t={}),this.type="default",this.status="status"in t?t.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new i(t.headers),this.url=t.url||"",this._initBody(e)}if(!e.fetch){var v={searchParams:"URLSearchParams"in e,iterable:"Symbol"in e&&"iterator"in Symbol,blob:"FileReader"in e&&"Blob"in e&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in e,arrayBuffer:"ArrayBuffer"in e};if(v.arrayBuffer)var y=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],b=function(e){return e&&DataView.prototype.isPrototypeOf(e)},x=ArrayBuffer.isView||function(e){return e&&y.indexOf(Object.prototype.toString.call(e))>-1};i.prototype.append=function(e,r){e=t(e),r=n(r);var i=this.map[e];i||(i=[],this.map[e]=i),i.push(r)},i.prototype.delete=function(e){delete this.map[t(e)]},i.prototype.get=function(e){var n=this.map[t(e)];return n?n[0]:null},i.prototype.getAll=function(e){return this.map[t(e)]||[]},i.prototype.has=function(e){return this.map.hasOwnProperty(t(e))},i.prototype.set=function(e,r){this.map[t(e)]=[n(r)]},i.prototype.forEach=function(e,t){Object.getOwnPropertyNames(this.map).forEach(function(n){this.map[n].forEach(function(r){e.call(t,r,n,this)},this)},this)},i.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),r(e)},i.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),r(e)},i.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),r(e)},v.iterable&&(i.prototype[Symbol.iterator]=i.prototype.entries);var w=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];f.prototype.clone=function(){return new f(this,{body:this._bodyInit})},d.call(f.prototype),d.call(m.prototype),m.prototype.clone=function(){return new m(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new i(this.headers),url:this.url})},m.error=function(){var e=new m(null,{status:0,statusText:""});return e.type="error",e};var k=[301,302,303,307,308];m.redirect=function(e,t){if(-1===k.indexOf(t))throw new RangeError("Invalid status code");return new m(null,{status:t,headers:{location:e}})},e.Headers=i,e.Request=f,e.Response=m,e.fetch=function(e,t){return new Promise(function(n,r){var i=new f(e,t),o=new XMLHttpRequest;o.onload=function(){var e={status:o.status,statusText:o.statusText,headers:g(o.getAllResponseHeaders()||"")};e.url="responseURL"in o?o.responseURL:e.headers.get("X-Request-URL");var t="response"in o?o.response:o.responseText;n(new m(t,e))},o.onerror=function(){r(new TypeError("Network request failed"))},o.ontimeout=function(){r(new TypeError("Network request failed"))},o.open(i.method,i.url,!0),"include"===i.credentials&&(o.withCredentials=!0),"responseType"in o&&v.blob&&(o.responseType="blob"),i.headers.forEach(function(e,t){o.setRequestHeader(t,e)}),o.send(void 0===i._bodyInit?null:i._bodyInit)})},e.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}],63:[function(e,t,n){"use strict";function r(){return{labels:["1a","Decrecer","NAU","Solidaridad"],datasets:[{data:[25,25,25,25],backgroundColor:[a.COLOR_MG,a.COLOR_DECRECER,a.COLOR_NAU,a.COLOR_SDD]}]}}function i(){return{labels:["J. Rodríguez","F. Vera","A. Gallardo","C. Portales","C. Sepúlveda"],datasets:[{data:[20,20,20,20,20],backgroundColor:[a.COLOR_MG,a.COLOR_DECRECER,a.COLOR_NAU,a.COLOR_IA,a.COLOR_SDD]}]}}function o(){return{labels:["MG","Decrecer","NAU","Solidaridad","Independiente","Izquierda Autónoma"],datasets:[{data:[0,0,0,0,0,0],backgroundColor:[a.COLOR_MG,a.COLOR_DECRECER_ALT,a.COLOR_NAU,a.COLOR_SDD,a.COLOR_IND,a.COLOR_IA]}]}}Object.defineProperty(n,"__esModule",{value:!0}),n.defaultPolarChartsOptions=n.defaultChartsOptions=void 0,n.listaDefaultData=r,n.supDefaultData=i,n.terriDefaultData=o;var a=e("./movementColors.js");n.defaultChartsOptions={responsive:!0,legend:{display:!1},tooltips:{callbacks:{label:function(e,t){var n=t.datasets[e.datasetIndex].data[e.index];return t.labels[e.index]+": "+n+"%"}}}},n.defaultPolarChartsOptions={responsive:!0,legend:{display:!1},tooltips:{callbacks:{label:function(e,t){var n=t.datasets[e.datasetIndex].data[e.index];return t.labels[e.index]+": "+n}}}}},{"./movementColors.js":66}],64:[function(e,t,n){"use strict";function r(){return fetch(l).then(function(e){return e.json()}).then(function(e){return new Promise(function(t,n){t(d(e))})})}function i(){return fetch(s).then(function(e){return e.json()})}Object.defineProperty(n,"__esModule",{value:!0}),n.defaultObject=void 0,n.getData=r,n.getServerData=i;var o=e("underscore"),a=function(e){return e&&e.__esModule?e:{default:e}}(o);e("whatwg-fetch");var s="https://pacific-ridge-96612.herokuapp.com",l="https://spreadsheets.google.com/feeds/list/1aHiLHsH9i-ZNFNfogvoXinHnNTmCjCxAZcQsrbylCMk/5/public/values?alt=json",u=function(e,t){return e["gsx$"+t].$t},c=function(e){return{id:u(e,"id"),name:u(e,"name"),mg:u(e,"mg"),mgpc:u(e,"mgpc"),decrecer:u(e,"decrecer"),decrecerpc:u(e,"decrecerpc"),nau:u(e,"nau"),naupc:u(e,"naupc"),ia:u(e,"ia"),iapc:u(e,"iapc"),sdd:u(e,"sdd"),sddpc:u(e,"sddpc"),b:u(e,"b"),bpc:u(e,"bpc"),n:u(e,"n"),npc:u(e,"npc"),votosve:u(e,"votosve"),votos:u(e,"votos"),escrutada:"TRUE"==u(e,"escrutada"),participacion:u(e,"participacion")}},d=function(e){var t={dia1:{lista:{mesa:{},terri:{},total:{}},sup:{mesa:{},terri:{},total:{}}},dia2:{
lista:{mesa:{},terri:{},total:{}},sup:{mesa:{},terri:{},total:{}}},total:{lista:{mesa:{},terri:{},total:{}},sup:{mesa:{},terri:{},total:{}}},terris:{},totalct:{}};return e.feed.entry.forEach(function(e){a.default.contains(["dia1","dia2","total"],u(e,"tiempo"))?a.default.contains(["total"],u(e,"area"))?t[u(e,"tiempo")][u(e,"tipo")][u(e,"area")]=c(e):t[u(e,"tiempo")][u(e,"tipo")][u(e,"area")][u(e,"id")]=c(e):a.default.contains(["terris"],u(e,"tiempo"))?(a.default.isArray(t.terris[u(e,"area")])||(t.terris[u(e,"area")]=[]),t.terris[u(e,"area")].push({mov:u(e,"id"),movid:u(e,"tipo"),nombre:u(e,"name"),votos:u(e,"mg"),pc:u(e,"mgpc"),electo:"TRUE"==u(e,"decrecer")})):a.default.contains(["totalct"],u(e,"tiempo"))&&(t.totalct[u(e,"tipo")]=u(e,"area"))}),t};n.defaultObject={mg:0,mgpc:0,decrecer:0,decrecerpc:0,nau:0,naupc:0,ia:0,iapc:0,sdd:0,sddpc:0,b:0,bpc:0,n:0,npc:0,votosve:0,votos:0,escrutada:!1,participacion:0}},{underscore:61,"whatwg-fetch":62}],65:[function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var i=e("jquery"),o=r(i),a=e("chart.js"),s=r(a),l=e("./dataFetcher.js"),u=e("rivets"),c=r(u),d=e("underscore"),h=r(d),f=e("./chartVars.js");s.default.defaults.global.elements.arc.borderWidth=2,s.default.defaults.global.elements.arc.borderColor="#ddd";var p=[25,25,25,25],g=[20,20,20,20,20];(0,o.default)(document).ready(function(){function e(){N.text("Actualizando…"),(0,l.getServerData)().then(function(e){E.fadeOut();var n=new Date;N.text("Actualizado a las "+("0"+n.getHours()).slice(-2)+":"+("0"+n.getMinutes()).slice(-2)),t=e,j("getData")}).catch(function(e){E.fadeIn(),N.text("Error al actualizar"),console.error(e)})}(0,o.default)(".notification button").click(function(e){(0,o.default)(this).parents(".notification").fadeOut()}),setTimeout(function(){(0,o.default)("#refresh-notification button").click()},8e3);var t=void 0,n=(0,o.default)("#total-lista"),r=(0,o.default)("#total-sup"),i=(0,o.default)("#mesa-lista"),a=(0,o.default)("#mesa-sup"),u=(0,o.default)("#terri-lista"),d=(0,o.default)("#terri-sup"),m=(0,o.default)("#consejo"),v=new s.default(n,{type:"pie",data:(0,f.listaDefaultData)(),options:f.defaultChartsOptions}),y=new s.default(r,{type:"pie",data:(0,f.supDefaultData)(),options:f.defaultChartsOptions}),b=new s.default(i,{type:"pie",data:(0,f.listaDefaultData)(),options:f.defaultChartsOptions}),x=new s.default(a,{type:"pie",data:(0,f.supDefaultData)(),options:f.defaultChartsOptions}),w=new s.default(u,{type:"pie",data:(0,f.listaDefaultData)(),options:f.defaultChartsOptions}),k=new s.default(d,{type:"pie",data:(0,f.supDefaultData)(),options:f.defaultChartsOptions}),_=new s.default(m,{type:"polarArea",data:(0,f.terriDefaultData)(),options:f.defaultPolarChartsOptions}),S=h.default.extend({},l.defaultObject),C=h.default.extend({},l.defaultObject),M=h.default.extend({},l.defaultObject),D=h.default.extend({},l.defaultObject),T=h.default.extend({},l.defaultObject),A=h.default.extend({},l.defaultObject),O=h.default.extend({},l.defaultObject),P=h.default.extend({},l.defaultObject),F={},I={},R={terris:[]},L={mesas:[],actual:0,total:85};c.default.binders.width=function(e,t){e.style.width=t+"%"},c.default.binders.addclass=function(e,t){e.addedClass&&((0,o.default)(e).removeClass(e.addedClass),delete e.addedClass),t&&((0,o.default)(e).addClass(t),e.addedClass=t)},c.default.bind((0,o.default)("#bind-summary-lista"),S),c.default.bind((0,o.default)("#bind-summary-sup"),C),c.default.bind((0,o.default)("#bind-total-lista"),M),c.default.bind((0,o.default)("#bind-total-sup"),D),c.default.bind((0,o.default)("#bind-mesa-lista"),T),c.default.bind((0,o.default)("#bind-mesa-sup"),A),c.default.bind((0,o.default)("#bind-terri-sup"),P),c.default.bind((0,o.default)("#bind-terri-lista"),O),c.default.bind((0,o.default)("#bind-terris"),F),c.default.bind((0,o.default)("#bind-terris-dist"),I),c.default.bind((0,o.default)("#bind-mesas"),L),c.default.bind((0,o.default)("#bind-participacion"),R),(0,o.default)(document).on("change","input[name=total-dia]",function(){t&&j("total")}),(0,o.default)(document).on("change","input[name=mesa-dia], form[name=selected-mesa] select",function(){t&&j("mesa")}),(0,o.default)(document).on("change","input[name=terri-dia], form[name=selected-terri] select",function(){t&&j("terri")});var N=(0,o.default)(".update-notif"),E=(0,o.default)("#error-notification");e(),setInterval(e,2e4);var j=function(e){var n=(0,o.default)("input[name=total-dia]:checked").val(),r=(0,o.default)("input[name=mesa-dia]:checked").val(),i=(0,o.default)("input[name=terri-dia]:checked").val(),a=(0,o.default)("form[name=selected-mesa] select").val(),s=(0,o.default)("form[name=selected-terri] select").val();if("getData"===e){S=h.default.extendOwn(S,t.total.lista.total),C=h.default.extendOwn(C,t.total.sup.total),h.default.each(t.terris,function(e){e.sort(function(e,t){return t.pc-e.pc})}),F.terris=h.default.clone(t.terris),I=h.default.extend(I,t.totalct),_.data.datasets[0].data=h.default.chain(I).pick("mg","decrecer","nau","sdd","ind","ia").values().map(Number).value(),_.update();var l=0;L.mesas=[],h.default.each(t.total.lista.mesa,function(e){L.mesas.push({id:e.id,name:e.name,dia1:t.dia1.lista.mesa[e.id].escrutada,dia2:t.dia2.lista.mesa[e.id].escrutada}),t.dia1.lista.mesa[e.id].escrutada&&l++,t.dia2.lista.mesa[e.id].escrutada&&l++}),L.actual=l,h.default.each(t.total.lista.terri,function(e){var t={name:e.name,pc:e.participacion},n=h.default.findWhere(R.terris,{name:e.name});n?h.default.extend(n,t):R.terris.push(t)}),R.terris.sort(function(e,t){return t.pc-e.pc})}if("mesa"!==e&&"terri"!==e){M=h.default.extendOwn(M,t[n].lista.total),D=h.default.extendOwn(D,t[n].sup.total);var u=h.default.chain(M).pick("mgpc","decrecerpc","naupc","sddpc").map(parseFloat).value();h.default.any(u,function(e){return e>0})?(v.data.datasets[0].data=u,v.update()):(v.data.datasets[0].data=p,v.update());var c=h.default.chain(D).pick("mgpc","decrecerpc","naupc","iapc","sddpc").map(parseFloat).value();h.default.any(c,function(e){return e>0})?(y.data.datasets[0].data=c,y.update()):(y.data.datasets[0].data=g,y.update())}if("total"!==e&&"terri"!==e){T=h.default.extendOwn(T,t[r].lista.mesa[a]),A=h.default.extendOwn(A,t[r].sup.mesa[a]);var d=h.default.chain(T).pick("mgpc","decrecerpc","naupc","sddpc").map(parseFloat).value();h.default.any(d,function(e){return e>0})?(b.data.datasets[0].data=d,b.update()):(b.data.datasets[0].data=p,b.update());var f=h.default.chain(A).pick("mgpc","decrecerpc","naupc","iapc","sddpc").map(parseFloat).value();h.default.any(f,function(e){return e>0})?(x.data.datasets[0].data=f,x.update()):(x.data.datasets[0].data=g,x.update())}if("total"!==e&&"mesa"!==e){O=h.default.extendOwn(O,t[i].lista.terri[s]),P=h.default.extendOwn(P,t[i].sup.terri[s]);var m=h.default.chain(O).pick("mgpc","decrecerpc","naupc","sddpc").map(parseFloat).value();h.default.any(m,function(e){return e>0})?(w.data.datasets[0].data=m,w.update()):(w.data.datasets[0].data=p,w.update());var N=h.default.chain(P).pick("mgpc","decrecerpc","naupc","iapc","sddpc").map(parseFloat).value();h.default.any(N,function(e){return e>0})?(k.data.datasets[0].data=N,k.update()):(k.data.datasets[0].data=g,k.update())}}})},{"./chartVars.js":63,"./dataFetcher.js":64,"chart.js":1,jquery:57,rivets:59,underscore:61}],66:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.COLOR_MG="#e9841d",n.COLOR_NAU="#6fd528",n.COLOR_SDD="#E01E25",n.COLOR_DECRECER="#eeed2e",n.COLOR_IA="purple",n.COLOR_IND="#489389",n.COLOR_JJCC="#eeed2e",n.COLOR_DECRECER_ALT="#eeed2e"},{}]},{},[65]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4ubWluLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsIkNoYXJ0IiwiaGVscGVycyIsImRlZmF1bHRzIiwiRWxlbWVudCIsImVsZW1lbnRzIiwiSW50ZXJhY3Rpb24iLCJwbGF0Zm9ybSIsInBsdWdpbnMiLCJwdXNoIiwicmVnaXN0ZXIiLCJpbml0aWFsaXplIiwid2luZG93IiwiY2FudmFzSGVscGVycyIsImNhbnZhcyIsIi4vY2hhcnRzL0NoYXJ0LkJhciIsIi4vY2hhcnRzL0NoYXJ0LkJ1YmJsZSIsIi4vY2hhcnRzL0NoYXJ0LkRvdWdobnV0IiwiLi9jaGFydHMvQ2hhcnQuTGluZSIsIi4vY2hhcnRzL0NoYXJ0LlBvbGFyQXJlYSIsIi4vY2hhcnRzL0NoYXJ0LlJhZGFyIiwiLi9jaGFydHMvQ2hhcnQuU2NhdHRlciIsIi4vY29udHJvbGxlcnMvY29udHJvbGxlci5iYXIiLCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlIiwiLi9jb250cm9sbGVycy9jb250cm9sbGVyLmRvdWdobnV0IiwiLi9jb250cm9sbGVycy9jb250cm9sbGVyLmxpbmUiLCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhIiwiLi9jb250cm9sbGVycy9jb250cm9sbGVyLnJhZGFyIiwiLi9jb250cm9sbGVycy9jb250cm9sbGVyLnNjYXR0ZXIiLCIuL2NvcmUvY29yZSIsIi4vY29yZS9jb3JlLmFuaW1hdGlvbiIsIi4vY29yZS9jb3JlLmNvbnRyb2xsZXIiLCIuL2NvcmUvY29yZS5kYXRhc2V0Q29udHJvbGxlciIsIi4vY29yZS9jb3JlLmRlZmF1bHRzIiwiLi9jb3JlL2NvcmUuZWxlbWVudCIsIi4vY29yZS9jb3JlLmhlbHBlcnMiLCIuL2NvcmUvY29yZS5pbnRlcmFjdGlvbiIsIi4vY29yZS9jb3JlLmxheW91dFNlcnZpY2UiLCIuL2NvcmUvY29yZS5wbHVnaW4iLCIuL2NvcmUvY29yZS5zY2FsZSIsIi4vY29yZS9jb3JlLnNjYWxlU2VydmljZSIsIi4vY29yZS9jb3JlLnRvb2x0aXAiLCIuL2VsZW1lbnRzL2luZGV4IiwiLi9oZWxwZXJzL2luZGV4IiwiLi9wbGF0Zm9ybXMvcGxhdGZvcm0iLCIuL3BsdWdpbnMvcGx1Z2luLmZpbGxlciIsIi4vcGx1Z2lucy9wbHVnaW4ubGVnZW5kIiwiLi9wbHVnaW5zL3BsdWdpbi50aXRsZSIsIi4vc2NhbGVzL3NjYWxlLmNhdGVnb3J5IiwiLi9zY2FsZXMvc2NhbGUubGluZWFyIiwiLi9zY2FsZXMvc2NhbGUubGluZWFyYmFzZSIsIi4vc2NhbGVzL3NjYWxlLmxvZ2FyaXRobWljIiwiLi9zY2FsZXMvc2NhbGUucmFkaWFsTGluZWFyIiwiLi9zY2FsZXMvc2NhbGUudGltZSIsIjIiLCJCYXIiLCJjb250ZXh0IiwiY29uZmlnIiwidHlwZSIsIjMiLCJCdWJibGUiLCI0IiwiRG91Z2hudXQiLCI1IiwiTGluZSIsIjYiLCJQb2xhckFyZWEiLCI3IiwiUmFkYXIiLCI4IiwiU2NhdHRlciIsIjkiLCJfc2V0IiwiaG92ZXIiLCJtb2RlIiwic2NhbGVzIiwieEF4ZXMiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwib2Zmc2V0IiwiZ3JpZExpbmVzIiwib2Zmc2V0R3JpZExpbmVzIiwieUF4ZXMiLCJheGlzIiwicG9zaXRpb24iLCJyZWN0YW5nbGUiLCJib3JkZXJTa2lwcGVkIiwidG9vbHRpcHMiLCJjYWxsYmFja3MiLCJ0aXRsZSIsIml0ZW0iLCJkYXRhIiwieUxhYmVsIiwibGFiZWxzIiwiaW5kZXgiLCJsYWJlbCIsImRhdGFzZXRzIiwiZGF0YXNldEluZGV4IiwieExhYmVsIiwiY29udHJvbGxlcnMiLCJiYXIiLCJEYXRhc2V0Q29udHJvbGxlciIsImV4dGVuZCIsImRhdGFFbGVtZW50VHlwZSIsIlJlY3RhbmdsZSIsIm1ldGEiLCJtZSIsInRoaXMiLCJwcm90b3R5cGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldE1ldGEiLCJzdGFjayIsImdldERhdGFzZXQiLCJ1cGRhdGUiLCJyZXNldCIsImlsZW4iLCJyZWN0cyIsIl9ydWxlciIsImdldFJ1bGVyIiwidXBkYXRlRWxlbWVudCIsImNoYXJ0IiwiZGF0YXNldCIsImN1c3RvbSIsInJlY3RhbmdsZU9wdGlvbnMiLCJvcHRpb25zIiwiX3hTY2FsZSIsImdldFNjYWxlRm9ySWQiLCJ4QXhpc0lEIiwiX3lTY2FsZSIsInlBeGlzSUQiLCJfZGF0YXNldEluZGV4IiwiX2luZGV4IiwiX21vZGVsIiwiZGF0YXNldExhYmVsIiwiYmFja2dyb3VuZENvbG9yIiwidmFsdWVBdEluZGV4T3JEZWZhdWx0IiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsInVwZGF0ZUVsZW1lbnRHZW9tZXRyeSIsInBpdm90IiwibW9kZWwiLCJ2c2NhbGUiLCJnZXRWYWx1ZVNjYWxlIiwiYmFzZSIsImdldEJhc2VQaXhlbCIsImhvcml6b250YWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsInZwaXhlbHMiLCJjYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyIsImlwaXhlbHMiLCJjYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsIngiLCJoZWFkIiwiY2VudGVyIiwieSIsImhlaWdodCIsInNpemUiLCJ1bmRlZmluZWQiLCJ3aWR0aCIsImdldFZhbHVlU2NhbGVJZCIsImdldEluZGV4U2NhbGVJZCIsImdldEluZGV4U2NhbGUiLCJnZXRTdGFja0NvdW50IiwibGFzdCIsInNjYWxlIiwic3RhY2tlZCIsInN0YWNrcyIsImdldERhdGFzZXRNZXRhIiwiaXNEYXRhc2V0VmlzaWJsZSIsImluZGV4T2YiLCJnZXRTdGFja0luZGV4Iiwic3RhY2tDb3VudCIsInBpeGVscyIsInN0YXJ0IiwibGVmdCIsInRvcCIsImVuZCIsImdldFBpeGVsRm9yVmFsdWUiLCJpbWV0YSIsIml2YWx1ZSIsInZhbHVlIiwiZ2V0UmlnaHRWYWx1ZSIsImNvbnRyb2xsZXIiLCJpZCIsImxlZnRTYW1wbGVTaXplIiwicmlnaHRTYW1wbGVTaXplIiwibGVmdENhdGVnb3J5U2l6ZSIsInJpZ2h0Q2F0ZWdvcnlTaXplIiwiZnVsbEJhclNpemUiLCJzdGFja0luZGV4IiwiTWF0aCIsIm1pbiIsInZhbHVlT3JEZWZhdWx0IiwiYmFyVGhpY2tuZXNzIiwibWF4QmFyVGhpY2tuZXNzIiwiSW5maW5pdHkiLCJkcmF3IiwiY2xpcEFyZWEiLCJjdHgiLCJjaGFydEFyZWEiLCJpc05hTiIsInVuY2xpcEFyZWEiLCJzZXRIb3ZlclN0eWxlIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJnZXRIb3ZlckNvbG9yIiwiaG92ZXJCb3JkZXJDb2xvciIsImhvdmVyQm9yZGVyV2lkdGgiLCJyZW1vdmVIb3ZlclN0eWxlIiwicmVjdGFuZ2xlRWxlbWVudE9wdGlvbnMiLCJob3Jpem9udGFsQmFyIiwiLi4vY29yZS9jb3JlLmRlZmF1bHRzIiwiLi4vZWxlbWVudHMvaW5kZXgiLCIuLi9oZWxwZXJzL2luZGV4IiwiMTAiLCJkYXRhUG9pbnQiLCJidWJibGUiLCJQb2ludCIsInBvaW50cyIsImVhY2giLCJwb2ludCIsInhTY2FsZSIsInlTY2FsZSIsIl9yZXNvbHZlRWxlbWVudE9wdGlvbnMiLCJkc0luZGV4IiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwiTmFOIiwiX29wdGlvbnMiLCJoaXRSYWRpdXMiLCJwb2ludFN0eWxlIiwicmFkaXVzIiwic2tpcCIsImhvdmVyUmFkaXVzIiwia2V5IiwicmVzb2x2ZSIsInZhbHVlcyIsImRhdGFJbmRleCIsImtleXMiLCIxMSIsImFuaW1hdGlvbiIsImFuaW1hdGVSb3RhdGUiLCJhbmltYXRlU2NhbGUiLCJsZWdlbmRDYWxsYmFjayIsInRleHQiLCJqb2luIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJtYXAiLCJkcyIsImFyYyIsImFyY09wdHMiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImhpZGRlbiIsIm9uQ2xpY2siLCJsZWdlbmRJdGVtIiwiY3V0b3V0UGVyY2VudGFnZSIsInJvdGF0aW9uIiwiUEkiLCJjaXJjdW1mZXJlbmNlIiwidG9vbHRpcEl0ZW0iLCJkYXRhTGFiZWwiLCJpc0FycmF5Iiwic2xpY2UiLCJjbG9uZSIsImRvdWdobnV0IiwicGllIiwiQXJjIiwibGlua1NjYWxlcyIsIm5vb3AiLCJnZXRSaW5nSW5kZXgiLCJyaW5nSW5kZXgiLCJqIiwib3B0cyIsImF2YWlsYWJsZVdpZHRoIiwicmlnaHQiLCJhdmFpbGFibGVIZWlnaHQiLCJib3R0b20iLCJtaW5TaXplIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwiY29zIiwic2luIiwiY29udGFpbnMwIiwiY29udGFpbnM5MCIsImNvbnRhaW5zMTgwIiwiY29udGFpbnMyNzAiLCJjdXRvdXQiLCJtYXgiLCJnZXRNYXhCb3JkZXJXaWR0aCIsIm91dGVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiYW5pbWF0aW9uT3B0cyIsImNlbnRlclgiLCJjZW50ZXJZIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImVsZW1lbnQiLCJhYnMiLCJhcmNzIiwiaG92ZXJXaWR0aCIsIl9jaGFydCIsIjEyIiwic2hvd0xpbmVzIiwic3BhbkdhcHMiLCJsaW5lRW5hYmxlZCIsInNob3dMaW5lIiwibGluZSIsImRhdGFzZXRFbGVtZW50VHlwZSIsImxpbmVFbGVtZW50T3B0aW9ucyIsInRlbnNpb24iLCJsaW5lVGVuc2lvbiIsIl9zY2FsZSIsIl9jaGlsZHJlbiIsImJvcmRlckNhcFN0eWxlIiwiYm9yZGVyRGFzaCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJmaWxsIiwic3RlcHBlZExpbmUiLCJzdGVwcGVkIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJnZXRQb2ludEJhY2tncm91bmRDb2xvciIsInBvaW50QmFja2dyb3VuZENvbG9yIiwiZ2V0UG9pbnRCb3JkZXJDb2xvciIsInBvaW50Qm9yZGVyQ29sb3IiLCJnZXRQb2ludEJvcmRlcldpZHRoIiwicG9pbnRCb3JkZXJXaWR0aCIsInBvaW50T3B0aW9ucyIsInBvaW50UmFkaXVzIiwicG9pbnRIaXRSYWRpdXMiLCJjYWxjdWxhdGVQb2ludFkiLCJkc01ldGEiLCJzdW1Qb3MiLCJzdW1OZWciLCJzdGFja2VkUmlnaHRWYWx1ZSIsIk51bWJlciIsInJpZ2h0VmFsdWUiLCJjYXBDb250cm9sUG9pbnQiLCJwdCIsImNvbnRyb2xQb2ludHMiLCJhcmVhIiwiZmlsdGVyIiwic3BsaW5lQ3VydmVNb25vdG9uZSIsInNwbGluZUN1cnZlIiwicHJldmlvdXNJdGVtIiwibmV4dEl0ZW0iLCJjb250cm9sUG9pbnRQcmV2aW91c1giLCJwcmV2aW91cyIsImNvbnRyb2xQb2ludFByZXZpb3VzWSIsImNvbnRyb2xQb2ludE5leHRYIiwibmV4dCIsImNvbnRyb2xQb2ludE5leHRZIiwiY2FwQmV6aWVyUG9pbnRzIiwicG9pbnRIb3ZlclJhZGl1cyIsInBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEhvdmVyQm9yZGVyQ29sb3IiLCJwb2ludEhvdmVyQm9yZGVyV2lkdGgiLCIxMyIsImFuZ2xlTGluZXMiLCJkaXNwbGF5IiwiY2lyY3VsYXIiLCJwb2ludExhYmVscyIsInRpY2tzIiwiYmVnaW5BdFplcm8iLCJwb2xhckFyZWEiLCJjb3VudCIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwieENlbnRlciIsInlDZW50ZXIiLCJ2aXNpYmxlQ291bnQiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImRpc3RhbmNlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJyZXNldFJhZGl1cyIsIjE0IiwicmFkYXIiLCJfbG9vcCIsInBvaW50RWxlbWVudE9wdGlvbnMiLCJwb2ludFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwiMTUiLCJzY2F0dGVyIiwiMTYiLCJkdXJhdGlvbiIsImVhc2luZyIsIm9uUHJvZ3Jlc3MiLCJvbkNvbXBsZXRlIiwiQW5pbWF0aW9uIiwiY3VycmVudFN0ZXAiLCJudW1TdGVwcyIsInJlbmRlciIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwiYW5pbWF0aW9uU2VydmljZSIsImZyYW1lRHVyYXRpb24iLCJhbmltYXRpb25zIiwiZHJvcEZyYW1lcyIsInJlcXVlc3QiLCJhZGRBbmltYXRpb24iLCJsYXp5IiwiYW5pbWF0aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uIiwiZmluZEluZGV4Iiwic3BsaWNlIiwicmVxdWVzdEFuaW1GcmFtZSIsInN0YXJ0RGlnZXN0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImZyYW1lc1RvRHJvcCIsImZsb29yIiwiYWR2YW5jZSIsImVuZFRpbWUiLCJjYWxsYmFjayIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwiLi9jb3JlLmRlZmF1bHRzIiwiLi9jb3JlLmVsZW1lbnQiLCIxNyIsImluaXRDb25maWciLCJjb25maWdNZXJnZSIsImdsb2JhbCIsInVwZGF0ZUNvbmZpZyIsIm5ld09wdGlvbnMiLCJjb25jYXQiLCJmb3JFYWNoIiwic2NhbGVPcHRpb25zIiwidG9vbHRpcCIsInBvc2l0aW9uSXNIb3Jpem9udGFsIiwidHlwZXMiLCJpbnN0YW5jZXMiLCJjb25zdHJ1Y3QiLCJhY3F1aXJlQ29udGV4dCIsInVpZCIsImFzcGVjdFJhdGlvIiwiX2J1ZmZlcmVkUmVuZGVyIiwiY29uc29sZSIsImVycm9yIiwibm90aWZ5IiwicmV0aW5hU2NhbGUiLCJkZXZpY2VQaXhlbFJhdGlvIiwiYmluZEV2ZW50cyIsInJlc3BvbnNpdmUiLCJyZXNpemUiLCJlbnN1cmVTY2FsZXNIYXZlSURzIiwiYnVpbGRTY2FsZXMiLCJpbml0VG9vbFRpcCIsImNsZWFyIiwic3RvcCIsInNpbGVudCIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJuZXdXaWR0aCIsImdldE1heGltdW1XaWR0aCIsIm5ld0hlaWdodCIsImdldE1heGltdW1IZWlnaHQiLCJzdHlsZSIsIm5ld1NpemUiLCJvblJlc2l6ZSIsInJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbiIsInNjYWxlc09wdGlvbnMiLCJ4QXhpc09wdGlvbnMiLCJ5QXhpc09wdGlvbnMiLCJpdGVtcyIsImR0eXBlIiwiZHBvc2l0aW9uIiwiaXNEZWZhdWx0Iiwic2NhbGVUeXBlIiwic2NhbGVDbGFzcyIsInNjYWxlU2VydmljZSIsImdldFNjYWxlQ29uc3RydWN0b3IiLCJtZXJnZVRpY2tzT3B0aW9ucyIsImFkZFNjYWxlc1RvTGF5b3V0IiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwibmV3Q29udHJvbGxlcnMiLCJkZXN0cm95RGF0YXNldE1ldGEiLCJ1cGRhdGVJbmRleCIsIkNvbnRyb2xsZXJDbGFzcyIsInJlc2V0RWxlbWVudHMiLCJfZGF0YSIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInVwZGF0ZUxheW91dCIsInVwZGF0ZURhdGFzZXRzIiwiX2J1ZmZlcmVkUmVxdWVzdCIsImxheW91dFNlcnZpY2UiLCJ1cGRhdGVEYXRhc2V0IiwiYXJncyIsImFuaW1hdGlvbk9wdGlvbnMiLCJhbmltYXRpb25PYmplY3QiLCJlYXNpbmdGdW5jdGlvbiIsImVmZmVjdHMiLCJzdGVwRGVjaW1hbCIsImVhc2luZ1ZhbHVlIiwiaXNOdWxsT3JVbmRlZiIsInRyYW5zaXRpb24iLCJib3hlcyIsImJveCIsImRyYXdEYXRhc2V0cyIsImRyYXdEYXRhc2V0IiwiZ2V0RWxlbWVudEF0RXZlbnQiLCJtb2RlcyIsInNpbmdsZSIsImdldEVsZW1lbnRzQXRFdmVudCIsImludGVyc2VjdCIsImdldEVsZW1lbnRzQXRYQXhpcyIsImdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUiLCJtZXRob2QiLCJnZXREYXRhc2V0QXRFdmVudCIsIl9tZXRhIiwiZ2VuZXJhdGVMZWdlbmQiLCJkZXN0cm95IiwidW5iaW5kRXZlbnRzIiwicmVsZWFzZUNvbnRleHQiLCJ0b0Jhc2U2NEltYWdlIiwidG9EYXRhVVJMIiwiVG9vbHRpcCIsIl9jaGFydEluc3RhbmNlIiwibGlzdGVuZXJzIiwiX2xpc3RlbmVycyIsImxpc3RlbmVyIiwiZXZlbnRIYW5kbGVyIiwiZXZlbnRzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVIb3ZlclN0eWxlIiwiZW5hYmxlZCIsImNoYW5nZWQiLCJoYW5kbGVFdmVudCIsImJ1ZmZlcmVkUmVxdWVzdCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiaG92ZXJPcHRpb25zIiwibGFzdEFjdGl2ZSIsImFjdGl2ZSIsIm9uSG92ZXIiLCJuYXRpdmUiLCJhcnJheUVxdWFscyIsIkNvbnRyb2xsZXIiLCIuLi9wbGF0Zm9ybXMvcGxhdGZvcm0iLCIuL2NvcmUuaW50ZXJhY3Rpb24iLCIxOCIsImxpc3RlbkFycmF5RXZlbnRzIiwiYXJyYXkiLCJfY2hhcnRqcyIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJhcnJheUV2ZW50cyIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwiQXJyYXkiLCJyZXMiLCJvYmplY3QiLCJ1bmxpc3RlbkFycmF5RXZlbnRzIiwic3R1YiIsImFkZEVsZW1lbnRzIiwic2NhbGVJRCIsImNyZWF0ZU1ldGFEYXRhc2V0IiwiY3JlYXRlTWV0YURhdGEiLCJtZXRhRGF0YSIsImFkZEVsZW1lbnRBbmRSZXNldCIsInJlc3luY0VsZW1lbnRzIiwiZWxlbWVudE9wdHMiLCJudW1NZXRhIiwibnVtRGF0YSIsImluc2VydEVsZW1lbnRzIiwib25EYXRhUHVzaCIsIm9uRGF0YVBvcCIsInBvcCIsIm9uRGF0YVNoaWZ0Iiwic2hpZnQiLCJvbkRhdGFTcGxpY2UiLCJvbkRhdGFVbnNoaWZ0IiwiaW5oZXJpdHMiLCIxOSIsInNjb3BlIiwibWVyZ2UiLCIyMCIsImludGVycG9sYXRlIiwidmlldyIsImVhc2UiLCJhY3R1YWwiLCJvcmlnaW4iLCJ0YXJnZXQiLCJjMCIsImMxIiwiaGFzT3duUHJvcGVydHkiLCJjb2xvciIsInZhbGlkIiwibWl4IiwicmdiU3RyaW5nIiwiaXNGaW5pdGUiLCJjb25maWd1cmF0aW9uIiwiX3ZpZXciLCJfc3RhcnQiLCJ0b29sdGlwUG9zaXRpb24iLCJoYXNWYWx1ZSIsImlzTnVtYmVyIiwiY2hhcnRqcy1jb2xvciIsIjIxIiwicGFyc2VNYXhTdHlsZSIsInN0eWxlVmFsdWUiLCJub2RlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwicGFyc2VJbnQiLCJwYXJlbnROb2RlIiwiaXNDb25zdHJhaW5lZFZhbHVlIiwiZ2V0Q29uc3RyYWludERpbWVuc2lvbiIsImRvbU5vZGUiLCJtYXhTdHlsZSIsInBlcmNlbnRhZ2VQcm9wZXJ0eSIsImRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJjb25zdHJhaW5lZE5vZGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiY29uc3RyYWluZWRDb250YWluZXIiLCJoYXNDTm9kZSIsImhhc0NDb250YWluZXIiLCJpbmZpbml0eSIsIlBPU0lUSVZFX0lORklOSVRZIiwic2V0Rm4iLCJtZXJnZXIiLCJzb3VyY2UiLCJ0dmFsIiwic3ZhbCIsInNjYWxlTWVyZ2UiLCJnZXRTY2FsZURlZmF1bHRzIiwiX21lcmdlciIsInNsZW4iLCJ3aGVyZSIsImNvbGxlY3Rpb24iLCJmaWx0ZXJDYWxsYmFjayIsImZpbHRlcmVkIiwiZmluZE5leHRXaGVyZSIsImFycmF5VG9TZWFyY2giLCJzdGFydEluZGV4IiwiY3VycmVudEl0ZW0iLCJmaW5kUHJldmlvdXNXaGVyZSIsImV4dGVuc2lvbnMiLCJDaGFydEVsZW1lbnQiLCJjb25zdHJ1Y3RvciIsIlN1cnJvZ2F0ZSIsIl9fc3VwZXJfXyIsInBhcnNlRmxvYXQiLCJhbG1vc3RFcXVhbHMiLCJlcHNpbG9uIiwiYWxtb3N0V2hvbGUiLCJyb3VuZGVkIiwicm91bmQiLCJyZWR1Y2UiLCJORUdBVElWRV9JTkZJTklUWSIsInNpZ24iLCJsb2cxMCIsImxvZyIsIkxOMTAiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsImdldEFuZ2xlRnJvbVBvaW50IiwiY2VudHJlUG9pbnQiLCJhbmdsZVBvaW50IiwiZGlzdGFuY2VGcm9tWENlbnRlciIsImRpc3RhbmNlRnJvbVlDZW50ZXIiLCJyYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIiLCJzcXJ0IiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInB0MSIsInB0MiIsInBvdyIsImFsaWFzUGl4ZWwiLCJwaXhlbFdpZHRoIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImN1cnJlbnQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiRVBTSUxPTiIsInBvaW50QmVmb3JlIiwicG9pbnRDdXJyZW50IiwicG9pbnRBZnRlciIsInBvaW50c1dpdGhUYW5nZW50cyIsImRlbHRhSyIsIm1LIiwicG9pbnRzTGVuIiwic2xvcGVEZWx0YVgiLCJhbHBoYUsiLCJiZXRhSyIsInRhdUsiLCJzcXVhcmVkTWFnbml0dWRlIiwiZGVsdGFYIiwibG9vcCIsIm5pY2VOdW0iLCJyYW5nZSIsImV4cG9uZW50IiwiZnJhY3Rpb24iLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2dCIsIm1vdXNlWCIsIm1vdXNlWSIsIm9yaWdpbmFsRXZlbnQiLCJjdXJyZW50VGFyZ2V0Iiwic3JjRWxlbWVudCIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZGRpbmdMZWZ0IiwiZ2V0U3R5bGUiLCJwYWRkaW5nVG9wIiwicGFkZGluZ1JpZ2h0IiwicGFkZGluZ0JvdHRvbSIsImN1cnJlbnREZXZpY2VQaXhlbFJhdGlvIiwiZ2V0Q29uc3RyYWludFdpZHRoIiwiZ2V0Q29uc3RyYWludEhlaWdodCIsImNvbnRhaW5lciIsImNsaWVudFdpZHRoIiwidyIsImN3IiwiY2xpZW50SGVpZ2h0IiwiaCIsImNoIiwiZWwiLCJwcm9wZXJ0eSIsImN1cnJlbnRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJmb3JjZVJhdGlvIiwicGl4ZWxSYXRpbyIsImZvbnRTdHJpbmciLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwibG9uZ2VzdFRleHQiLCJmb250IiwiYXJyYXlPZlRoaW5ncyIsImNhY2hlIiwiZ2MiLCJnYXJiYWdlQ29sbGVjdCIsImxvbmdlc3QiLCJ0aGluZyIsIm1lYXN1cmVUZXh0IiwibmVzdGVkVGhpbmciLCJnY0xlbiIsInN0cmluZyIsInRleHRXaWR0aCIsIm51bWJlck9mTGFiZWxMaW5lcyIsIm51bWJlck9mTGluZXMiLCJDYW52YXNHcmFkaWVudCIsImRlZmF1bHRDb2xvciIsImNvbG9yVmFsdWUiLCJDYW52YXNQYXR0ZXJuIiwic2F0dXJhdGUiLCJkYXJrZW4iLCIyMiIsInBhcnNlVmlzaWJsZUl0ZW1zIiwiaGFuZGxlciIsImpsZW4iLCJnZXRJbnRlcnNlY3RJdGVtcyIsImluUmFuZ2UiLCJnZXROZWFyZXN0SXRlbXMiLCJkaXN0YW5jZU1ldHJpYyIsIm1pbkRpc3RhbmNlIiwibmVhcmVzdEl0ZW1zIiwiZ2V0Q2VudGVyUG9pbnQiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJ1c2VYIiwidXNlWSIsImRlbHRhWSIsImluZGV4TW9kZSIsIngtYXhpcyIsIm5lYXJlc3QiLCJzb3J0IiwiYiIsInNpemVBIiwiZ2V0QXJlYSIsInNpemVCIiwicmV0IiwiaW50ZXJzZWN0c0l0ZW0iLCJpblhSYW5nZSIsImluWVJhbmdlIiwiMjMiLCJkZWZhdWx0Rm9udENvbG9yIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udFNpemUiLCJkZWZhdWx0Rm9udFN0eWxlIiwibGF5b3V0IiwicGFkZGluZyIsIjI0IiwiZmlsdGVyQnlQb3NpdGlvbiIsInYiLCJzb3J0QnlXZWlnaHQiLCJyZXZlcnNlIiwiX3RtcEluZGV4XyIsInYwIiwidjEiLCJ3ZWlnaHQiLCJhZGRCb3giLCJmdWxsV2lkdGgiLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwiY29uZmlndXJlIiwicHJvcCIsInByb3BzIiwiZ2V0TWluaW11bUJveFNpemUiLCJjaGFydFdpZHRoIiwibWF4Q2hhcnRBcmVhV2lkdGgiLCJob3Jpem9udGFsQm94SGVpZ2h0IiwibWF4Q2hhcnRBcmVhSGVpZ2h0IiwidmVydGljYWxCb3hXaWR0aCIsImNoYXJ0QXJlYUhlaWdodCIsIm1pbkJveFNpemVzIiwiZml0Qm94IiwibWluQm94U2l6ZSIsIm1pbkJveCIsInNjYWxlTWFyZ2luIiwidG90YWxMZWZ0Qm94ZXNXaWR0aCIsIm1heEhvcml6b250YWxMZWZ0UGFkZGluZyIsInRvdGFsUmlnaHRCb3hlc1dpZHRoIiwibWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyIsImNoYXJ0SGVpZ2h0IiwiZmluYWxGaXRWZXJ0aWNhbEJveCIsInRvdGFsVG9wQm94ZXNIZWlnaHQiLCJ0b3RhbEJvdHRvbUJveGVzSGVpZ2h0IiwicGxhY2VCb3giLCJsZWZ0UGFkZGluZyIsInJpZ2h0UGFkZGluZyIsImxheW91dE9wdGlvbnMiLCJ0b1BhZGRpbmciLCJ0b3BQYWRkaW5nIiwiYm90dG9tUGFkZGluZyIsImxlZnRCb3hlcyIsInJpZ2h0Qm94ZXMiLCJ0b3BCb3hlcyIsImJvdHRvbUJveGVzIiwiY2hhcnRBcmVhQm94ZXMiLCJjaGFydEFyZWFXaWR0aCIsIm1heFZlcnRpY2FsVG9wUGFkZGluZyIsIm1heFZlcnRpY2FsQm90dG9tUGFkZGluZyIsImhvcml6b250YWxCb3giLCJnZXRQYWRkaW5nIiwiYm94UGFkZGluZyIsInZlcnRpY2FsQm94IiwibGVmdFBhZGRpbmdBZGRpdGlvbiIsInRvcFBhZGRpbmdBZGRpdGlvbiIsIm5ld01heENoYXJ0QXJlYUhlaWdodCIsIm5ld01heENoYXJ0QXJlYVdpZHRoIiwiMjUiLCJfcGx1Z2lucyIsIl9jYWNoZUlkIiwicCIsInBsdWdpbiIsInVucmVnaXN0ZXIiLCJpZHgiLCJnZXRBbGwiLCJob29rIiwiZGVzY3JpcHRvciIsInBhcmFtcyIsImRlc2NyaXB0b3JzIiwicGx1Z2luU2VydmljZSIsIlBsdWdpbkJhc2UiLCIyNiIsImxhYmVsc0Zyb21UaWNrcyIsImdldExpbmVWYWx1ZSIsImxpbmVWYWx1ZSIsImdldFBpeGVsRm9yVGljayIsIlRpY2tzIiwiZHJhd0JvcmRlciIsImRyYXdPbkNoYXJ0QXJlYSIsImRyYXdUaWNrcyIsInRpY2tNYXJrTGVuZ3RoIiwiemVyb0xpbmVXaWR0aCIsInplcm9MaW5lQ29sb3IiLCJ6ZXJvTGluZUJvcmRlckRhc2giLCJ6ZXJvTGluZUJvcmRlckRhc2hPZmZzZXQiLCJzY2FsZUxhYmVsIiwibGFiZWxTdHJpbmciLCJsaW5lSGVpZ2h0IiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJmb3JtYXR0ZXJzIiwibWlub3IiLCJtYWpvciIsImNvbXB1dGVUZXh0U2l6ZSIsInRpY2siLCJwYXJzZUZvbnRPcHRpb25zIiwiZ2xvYmFsRGVmYXVsdHMiLCJmb250U2l6ZSIsImZhbWlseSIsInBhcnNlTGluZUhlaWdodCIsInRvTGluZUhlaWdodCIsIlNjYWxlIiwiZ2V0VGlja3MiLCJfdGlja3MiLCJiZWZvcmVVcGRhdGUiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsIm1hcmdpbnMiLCJsb25nZXN0VGV4dENhY2hlIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsImJlZm9yZUJ1aWxkVGlja3MiLCJidWlsZFRpY2tzIiwiYWZ0ZXJCdWlsZFRpY2tzIiwiYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiY29udmVydFRpY2tzVG9MYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbiIsImNhbGN1bGF0ZVRpY2tSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiYmVmb3JlRml0IiwiZml0IiwiYWZ0ZXJGaXQiLCJhZnRlclVwZGF0ZSIsInRpY2tPcHRzIiwidXNlckNhbGxiYWNrIiwidGlja0ZvbnQiLCJsYWJlbFJvdGF0aW9uIiwiY29zUm90YXRpb24iLCJvcmlnaW5hbExhYmVsV2lkdGgiLCJsYWJlbFdpZHRoIiwidGlja1dpZHRoIiwiYW5nbGVSYWRpYW5zIiwic2NhbGVMYWJlbE9wdHMiLCJncmlkTGluZU9wdHMiLCJpc0Z1bGxXaWR0aCIsInNjYWxlTGFiZWxMaW5lSGVpZ2h0Iiwic2NhbGVMYWJlbFBhZGRpbmciLCJkZWx0YUhlaWdodCIsImxhcmdlc3RUZXh0V2lkdGgiLCJ0YWxsZXN0TGFiZWxIZWlnaHRJbkxpbmVzIiwibGluZVNwYWNlIiwidGlja1BhZGRpbmciLCJsb25nZXN0TGFiZWxXaWR0aCIsInNpblJvdGF0aW9uIiwibGFiZWxIZWlnaHQiLCJmaXJzdExhYmVsV2lkdGgiLCJsYXN0TGFiZWxXaWR0aCIsImhhbmRsZU1hcmdpbnMiLCJyYXdWYWx1ZSIsImdldExhYmVsRm9ySW5kZXgiLCJnZXRWYWx1ZUZvclBpeGVsIiwiaW5uZXJXaWR0aCIsInBpeGVsIiwiZmluYWxWYWwiLCJpbm5lckhlaWdodCIsImRlY2ltYWwiLCJ2YWx1ZU9mZnNldCIsImdldEJhc2VWYWx1ZSIsIl9hdXRvU2tpcCIsInNraXBSYXRpbyIsInNob3VsZFNraXAiLCJtYXhUaWNrcyIsIm9wdGlvblRpY2tzIiwidGlja0NvdW50IiwibGFiZWxSb3RhdGlvblJhZGlhbnMiLCJsb25nZXN0Um90YXRlZExhYmVsIiwicmVzdWx0IiwibWF4VGlja3NMaW1pdCIsIm9wdGlvbk1ham9yVGlja3MiLCJpc1JvdGF0ZWQiLCJ0aWNrRm9udENvbG9yIiwiZm9udENvbG9yIiwibWFqb3JUaWNrRm9udENvbG9yIiwibWFqb3JUaWNrRm9udCIsInRsIiwic2NhbGVMYWJlbEZvbnRDb2xvciIsInNjYWxlTGFiZWxGb250IiwiaXRlbXNUb0RyYXciLCJ4VGlja1N0YXJ0IiwieFRpY2tFbmQiLCJ5VGlja1N0YXJ0IiwieVRpY2tFbmQiLCJsaW5lQ29sb3IiLCJ6ZXJvTGluZUluZGV4IiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJsYWJlbFgiLCJsYWJlbFkiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJsYWJlbFlPZmZzZXQiLCJ4TGluZVZhbHVlIiwibGFiZWxYT2Zmc2V0IiwiaXNMZWZ0IiwieUxpbmVWYWx1ZSIsImdsV2lkdGgiLCJnbENvbG9yIiwiZ2xCb3JkZXJEYXNoIiwiZ2xCb3JkZXJEYXNoT2Zmc2V0IiwiaXRlbVRvRHJhdyIsInNhdmUiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwicmVzdG9yZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsImZpbGxUZXh0Iiwic2NhbGVMYWJlbFgiLCJzY2FsZUxhYmVsWSIsImhhbGZMaW5lSGVpZ2h0IiwiLi9jb3JlLnRpY2tzIiwiMjciLCJjb25zdHJ1Y3RvcnMiLCJyZWdpc3RlclNjYWxlVHlwZSIsInNjYWxlQ29uc3RydWN0b3IiLCJzY2FsZURlZmF1bHRzIiwidXBkYXRlU2NhbGVEZWZhdWx0cyIsImFkZGl0aW9ucyIsIjI4IiwiZ2VuZXJhdG9ycyIsImxpbmVhciIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwic3BhY2luZyIsInN0ZXBTaXplIiwibmljZVJhbmdlIiwibmljZU1pbiIsIm5pY2VNYXgiLCJjZWlsIiwibnVtU3BhY2VzIiwibG9nYXJpdGhtaWMiLCJleHAiLCJzaWduaWZpY2FuZCIsInRpY2tWYWwiLCJlbmRFeHAiLCJlbmRTaWduaWZpY2FuZCIsIm1pbk5vdFplcm8iLCJsYXN0VGljayIsInRpY2tWYWx1ZSIsImRlbHRhIiwibG9nRGVsdGEiLCJ0aWNrU3RyaW5nIiwibnVtRGVjaW1hbCIsInRvRml4ZWQiLCJyZW1haW4iLCJ0b0V4cG9uZW50aWFsIiwiMjkiLCJ0aXRsZUZvbnRTdHlsZSIsInRpdGxlU3BhY2luZyIsInRpdGxlTWFyZ2luQm90dG9tIiwidGl0bGVGb250Q29sb3IiLCJ0aXRsZUFsaWduIiwiYm9keVNwYWNpbmciLCJib2R5Rm9udENvbG9yIiwiYm9keUFsaWduIiwiZm9vdGVyRm9udFN0eWxlIiwiZm9vdGVyU3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlckZvbnRDb2xvciIsImZvb3RlckFsaWduIiwieVBhZGRpbmciLCJ4UGFkZGluZyIsImNhcmV0UGFkZGluZyIsImNhcmV0U2l6ZSIsImNvcm5lclJhZGl1cyIsIm11bHRpS2V5QmFja2dyb3VuZCIsImRpc3BsYXlDb2xvcnMiLCJiZWZvcmVUaXRsZSIsInRvb2x0aXBJdGVtcyIsImxhYmVsQ291bnQiLCJhZnRlclRpdGxlIiwiYmVmb3JlQm9keSIsImJlZm9yZUxhYmVsIiwibGFiZWxDb2xvciIsImFjdGl2ZUVsZW1lbnQiLCJsYWJlbFRleHRDb2xvciIsImFmdGVyTGFiZWwiLCJhZnRlckJvZHkiLCJiZWZvcmVGb290ZXIiLCJmb290ZXIiLCJhZnRlckZvb3RlciIsIm1lcmdlT3BhY2l0eSIsImNvbG9yU3RyaW5nIiwib3BhY2l0eSIsImFscGhhIiwicmdiYVN0cmluZyIsInB1c2hPckNvbmNhdCIsInRvUHVzaCIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZ2V0QmFzZU1vZGVsIiwidG9vbHRpcE9wdHMiLCJ4QWxpZ24iLCJ5QWxpZ24iLCJfYm9keUZvbnRGYW1pbHkiLCJib2R5Rm9udEZhbWlseSIsIl9ib2R5Rm9udFN0eWxlIiwiYm9keUZvbnRTdHlsZSIsIl9ib2R5QWxpZ24iLCJib2R5Rm9udFNpemUiLCJfdGl0bGVGb250RmFtaWx5IiwidGl0bGVGb250RmFtaWx5IiwiX3RpdGxlRm9udFN0eWxlIiwidGl0bGVGb250U2l6ZSIsIl90aXRsZUFsaWduIiwiX2Zvb3RlckZvbnRGYW1pbHkiLCJmb290ZXJGb250RmFtaWx5IiwiX2Zvb3RlckZvbnRTdHlsZSIsImZvb3RlckZvbnRTaXplIiwiX2Zvb3RlckFsaWduIiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwiZ2V0VG9vbHRpcFNpemUiLCJib2R5IiwiY29tYmluZWRCb2R5TGVuZ3RoIiwiYm9keUl0ZW0iLCJiZWZvcmUiLCJsaW5lcyIsImFmdGVyIiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVBbGlnbm1lbnQiLCJsZiIsInJmIiwib2xmIiwib3JmIiwieWYiLCJtaWRYIiwibWlkWSIsImdldEJhY2tncm91bmRQb2ludCIsInZtIiwiYWxpZ25tZW50IiwicGFkZGluZ0FuZFNpemUiLCJyYWRpdXNBbmRQYWRkaW5nIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImJvZHlJdGVtcyIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsImxlbiIsImV4aXN0aW5nTW9kZWwiLCJfYWN0aXZlIiwiYmFja2dyb3VuZFBvaW50IiwidG9vbHRpcFNpemUiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsVGV4dENvbG9ycyIsInBvc2l0aW9uZXJzIiwiX2V2ZW50UG9zaXRpb24iLCJpdGVtU29ydCIsImRhdGFQb2ludHMiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0bXAiLCJkcmF3VGl0bGUiLCJkcmF3Qm9keSIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiZHJhd0NvbG9yQm94ZXMiLCJmaWxsUmVjdCIsInN0cm9rZVJlY3QiLCJ0ZXh0Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZHJhd0JhY2tncm91bmQiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJfbGFzdEFjdGl2ZSIsImF2ZXJhZ2UiLCJwb3MiLCJldmVudFBvc2l0aW9uIiwibmVhcmVzdEVsZW1lbnQiLCJkIiwidHAiLCIzMCIsImluTGFiZWxSYW5nZSIsImNoYXJ0WCIsImNoYXJ0WSIsInBvaW50UmVsYXRpdmVQb3NpdGlvbiIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJoYWxmQW5nbGUiLCJoYWxmUmFkaXVzIiwiY2VudHJlQW5nbGUiLCJyYW5nZUZyb21DZW50cmUiLCJzQSIsImVBIiwibGluZUpvaW4iLCIuLi9jb3JlL2NvcmUuZWxlbWVudCIsIjMxIiwiY3VycmVudFZNIiwiZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzIiwibGFzdERyYXduSW5kZXgiLCJsaW5lQ2FwIiwiMzIiLCJ4UmFuZ2UiLCJ5UmFuZ2UiLCJyYXRpbyIsImRyYXdQb2ludCIsIjMzIiwiaXNWZXJ0aWNhbCIsImdldEJhckJvdW5kcyIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJjb3JuZXJBdCIsImNvcm5lcnMiLCJzdGFydENvcm5lciIsInNpZ25YIiwic2lnblkiLCJiYXJTaXplIiwiaGFsZlN0cm9rZSIsImJvcmRlckxlZnQiLCJib3JkZXJSaWdodCIsImJvcmRlclRvcCIsImJvcmRlckJvdHRvbSIsImJvcmRlcnMiLCJjb3JuZXIiLCJib3VuZHMiLCIzNCIsIi4vZWxlbWVudC5hcmMiLCIuL2VsZW1lbnQubGluZSIsIi4vZWxlbWVudC5wb2ludCIsIi4vZWxlbWVudC5yZWN0YW5nbGUiLCIzNSIsImNsZWFyUmVjdCIsInJvdW5kZWRSZWN0IiwicngiLCJyeSIsInJlY3QiLCJlZGdlTGVuZ3RoIiwieE9mZnNldCIsInlPZmZzZXQiLCJ0b1N0cmluZyIsImRyYXdJbWFnZSIsIlNRUlQyIiwibGVmdFgiLCJ0b3BZIiwic2lkZVNpemUiLCJjbGlwIiwiZmxpcCIsImJlemllckN1cnZlVG8iLCJkcmF3Um91bmRlZFJlY3RhbmdsZSIsIi4vaGVscGVycy5jb3JlIiwiMzYiLCJpc09iamVjdCIsImRlZmF1bHRWYWx1ZSIsImZuIiwidGhpc0FyZyIsImxvb3BhYmxlIiwiYTAiLCJhMSIsImtsZW4iLCJrIiwiX21lcmdlcklmIiwibWVyZ2VJZiIsInNvdXJjZXMiLCJjYWxsQ2FsbGJhY2siLCJmcm9tSW5kZXgiLCJnZXRWYWx1ZU9yRGVmYXVsdCIsImdldFZhbHVlQXRJbmRleE9yRGVmYXVsdCIsIjM3IiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJhc2luIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJlYXNpbmdFZmZlY3RzIiwiMzgiLCJtYXRjaGVzIiwibWF0Y2giLCJpbnB1dHMiLCIzOSIsIi4vaGVscGVycy5jYW52YXMiLCIuL2hlbHBlcnMuZWFzaW5nIiwiLi9oZWxwZXJzLm9wdGlvbnMiLCI0MCIsImdldENvbnRleHQiLCI0MSIsInJlYWRVc2VkU2l6ZSIsImluaXRDYW52YXMiLCJyZW5kZXJIZWlnaHQiLCJnZXRBdHRyaWJ1dGUiLCJyZW5kZXJXaWR0aCIsIkVYUEFORE9fS0VZIiwiaW5pdGlhbCIsImRpc3BsYXlXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJldmVudExpc3RlbmVyT3B0aW9ucyIsImNyZWF0ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJmcm9tTmF0aXZlRXZlbnQiLCJldmVudCIsIkVWRU5UX1RZUEVTIiwidGhyb3R0bGVkIiwidGlja2luZyIsImNyZWF0ZVJlc2l6ZXIiLCJyZXNpemVyIiwiY3JlYXRlRWxlbWVudCIsImNscyIsIkNTU19QUkVGSVgiLCJjc3NUZXh0IiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIiwiZXhwYW5kIiwiY2hpbGROb2RlcyIsInNocmluayIsIl9yZXNldCIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJvblNjcm9sbCIsImJpbmQiLCJ3YXRjaEZvclJlbmRlciIsImV4cGFuZG8iLCJwcm94eSIsInJlbmRlclByb3h5IiwiYW5pbWF0aW9uTmFtZSIsIkNTU19SRU5ERVJfQU5JTUFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUX0VWRU5UUyIsImNsYXNzTGlzdCIsImFkZCIsIkNTU19SRU5ERVJfTU9OSVRPUiIsInVud2F0Y2hGb3JSZW5kZXIiLCJyZW1vdmUiLCJhZGRSZXNpemVMaXN0ZW5lciIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVSZXNpemVMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwiaW5qZWN0Q1NTIiwiY3NzIiwiX3N0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwic3VwcG9ydHMiLCJwYXNzaXZlIiwiX2VuYWJsZWQiLCJrZXlmcmFtZXMiLCJnZXRFbGVtZW50QnlJZCIsInJlbW92ZUF0dHJpYnV0ZSIsInByb3hpZXMiLCJhZGRFdmVudCIsInJlbW92ZUV2ZW50IiwiNDIiLCJiYXNpYyIsImRvbSIsImltcGxlbWVudGF0aW9uIiwiLi9wbGF0Zm9ybS5iYXNpYyIsIi4vcGxhdGZvcm0uZG9tIiwiNDMiLCJmaWxsZXIiLCJwcm9wYWdhdGUiLCJkZWNvZGVGaWxsIiwiY29tcHV0ZUJvdW5kYXJ5Iiwic2NhbGVCb3R0b20iLCJzY2FsZVRvcCIsInNjYWxlWmVybyIsImdldEJhc2VQb3NpdGlvbiIsInJlc29sdmVUYXJnZXQiLCJ2aXNpdGVkIiwidmlzaWJsZSIsImNyZWF0ZU1hcHBlciIsIm1hcHBlcnMiLCJpc0RyYXdhYmxlIiwiZHJhd0FyZWEiLCJjdXJ2ZTAiLCJjdXJ2ZTEiLCJsZW4wIiwibGVuMSIsImRvRmlsbCIsIm1hcHBlciIsInAwIiwicDEiLCJkMCIsImQxIiwic3BhbiIsImJvdW5kYXJ5IiwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZSIsIiRmaWxsZXIiLCJiZWZvcmVEYXRhc2V0RHJhdyIsIjQ0IiwiY2kiLCJib3hXaWR0aCIsImxpbmVEYXNoIiwiZ2V0Qm94V2lkdGgiLCJsYWJlbE9wdHMiLCJ1c2VQb2ludFN0eWxlIiwiY3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoIiwibGVnZW5kT3B0cyIsIkxlZ2VuZCIsImxlZ2VuZEhpdEJveGVzIiwiZG91Z2hudXRNb2RlIiwiYmVmb3JlQnVpbGRMYWJlbHMiLCJidWlsZExhYmVscyIsImFmdGVyQnVpbGRMYWJlbHMiLCJsZWdlbmRJdGVtcyIsImdsb2JhbERlZmF1bHQiLCJsYWJlbEZvbnQiLCJoaXRib3hlcyIsImxpbmVXaWR0aHMiLCJ0b3RhbEhlaWdodCIsInZQYWRkaW5nIiwiY29sdW1uV2lkdGhzIiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJpdGVtSGVpZ2h0IiwiaXRlbVdpZHRoIiwibGluZURlZmF1bHQiLCJsZWdlbmRXaWR0aCIsImN1cnNvciIsImRyYXdMZWdlbmRCb3giLCJpc0xpbmVXaWR0aFplcm8iLCJvZmZTZXQiLCJoYWxmRm9udFNpemUiLCJ4TGVmdCIsInlNaWRkbGUiLCJsaCIsImhpdEJveCIsImJlZm9yZUluaXQiLCJhZnRlckV2ZW50IiwiNDUiLCJjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoIiwidGl0bGVPcHRzIiwiVGl0bGUiLCJ0aXRsZUJsb2NrIiwibGluZUNvdW50IiwidGV4dFNpemUiLCJ0aXRsZVgiLCJ0aXRsZVkiLCJ0aXRsZUZvbnQiLCI0NiIsImRlZmF1bHRDb25maWciLCJEYXRhc2V0U2NhbGUiLCJnZXRMYWJlbHMiLCJ4TGFiZWxzIiwieUxhYmVscyIsIm1pbkluZGV4IiwibWF4SW5kZXgiLCJ2YWx1ZUNhdGVnb3J5Iiwib2Zmc2V0QW10IiwidmFsdWVXaWR0aCIsIndpZHRoT2Zmc2V0IiwidmFsdWVIZWlnaHQiLCJoZWlnaHRPZmZzZXQiLCJob3J6IiwidmFsdWVEaW1lbnNpb24iLCI0NyIsIkxpbmVhclNjYWxlIiwiTGluZWFyU2NhbGVCYXNlIiwiSURNYXRjaGVzIiwiaGFzU3RhY2tzIiwidmFsdWVzUGVyU3RhY2siLCJwb3NpdGl2ZVZhbHVlcyIsIm5lZ2F0aXZlVmFsdWVzIiwicmVsYXRpdmVQb2ludHMiLCJ2YWx1ZXNGb3JUeXBlIiwibWluVmFsIiwibWF4VmFsIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsImdldFRpY2tMaW1pdCIsInRpY2tGb250U2l6ZSIsImhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlcyIsImlubmVyRGltZW5zaW9uIiwidGlja3NBc051bWJlcnMiLCIuLi9jb3JlL2NvcmUudGlja3MiLCI0OCIsIm1pblNpZ24iLCJtYXhTaWduIiwic2V0TWluIiwic3VnZ2VzdGVkTWluIiwic2V0TWF4Iiwic3VnZ2VzdGVkTWF4IiwibnVtZXJpY0dlbmVyYXRvck9wdGlvbnMiLCJmaXhlZFN0ZXBTaXplIiwiNDkiLCJMb2dhcml0aG1pY1NjYWxlIiwidGlja1ZhbHVlcyIsIm5ld1ZhbCIsIjUwIiwiZ2V0VmFsdWVDb3VudCIsImdldFBvaW50TGFiZWxGb250T3B0aW9ucyIsInBvaW50TGFiZWxPcHRpb25zIiwibWVhc3VyZUxhYmVsU2l6ZSIsImRldGVybWluZUxpbWl0cyIsImZpdFdpdGhQb2ludExhYmVscyIsInBsRm9udCIsImxhcmdlc3RQb3NzaWJsZVJhZGl1cyIsImZ1cnRoZXN0TGltaXRzIiwiZnVydGhlc3RBbmdsZXMiLCJfcG9pbnRMYWJlbFNpemVzIiwidmFsdWVDb3VudCIsImdldFBvaW50UG9zaXRpb24iLCJnZXRJbmRleEFuZ2xlIiwiaExpbWl0cyIsInZMaW1pdHMiLCJzZXRSZWR1Y3Rpb25zIiwiZHJhd2luZ0FyZWEiLCJzZXRDZW50ZXJQb2ludCIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwiYWRqdXN0UG9pbnRQb3NpdGlvbkZvckxhYmVsSGVpZ2h0IiwiZHJhd1BvaW50TGFiZWxzIiwiYW5nbGVMaW5lT3B0cyIsInBvaW50TGFiZWxPcHRzIiwib3V0ZXJEaXN0YW5jZSIsIm91dGVyUG9zaXRpb24iLCJwb2ludExhYmVsUG9zaXRpb24iLCJwb2ludExhYmVsRm9udENvbG9yIiwiZHJhd1JhZGl1c0xpbmUiLCJudW1iZXJPclplcm8iLCJwYXJhbSIsImFuaW1hdGUiLCJzaG93TGFiZWxCYWNrZHJvcCIsImJhY2tkcm9wQ29sb3IiLCJiYWNrZHJvcFBhZGRpbmdZIiwiYmFja2Ryb3BQYWRkaW5nWCIsIkxpbmVhclJhZGlhbFNjYWxlIiwicmFkaXVzUmVkdWN0aW9uTGVmdCIsInJhZGl1c1JlZHVjdGlvblJpZ2h0IiwicmFkaXVzUmVkdWN0aW9uVG9wIiwicmFkaXVzUmVkdWN0aW9uQm90dG9tIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJtYXhSaWdodCIsIm1heExlZnQiLCJtYXhUb3AiLCJtYXhCb3R0b20iLCJzY2FsaW5nRmFjdG9yIiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwidGhpc0FuZ2xlIiwidGlja0ZvbnRTdHlsZSIsInRpY2tGb250RmFtaWx5IiwidGlja0xhYmVsRm9udCIsInlDZW50ZXJPZmZzZXQiLCI1MSIsInNvcnRlciIsImFycmF5VW5pcXVlIiwiaGFzaCIsIm91dCIsImJ1aWxkTG9va3VwVGFibGUiLCJ0aW1lc3RhbXBzIiwiZGlzdHJpYnV0aW9uIiwidGltZSIsInByZXYiLCJjdXJyIiwidGFibGUiLCJsb29rdXAiLCJtaWQiLCJpMCIsImkxIiwibG8iLCJoaSIsInNrZXkiLCJ0a2V5IiwibW9tZW50aWZ5IiwicGFyc2VyIiwiZm9ybWF0IiwibW9tZW50IiwiaXNWYWxpZCIsInBhcnNlIiwiaW5wdXQiLCJzdGFydE9mIiwidmFsdWVPZiIsImRldGVybWluZVN0ZXBTaXplIiwidW5pdCIsImNhcGFjaXR5IiwiZmFjdG9yIiwiaW50ZXJ2YWwiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZHMiLCJzdGVwcyIsImRldGVybWluZVVuaXQiLCJtaW5Vbml0IiwiVU5JVFMiLCJNQVhfSU5URUdFUiIsImRldGVybWluZU1ham9yVW5pdCIsImdlbmVyYXRlIiwidGltZU9wdHMiLCJ1bml0U3RlcFNpemUiLCJ3ZWVrZGF5IiwiaXNvV2Vla2RheSIsIm1ham9yVGlja3NFbmFibGVkIiwiZmlyc3QiLCJjb21wdXRlT2Zmc2V0cyIsInVwcGVyIiwibG93ZXIiLCJ0aWNrc0Zyb21UaW1lc3RhbXBzIiwibWFqb3JVbml0IiwiTUlOX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTUFYX1NBRkVfSU5URUdFUiIsIm1pbGxpc2Vjb25kIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiZGlzcGxheUZvcm1hdCIsImRpc3BsYXlGb3JtYXRzIiwiVGltZVNjYWxlIiwid2FybiIsInRpbWVzdGFtcCIsImVuZE9mIiwiX2hvcml6b250YWwiLCJfdGFibGUiLCJfdGltZXN0YW1wcyIsImZvcm1hdHMiLCJnZXRMYWJlbENhcGFjaXR5IiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX21pbm9yRm9ybWF0IiwiX21ham9yRm9ybWF0IiwiX29mZnNldHMiLCJ0b29sdGlwRm9ybWF0IiwidGlja0Zvcm1hdEZ1bmN0aW9uIiwibWFqb3JGb3JtYXQiLCJtYWpvclRpbWUiLCJtYWpvclRpY2tPcHRzIiwiZm9ybWF0dGVyIiwiZ2V0UGl4ZWxGb3JPZmZzZXQiLCJnZXRMYWJlbFdpZHRoIiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJleGFtcGxlVGltZSIsImV4YW1wbGVMYWJlbCIsIjUyIiwiZ2V0UmdiYSIsImFiYnIiLCJoZXgiLCJyZ2JhIiwicGVyIiwia2V5d29yZCIsInJnYiIsImNvbG9yTmFtZXMiLCJnZXRIc2xhIiwiaHNsIiwiZ2V0SHdiIiwiaHdiIiwiZ2V0UmdiIiwiZ2V0SHNsIiwiaHNsYSIsImdldEFscGhhIiwidmFscyIsImhleFN0cmluZyIsImhleERvdWJsZSIsInBlcmNlbnRTdHJpbmciLCJwZXJjZW50YVN0cmluZyIsImhzbFN0cmluZyIsImhzbGFTdHJpbmciLCJod2JTdHJpbmciLCJyZXZlcnNlTmFtZXMiLCJudW0iLCJzdHIiLCJuYW1lIiwiY29sb3ItbmFtZSIsIjUzIiwiY29udmVydCIsIkNvbG9yIiwib2JqIiwiaHN2IiwiY215ayIsInNldFZhbHVlcyIsInJlZCIsImxpZ2h0bmVzcyIsIndoaXRlbmVzcyIsImMiLCJjeWFuIiwic2V0U3BhY2UiLCJyZ2JBcnJheSIsImhzbEFycmF5IiwiaHN2QXJyYXkiLCJod2JBcnJheSIsImNteWtBcnJheSIsInJnYmFBcnJheSIsImhzbGFBcnJheSIsInZhbCIsInNldENoYW5uZWwiLCJncmVlbiIsImJsdWUiLCJodWUiLCJzYXR1cmF0aW9uIiwic2F0dXJhdGlvbnYiLCJibGFja25lc3MiLCJtYWdlbnRhIiwieWVsbG93IiwiYmxhY2siLCJyZ2JOdW1iZXIiLCJsdW1pbm9zaXR5IiwibHVtIiwiY2hhbiIsImNvbnRyYXN0IiwiY29sb3IyIiwibHVtMSIsImx1bTIiLCJsZXZlbCIsImNvbnRyYXN0UmF0aW8iLCJkYXJrIiwibGlnaHQiLCJuZWdhdGUiLCJsaWdodGVuIiwiZGVzYXR1cmF0ZSIsIndoaXRlbiIsImJsYWNrZW4iLCJncmV5c2NhbGUiLCJjbGVhcmVyIiwib3BhcXVlciIsIm1peGluQ29sb3IiLCJjb2xvcjEiLCJ3MSIsIncyIiwidG9KU09OIiwic3BhY2VzIiwibWF4ZXMiLCJnZXRWYWx1ZXMiLCJzcGFjZSIsImNoYW5zIiwiY2FwcGVkIiwic25hbWUiLCJzdmFsdWVzIiwiY2hhcnRqcy1jb2xvci1zdHJpbmciLCJjb2xvci1jb252ZXJ0IiwiNTQiLCJyZ2IyaHNsIiwiZyIsInJnYjJoc3YiLCJyZ2IyaHdiIiwicmdiMmNteWsiLCJtIiwicmdiMmtleXdvcmQiLCJyZXZlcnNlS2V5d29yZHMiLCJKU09OIiwic3RyaW5naWZ5IiwicmdiMnh5eiIsInJnYjJsYWIiLCJ4eXoiLCJ6IiwicmdiMmxjaCIsImxhYjJsY2giLCJoc2wycmdiIiwidDEiLCJ0MiIsInQzIiwiaHNsMmhzdiIsInN2IiwiaHNsMmh3YiIsImhzbDJjbXlrIiwiaHNsMmtleXdvcmQiLCJoc3YycmdiIiwicSIsImhzdjJoc2wiLCJzbCIsImhzdjJod2IiLCJoc3YyY215ayIsImhzdjJrZXl3b3JkIiwiaHdiMnJnYiIsIndoIiwiYmwiLCJod2IyaHNsIiwiaHdiMmhzdiIsImh3YjJjbXlrIiwiaHdiMmtleXdvcmQiLCJjbXlrMnJnYiIsImNteWsyaHNsIiwiY215azJoc3YiLCJjbXlrMmh3YiIsImNteWsya2V5d29yZCIsInh5ejJyZ2IiLCJ4eXoybGFiIiwieHl6MmxjaCIsImxhYjJ4eXoiLCJsYWIiLCJociIsImxhYjJyZ2IiLCJsY2gybGFiIiwibGNoIiwibGNoMnh5eiIsImxjaDJyZ2IiLCJrZXl3b3JkMnJnYiIsImNzc0tleXdvcmRzIiwia2V5d29yZDJoc2wiLCJrZXl3b3JkMmhzdiIsImtleXdvcmQyaHdiIiwia2V5d29yZDJjbXlrIiwia2V5d29yZDJsYWIiLCJrZXl3b3JkMnh5eiIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93Z3JlZW4iLCI1NSIsImNvbnZlcnNpb25zIiwiQ29udmVydGVyIiwiZnVuYyIsImFyZyIsInBhaXIiLCJleGVjIiwiZnJvbSIsInRvIiwiY29udnMiLCJyb3V0ZVNwYWNlIiwiZnNwYWNlIiwiLi9jb252ZXJzaW9ucyIsIjU2IiwiNTciLCJmYWN0b3J5Iiwibm9HbG9iYWwiLCJET01FdmFsIiwiZG9jIiwic2NyaXB0IiwiaXNBcnJheUxpa2UiLCJqUXVlcnkiLCJpc1dpbmRvdyIsIm5vZGVOYW1lIiwiZWxlbSIsInRvTG93ZXJDYXNlIiwid2lubm93IiwicXVhbGlmaWVyIiwibm90IiwiaXNGdW5jdGlvbiIsImdyZXAiLCJub2RlVHlwZSIsInJpc1NpbXBsZSIsInRlc3QiLCJzaWJsaW5nIiwiY3VyIiwiZGlyIiwiY3JlYXRlT3B0aW9ucyIsInJub3RodG1sd2hpdGUiLCJfIiwiZmxhZyIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZG9uZSIsImZhaWwiLCJ0aGVuIiwiY29tcGxldGVkIiwicmVhZHkiLCJEYXRhIiwiZ2V0RGF0YSIsInJicmFjZSIsImRhdGFBdHRyIiwicmVwbGFjZSIsInJtdWx0aURhc2giLCJkYXRhVXNlciIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJyY3NzTnVtIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHREaXNwbGF5TWFwIiwic2hvd0hpZGUiLCJzaG93IiwiZGF0YVByaXYiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJ0YWciLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiY29udGFpbnMiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwidGV4dENvbnRlbnQiLCJpbkFycmF5IiwicnNjcmlwdFR5cGUiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwic2VsZWN0b3IiLCJvbmUiLCJvcmlnRm4iLCJvZmYiLCJndWlkIiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiY29udGVudCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicnNjcmlwdFR5cGVNYXNrZWQiLCJjbG9uZUNvcHlFdmVudCIsInNyYyIsImRlc3QiLCJwZGF0YU9sZCIsInBkYXRhQ3VyIiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImhhc0RhdGEiLCJhY2Nlc3MiLCJoYW5kbGUiLCJmaXhJbnB1dCIsInJjaGVja2FibGVUeXBlIiwiY2hlY2tlZCIsImRvbU1hbmlwIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwic3VwcG9ydCIsImNoZWNrQ2xvbmUiLCJyY2hlY2tlZCIsInNlbGYiLCJlcSIsImh0bWwiLCJfZXZhbFVybCIsInJjbGVhblNjcmlwdCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsImdldFN0eWxlcyIsInBpeGVsTWFyZ2luUmlnaHQiLCJybnVtbm9ucHgiLCJybWFyZ2luIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJ2ZW5kb3JQcm9wTmFtZSIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwiY3NzUHJlZml4ZXMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYXVnbWVudFdpZHRoT3JIZWlnaHQiLCJleHRyYSIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY3NzRXhwYW5kIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJib3hTaXppbmdSZWxpYWJsZSIsIlR3ZWVuIiwiaW5pdCIsInNjaGVkdWxlIiwiaW5Qcm9ncmVzcyIsImZ4IiwiY3JlYXRlRnhOb3ciLCJmeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsImNyZWF0ZVR3ZWVuIiwidHdlZW5lcnMiLCJkZWZhdWx0UHJlZmlsdGVyIiwidG9nZ2xlIiwiaG9va3MiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImFuaW0iLCJvcmlnIiwiZGF0YVNob3ciLCJxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwidW5xdWV1ZWQiLCJlbXB0eSIsImZpcmUiLCJhbHdheXMiLCJyZnh0eXBlcyIsImlzRW1wdHlPYmplY3QiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByb3BGaWx0ZXIiLCJzcGVjaWFsRWFzaW5nIiwiY2FtZWxDYXNlIiwiY3NzSG9va3MiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJwZXJjZW50IiwidHdlZW5zIiwicnVuIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInJlamVjdFdpdGgiLCJwcm9ncmVzcyIsImNvbXBsZXRlIiwidGltZXIiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJidWlsZFBhcmFtcyIsInByZWZpeCIsInRyYWRpdGlvbmFsIiwicmJyYWNrZXQiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsInVuc2hpZnQiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdCIsInNlbGVjdGVkIiwiaW5zcGVjdGVkIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJyZXNwb25zZXMiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiY29udGVudHMiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImNvbnYiLCJyZXNwb25zZUZpZWxkcyIsImRhdGFGaWx0ZXIiLCJzcGxpdCIsInRocm93cyIsInN0YXRlIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJydHJpbSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwianF1ZXJ5IiwidG9BcnJheSIsInB1c2hTdGFjayIsInByZXZPYmplY3QiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwicmFuZG9tIiwiaXNSZWFkeSIsIm1zZyIsImlzTnVtZXJpYyIsInByb3RvIiwiQ3RvciIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImludmVydCIsImNhbGxiYWNrRXhwZWN0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJTaXp6bGUiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwiY29tcGlsZXJDYWNoZSIsInJidWdneVFTQSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwidG9rZW5pemUiLCJ0b1NlbGVjdG9yIiwicnNpYmxpbmciLCJ0ZXN0Q29udGV4dCIsInFzYUVycm9yIiwic2VsZWN0IiwiY3JlYXRlQ2FjaGUiLCJFeHByIiwiY2FjaGVMZW5ndGgiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImRpc2FibGVkIiwiaXNEaXNhYmxlZCIsImRpc2FibGVkQW5jZXN0b3IiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJzZXRGaWx0ZXJzIiwidG9rZW5zIiwiYWRkQ29tYmluYXRvciIsIm1hdGNoZXIiLCJjb21iaW5hdG9yIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwieG1sIiwib2xkQ2FjaGUiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJuZXdDYWNoZSIsImRpcnJ1bnMiLCJ1bmlxdWVJRCIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJtdWx0aXBsZUNvbnRleHRzIiwiY29udGV4dHMiLCJjb25kZW5zZSIsInVubWF0Y2hlZCIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwcmVGaWx0ZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsInJlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsIm91dGVybW9zdENvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJmaW5kIiwiZGlycnVuc1VuaXF1ZSIsInVuaXF1ZVNvcnQiLCJnZXRUZXh0IiwiaXNYTUwiLCJjb21waWxlIiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsInJidWdneU1hdGNoZXMiLCJjbGFzc0NhY2hlIiwidG9rZW5DYWNoZSIsInNvcnRPcmRlciIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInVubG9hZEhhbmRsZXIiLCJlbHMiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiYXR0YWNoRXZlbnQiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiYXR0cklkIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCI+IiwiICIsIisiLCJ+IiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwibWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwidG9rZW4iLCJjb21waWxlZCIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsIkNhbGxiYWNrcyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwiZmlyaW5nSW5kZXgiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJtYXhEZXB0aCIsIlR5cGVFcnJvciIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsIm1lc3NhZ2UiLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsInJlYWR5V2FpdCIsIndhaXQiLCJyZWFkeVN0YXRlIiwiZG9TY3JvbGwiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJhY2NlcHREYXRhIiwib3duZXIiLCJyZW1vdmVEYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwic3dhcCIsIm9sZCIsImhpZGUiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsIm5hbWVzcGFjZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwiaXNTaW11bGF0ZWQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsIm9wZW5lciIsImNvbXB1dGVTdHlsZVRlc3RzIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0IiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZsb2F0Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImdldENsaWVudFJlY3RzIiwibWFyZ2luIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsImVhc2VkIiwic3RlcCIsInN3aW5nIiwicnJ1biIsIioiLCJ0d2VlbmVyIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJvcHRhbGwiLCJkb0FuaW1hdGlvbiIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImZuT3ZlciIsImZuT3V0IiwiZm9jdXNpbiIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJsb2NhbFByb3RvY29sIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiKiB0ZXh0IiwidGV4dCBodG1sIiwidGV4dCBqc29uIiwidGV4dCB4bWwiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1cyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJoZWFkZXJzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwic3RhdHVzVGV4dCIsInRpbWVvdXRUaW1lciIsInRyYW5zcG9ydCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJyZXNwb25zZUhlYWRlcnMiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJhYm9ydCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwic2VuZCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50Iiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJhbmltYXRlZCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjYWxjdWxhdGVQb3NpdGlvbiIsImN1ckVsZW0iLCJ1c2luZyIsIndpbiIsInBhZ2VZT2Zmc2V0IiwiY2xpZW50VG9wIiwicGFnZVhPZmZzZXQiLCJjbGllbnRMZWZ0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImRlZmluZSIsImFtZCIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiNTgiLCJob29rQ2FsbGJhY2siLCJpc09iamVjdEVtcHR5IiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJoYXNPd25Qcm9wIiwiY3JlYXRlVVRDIiwibG9jYWxlIiwic3RyaWN0IiwiY3JlYXRlTG9jYWxPclVUQyIsInV0YyIsImRlZmF1bHRQYXJzaW5nRmxhZ3MiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsImNoYXJzTGVmdE92ZXIiLCJudWxsSW5wdXQiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkRm9ybWF0IiwidXNlckludmFsaWRhdGVkIiwiaXNvIiwicGFyc2VkRGF0ZVBhcnRzIiwibWVyaWRpZW0iLCJyZmMyODIyIiwid2Vla2RheU1pc21hdGNoIiwiZ2V0UGFyc2luZ0ZsYWdzIiwiX3BmIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwic29tZSQxIiwiaXNOb3dWYWxpZCIsIl9kIiwiZ2V0VGltZSIsImludmFsaWRXZWVrZGF5IiwiX3N0cmljdCIsImJpZ0hvdXIiLCJpc0Zyb3plbiIsImNyZWF0ZUludmFsaWQiLCJjb3B5Q29uZmlnIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsIm1vbWVudFByb3BlcnRpZXMiLCJNb21lbnQiLCJ1cGRhdGVJblByb2dyZXNzIiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsIm51bWJlciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJkZXByZWNhdGVTaW1wbGUiLCJkZXByZWNhdGlvbnMiLCJGdW5jdGlvbiIsIl9jb25maWciLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsImNhbGVuZGFyIiwibW9tIiwib3V0cHV0IiwiX2NhbGVuZGFyIiwibG9uZ0RhdGVGb3JtYXQiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsImludmFsaWREYXRlIiwiX2ludmFsaWREYXRlIiwib3JkaW5hbCIsIl9vcmRpbmFsIiwicmVsYXRpdmVUaW1lIiwid2l0aG91dFN1ZmZpeCIsImlzRnV0dXJlIiwiX3JlbGF0aXZlVGltZSIsInBhc3RGdXR1cmUiLCJhZGRVbml0QWxpYXMiLCJzaG9ydGhhbmQiLCJsb3dlckNhc2UiLCJhbGlhc2VzIiwibm9ybWFsaXplVW5pdHMiLCJ1bml0cyIsIm5vcm1hbGl6ZU9iamVjdFVuaXRzIiwiaW5wdXRPYmplY3QiLCJub3JtYWxpemVkUHJvcCIsIm5vcm1hbGl6ZWRJbnB1dCIsImFkZFVuaXRQcmlvcml0eSIsInByaW9yaXR5IiwicHJpb3JpdGllcyIsImdldFByaW9yaXRpemVkVW5pdHMiLCJ1bml0c09iaiIsIm1ha2VHZXRTZXQiLCJrZWVwVGltZSIsInNldCQxIiwic3RyaW5nR2V0Iiwic3RyaW5nU2V0IiwicHJpb3JpdGl6ZWQiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwic3Vic3RyIiwiYWRkRm9ybWF0VG9rZW4iLCJwYWRkZWQiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImxvY2FsZURhdGEiLCJyZW1vdmVGb3JtYXR0aW5nVG9rZW5zIiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiZm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdE1vbWVudCIsImV4cGFuZEZvcm1hdCIsImZvcm1hdEZ1bmN0aW9ucyIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImxhc3RJbmRleCIsImFkZFJlZ2V4VG9rZW4iLCJyZWdleCIsInN0cmljdFJlZ2V4IiwicmVnZXhlcyIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwidW5lc2NhcGVGb3JtYXQiLCJyZWdleEVzY2FwZSIsInAyIiwicDMiLCJwNCIsImFkZFBhcnNlVG9rZW4iLCJhZGRXZWVrUGFyc2VUb2tlbiIsIl93IiwiYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4iLCJfYSIsImRheXNJbk1vbnRoIiwiVVRDIiwiZ2V0VVRDRGF0ZSIsImxvY2FsZU1vbnRocyIsIl9tb250aHMiLCJpc0Zvcm1hdCIsIk1PTlRIU19JTl9GT1JNQVQiLCJsb2NhbGVNb250aHNTaG9ydCIsIl9tb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwiaW5kZXhPZiQxIiwibG9jYWxlTW9udGhzUGFyc2UiLCJfbW9udGhzUGFyc2VFeGFjdCIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsIm1vbnRoc1BhcnNlIiwiZGF0ZSIsImdldFNldE1vbnRoIiwiZ2V0RGF5c0luTW9udGgiLCJtb250aHNTaG9ydFJlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwibW9udGhzUmVnZXgiLCJfbW9udGhzU3RyaWN0UmVnZXgiLCJfbW9udGhzUmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsImRheXNJblllYXIiLCJpc0xlYXBZZWFyIiwiZ2V0SXNMZWFwWWVhciIsImNyZWF0ZURhdGUiLCJNIiwibXMiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwiY3JlYXRlVVRDRGF0ZSIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsImRheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsImxvY2FsZVdlZWsiLCJfd2VlayIsImxvY2FsZUZpcnN0RGF5T2ZXZWVrIiwibG9jYWxlRmlyc3REYXlPZlllYXIiLCJnZXRTZXRXZWVrIiwiZ2V0U2V0SVNPV2VlayIsInBhcnNlV2Vla2RheSIsIndlZWtkYXlzUGFyc2UiLCJwYXJzZUlzb1dlZWtkYXkiLCJsb2NhbGVXZWVrZGF5cyIsIl93ZWVrZGF5cyIsImxvY2FsZVdlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNTaG9ydCIsImxvY2FsZVdlZWtkYXlzTWluIiwiX3dlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsImxvY2FsZVdlZWtkYXlzUGFyc2UiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiZ2V0U2V0RGF5T2ZXZWVrIiwiZ2V0RGF5IiwiZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIiwiZ2V0U2V0SVNPRGF5T2ZXZWVrIiwid2Vla2RheXNSZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNNaW5SZWdleCIsIl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsImhGb3JtYXQiLCJob3VycyIsImtGb3JtYXQiLCJsb3dlcmNhc2UiLCJtaW51dGVzIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwibG9jYWxlSXNQTSIsImxvY2FsZU1lcmlkaWVtIiwiaXNMb3dlciIsIm5vcm1hbGl6ZUxvY2FsZSIsImNob29zZUxvY2FsZSIsIm5hbWVzIiwibG9hZExvY2FsZSIsIm9sZExvY2FsZSIsImxvY2FsZXMiLCJnbG9iYWxMb2NhbGUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsImdldExvY2FsZSIsImRlZmluZUxvY2FsZSIsImJhc2VDb25maWciLCJwYXJlbnRMb2NhbGUiLCJsb2NhbGVGYW1pbGllcyIsInVwZGF0ZUxvY2FsZSIsImxpc3RMb2NhbGVzIiwia2V5cyQxIiwiY2hlY2tPdmVyZmxvdyIsIk1PTlRIIiwiREFURSIsIllFQVIiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIldFRUsiLCJfb3ZlcmZsb3dXZWVrZGF5IiwiV0VFS0RBWSIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0IiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwidHpSZWdleCIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJjb25maWdGcm9tUkZDMjgyMiIsImRheUZvcm1hdCIsInRpbWV6b25lIiwidGltZXpvbmVJbmRleCIsInRpbWV6b25lcyIsIiBHTVQiLCIgRURUIiwiIEVTVCIsIiBDRFQiLCIgQ1NUIiwiIE1EVCIsIiBNU1QiLCIgUERUIiwiIFBTVCIsIm1pbGl0YXJ5IiwiYmFzaWNSZmNSZWdleCIsIm1vbWVudERhdGUiLCJtb21lbnREYXkiLCJjb25maWdGcm9tU3RyaW5nIiwiYXNwTmV0SnNvblJlZ2V4IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjdXJyZW50RGF0ZUFycmF5Iiwibm93VmFsdWUiLCJfdXNlVVRDIiwiZ2V0VVRDTW9udGgiLCJnZXRNb250aCIsImdldERhdGUiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsInllYXJUb1VzZSIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9kYXlPZlllYXIiLCJfbmV4dERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwid2Vla1llYXIiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwiY3JlYXRlTG9jYWwiLCJjdXJXZWVrIiwiZ2ciLCJJU09fODYwMSIsIlJGQ18yODIyIiwicGFyc2VkSW5wdXQiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsIl9tZXJpZGllbSIsIm1lcmlkaWVtRml4V3JhcCIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJpc1BNIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbU9iamVjdCIsImNyZWF0ZUZyb21Db25maWciLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsInBpY2tCeSIsIm1vbWVudHMiLCJpc0R1cmF0aW9uVmFsaWQiLCJvcmRlcmluZyIsInVuaXRIYXNEZWNpbWFsIiwiaXNWYWxpZCQxIiwiY3JlYXRlSW52YWxpZCQxIiwiY3JlYXRlRHVyYXRpb24iLCJEdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJ3ZWVrcyIsImRheXMiLCJzZWNvbmRzIiwiX21pbGxpc2Vjb25kcyIsIl9kYXlzIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVuayIsImNodW5rT2Zmc2V0IiwiY2xvbmVXaXRoT2Zmc2V0Iiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZ2V0U2V0T2Zmc2V0Iiwia2VlcExvY2FsVGltZSIsImtlZXBNaW51dGVzIiwibG9jYWxBZGp1c3QiLCJtYXRjaFNob3J0T2Zmc2V0IiwiX2NoYW5nZUluUHJvZ3Jlc3MiLCJhZGRTdWJ0cmFjdCIsImdldFNldFpvbmUiLCJzZXRPZmZzZXRUb1VUQyIsInNldE9mZnNldFRvTG9jYWwiLCJzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCIsInRab25lIiwibWF0Y2hPZmZzZXQiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRGF5bGlnaHRTYXZpbmdUaW1lIiwiaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkIiwiX2lzRFNUU2hpZnRlZCIsIm90aGVyIiwiaXNVdGNPZmZzZXQiLCJpc1V0YyIsImRpZmZSZXMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwicGFyc2VJc28iLCJtb21lbnRzRGlmZmVyZW5jZSIsImlucCIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCJjcmVhdGVBZGRlciIsImRpcmVjdGlvbiIsInBlcmlvZCIsImR1ciIsImlzQWRkaW5nIiwiZ2V0Q2FsZW5kYXJGb3JtYXQiLCJteU1vbWVudCIsImNhbGVuZGFyJDEiLCJzb2QiLCJjYWxlbmRhckZvcm1hdCIsImxvY2FsSW5wdXQiLCJpc0JldHdlZW4iLCJpbmNsdXNpdml0eSIsImlzU2FtZSIsImlucHV0TXMiLCJpc1NhbWVPckFmdGVyIiwiaXNTYW1lT3JCZWZvcmUiLCJhc0Zsb2F0Iiwiem9uZURlbHRhIiwibW9udGhEaWZmIiwiYW5jaG9yMiIsImFkanVzdCIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwidG9JU09TdHJpbmciLCJ0b0RhdGUiLCJ6b25lIiwiaW5wdXRTdHJpbmciLCJkZWZhdWx0Rm9ybWF0VXRjIiwiZGVmYXVsdEZvcm1hdCIsInBvc3Rmb3JtYXQiLCJodW1hbml6ZSIsImZyb21Ob3ciLCJ0b05vdyIsIm5ld0xvY2FsZURhdGEiLCJ1bml4IiwidG9PYmplY3QiLCJpc1ZhbGlkJDIiLCJwYXJzaW5nRmxhZ3MiLCJpbnZhbGlkQXQiLCJjcmVhdGlvbkRhdGEiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0U2V0V2Vla1llYXIiLCJnZXRTZXRXZWVrWWVhckhlbHBlciIsImdldFNldElTT1dlZWtZZWFyIiwiaXNvV2VlayIsImdldElTT1dlZWtzSW5ZZWFyIiwiZ2V0V2Vla3NJblllYXIiLCJ3ZWVrSW5mbyIsIndlZWtzVGFyZ2V0Iiwic2V0V2Vla0FsbCIsImRheU9mWWVhckRhdGEiLCJnZXRTZXRRdWFydGVyIiwiZ2V0U2V0RGF5T2ZZZWFyIiwicGFyc2VNcyIsImdldFpvbmVBYmJyIiwiZ2V0Wm9uZU5hbWUiLCJjcmVhdGVVbml4IiwiY3JlYXRlSW5ab25lIiwicGFyc2Vab25lIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwiZ2V0JDEiLCJmaWVsZCIsImxpc3RNb250aHNJbXBsIiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsImxpc3RNb250aHMiLCJsaXN0TW9udGhzU2hvcnQiLCJsaXN0V2Vla2RheXMiLCJsaXN0V2Vla2RheXNTaG9ydCIsImxpc3RXZWVrZGF5c01pbiIsIm1hdGhBYnMiLCJhZGRTdWJ0cmFjdCQxIiwiYWRkJDEiLCJzdWJ0cmFjdCQxIiwiYWJzQ2VpbCIsIm1vbnRoc0Zyb21EYXlzIiwibW9udGhzVG9EYXlzIiwiZGF5c1RvTW9udGhzIiwiYXMiLCJ2YWx1ZU9mJDEiLCJtYWtlQXMiLCJhbGlhcyIsImdldCQyIiwibWFrZUdldHRlciIsInN1YnN0aXR1dGVUaW1lQWdvIiwicmVsYXRpdmVUaW1lJDEiLCJwb3NOZWdEdXJhdGlvbiIsInRocmVzaG9sZHMiLCJzcyIsImdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIiwicm91bmRpbmdGdW5jdGlvbiIsImdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCIsInRocmVzaG9sZCIsImxpbWl0Iiwid2l0aFN1ZmZpeCIsInRvSVNPU3RyaW5nJDEiLCJhYnMkMSIsIlkiLCJEIiwiYXNTZWNvbmRzIiwic29tZSIsImZ1biIsImRlZmF1bHRDYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsImRlZmF1bHRMb25nRGF0ZUZvcm1hdCIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsImRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiZGVmYXVsdFJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJtbSIsImhoIiwiZGQiLCJNTSIsInl5IiwibWF0Y2gxIiwibWF0Y2gyIiwibWF0Y2gzIiwibWF0Y2g0IiwibWF0Y2g2IiwibWF0Y2gxdG8yIiwibWF0Y2gzdG80IiwibWF0Y2g1dG82IiwibWF0Y2gxdG8zIiwibWF0Y2gxdG80IiwibWF0Y2gxdG82IiwibWF0Y2hVbnNpZ25lZCIsIm1hdGNoU2lnbmVkIiwibWF0Y2hUaW1lc3RhbXAiLCJtYXRjaFdvcmQiLCJkZWZhdWx0TG9jYWxlTW9udGhzIiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwicGFyc2VUd29EaWdpdFllYXIiLCJnZXRTZXRZZWFyIiwiZGVmYXVsdExvY2FsZVdlZWsiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImtJbnB1dCIsIl9pc1BtIiwicG9zMSIsInBvczIiLCJkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSIsImdldFNldEhvdXIiLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwibWVyaWRpZW1QYXJzZSIsInByb3RvdHlwZU1pbiIsInByb3RvdHlwZU1heCIsImludmFsaWQiLCJpc29XZWVrWWVhciIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJnZXRTZXRNaWxsaXNlY29uZCIsImlzb1dlZWtzIiwiaXNvV2Vla3NJblllYXIiLCJpc0RTVCIsInpvbmVBYmJyIiwiem9uZU5hbWUiLCJkYXRlcyIsImlzRFNUU2hpZnRlZCIsInByb3RvJDEiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwibGFuZ0RhdGEiLCJhc01pbGxpc2Vjb25kcyIsImFzTWludXRlcyIsImFzSG91cnMiLCJhc0RheXMiLCJhc1dlZWtzIiwiYXNNb250aHMiLCJhc1llYXJzIiwicHJvdG8kMiIsInRvSXNvU3RyaW5nIiwidmVyc2lvbiIsInJlbGF0aXZlVGltZVJvdW5kaW5nIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwiNTkiLCJSaXZldHMiLCJiaW5kTWV0aG9kIiwidW5iaW5kTWV0aG9kIiwiX3JlZiIsIl9fYmluZCIsIl9fc2xpY2UiLCJfX2hhc1Byb3AiLCJfX2V4dGVuZHMiLCJjaGlsZCIsImN0b3IiLCJfX2luZGV4T2YiLCJwdWJsaWMiLCJiaW5kZXJzIiwiY29tcG9uZW50cyIsImFkYXB0ZXJzIiwidGVtcGxhdGVEZWxpbWl0ZXJzIiwicm9vdEludGVyZmFjZSIsInByZWxvYWREYXRhIiwiZXhlY3V0ZUZ1bmN0aW9ucyIsIml0ZXJhdGlvbkFsaWFzIiwibW9kZWxOYW1lIiwiZXYiLCJiaW5kaW5nIiwibW9kZWxzIiwiVmlldyIsImNvbXBvbmVudCIsInRlbXBsYXRlIiwiSFRNTEVsZW1lbnQiLCJVdGlsIiwiYmluZEV2ZW50IiwidW5iaW5kRXZlbnQiLCJnZXRJbnB1dFZhbHVlIiwiJGVsIiwiZGV0YWNoRXZlbnQiLCJfbGVuIiwiX3Jlc3VsdHMiLCJUeXBlUGFyc2VyIiwicHJpbWl0aXZlIiwia2V5cGF0aCIsIlRleHRUZW1wbGF0ZVBhcnNlciIsImRlbGltaXRlcnMiLCJsYXN0VG9rZW4iLCJzdWJzdHJpbmciLCJfYmFzZSIsIl9qIiwiX2xlbjEiLCJfcmVmMSIsIl9yZWYyIiwiX3JlZjMiLCJfcmVmNCIsIl9yZWY1IiwicHVibGlzaCIsInN5bmMiLCJ0cmF2ZXJzZSIsImJ1aWxkIiwiYnVpbGRCaW5kaW5nIiwiYmluZGluZ1JlZ0V4cCIsImRlY2xhcmF0aW9uIiwiZGVwZW5kZW5jaWVzIiwicGlwZXMiLCJiaW5kaW5ncyIsIl90aGlzIiwiYmxvY2siLCJjaGlsZE5vZGUiLCJfayIsImJpbmRlciIsImF0dHJpYnV0ZSIsInJlZ2V4cCIsIl9ib3VuZCIsIkNvbXBvbmVudEJpbmRpbmciLCJwdWJsaXNoZXMiLCJCaW5kaW5nIiwiZ2V0VmFsdWUiLCJmb3JtYXR0ZWRWYWx1ZSIsInBhcnNlRm9ybWF0dGVyQXJndW1lbnRzIiwicGFyc2VUYXJnZXQiLCJvYnNlcnZlIiwic2V0QmluZGVyIiwiZm9ybWF0dGVyT2JzZXJ2ZXJzIiwicm91dGluZSIsInNpZ2h0Z2xhc3MiLCJvYnNlcnZlciIsImZvcm1hdHRlckluZGV4IiwiYWkiLCJwcm9jZXNzZWRBcmdzIiwiZmkiLCJyZWFkIiwiZGVwZW5kZW5jeSIsInVub2JzZXJ2ZSIsImZpUmV2ZXJzZWQiLCJsYXN0Zm9ybWF0dGVySW5kZXgiLCJzZXRWYWx1ZSIsIl9zdXBlciIsInByb3BlcnR5TmFtZSIsImxvY2FscyIsIm9ic2VydmVycyIsInVwc3RyZWFtT2JzZXJ2ZXJzIiwiZ3JvdXBlZCIsIl9yZWY2IiwiX3JlZjciLCJib3VuZCIsImNvbXBvbmVudFZpZXciLCJUZXh0QmluZGluZyIsInVuY2hlY2tlZCIsInRhZ05hbWUiLCJtYXJrZXIiLCJuZXN0ZWQiLCJ1bmxlc3MiLCJmdW5jdGlvbiIsIml0ZXJhdGVkIiwiX2xlbjIiLCJlbENsYXNzIiwiY291bnRlciIsIndlYWttYXAiLCJ3ZWFrUmVmZXJlbmNlIiwiX25hbWUiLCJjbGVhbnVwV2Vha1JlZmVyZW5jZSIsInJlZiIsInBvaW50ZXJzIiwic3R1YkZ1bmN0aW9uIiwib2JzZXJ2ZU11dGF0aW9ucyIsImZ1bmN0aW9ucyIsInVub2JzZXJ2ZU11dGF0aW9ucyIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuZXdWYWx1ZSIsImNiIiwicml2ZXRzIiwiNjAiLCJPYnNlcnZlciIsIm9iamVjdFBhdGgiLCJyZWFsaXplIiwiaW50ZXJmYWNlcyIsImNociIsInBhdGgiLCJ1bnJlYWNoZWQiLCJvbGRWYWx1ZSIsImFkYXB0ZXIiLCJhY3Rpb24iLCI2MSIsImNyZWF0ZVJlZHVjZSIsIml0ZXJhdGVlIiwibWVtbyIsImN1cnJlbnRLZXkiLCJvcHRpbWl6ZUNiIiwiY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGUiLCJnZXRMZW5ndGgiLCJjcmVhdGVJbmRleEZpbmRlciIsInByZWRpY2F0ZUZpbmQiLCJzb3J0ZWRJbmRleCIsImNvbGxlY3ROb25FbnVtUHJvcHMiLCJub25FbnVtSWR4Iiwibm9uRW51bWVyYWJsZVByb3BzIiwiT2JqUHJvdG8iLCJwcmV2aW91c1VuZGVyc2NvcmUiLCJBcnJheVByb3RvIiwiRnVuY1Byb3RvIiwibmF0aXZlSXNBcnJheSIsIm5hdGl2ZUtleXMiLCJuYXRpdmVCaW5kIiwibmF0aXZlQ3JlYXRlIiwiY3JlYXRlIiwiX3dyYXBwZWQiLCJWRVJTSU9OIiwiYXJnQ291bnQiLCJhY2N1bXVsYXRvciIsImlkZW50aXR5IiwiY3JlYXRlQXNzaWduZXIiLCJrZXlzRnVuYyIsInVuZGVmaW5lZE9ubHkiLCJiYXNlQ3JlYXRlIiwiTUFYX0FSUkFZX0lOREVYIiwiY29sbGVjdCIsImZvbGRsIiwiaW5qZWN0IiwicmVkdWNlUmlnaHQiLCJmb2xkciIsImRldGVjdCIsImZpbmRLZXkiLCJldmVyeSIsImFueSIsImluY2x1ZGVzIiwiaW5jbHVkZSIsImd1YXJkIiwiaW52b2tlIiwiaXNGdW5jIiwicGx1Y2siLCJmaW5kV2hlcmUiLCJsYXN0Q29tcHV0ZWQiLCJzaHVmZmxlIiwicmFuZCIsInNodWZmbGVkIiwic2FtcGxlIiwic29ydEJ5IiwiY3JpdGVyaWEiLCJncm91cCIsImJlaGF2aW9yIiwiZ3JvdXBCeSIsImluZGV4QnkiLCJjb3VudEJ5IiwicGFydGl0aW9uIiwicGFzcyIsInRha2UiLCJyZXN0IiwidGFpbCIsImRyb3AiLCJjb21wYWN0IiwiZmxhdHRlbiIsInNoYWxsb3ciLCJpc0FyZ3VtZW50cyIsIndpdGhvdXQiLCJkaWZmZXJlbmNlIiwidW5pcSIsImlzU29ydGVkIiwiaXNCb29sZWFuIiwic2VlbiIsInVuaW9uIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInppcCIsInVuemlwIiwiZmluZExhc3RJbmRleCIsImxvdyIsImxhc3RJbmRleE9mIiwiZXhlY3V0ZUJvdW5kIiwic291cmNlRnVuYyIsImJvdW5kRnVuYyIsImNhbGxpbmdDb250ZXh0IiwicGFydGlhbCIsImJvdW5kQXJncyIsImJpbmRBbGwiLCJtZW1vaXplIiwiaGFzaGVyIiwiYWRkcmVzcyIsInRocm90dGxlIiwibGF0ZXIiLCJsZWFkaW5nIiwidHJhaWxpbmciLCJkZWJvdW5jZSIsImltbWVkaWF0ZSIsImNhbGxOb3ciLCJ3cmFwcGVyIiwiY29tcG9zZSIsInRpbWVzIiwiaGFzRW51bUJ1ZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiYWxsS2V5cyIsIm1hcE9iamVjdCIsInBhaXJzIiwibWV0aG9kcyIsImV4dGVuZE93biIsImFzc2lnbiIsInBpY2siLCJvaXRlcmF0ZWUiLCJvbWl0IiwidGFwIiwiaW50ZXJjZXB0b3IiLCJpc01hdGNoIiwiYVN0YWNrIiwiYlN0YWNrIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsImlzRXF1YWwiLCJpc0VtcHR5IiwiaXNTdHJpbmciLCJpc0VsZW1lbnQiLCJJbnQ4QXJyYXkiLCJpc051bGwiLCJjb25zdGFudCIsInByb3BlcnR5T2YiLCJhY2N1bSIsImVzY2FwZU1hcCIsIiYiLCI8IiwiXCIiLCInIiwiYCIsInVuZXNjYXBlTWFwIiwiY3JlYXRlRXNjYXBlciIsImVzY2FwZXIiLCJ0ZXN0UmVnZXhwIiwicmVwbGFjZVJlZ2V4cCIsInVuZXNjYXBlIiwiZmFsbGJhY2siLCJpZENvdW50ZXIiLCJ1bmlxdWVJZCIsInRlbXBsYXRlU2V0dGluZ3MiLCJldmFsdWF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiXFwiLCJcciIsIlxuIiwi4oCoIiwi4oCpIiwiZXNjYXBlQ2hhciIsIm9sZFNldHRpbmdzIiwidmFyaWFibGUiLCJjaGFpbiIsImluc3RhbmNlIiwiX2NoYWluIiwibWl4aW4iLCI2MiIsIm5vcm1hbGl6ZU5hbWUiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlcmFibGUiLCJIZWFkZXJzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keVVzZWQiLCJQcm9taXNlIiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVhZEJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsInJlYWRBcnJheUJ1ZmZlckFzVGV4dCIsImJ1ZiIsIlVpbnQ4QXJyYXkiLCJjaGFycyIsImJ1ZmZlckNsb25lIiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJCbG9iIiwiaXNQcm90b3R5cGVPZiIsIl9ib2R5QmxvYiIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiYXJyYXlCdWZmZXIiLCJpc0RhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJyZWplY3RlZCIsImRlY29kZSIsIm5vcm1hbGl6ZU1ldGhvZCIsInVwY2FzZWQiLCJSZXF1ZXN0IiwiY3JlZGVudGlhbHMiLCJyZWZlcnJlciIsImZvcm0iLCJieXRlcyIsImRlY29kZVVSSUNvbXBvbmVudCIsInBhcnNlSGVhZGVycyIsInJhd0hlYWRlcnMiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwib2siLCJmZXRjaCIsInZpZXdDbGFzc2VzIiwiRGF0YVZpZXciLCJpc1ZpZXciLCJlbnRyaWVzIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsInJlc3BvbnNlVVJMIiwib250aW1lb3V0Iiwid2l0aENyZWRlbnRpYWxzIiwicG9seWZpbGwiLCI2MyIsImxpc3RhRGVmYXVsdERhdGEiLCJfbW92ZW1lbnRDb2xvcnMiLCJDT0xPUl9NRyIsIkNPTE9SX0RFQ1JFQ0VSIiwiQ09MT1JfTkFVIiwiQ09MT1JfU0REIiwic3VwRGVmYXVsdERhdGEiLCJDT0xPUl9JQSIsInRlcnJpRGVmYXVsdERhdGEiLCJDT0xPUl9ERUNSRUNFUl9BTFQiLCJDT0xPUl9JTkQiLCJkZWZhdWx0UG9sYXJDaGFydHNPcHRpb25zIiwiZGVmYXVsdENoYXJ0c09wdGlvbnMiLCIuL21vdmVtZW50Q29sb3JzLmpzIiwiNjQiLCJTSEVFVF9VUkwiLCJjb252ZXJ0ZXIiLCJnZXRTZXJ2ZXJEYXRhIiwiU0VSVkVSX1VSTCIsImRlZmF1bHRPYmplY3QiLCJfdW5kZXJzY29yZSIsIl91bmRlcnNjb3JlMiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiJHQiLCJnZXRGdWxsT2JqZWN0IiwibWciLCJtZ3BjIiwiZGVjcmVjZXIiLCJkZWNyZWNlcnBjIiwibmF1IiwibmF1cGMiLCJpYSIsImlhcGMiLCJzZGQiLCJzZGRwYyIsImJwYyIsIm5wYyIsInZvdG9zdmUiLCJ2b3RvcyIsImVzY3J1dGFkYSIsInBhcnRpY2lwYWNpb24iLCJzaGVldE9iamVjdCIsImNvbnZlcnRlZCIsImRpYTEiLCJsaXN0YSIsIm1lc2EiLCJ0ZXJyaSIsInN1cCIsImRpYTIiLCJ0ZXJyaXMiLCJ0b3RhbGN0IiwiZmVlZCIsImVudHJ5IiwibW92IiwibW92aWQiLCJub21icmUiLCJwYyIsImVsZWN0byIsInVuZGVyc2NvcmUiLCJ3aGF0d2ctZmV0Y2giLCI2NSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfanF1ZXJ5IiwiX2pxdWVyeTIiLCJfY2hhcnQyIiwiX2RhdGFGZXRjaGVyIiwiX3JpdmV0cyIsIl9yaXZldHMyIiwiX2NoYXJ0VmFycyIsIlFVQVJURVJTIiwiRklGVEhTIiwicmVuZGVyRGF0YSIsIiR1cGRhdGVOb3RpZiIsIiRlcnJvck5vdGlmIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwibWFpbkRhdGEiLCJ1cGRhdGVNYWluRGF0YUVsZW1lbnRzIiwiJGN0eFRvdGFsTGlzdGEiLCIkY3R4VG90YWxTdXAiLCIkY3R4TWVzYUxpc3RhIiwiJGN0eE1lc2FTdXAiLCIkY3R4VGVycmlMaXN0YSIsIiRjdHhUZXJyaVN1cCIsIiRjdHhDYW50VGVycmkiLCJjaGFydFRvdGFsTGlzdGEiLCJjaGFydFRvdGFsU3VwIiwiY2hhcnRNZXNhTGlzdGEiLCJjaGFydE1lc2FTdXAiLCJjaGFydFRlcnJpTGlzdGEiLCJjaGFydFRlcnJpU3VwIiwiY2hhcnRDYW50VGVycmkiLCJzdW1tYXJ5TGlzdGEiLCJzdW1tYXJ5U3VwIiwidG90YWxMaXN0YSIsInRvdGFsU3VwIiwibWVzYUxpc3RhIiwibWVzYVN1cCIsInRlcnJpTGlzdGEiLCJ0ZXJyaVN1cCIsInRlcnJpdG9yaWFsZXMiLCJjYW50aWRhZFRlcnJpdG9yaWFsZXMiLCJtZXNhc0VzY3J1dGFkYXMiLCJtZXNhcyIsImFkZGNsYXNzIiwiYWRkZWRDbGFzcyIsInNldEludGVydmFsIiwic2VuZGVyIiwiZGlhVG90YWwiLCJkaWFNZXNhIiwiZGlhVGVycmkiLCJzZWxlY3RlZE1lc2EiLCJzZWxlY3RlZFRlcnJpIiwiZXNjcnV0YWRhc0FjdHVhbCIsInVwZGF0ZWRUZXJyaSIsIm9sZFRlcnJpIiwibmV3VG90YWxMaXN0YURhdGEiLCJuZXdUb3RhbFN1cERhdGEiLCJuZXdNZXNhTGlzdGFEYXRhIiwibmV3TWVzYVN1cERhdGEiLCJuZXdUZXJyaUxpc3RhRGF0YSIsIm5ld1RlcnJpU3VwRGF0YSIsIi4vY2hhcnRWYXJzLmpzIiwiLi9kYXRhRmV0Y2hlci5qcyIsImNoYXJ0LmpzIiwiNjYiLCJDT0xPUl9KSkNDIl0sIm1hcHBpbmdzIjoiQ0FBQSxRQUFBQSxHQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxHQUFBRSxHQUFBLGtCQUFBQyxVQUFBQSxPQUFBLEtBQUFGLEdBQUFDLEVBQUEsTUFBQUEsR0FBQUYsR0FBQSxFQUFBLElBQUFJLEVBQUEsTUFBQUEsR0FBQUosR0FBQSxFQUFBLElBQUFLLEdBQUEsR0FBQUMsT0FBQSx1QkFBQU4sRUFBQSxJQUFBLE1BQUFLLEdBQUFFLEtBQUEsbUJBQUFGLEVBQUEsR0FBQUcsR0FBQVgsRUFBQUcsSUFBQVMsV0FBQWIsR0FBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsR0FBQUUsR0FBQUQsRUFBQUksR0FBQSxHQUFBTCxFQUFBLE9BQUFJLEdBQUFGLEdBQUFGLElBQUFhLEVBQUFBLEVBQUFDLFFBQUFkLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsTUFBQUQsR0FBQUcsR0FBQVMsUUFBQSxJQUFBLEdBQUFMLEdBQUEsa0JBQUFELFVBQUFBLFFBQUFILEVBQUEsRUFBQUEsRUFBQUYsRUFBQWEsT0FBQVgsSUFBQUQsRUFBQUQsRUFBQUUsR0FBQSxPQUFBRCxLQUFBYSxHQUFBLFNBQUFULEVBQUFVLEVBQUFKLEdBSUEsR0FBQUssR0FBQVgsRUFBQSxnQkFFQVcsR0FBQUMsUUFBQVosRUFBQSxtQkFHQUEsRUFBQSx1QkFBQVcsR0FFQUEsRUFBQUUsU0FBQWIsRUFBQSx3QkFDQVcsRUFBQUcsUUFBQWQsRUFBQSx1QkFDQVcsRUFBQUksU0FBQWYsRUFBQSxvQkFDQVcsRUFBQUssWUFBQWhCLEVBQUEsMkJBQ0FXLEVBQUFNLFNBQUFqQixFQUFBLHdCQUVBQSxFQUFBLHNCQUFBVyxHQUNBWCxFQUFBLHlCQUFBVyxHQUNBWCxFQUFBLDBCQUFBVyxHQUNBWCxFQUFBLGlDQUFBVyxHQUNBWCxFQUFBLDZCQUFBVyxHQUNBWCxFQUFBLDRCQUFBVyxHQUNBWCxFQUFBLHFCQUFBVyxHQUNBWCxFQUFBLHVCQUFBVyxHQUVBWCxFQUFBLDZCQUFBVyxHQUNBWCxFQUFBLDJCQUFBVyxHQUNBWCxFQUFBLHlCQUFBVyxHQUNBWCxFQUFBLDhCQUFBVyxHQUNBWCxFQUFBLCtCQUFBVyxHQUNBWCxFQUFBLHVCQUFBVyxHQUlBWCxFQUFBLGdDQUFBVyxHQUNBWCxFQUFBLG1DQUFBVyxHQUNBWCxFQUFBLHFDQUFBVyxHQUNBWCxFQUFBLGlDQUFBVyxHQUNBWCxFQUFBLHNDQUFBVyxHQUNBWCxFQUFBLGtDQUFBVyxHQUNBWCxFQUFBLG9DQUFBVyxHQUVBWCxFQUFBLHNCQUFBVyxHQUNBWCxFQUFBLHlCQUFBVyxHQUNBWCxFQUFBLDJCQUFBVyxHQUNBWCxFQUFBLHVCQUFBVyxHQUNBWCxFQUFBLDRCQUFBVyxHQUNBWCxFQUFBLHdCQUFBVyxHQUNBWCxFQUFBLDBCQUFBVyxFQUdBLElBQUFPLEtBRUFBLEdBQUFDLEtBQ0FuQixFQUFBLDJCQUFBVyxHQUNBWCxFQUFBLDJCQUFBVyxHQUNBWCxFQUFBLDBCQUFBVyxJQUdBQSxFQUFBTyxRQUFBRSxTQUFBRixHQUVBUCxFQUFBTSxTQUFBSSxhQUVBWCxFQUFBSixRQUFBSyxFQUNBLG1CQUFBVyxVQUNBQSxPQUFBWCxNQUFBQSxHQVlBQSxFQUFBWSxjQUFBWixFQUFBQyxRQUFBWSxTQUVBQyxxQkFBQSxFQUFBQyx3QkFBQSxFQUFBQywwQkFBQSxFQUFBQyxzQkFBQSxFQUFBQywyQkFBQSxFQUFBQyx1QkFBQSxFQUFBQyx5QkFBQSxFQUFBQywrQkFBQSxFQUFBQyxrQ0FBQSxHQUFBQyxvQ0FBQSxHQUFBQyxnQ0FBQSxHQUFBQyxxQ0FBQSxHQUFBQyxpQ0FBQSxHQUFBQyxtQ0FBQSxHQUFBQyxjQUFBLEdBQUFDLHdCQUFBLEdBQUFDLHlCQUFBLEdBQUFDLGdDQUFBLEdBQUFDLHVCQUFBLEdBQUFDLHNCQUFBLEdBQUFDLHNCQUFBLEdBQUFDLDBCQUFBLEdBQUFDLDRCQUFBLEdBQUFDLHFCQUFBLEdBQUFDLG9CQUFBLEdBQUFDLDJCQUFBLEdBQUFDLHNCQUFBLEdBQUFDLG1CQUFBLEdBQUFDLGtCQUFBLEdBQUFDLHVCQUFBLEdBQUFDLDBCQUFBLEdBQUFDLDBCQUFBLEdBQUFDLHlCQUFBLEdBQUFDLDBCQUFBLEdBQUFDLHdCQUFBLEdBQUFDLDRCQUFBLEdBQUFDLDZCQUFBLEdBQUFDLDhCQUFBLEdBQUFDLHNCQUFBLEtBQUFDLEdBQUEsU0FBQWhFLEVBQUFVLEVBQUFKLEdBQ0EsWUFFQUksR0FBQUosUUFBQSxTQUFBSyxHQUVBQSxFQUFBc0QsSUFBQSxTQUFBQyxFQUFBQyxHQUdBLE1BRkFBLEdBQUFDLEtBQUEsTUFFQSxHQUFBekQsR0FBQXVELEVBQUFDLFVBS0FFLEdBQUEsU0FBQXJFLEVBQUFVLEVBQUFKLEdBQ0EsWUFFQUksR0FBQUosUUFBQSxTQUFBSyxHQUVBQSxFQUFBMkQsT0FBQSxTQUFBSixFQUFBQyxHQUVBLE1BREFBLEdBQUFDLEtBQUEsU0FDQSxHQUFBekQsR0FBQXVELEVBQUFDLFVBS0FJLEdBQUEsU0FBQXZFLEVBQUFVLEVBQUFKLEdBQ0EsWUFFQUksR0FBQUosUUFBQSxTQUFBSyxHQUVBQSxFQUFBNkQsU0FBQSxTQUFBTixFQUFBQyxHQUdBLE1BRkFBLEdBQUFDLEtBQUEsV0FFQSxHQUFBekQsR0FBQXVELEVBQUFDLFVBS0FNLEdBQUEsU0FBQXpFLEVBQUFVLEVBQUFKLEdBQ0EsWUFFQUksR0FBQUosUUFBQSxTQUFBSyxHQUVBQSxFQUFBK0QsS0FBQSxTQUFBUixFQUFBQyxHQUdBLE1BRkFBLEdBQUFDLEtBQUEsT0FFQSxHQUFBekQsR0FBQXVELEVBQUFDLFVBS0FRLEdBQUEsU0FBQTNFLEVBQUFVLEVBQUFKLEdBQ0EsWUFFQUksR0FBQUosUUFBQSxTQUFBSyxHQUVBQSxFQUFBaUUsVUFBQSxTQUFBVixFQUFBQyxHQUdBLE1BRkFBLEdBQUFDLEtB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QUEsRUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsSUFBQSxJQUFBLEtBQ0FDLE9BQUEsSUFBQSxJQUFBLEtBQ0FDLFFBQUEsSUFBQSxJQUFBLEtBQ0ExRyxPQUFBLEVBQUEsRUFBQSxHQUNBMkcsZ0JBQUEsSUFBQSxJQUFBLEtBQ0FsSCxNQUFBLEVBQUEsRUFBQSxLQUNBbUgsWUFBQSxJQUFBLEdBQUEsS0FDQUMsT0FBQSxJQUFBLEdBQUEsSUFDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxHQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxJQUFBLElBQUEsSUFDQUMsT0FBQSxJQUFBLElBQUEsSUFDQUMsZ0JBQUEsSUFBQSxJQUFBLEtBQ0FDLFVBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsSUFBQSxHQUFBLElBQ0F4SSxNQUFBLEVBQUEsSUFBQSxLQUNBeUksVUFBQSxFQUFBLEVBQUEsS0FDQUMsVUFBQSxFQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsSUFDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxFQUFBLElBQUEsR0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsYUFBQSxJQUFBLEVBQUEsS0FDQUMsZ0JBQUEsR0FBQSxJQUFBLElBQ0FDLFlBQUEsSUFBQSxJQUFBLEdBQ0FDLFlBQUEsSUFBQSxHQUFBLEtBQ0FDLFNBQUEsSUFBQSxFQUFBLEdBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLGNBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsR0FBQSxHQUFBLEtBQ0FDLGVBQUEsR0FBQSxHQUFBLElBQ0FDLGVBQUEsR0FBQSxHQUFBLElBQ0FDLGVBQUEsRUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxFQUFBLEtBQ0FDLFVBQUEsSUFBQSxHQUFBLEtBQ0FDLGFBQUEsRUFBQSxJQUFBLEtBQ0FDLFNBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsR0FBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxHQUFBLElBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsR0FBQSxJQUFBLElBQ0FDLFNBQUEsSUFBQSxFQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsSUFBQSxJQUFBLEdBQ0FDLFdBQUEsSUFBQSxJQUFBLElBQ0FDLE1BQUEsSUFBQSxJQUFBLEtBQ0E5SixPQUFBLEVBQUEsSUFBQSxHQUNBK0osYUFBQSxJQUFBLElBQUEsSUFDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLEdBQUEsSUFDQUMsUUFBQSxHQUFBLEVBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsR0FDQUMsY0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsc0JBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsR0FBQSxJQUFBLEtBQ0FDLGNBQUEsSUFBQSxJQUFBLEtBQ0FDLGdCQUFBLElBQUEsSUFBQSxLQUNBQyxnQkFBQSxJQUFBLElBQUEsS0FDQUMsZ0JBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsRUFBQSxJQUFBLEdBQ0FDLFdBQUEsR0FBQSxJQUFBLElBQ0FDLE9BQUEsSUFBQSxJQUFBLEtBQ0F0TCxTQUFBLElBQUEsRUFBQSxLQUNBdUwsUUFBQSxJQUFBLEVBQUEsR0FDQUMsa0JBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsRUFBQSxFQUFBLEtBQ0FDLGNBQUEsSUFBQSxHQUFBLEtBQ0FDLGNBQUEsSUFBQSxJQUFBLEtBQ0FDLGdCQUFBLEdBQUEsSUFBQSxLQUNBQyxpQkFBQSxJQUFBLElBQUEsS0FDQUMsbUJBQUEsRUFBQSxJQUFBLEtBQ0FDLGlCQUFBLEdBQUEsSUFBQSxLQUNBQyxpQkFBQSxJQUFBLEdBQUEsS0FDQUMsY0FBQSxHQUFBLEdBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsYUFBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxFQUFBLEVBQUEsS0FDQUMsU0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxJQUFBLElBQUEsSUFDQUMsUUFBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxJQUFBLEdBQUEsR0FDQUMsUUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxJQUFBLElBQUEsSUFDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxJQUFBLEVBQUEsS0FDQUMsZUFBQSxJQUFBLEdBQUEsS0FDQTdPLEtBQUEsSUFBQSxFQUFBLEdBQ0E4TyxXQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLEdBQUEsSUFBQSxLQUNBQyxhQUFBLElBQUEsR0FBQSxJQUNBQyxRQUFBLElBQUEsSUFBQSxLQUNBQyxZQUFBLElBQUEsSUFBQSxJQUNBQyxVQUFBLEdBQUEsSUFBQSxJQUNBQyxVQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLElBQUEsR0FBQSxJQUNBQyxRQUFBLElBQUEs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MEJBQ0FDLFlBQUEsSUFBQSxFQUFBLEtBQ0FDLFVBQUEsSUFBQSxHQUFBLEtBQ0FDLGFBQUEsRUFBQSxJQUFBLEtBQ0FDLFNBQUEsSUFBQSxJQUFBLEtBQ0FDLFNBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsR0FBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxHQUFBLElBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsR0FBQSxJQUFBLElBQ0FDLFNBQUEsSUFBQSxFQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsSUFBQSxJQUFBLEdBQ0FDLFdBQUEsSUFBQSxJQUFBLElBQ0FDLE1BQUEsSUFBQSxJQUFBLEtBQ0E5SixPQUFBLEVBQUEsSUFBQSxHQUNBK0osYUFBQSxJQUFBLElBQUEsSUFDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsU0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLEdBQUEsSUFDQUMsUUFBQSxHQUFBLEVBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsR0FDQUMsY0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsc0JBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLFdBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLGVBQUEsR0FBQSxJQUFBLEtBQ0FDLGNBQUEsSUFBQSxJQUFBLEtBQ0FDLGdCQUFBLElBQUEsSUFBQSxLQUNBQyxnQkFBQSxJQUFBLElBQUEsS0FDQUMsZ0JBQUEsSUFBQSxJQUFBLEtBQ0FDLGFBQUEsSUFBQSxJQUFBLEtBQ0FDLE1BQUEsRUFBQSxJQUFBLEdBQ0FDLFdBQUEsR0FBQSxJQUFBLElBQ0FDLE9BQUEsSUFBQSxJQUFBLEtBQ0F0TCxTQUFBLElBQUEsRUFBQSxLQUNBdUwsUUFBQSxJQUFBLEVBQUEsR0FDQUMsa0JBQUEsSUFBQSxJQUFBLEtBQ0FDLFlBQUEsRUFBQSxFQUFBLEtBQ0FDLGNBQUEsSUFBQSxHQUFBLEtBQ0FDLGNBQUEsSUFBQSxJQUFBLEtBQ0FDLGdCQUFBLEdBQUEsSUFBQSxLQUNBQyxpQkFBQSxJQUFBLElBQUEsS0FDQUMsbUJBQUEsRUFBQSxJQUFBLEtBQ0FDLGlCQUFBLEdBQUEsSUFBQSxLQUNBQyxpQkFBQSxJQUFBLEdBQUEsS0FDQUMsY0FBQSxHQUFBLEdBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsVUFBQSxJQUFBLElBQUEsS0FDQUMsYUFBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxFQUFBLEVBQUEsS0FDQUMsU0FBQSxJQUFBLElBQUEsS0FDQUMsT0FBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxJQUFBLElBQUEsSUFDQUMsUUFBQSxJQUFBLElBQUEsR0FDQUMsV0FBQSxJQUFBLEdBQUEsR0FDQUMsUUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsZUFBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsV0FBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxJQUFBLElBQUEsSUFDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsTUFBQSxJQUFBLElBQUEsS0FDQUMsWUFBQSxJQUFBLElBQUEsS0FDQUMsUUFBQSxJQUFBLEVBQUEsS0FDQUMsZUFBQSxJQUFBLEdBQUEsS0FDQTdPLEtBQUEsSUFBQSxFQUFBLEdBQ0E4TyxXQUFBLElBQUEsSUFBQSxLQUNBQyxXQUFBLEdBQUEsSUFBQSxLQUNBQyxhQUFBLElBQUEsR0FB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SCxFQUNBb0IsRUFBQTEzSCxnQkFNQTA1SCxpQkFBQSxHQUFBQyxtQkFBQSxHQUFBQyxXQUFBLEVBQUE5eEQsT0FBQSxHQUFBMDZDLE9BQUEsR0FBQWtULFdBQUEsS0FBQW1FLElBQUEsU0FBQXpoSSxFQUFBVSxFQUFBSixHQUNBLFlBRUE0YSxRQUFBQyxlQUFBN2EsRUFBQSxjQUNBMEwsT0FBQSxHQUVBMUwsR0FBQXU1SCxTQUFBLFVBQ0F2NUgsRUFBQXk1SCxVQUFBLFVBQ0F6NUgsRUFBQTA1SCxVQUFBLFVBQ0ExNUgsRUFBQXc1SCxlQUFBLFVBQ0F4NUgsRUFBQTQ1SCxTQUFBLFNBQ0E1NUgsRUFBQSs1SCxVQUFBLFVBQ0EvNUgsRUFBQW9oSSxXQUFBLFVBQ0FwaEksRUFBQTg1SCxtQkFBQSxvQkFFQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydFxuICovXG52YXIgQ2hhcnQgPSByZXF1aXJlKCcuL2NvcmUvY29yZScpKCk7XG5cbkNoYXJ0LmhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMvaW5kZXgnKTtcblxuLy8gQHRvZG8gZGlzcGF0Y2ggdGhlc2UgaGVscGVycyBpbnRvIGFwcHJvcHJpYXRlZCBoZWxwZXJzL2hlbHBlcnMuKiBmaWxlIGFuZCB3cml0ZSB1bml0IHRlc3RzIVxucmVxdWlyZSgnLi9jb3JlL2NvcmUuaGVscGVycycpKENoYXJ0KTtcblxuQ2hhcnQuZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUvY29yZS5kZWZhdWx0cycpO1xuQ2hhcnQuRWxlbWVudCA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLmVsZW1lbnQnKTtcbkNoYXJ0LmVsZW1lbnRzID0gcmVxdWlyZSgnLi9lbGVtZW50cy9pbmRleCcpO1xuQ2hhcnQuSW50ZXJhY3Rpb24gPSByZXF1aXJlKCcuL2NvcmUvY29yZS5pbnRlcmFjdGlvbicpO1xuQ2hhcnQucGxhdGZvcm0gPSByZXF1aXJlKCcuL3BsYXRmb3Jtcy9wbGF0Zm9ybScpO1xuXG5yZXF1aXJlKCcuL2NvcmUvY29yZS5wbHVnaW4nKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvcmUvY29yZS5hbmltYXRpb24nKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvcmUvY29yZS5jb250cm9sbGVyJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb3JlL2NvcmUuZGF0YXNldENvbnRyb2xsZXInKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvcmUvY29yZS5sYXlvdXRTZXJ2aWNlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb3JlL2NvcmUuc2NhbGUnKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvcmUvY29yZS50b29sdGlwJykoQ2hhcnQpO1xuXG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5saW5lYXJiYXNlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9zY2FsZXMvc2NhbGUuY2F0ZWdvcnknKShDaGFydCk7XG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5saW5lYXInKShDaGFydCk7XG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5sb2dhcml0aG1pYycpKENoYXJ0KTtcbnJlcXVpcmUoJy4vc2NhbGVzL3NjYWxlLnJhZGlhbExpbmVhcicpKENoYXJ0KTtcbnJlcXVpcmUoJy4vc2NhbGVzL3NjYWxlLnRpbWUnKShDaGFydCk7XG5cbi8vIENvbnRyb2xsZXJzIG11c3QgYmUgbG9hZGVkIGFmdGVyIGVsZW1lbnRzXG4vLyBTZWUgQ2hhcnQuY29yZS5kYXRhc2V0Q29udHJvbGxlci5kYXRhRWxlbWVudFR5cGVcbnJlcXVpcmUoJy4vY29udHJvbGxlcnMvY29udHJvbGxlci5iYXInKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLmRvdWdobnV0JykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLmxpbmUnKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLnJhZGFyJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLnNjYXR0ZXInKShDaGFydCk7XG5cbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkJhcicpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkJ1YmJsZScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkRvdWdobnV0JykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jaGFydHMvQ2hhcnQuTGluZScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LlBvbGFyQXJlYScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LlJhZGFyJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jaGFydHMvQ2hhcnQuU2NhdHRlcicpKENoYXJ0KTtcblxuLy8gTG9hZGluZyBidWlsdC1pdCBwbHVnaW5zXG52YXIgcGx1Z2lucyA9IFtdO1xuXG5wbHVnaW5zLnB1c2goXG5cdHJlcXVpcmUoJy4vcGx1Z2lucy9wbHVnaW4uZmlsbGVyJykoQ2hhcnQpLFxuXHRyZXF1aXJlKCcuL3BsdWdpbnMvcGx1Z2luLmxlZ2VuZCcpKENoYXJ0KSxcblx0cmVxdWlyZSgnLi9wbHVnaW5zL3BsdWdpbi50aXRsZScpKENoYXJ0KVxuKTtcblxuQ2hhcnQucGx1Z2lucy5yZWdpc3RlcihwbHVnaW5zKTtcblxuQ2hhcnQucGxhdGZvcm0uaW5pdGlhbGl6ZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENoYXJ0O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdHdpbmRvdy5DaGFydCA9IENoYXJ0O1xufVxuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuY2FudmFzIGluc3RlYWQuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmNhbnZhc0hlbHBlcnNcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LmNhbnZhc0hlbHBlcnMgPSBDaGFydC5oZWxwZXJzLmNhbnZhcztcblxufSx7XCIuL2NoYXJ0cy9DaGFydC5CYXJcIjoyLFwiLi9jaGFydHMvQ2hhcnQuQnViYmxlXCI6MyxcIi4vY2hhcnRzL0NoYXJ0LkRvdWdobnV0XCI6NCxcIi4vY2hhcnRzL0NoYXJ0LkxpbmVcIjo1LFwiLi9jaGFydHMvQ2hhcnQuUG9sYXJBcmVhXCI6NixcIi4vY2hhcnRzL0NoYXJ0LlJhZGFyXCI6NyxcIi4vY2hhcnRzL0NoYXJ0LlNjYXR0ZXJcIjo4LFwiLi9jb250cm9sbGVycy9jb250cm9sbGVyLmJhclwiOjksXCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlXCI6MTAsXCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuZG91Z2hudXRcIjoxMSxcIi4vY29udHJvbGxlcnMvY29udHJvbGxlci5saW5lXCI6MTIsXCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhXCI6MTMsXCIuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucmFkYXJcIjoxNCxcIi4vY29udHJvbGxlcnMvY29udHJvbGxlci5zY2F0dGVyXCI6MTUsXCIuL2NvcmUvY29yZVwiOjIzLFwiLi9jb3JlL2NvcmUuYW5pbWF0aW9uXCI6MTYsXCIuL2NvcmUvY29yZS5jb250cm9sbGVyXCI6MTcsXCIuL2NvcmUvY29yZS5kYXRhc2V0Q29udHJvbGxlclwiOjE4LFwiLi9jb3JlL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4vY29yZS9jb3JlLmVsZW1lbnRcIjoyMCxcIi4vY29yZS9jb3JlLmhlbHBlcnNcIjoyMSxcIi4vY29yZS9jb3JlLmludGVyYWN0aW9uXCI6MjIsXCIuL2NvcmUvY29yZS5sYXlvdXRTZXJ2aWNlXCI6MjQsXCIuL2NvcmUvY29yZS5wbHVnaW5cIjoyNSxcIi4vY29yZS9jb3JlLnNjYWxlXCI6MjYsXCIuL2NvcmUvY29yZS5zY2FsZVNlcnZpY2VcIjoyNyxcIi4vY29yZS9jb3JlLnRvb2x0aXBcIjoyOSxcIi4vZWxlbWVudHMvaW5kZXhcIjozNCxcIi4vaGVscGVycy9pbmRleFwiOjM5LFwiLi9wbGF0Zm9ybXMvcGxhdGZvcm1cIjo0MixcIi4vcGx1Z2lucy9wbHVnaW4uZmlsbGVyXCI6NDMsXCIuL3BsdWdpbnMvcGx1Z2luLmxlZ2VuZFwiOjQ0LFwiLi9wbHVnaW5zL3BsdWdpbi50aXRsZVwiOjQ1LFwiLi9zY2FsZXMvc2NhbGUuY2F0ZWdvcnlcIjo0NixcIi4vc2NhbGVzL3NjYWxlLmxpbmVhclwiOjQ3LFwiLi9zY2FsZXMvc2NhbGUubGluZWFyYmFzZVwiOjQ4LFwiLi9zY2FsZXMvc2NhbGUubG9nYXJpdGhtaWNcIjo0OSxcIi4vc2NhbGVzL3NjYWxlLnJhZGlhbExpbmVhclwiOjUwLFwiLi9zY2FsZXMvc2NhbGUudGltZVwiOjUxfV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5CYXIgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdiYXInO1xuXG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuXG59LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LkJ1YmJsZSA9IGZ1bmN0aW9uKGNvbnRleHQsIGNvbmZpZykge1xuXHRcdGNvbmZpZy50eXBlID0gJ2J1YmJsZSc7XG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuXG59LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LkRvdWdobnV0ID0gZnVuY3Rpb24oY29udGV4dCwgY29uZmlnKSB7XG5cdFx0Y29uZmlnLnR5cGUgPSAnZG91Z2hudXQnO1xuXG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuXG59LHt9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LkxpbmUgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdsaW5lJztcblxuXHRcdHJldHVybiBuZXcgQ2hhcnQoY29udGV4dCwgY29uZmlnKTtcblx0fTtcblxufTtcblxufSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5Qb2xhckFyZWEgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdwb2xhckFyZWEnO1xuXG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuXG59LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LlJhZGFyID0gZnVuY3Rpb24oY29udGV4dCwgY29uZmlnKSB7XG5cdFx0Y29uZmlnLnR5cGUgPSAncmFkYXInO1xuXG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuXG59LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXHRDaGFydC5TY2F0dGVyID0gZnVuY3Rpb24oY29udGV4dCwgY29uZmlnKSB7XG5cdFx0Y29uZmlnLnR5cGUgPSAnc2NhdHRlcic7XG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xufTtcblxufSx7fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5kZXgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdiYXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2xhYmVsJ1xuXHR9LFxuXG5cdHNjYWxlczoge1xuXHRcdHhBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2NhdGVnb3J5JyxcblxuXHRcdFx0Ly8gU3BlY2lmaWMgdG8gQmFyIENvbnRyb2xsZXJcblx0XHRcdGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuXHRcdFx0YmFyUGVyY2VudGFnZTogMC45LFxuXG5cdFx0XHQvLyBvZmZzZXQgc2V0dGluZ3Ncblx0XHRcdG9mZnNldDogdHJ1ZSxcblxuXHRcdFx0Ly8gZ3JpZCBsaW5lIHNldHRpbmdzXG5cdFx0XHRncmlkTGluZXM6IHtcblx0XHRcdFx0b2Zmc2V0R3JpZExpbmVzOiB0cnVlXG5cdFx0XHR9XG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInXG5cdFx0fV1cblx0fVxufSk7XG5cbmRlZmF1bHRzLl9zZXQoJ2hvcml6b250YWxCYXInLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ2luZGV4Jyxcblx0XHRheGlzOiAneSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0cG9zaXRpb246ICdib3R0b20nXG5cdFx0fV0sXG5cblx0XHR5QXhlczogW3tcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCcsXG5cdFx0XHR0eXBlOiAnY2F0ZWdvcnknLFxuXG5cdFx0XHQvLyBTcGVjaWZpYyB0byBIb3Jpem9udGFsIEJhciBDb250cm9sbGVyXG5cdFx0XHRjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcblx0XHRcdGJhclBlcmNlbnRhZ2U6IDAuOSxcblxuXHRcdFx0Ly8gb2Zmc2V0IHNldHRpbmdzXG5cdFx0XHRvZmZzZXQ6IHRydWUsXG5cblx0XHRcdC8vIGdyaWQgbGluZSBzZXR0aW5nc1xuXHRcdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lczogdHJ1ZVxuXHRcdFx0fVxuXHRcdH1dXG5cdH0sXG5cblx0ZWxlbWVudHM6IHtcblx0XHRyZWN0YW5nbGU6IHtcblx0XHRcdGJvcmRlclNraXBwZWQ6ICdsZWZ0J1xuXHRcdH1cblx0fSxcblxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0Ly8gUGljayBmaXJzdCB4TGFiZWwgZm9yIG5vd1xuXHRcdFx0XHR2YXIgdGl0bGUgPSAnJztcblxuXHRcdFx0XHRpZiAoaXRlbS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aWYgKGl0ZW1bMF0ueUxhYmVsKSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGl0ZW1bMF0ueUxhYmVsO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoID4gMCAmJiBpdGVtWzBdLmluZGV4IDwgZGF0YS5sYWJlbHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGRhdGEubGFiZWxzW2l0ZW1bMF0uaW5kZXhdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0aXRsZTtcblx0XHRcdH0sXG5cblx0XHRcdGxhYmVsOiBmdW5jdGlvbihpdGVtLCBkYXRhKSB7XG5cdFx0XHRcdHZhciBkYXRhc2V0TGFiZWwgPSBkYXRhLmRhdGFzZXRzW2l0ZW0uZGF0YXNldEluZGV4XS5sYWJlbCB8fCAnJztcblx0XHRcdFx0cmV0dXJuIGRhdGFzZXRMYWJlbCArICc6ICcgKyBpdGVtLnhMYWJlbDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG1vZGU6ICdpbmRleCcsXG5cdFx0YXhpczogJ3knXG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuY29udHJvbGxlcnMuYmFyID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRcdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUmVjdGFuZ2xlLFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGE7XG5cblx0XHRcdENoYXJ0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0bWV0YS5zdGFjayA9IG1lLmdldERhdGFzZXQoKS5zdGFjaztcblx0XHRcdG1ldGEuYmFyID0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbihyZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdFx0dmFyIGksIGlsZW47XG5cblx0XHRcdG1lLl9ydWxlciA9IG1lLmdldFJ1bGVyKCk7XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSByZWN0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChyZWN0c1tpXSwgaSwgcmVzZXQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihyZWN0YW5nbGUsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBjdXN0b20gPSByZWN0YW5nbGUuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIHJlY3RhbmdsZU9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmVsZW1lbnRzLnJlY3RhbmdsZTtcblxuXHRcdFx0cmVjdGFuZ2xlLl94U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0XHRyZWN0YW5nbGUuX3lTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHRcdHJlY3RhbmdsZS5fZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0XHRyZWN0YW5nbGUuX2luZGV4ID0gaW5kZXg7XG5cblx0XHRcdHJlY3RhbmdsZS5fbW9kZWwgPSB7XG5cdFx0XHRcdGRhdGFzZXRMYWJlbDogZGF0YXNldC5sYWJlbCxcblx0XHRcdFx0bGFiZWw6IGNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XSxcblx0XHRcdFx0Ym9yZGVyU2tpcHBlZDogY3VzdG9tLmJvcmRlclNraXBwZWQgPyBjdXN0b20uYm9yZGVyU2tpcHBlZCA6IHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyU2tpcHBlZCxcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBjdXN0b20uYmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmJhY2tncm91bmRDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQuYmFja2dyb3VuZENvbG9yLCBpbmRleCwgcmVjdGFuZ2xlT3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJDb2xvciwgaW5kZXgsIHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyQ29sb3IpLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJXaWR0aCwgaW5kZXgsIHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyV2lkdGgpXG5cdFx0XHR9O1xuXG5cdFx0XHRtZS51cGRhdGVFbGVtZW50R2VvbWV0cnkocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQpO1xuXG5cdFx0XHRyZWN0YW5nbGUucGl2b3QoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR1cGRhdGVFbGVtZW50R2VvbWV0cnk6IGZ1bmN0aW9uKHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1vZGVsID0gcmVjdGFuZ2xlLl9tb2RlbDtcblx0XHRcdHZhciB2c2NhbGUgPSBtZS5nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0XHR2YXIgYmFzZSA9IHZzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcblx0XHRcdHZhciBob3Jpem9udGFsID0gdnNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0dmFyIHJ1bGVyID0gbWUuX3J1bGVyIHx8IG1lLmdldFJ1bGVyKCk7XG5cdFx0XHR2YXIgdnBpeGVscyA9IG1lLmNhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKG1lLmluZGV4LCBpbmRleCk7XG5cdFx0XHR2YXIgaXBpeGVscyA9IG1lLmNhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKG1lLmluZGV4LCBpbmRleCwgcnVsZXIpO1xuXG5cdFx0XHRtb2RlbC5ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcblx0XHRcdG1vZGVsLmJhc2UgPSByZXNldCA/IGJhc2UgOiB2cGl4ZWxzLmJhc2U7XG5cdFx0XHRtb2RlbC54ID0gaG9yaXpvbnRhbCA/IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyO1xuXHRcdFx0bW9kZWwueSA9IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZDtcblx0XHRcdG1vZGVsLmhlaWdodCA9IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiB1bmRlZmluZWQ7XG5cdFx0XHRtb2RlbC53aWR0aCA9IGhvcml6b250YWwgPyB1bmRlZmluZWQgOiBpcGl4ZWxzLnNpemU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS55QXhpc0lEO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRWYWx1ZVNjYWxlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5nZXRWYWx1ZVNjYWxlSWQoKSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0SW5kZXhTY2FsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRTY2FsZUZvcklkKHRoaXMuZ2V0SW5kZXhTY2FsZUlkKCkpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBlZmZlY3RpdmUgbnVtYmVyIG9mIHN0YWNrcyBiYXNlZCBvbiBncm91cHMgYW5kIGJhciB2aXNpYmlsaXR5LlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0U3RhY2tDb3VudDogZnVuY3Rpb24obGFzdCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIHNjYWxlID0gbWUuZ2V0SW5kZXhTY2FsZSgpO1xuXHRcdFx0dmFyIHN0YWNrZWQgPSBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG5cdFx0XHR2YXIgaWxlbiA9IGxhc3QgPT09IHVuZGVmaW5lZCA/IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoIDogbGFzdCArIDE7XG5cdFx0XHR2YXIgc3RhY2tzID0gW107XG5cdFx0XHR2YXIgaSwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdGlmIChtZXRhLmJhciAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpICYmXG5cdFx0XHRcdFx0KHN0YWNrZWQgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0KHN0YWNrZWQgPT09IHRydWUgJiYgc3RhY2tzLmluZGV4T2YobWV0YS5zdGFjaykgPT09IC0xKSB8fFxuXHRcdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgKG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCB8fCBzdGFja3MuaW5kZXhPZihtZXRhLnN0YWNrKSA9PT0gLTEpKSkpIHtcblx0XHRcdFx0XHRzdGFja3MucHVzaChtZXRhLnN0YWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc3RhY2tzLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgc3RhY2sgaW5kZXggZm9yIHRoZSBnaXZlbiBkYXRhc2V0IGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRTdGFja0luZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFN0YWNrQ291bnQoZGF0YXNldEluZGV4KSAtIDE7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0UnVsZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBzY2FsZSA9IG1lLmdldEluZGV4U2NhbGUoKTtcblx0XHRcdHZhciBzdGFja0NvdW50ID0gbWUuZ2V0U3RhY2tDb3VudCgpO1xuXHRcdFx0dmFyIGRhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdFx0dmFyIHBpeGVscyA9IFtdO1xuXHRcdFx0dmFyIGlzSG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0dmFyIHN0YXJ0ID0gaXNIb3Jpem9udGFsID8gc2NhbGUubGVmdCA6IHNjYWxlLnRvcDtcblx0XHRcdHZhciBlbmQgPSBzdGFydCArIChpc0hvcml6b250YWwgPyBzY2FsZS53aWR0aCA6IHNjYWxlLmhlaWdodCk7XG5cdFx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLmdldE1ldGEoKS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRwaXhlbHMucHVzaChzY2FsZS5nZXRQaXhlbEZvclZhbHVlKG51bGwsIGksIGRhdGFzZXRJbmRleCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRwaXhlbHM6IHBpeGVscyxcblx0XHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0XHRlbmQ6IGVuZCxcblx0XHRcdFx0c3RhY2tDb3VudDogc3RhY2tDb3VudCxcblx0XHRcdFx0c2NhbGU6IHNjYWxlXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBOb3RlOiBwaXhlbCB2YWx1ZXMgYXJlIG5vdCBjbGFtcGVkIHRvIHRoZSBzY2FsZSBhcmVhLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Y2FsY3VsYXRlQmFyVmFsdWVQaXhlbHM6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIHNjYWxlID0gbWUuZ2V0VmFsdWVTY2FsZSgpO1xuXHRcdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHRcdHZhciB2YWx1ZSA9IHNjYWxlLmdldFJpZ2h0VmFsdWUoZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0XHR2YXIgc3RhY2tlZCA9IHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcblx0XHRcdHZhciBzdGFjayA9IG1ldGEuc3RhY2s7XG5cdFx0XHR2YXIgc3RhcnQgPSAwO1xuXHRcdFx0dmFyIGksIGltZXRhLCBpdmFsdWUsIGJhc2UsIGhlYWQsIHNpemU7XG5cblx0XHRcdGlmIChzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgc3RhY2sgIT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGRhdGFzZXRJbmRleDsgKytpKSB7XG5cdFx0XHRcdFx0aW1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblxuXHRcdFx0XHRcdGlmIChpbWV0YS5iYXIgJiZcblx0XHRcdFx0XHRcdGltZXRhLnN0YWNrID09PSBzdGFjayAmJlxuXHRcdFx0XHRcdFx0aW1ldGEuY29udHJvbGxlci5nZXRWYWx1ZVNjYWxlSWQoKSA9PT0gc2NhbGUuaWQgJiZcblx0XHRcdFx0XHRcdGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblxuXHRcdFx0XHRcdFx0aXZhbHVlID0gc2NhbGUuZ2V0UmlnaHRWYWx1ZShkYXRhc2V0c1tpXS5kYXRhW2luZGV4XSk7XG5cdFx0XHRcdFx0XHRpZiAoKHZhbHVlIDwgMCAmJiBpdmFsdWUgPCAwKSB8fCAodmFsdWUgPj0gMCAmJiBpdmFsdWUgPiAwKSkge1xuXHRcdFx0XHRcdFx0XHRzdGFydCArPSBpdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGJhc2UgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0KTtcblx0XHRcdGhlYWQgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgdmFsdWUpO1xuXHRcdFx0c2l6ZSA9IChoZWFkIC0gYmFzZSkgLyAyO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRiYXNlOiBiYXNlLFxuXHRcdFx0XHRoZWFkOiBoZWFkLFxuXHRcdFx0XHRjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRjYWxjdWxhdGVCYXJJbmRleFBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCwgcnVsZXIpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHJ1bGVyLnNjYWxlLm9wdGlvbnM7XG5cdFx0XHR2YXIgc3RhY2tJbmRleCA9IG1lLmdldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4KTtcblx0XHRcdHZhciBwaXhlbHMgPSBydWxlci5waXhlbHM7XG5cdFx0XHR2YXIgYmFzZSA9IHBpeGVsc1tpbmRleF07XG5cdFx0XHR2YXIgbGVuZ3RoID0gcGl4ZWxzLmxlbmd0aDtcblx0XHRcdHZhciBzdGFydCA9IHJ1bGVyLnN0YXJ0O1xuXHRcdFx0dmFyIGVuZCA9IHJ1bGVyLmVuZDtcblx0XHRcdHZhciBsZWZ0U2FtcGxlU2l6ZSwgcmlnaHRTYW1wbGVTaXplLCBsZWZ0Q2F0ZWdvcnlTaXplLCByaWdodENhdGVnb3J5U2l6ZSwgZnVsbEJhclNpemUsIHNpemU7XG5cblx0XHRcdGlmIChsZW5ndGggPT09IDEpIHtcblx0XHRcdFx0bGVmdFNhbXBsZVNpemUgPSBiYXNlID4gc3RhcnQgPyBiYXNlIC0gc3RhcnQgOiBlbmQgLSBiYXNlO1xuXHRcdFx0XHRyaWdodFNhbXBsZVNpemUgPSBiYXNlIDwgZW5kID8gZW5kIC0gYmFzZSA6IGJhc2UgLSBzdGFydDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChpbmRleCA+IDApIHtcblx0XHRcdFx0XHRsZWZ0U2FtcGxlU2l6ZSA9IChiYXNlIC0gcGl4ZWxzW2luZGV4IC0gMV0pIC8gMjtcblx0XHRcdFx0XHRpZiAoaW5kZXggPT09IGxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdHJpZ2h0U2FtcGxlU2l6ZSA9IGxlZnRTYW1wbGVTaXplO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW5kZXggPCBsZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0cmlnaHRTYW1wbGVTaXplID0gKHBpeGVsc1tpbmRleCArIDFdIC0gYmFzZSkgLyAyO1xuXHRcdFx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0bGVmdFNhbXBsZVNpemUgPSByaWdodFNhbXBsZVNpemU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGxlZnRDYXRlZ29yeVNpemUgPSBsZWZ0U2FtcGxlU2l6ZSAqIG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuXHRcdFx0cmlnaHRDYXRlZ29yeVNpemUgPSByaWdodFNhbXBsZVNpemUgKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcblx0XHRcdGZ1bGxCYXJTaXplID0gKGxlZnRDYXRlZ29yeVNpemUgKyByaWdodENhdGVnb3J5U2l6ZSkgLyBydWxlci5zdGFja0NvdW50O1xuXHRcdFx0c2l6ZSA9IGZ1bGxCYXJTaXplICogb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuXG5cdFx0XHRzaXplID0gTWF0aC5taW4oXG5cdFx0XHRcdGhlbHBlcnMudmFsdWVPckRlZmF1bHQob3B0aW9ucy5iYXJUaGlja25lc3MsIHNpemUpLFxuXHRcdFx0XHRoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSkpO1xuXG5cdFx0XHRiYXNlIC09IGxlZnRDYXRlZ29yeVNpemU7XG5cdFx0XHRiYXNlICs9IGZ1bGxCYXJTaXplICogc3RhY2tJbmRleDtcblx0XHRcdGJhc2UgKz0gKGZ1bGxCYXJTaXplIC0gc2l6ZSkgLyAyO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzaXplOiBzaXplLFxuXHRcdFx0XHRiYXNlOiBiYXNlLFxuXHRcdFx0XHRoZWFkOiBiYXNlICsgc2l6ZSxcblx0XHRcdFx0Y2VudGVyOiBiYXNlICsgc2l6ZSAvIDJcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIHNjYWxlID0gbWUuZ2V0VmFsdWVTY2FsZSgpO1xuXHRcdFx0dmFyIHJlY3RzID0gbWUuZ2V0TWV0YSgpLmRhdGE7XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBpbGVuID0gcmVjdHMubGVuZ3RoO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRoZWxwZXJzLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIGNoYXJ0LmNoYXJ0QXJlYSk7XG5cblx0XHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGlmICghaXNOYU4oc2NhbGUuZ2V0UmlnaHRWYWx1ZShkYXRhc2V0LmRhdGFbaV0pKSkge1xuXHRcdFx0XHRcdHJlY3RzW2ldLmRyYXcoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cdFx0fSxcblxuXHRcdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKHJlY3RhbmdsZSkge1xuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbcmVjdGFuZ2xlLl9kYXRhc2V0SW5kZXhdO1xuXHRcdFx0dmFyIGluZGV4ID0gcmVjdGFuZ2xlLl9pbmRleDtcblx0XHRcdHZhciBjdXN0b20gPSByZWN0YW5nbGUuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIG1vZGVsID0gcmVjdGFuZ2xlLl9tb2RlbDtcblxuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ob3ZlckJhY2tncm91bmRDb2xvciwgaW5kZXgsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihtb2RlbC5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRcdG1vZGVsLmJvcmRlckNvbG9yID0gY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IgPyBjdXN0b20uaG92ZXJCb3JkZXJDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQuaG92ZXJCb3JkZXJDb2xvciwgaW5kZXgsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihtb2RlbC5ib3JkZXJDb2xvcikpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uaG92ZXJCb3JkZXJXaWR0aCA/IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ob3ZlckJvcmRlcldpZHRoLCBpbmRleCwgbW9kZWwuYm9yZGVyV2lkdGgpO1xuXHRcdH0sXG5cblx0XHRyZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbihyZWN0YW5nbGUpIHtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3JlY3RhbmdsZS5fZGF0YXNldEluZGV4XTtcblx0XHRcdHZhciBpbmRleCA9IHJlY3RhbmdsZS5faW5kZXg7XG5cdFx0XHR2YXIgY3VzdG9tID0gcmVjdGFuZ2xlLmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBtb2RlbCA9IHJlY3RhbmdsZS5fbW9kZWw7XG5cdFx0XHR2YXIgcmVjdGFuZ2xlRWxlbWVudE9wdGlvbnMgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucmVjdGFuZ2xlO1xuXG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBjdXN0b20uYmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmJhY2tncm91bmRDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQuYmFja2dyb3VuZENvbG9yLCBpbmRleCwgcmVjdGFuZ2xlRWxlbWVudE9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcblx0XHRcdG1vZGVsLmJvcmRlckNvbG9yID0gY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJDb2xvciwgaW5kZXgsIHJlY3RhbmdsZUVsZW1lbnRPcHRpb25zLmJvcmRlckNvbG9yKTtcblx0XHRcdG1vZGVsLmJvcmRlcldpZHRoID0gY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJXaWR0aCwgaW5kZXgsIHJlY3RhbmdsZUVsZW1lbnRPcHRpb25zLmJvcmRlcldpZHRoKTtcblx0XHR9XG5cdH0pO1xuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLmhvcml6b250YWxCYXIgPSBDaGFydC5jb250cm9sbGVycy5iYXIuZXh0ZW5kKHtcblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFZhbHVlU2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRJbmRleFNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0TWV0YSgpLnlBeGlzSUQ7XG5cdFx0fVxuXHR9KTtcbn07XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9lbGVtZW50cy9pbmRleFwiOjM0LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBlbGVtZW50cyA9IHJlcXVpcmUoJy4uL2VsZW1lbnRzL2luZGV4Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnYnViYmxlJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdzaW5nbGUnXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJywgLy8gYnViYmxlIHNob3VsZCBwcm9iYWJseSB1c2UgYSBsaW5lYXIgc2NhbGUgYnkgZGVmYXVsdFxuXHRcdFx0cG9zaXRpb246ICdib3R0b20nLFxuXHRcdFx0aWQ6ICd4LWF4aXMtMCcgLy8gbmVlZCBhbiBJRCBzbyBkYXRhc2V0cyBjYW4gcmVmZXJlbmNlIHRoZSBzY2FsZVxuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2xpbmVhcicsXG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdFx0aWQ6ICd5LWF4aXMtMCdcblx0XHR9XVxuXHR9LFxuXG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIFRpdGxlIGRvZXNuJ3QgbWFrZSBzZW5zZSBmb3Igc2NhdHRlciBzaW5jZSB3ZSBmb3JtYXQgdGhlIGRhdGEgYXMgYSBwb2ludFxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGRhdGFzZXRMYWJlbCA9IGRhdGEuZGF0YXNldHNbaXRlbS5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8ICcnO1xuXHRcdFx0XHR2YXIgZGF0YVBvaW50ID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0uZGF0YVtpdGVtLmluZGV4XTtcblx0XHRcdFx0cmV0dXJuIGRhdGFzZXRMYWJlbCArICc6ICgnICsgaXRlbS54TGFiZWwgKyAnLCAnICsgaXRlbS55TGFiZWwgKyAnLCAnICsgZGF0YVBvaW50LnIgKyAnKSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuY29udHJvbGxlcnMuYnViYmxlID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblx0XHQvKipcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5Qb2ludCxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhO1xuXG5cdFx0XHQvLyBVcGRhdGUgUG9pbnRzXG5cdFx0XHRoZWxwZXJzLmVhY2gocG9pbnRzLCBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludCwgaW5kZXgsIHJlc2V0KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciB4U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0XHR2YXIgeVNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnlBeGlzSUQpO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHBvaW50LCBpbmRleCk7XG5cdFx0XHR2YXIgZGF0YSA9IG1lLmdldERhdGFzZXQoKS5kYXRhW2luZGV4XTtcblx0XHRcdHZhciBkc0luZGV4ID0gbWUuaW5kZXg7XG5cblx0XHRcdHZhciB4ID0gcmVzZXQgPyB4U2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgPyBkYXRhIDogTmFOLCBpbmRleCwgZHNJbmRleCk7XG5cdFx0XHR2YXIgeSA9IHJlc2V0ID8geVNjYWxlLmdldEJhc2VQaXhlbCgpIDogeVNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZGF0YSwgaW5kZXgsIGRzSW5kZXgpO1xuXG5cdFx0XHRwb2ludC5feFNjYWxlID0geFNjYWxlO1xuXHRcdFx0cG9pbnQuX3lTY2FsZSA9IHlTY2FsZTtcblx0XHRcdHBvaW50Ll9vcHRpb25zID0gb3B0aW9ucztcblx0XHRcdHBvaW50Ll9kYXRhc2V0SW5kZXggPSBkc0luZGV4O1xuXHRcdFx0cG9pbnQuX2luZGV4ID0gaW5kZXg7XG5cdFx0XHRwb2ludC5fbW9kZWwgPSB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcblx0XHRcdFx0aGl0UmFkaXVzOiBvcHRpb25zLmhpdFJhZGl1cyxcblx0XHRcdFx0cG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuXHRcdFx0XHRyYWRpdXM6IHJlc2V0ID8gMCA6IG9wdGlvbnMucmFkaXVzLFxuXHRcdFx0XHRza2lwOiBjdXN0b20uc2tpcCB8fCBpc05hTih4KSB8fCBpc05hTih5KSxcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdH07XG5cblx0XHRcdHBvaW50LnBpdm90KCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblxuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBoZWxwZXJzLmdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRcdG1vZGVsLmJvcmRlckNvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0XHRcdG1vZGVsLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5ob3ZlclJhZGl1cztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHBvaW50Ll9vcHRpb25zO1xuXG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdG1vZGVsLmJvcmRlckNvbG9yID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcblx0XHRcdG1vZGVsLmJvcmRlcldpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcblx0XHRcdG1vZGVsLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdF9yZXNvbHZlRWxlbWVudE9wdGlvbnM6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0XHRcdHZhciBkYXRhc2V0ID0gZGF0YXNldHNbbWUuaW5kZXhdO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBvcHRpb25zID0gY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludDtcblx0XHRcdHZhciByZXNvbHZlID0gaGVscGVycy5vcHRpb25zLnJlc29sdmU7XG5cdFx0XHR2YXIgZGF0YSA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG5cdFx0XHR2YXIgdmFsdWVzID0ge307XG5cdFx0XHR2YXIgaSwgaWxlbiwga2V5O1xuXG5cdFx0XHQvLyBTY3JpcHRhYmxlIG9wdGlvbnNcblx0XHRcdHZhciBjb250ZXh0ID0ge1xuXHRcdFx0XHRjaGFydDogY2hhcnQsXG5cdFx0XHRcdGRhdGFJbmRleDogaW5kZXgsXG5cdFx0XHRcdGRhdGFzZXQ6IGRhdGFzZXQsXG5cdFx0XHRcdGRhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHRcdH07XG5cblx0XHRcdHZhciBrZXlzID0gW1xuXHRcdFx0XHQnYmFja2dyb3VuZENvbG9yJyxcblx0XHRcdFx0J2JvcmRlckNvbG9yJyxcblx0XHRcdFx0J2JvcmRlcldpZHRoJyxcblx0XHRcdFx0J2hvdmVyQmFja2dyb3VuZENvbG9yJyxcblx0XHRcdFx0J2hvdmVyQm9yZGVyQ29sb3InLFxuXHRcdFx0XHQnaG92ZXJCb3JkZXJXaWR0aCcsXG5cdFx0XHRcdCdob3ZlclJhZGl1cycsXG5cdFx0XHRcdCdoaXRSYWRpdXMnLFxuXHRcdFx0XHQncG9pbnRTdHlsZSdcblx0XHRcdF07XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRrZXkgPSBrZXlzW2ldO1xuXHRcdFx0XHR2YWx1ZXNba2V5XSA9IHJlc29sdmUoW1xuXHRcdFx0XHRcdGN1c3RvbVtrZXldLFxuXHRcdFx0XHRcdGRhdGFzZXRba2V5XSxcblx0XHRcdFx0XHRvcHRpb25zW2tleV1cblx0XHRcdFx0XSwgY29udGV4dCwgaW5kZXgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDdXN0b20gcmFkaXVzIHJlc29sdXRpb25cblx0XHRcdHZhbHVlcy5yYWRpdXMgPSByZXNvbHZlKFtcblx0XHRcdFx0Y3VzdG9tLnJhZGl1cyxcblx0XHRcdFx0ZGF0YSA/IGRhdGEuciA6IHVuZGVmaW5lZCxcblx0XHRcdFx0ZGF0YXNldC5yYWRpdXMsXG5cdFx0XHRcdG9wdGlvbnMucmFkaXVzXG5cdFx0XHRdLCBjb250ZXh0LCBpbmRleCk7XG5cblx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0fVxuXHR9KTtcbn07XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9lbGVtZW50cy9pbmRleFwiOjM0LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBlbGVtZW50cyA9IHJlcXVpcmUoJy4uL2VsZW1lbnRzL2luZGV4Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZG91Z2hudXQnLCB7XG5cdGFuaW1hdGlvbjoge1xuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBEb3VnaG51dFxuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgd2UgYW5pbWF0ZSBzY2FsaW5nIHRoZSBEb3VnaG51dCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlU2NhbGU6IGZhbHNlXG5cdH0sXG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblx0bGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRleHQgPSBbXTtcblx0XHR0ZXh0LnB1c2goJzx1bCBjbGFzcz1cIicgKyBjaGFydC5pZCArICctbGVnZW5kXCI+Jyk7XG5cblx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0dmFyIGRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cztcblx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cblx0XHRpZiAoZGF0YXNldHMubGVuZ3RoKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFzZXRzWzBdLmRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dGV4dC5wdXNoKCc8bGk+PHNwYW4gc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOicgKyBkYXRhc2V0c1swXS5iYWNrZ3JvdW5kQ29sb3JbaV0gKyAnXCI+PC9zcGFuPicpO1xuXHRcdFx0XHRpZiAobGFiZWxzW2ldKSB7XG5cdFx0XHRcdFx0dGV4dC5wdXNoKGxhYmVsc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGV4dC5wdXNoKCc8L2xpPicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRleHQucHVzaCgnPC91bD4nKTtcblx0XHRyZXR1cm4gdGV4dC5qb2luKCcnKTtcblx0fSxcblx0bGVnZW5kOiB7XG5cdFx0bGFiZWxzOiB7XG5cdFx0XHRnZW5lcmF0ZUxhYmVsczogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRcdFx0dmFyIGRhdGEgPSBjaGFydC5kYXRhO1xuXHRcdFx0XHRpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGEubGFiZWxzLm1hcChmdW5jdGlvbihsYWJlbCwgaSkge1xuXHRcdFx0XHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcblx0XHRcdFx0XHRcdHZhciBkcyA9IGRhdGEuZGF0YXNldHNbMF07XG5cdFx0XHRcdFx0XHR2YXIgYXJjID0gbWV0YS5kYXRhW2ldO1xuXHRcdFx0XHRcdFx0dmFyIGN1c3RvbSA9IGFyYyAmJiBhcmMuY3VzdG9tIHx8IHt9O1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXHRcdFx0XHRcdFx0dmFyIGFyY09wdHMgPSBjaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYztcblx0XHRcdFx0XHRcdHZhciBmaWxsID0gY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZHMuYmFja2dyb3VuZENvbG9yLCBpLCBhcmNPcHRzLmJhY2tncm91bmRDb2xvcik7XG5cdFx0XHRcdFx0XHR2YXIgc3Ryb2tlID0gY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogdmFsdWVBdEluZGV4T3JEZWZhdWx0KGRzLmJvcmRlckNvbG9yLCBpLCBhcmNPcHRzLmJvcmRlckNvbG9yKTtcblx0XHRcdFx0XHRcdHZhciBidyA9IGN1c3RvbS5ib3JkZXJXaWR0aCA/IGN1c3RvbS5ib3JkZXJXaWR0aCA6IHZhbHVlQXRJbmRleE9yRGVmYXVsdChkcy5ib3JkZXJXaWR0aCwgaSwgYXJjT3B0cy5ib3JkZXJXaWR0aCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHRleHQ6IGxhYmVsLFxuXHRcdFx0XHRcdFx0XHRmaWxsU3R5bGU6IGZpbGwsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBzdHJva2UsXG5cdFx0XHRcdFx0XHRcdGxpbmVXaWR0aDogYncsXG5cdFx0XHRcdFx0XHRcdGhpZGRlbjogaXNOYU4oZHMuZGF0YVtpXSkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbixcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBjb3JyZWN0IGl0ZW1cblx0XHRcdFx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRvbkNsaWNrOiBmdW5jdGlvbihlLCBsZWdlbmRJdGVtKSB7XG5cdFx0XHR2YXIgaW5kZXggPSBsZWdlbmRJdGVtLmluZGV4O1xuXHRcdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBpLCBpbGVuLCBtZXRhO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdC8vIHRvZ2dsZSB2aXNpYmlsaXR5IG9mIGluZGV4IGlmIGV4aXN0c1xuXHRcdFx0XHRpZiAobWV0YS5kYXRhW2luZGV4XSkge1xuXHRcdFx0XHRcdG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuID0gIW1ldGEuZGF0YVtpbmRleF0uaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJ0LnVwZGF0ZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBUaGUgcGVyY2VudGFnZSBvZiB0aGUgY2hhcnQgdGhhdCB3ZSBjdXQgb3V0IG9mIHRoZSBtaWRkbGUuXG5cdGN1dG91dFBlcmNlbnRhZ2U6IDUwLFxuXG5cdC8vIFRoZSByb3RhdGlvbiBvZiB0aGUgY2hhcnQsIHdoZXJlIHRoZSBmaXJzdCBkYXRhIGFyYyBiZWdpbnMuXG5cdHJvdGF0aW9uOiBNYXRoLlBJICogLTAuNSxcblxuXHQvLyBUaGUgdG90YWwgY2lyY3VtZmVyZW5jZSBvZiB0aGUgY2hhcnQuXG5cdGNpcmN1bWZlcmVuY2U6IE1hdGguUEkgKiAyLjAsXG5cblx0Ly8gTmVlZCB0byBvdmVycmlkZSB0aGVzZSB0byBnaXZlIGEgbmljZSBkZWZhdWx0XG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGRhdGFMYWJlbCA9IGRhdGEubGFiZWxzW3Rvb2x0aXBJdGVtLmluZGV4XTtcblx0XHRcdFx0dmFyIHZhbHVlID0gJzogJyArIGRhdGEuZGF0YXNldHNbdG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4XS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcblxuXHRcdFx0XHRpZiAoaGVscGVycy5pc0FycmF5KGRhdGFMYWJlbCkpIHtcblx0XHRcdFx0XHQvLyBzaG93IHZhbHVlIG9uIGZpcnN0IGxpbmUgb2YgbXVsdGlsaW5lIGxhYmVsXG5cdFx0XHRcdFx0Ly8gbmVlZCB0byBjbG9uZSBiZWNhdXNlIHdlIGFyZSBjaGFuZ2luZyB0aGUgdmFsdWVcblx0XHRcdFx0XHRkYXRhTGFiZWwgPSBkYXRhTGFiZWwuc2xpY2UoKTtcblx0XHRcdFx0XHRkYXRhTGFiZWxbMF0gKz0gdmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YUxhYmVsICs9IHZhbHVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGRhdGFMYWJlbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5kZWZhdWx0cy5fc2V0KCdwaWUnLCBoZWxwZXJzLmNsb25lKGRlZmF1bHRzLmRvdWdobnV0KSk7XG5kZWZhdWx0cy5fc2V0KCdwaWUnLCB7XG5cdGN1dG91dFBlcmNlbnRhZ2U6IDBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuY29udHJvbGxlcnMuZG91Z2hudXQgPSBDaGFydC5jb250cm9sbGVycy5waWUgPSBDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5BcmMsXG5cblx0XHRsaW5rU2NhbGVzOiBoZWxwZXJzLm5vb3AsXG5cblx0XHQvLyBHZXQgaW5kZXggb2YgdGhlIGRhdGFzZXQgaW4gcmVsYXRpb24gdG8gdGhlIHZpc2libGUgZGF0YXNldHMuIFRoaXMgYWxsb3dzIGRldGVybWluaW5nIHRoZSBpbm5lciBhbmQgb3V0ZXIgcmFkaXVzIGNvcnJlY3RseVxuXHRcdGdldFJpbmdJbmRleDogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgcmluZ0luZGV4ID0gMDtcblxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkYXRhc2V0SW5kZXg7ICsraikge1xuXHRcdFx0XHRpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGopKSB7XG5cdFx0XHRcdFx0KytyaW5nSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJpbmdJbmRleDtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbihyZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcblx0XHRcdHZhciBvcHRzID0gY2hhcnQub3B0aW9ucztcblx0XHRcdHZhciBhcmNPcHRzID0gb3B0cy5lbGVtZW50cy5hcmM7XG5cdFx0XHR2YXIgYXZhaWxhYmxlV2lkdGggPSBjaGFydEFyZWEucmlnaHQgLSBjaGFydEFyZWEubGVmdCAtIGFyY09wdHMuYm9yZGVyV2lkdGg7XG5cdFx0XHR2YXIgYXZhaWxhYmxlSGVpZ2h0ID0gY2hhcnRBcmVhLmJvdHRvbSAtIGNoYXJ0QXJlYS50b3AgLSBhcmNPcHRzLmJvcmRlcldpZHRoO1xuXHRcdFx0dmFyIG1pblNpemUgPSBNYXRoLm1pbihhdmFpbGFibGVXaWR0aCwgYXZhaWxhYmxlSGVpZ2h0KTtcblx0XHRcdHZhciBvZmZzZXQgPSB7eDogMCwgeTogMH07XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBjdXRvdXRQZXJjZW50YWdlID0gb3B0cy5jdXRvdXRQZXJjZW50YWdlO1xuXHRcdFx0dmFyIGNpcmN1bWZlcmVuY2UgPSBvcHRzLmNpcmN1bWZlcmVuY2U7XG5cblx0XHRcdC8vIElmIHRoZSBjaGFydCdzIGNpcmN1bWZlcmVuY2UgaXNuJ3QgYSBmdWxsIGNpcmNsZSwgY2FsY3VsYXRlIG1pblNpemUgYXMgYSByYXRpbyBvZiB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBhcmNcblx0XHRcdGlmIChjaXJjdW1mZXJlbmNlIDwgTWF0aC5QSSAqIDIuMCkge1xuXHRcdFx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdHMucm90YXRpb24gJSAoTWF0aC5QSSAqIDIuMCk7XG5cdFx0XHRcdHN0YXJ0QW5nbGUgKz0gTWF0aC5QSSAqIDIuMCAqIChzdGFydEFuZ2xlID49IE1hdGguUEkgPyAtMSA6IHN0YXJ0QW5nbGUgPCAtTWF0aC5QSSA/IDEgOiAwKTtcblx0XHRcdFx0dmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG5cdFx0XHRcdHZhciBzdGFydCA9IHt4OiBNYXRoLmNvcyhzdGFydEFuZ2xlKSwgeTogTWF0aC5zaW4oc3RhcnRBbmdsZSl9O1xuXHRcdFx0XHR2YXIgZW5kID0ge3g6IE1hdGguY29zKGVuZEFuZ2xlKSwgeTogTWF0aC5zaW4oZW5kQW5nbGUpfTtcblx0XHRcdFx0dmFyIGNvbnRhaW5zMCA9IChzdGFydEFuZ2xlIDw9IDAgJiYgZW5kQW5nbGUgPj0gMCkgfHwgKHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSAqIDIuMCAmJiBNYXRoLlBJICogMi4wIDw9IGVuZEFuZ2xlKTtcblx0XHRcdFx0dmFyIGNvbnRhaW5zOTAgPSAoc3RhcnRBbmdsZSA8PSBNYXRoLlBJICogMC41ICYmIE1hdGguUEkgKiAwLjUgPD0gZW5kQW5nbGUpIHx8IChzdGFydEFuZ2xlIDw9IE1hdGguUEkgKiAyLjUgJiYgTWF0aC5QSSAqIDIuNSA8PSBlbmRBbmdsZSk7XG5cdFx0XHRcdHZhciBjb250YWluczE4MCA9IChzdGFydEFuZ2xlIDw9IC1NYXRoLlBJICYmIC1NYXRoLlBJIDw9IGVuZEFuZ2xlKSB8fCAoc3RhcnRBbmdsZSA8PSBNYXRoLlBJICYmIE1hdGguUEkgPD0gZW5kQW5nbGUpO1xuXHRcdFx0XHR2YXIgY29udGFpbnMyNzAgPSAoc3RhcnRBbmdsZSA8PSAtTWF0aC5QSSAqIDAuNSAmJiAtTWF0aC5QSSAqIDAuNSA8PSBlbmRBbmdsZSkgfHwgKHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSAqIDEuNSAmJiBNYXRoLlBJICogMS41IDw9IGVuZEFuZ2xlKTtcblx0XHRcdFx0dmFyIGN1dG91dCA9IGN1dG91dFBlcmNlbnRhZ2UgLyAxMDAuMDtcblx0XHRcdFx0dmFyIG1pbiA9IHt4OiBjb250YWluczE4MCA/IC0xIDogTWF0aC5taW4oc3RhcnQueCAqIChzdGFydC54IDwgMCA/IDEgOiBjdXRvdXQpLCBlbmQueCAqIChlbmQueCA8IDAgPyAxIDogY3V0b3V0KSksIHk6IGNvbnRhaW5zMjcwID8gLTEgOiBNYXRoLm1pbihzdGFydC55ICogKHN0YXJ0LnkgPCAwID8gMSA6IGN1dG91dCksIGVuZC55ICogKGVuZC55IDwgMCA/IDEgOiBjdXRvdXQpKX07XG5cdFx0XHRcdHZhciBtYXggPSB7eDogY29udGFpbnMwID8gMSA6IE1hdGgubWF4KHN0YXJ0LnggKiAoc3RhcnQueCA+IDAgPyAxIDogY3V0b3V0KSwgZW5kLnggKiAoZW5kLnggPiAwID8gMSA6IGN1dG91dCkpLCB5OiBjb250YWluczkwID8gMSA6IE1hdGgubWF4KHN0YXJ0LnkgKiAoc3RhcnQueSA+IDAgPyAxIDogY3V0b3V0KSwgZW5kLnkgKiAoZW5kLnkgPiAwID8gMSA6IGN1dG91dCkpfTtcblx0XHRcdFx0dmFyIHNpemUgPSB7d2lkdGg6IChtYXgueCAtIG1pbi54KSAqIDAuNSwgaGVpZ2h0OiAobWF4LnkgLSBtaW4ueSkgKiAwLjV9O1xuXHRcdFx0XHRtaW5TaXplID0gTWF0aC5taW4oYXZhaWxhYmxlV2lkdGggLyBzaXplLndpZHRoLCBhdmFpbGFibGVIZWlnaHQgLyBzaXplLmhlaWdodCk7XG5cdFx0XHRcdG9mZnNldCA9IHt4OiAobWF4LnggKyBtaW4ueCkgKiAtMC41LCB5OiAobWF4LnkgKyBtaW4ueSkgKiAtMC41fTtcblx0XHRcdH1cblxuXHRcdFx0Y2hhcnQuYm9yZGVyV2lkdGggPSBtZS5nZXRNYXhCb3JkZXJXaWR0aChtZXRhLmRhdGEpO1xuXHRcdFx0Y2hhcnQub3V0ZXJSYWRpdXMgPSBNYXRoLm1heCgobWluU2l6ZSAtIGNoYXJ0LmJvcmRlcldpZHRoKSAvIDIsIDApO1xuXHRcdFx0Y2hhcnQuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChjdXRvdXRQZXJjZW50YWdlID8gKGNoYXJ0Lm91dGVyUmFkaXVzIC8gMTAwKSAqIChjdXRvdXRQZXJjZW50YWdlKSA6IDAsIDApO1xuXHRcdFx0Y2hhcnQucmFkaXVzTGVuZ3RoID0gKGNoYXJ0Lm91dGVyUmFkaXVzIC0gY2hhcnQuaW5uZXJSYWRpdXMpIC8gY2hhcnQuZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpO1xuXHRcdFx0Y2hhcnQub2Zmc2V0WCA9IG9mZnNldC54ICogY2hhcnQub3V0ZXJSYWRpdXM7XG5cdFx0XHRjaGFydC5vZmZzZXRZID0gb2Zmc2V0LnkgKiBjaGFydC5vdXRlclJhZGl1cztcblxuXHRcdFx0bWV0YS50b3RhbCA9IG1lLmNhbGN1bGF0ZVRvdGFsKCk7XG5cblx0XHRcdG1lLm91dGVyUmFkaXVzID0gY2hhcnQub3V0ZXJSYWRpdXMgLSAoY2hhcnQucmFkaXVzTGVuZ3RoICogbWUuZ2V0UmluZ0luZGV4KG1lLmluZGV4KSk7XG5cdFx0XHRtZS5pbm5lclJhZGl1cyA9IE1hdGgubWF4KG1lLm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoLCAwKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKG1ldGEuZGF0YSwgZnVuY3Rpb24oYXJjLCBpbmRleCkge1xuXHRcdFx0XHRtZS51cGRhdGVFbGVtZW50KGFyYywgaW5kZXgsIHJlc2V0KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcblx0XHRcdHZhciBvcHRzID0gY2hhcnQub3B0aW9ucztcblx0XHRcdHZhciBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG5cdFx0XHR2YXIgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuXHRcdFx0dmFyIGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcblx0XHRcdHZhciBzdGFydEFuZ2xlID0gb3B0cy5yb3RhdGlvbjsgLy8gbm9uIHJlc2V0IGNhc2UgaGFuZGxlZCBsYXRlclxuXHRcdFx0dmFyIGVuZEFuZ2xlID0gb3B0cy5yb3RhdGlvbjsgLy8gbm9uIHJlc2V0IGNhc2UgaGFuZGxlZCBsYXRlclxuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgY2lyY3VtZmVyZW5jZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSA/IDAgOiBhcmMuaGlkZGVuID8gMCA6IG1lLmNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UoZGF0YXNldC5kYXRhW2luZGV4XSkgKiAob3B0cy5jaXJjdW1mZXJlbmNlIC8gKDIuMCAqIE1hdGguUEkpKTtcblx0XHRcdHZhciBpbm5lclJhZGl1cyA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlID8gMCA6IG1lLmlubmVyUmFkaXVzO1xuXHRcdFx0dmFyIG91dGVyUmFkaXVzID0gcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogbWUub3V0ZXJSYWRpdXM7XG5cdFx0XHR2YXIgdmFsdWVBdEluZGV4T3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQ7XG5cblx0XHRcdGhlbHBlcnMuZXh0ZW5kKGFyYywge1xuXHRcdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0XHRfaW5kZXg6IGluZGV4LFxuXG5cdFx0XHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRcdHg6IGNlbnRlclggKyBjaGFydC5vZmZzZXRYLFxuXHRcdFx0XHRcdHk6IGNlbnRlclkgKyBjaGFydC5vZmZzZXRZLFxuXHRcdFx0XHRcdHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG5cdFx0XHRcdFx0ZW5kQW5nbGU6IGVuZEFuZ2xlLFxuXHRcdFx0XHRcdGNpcmN1bWZlcmVuY2U6IGNpcmN1bWZlcmVuY2UsXG5cdFx0XHRcdFx0b3V0ZXJSYWRpdXM6IG91dGVyUmFkaXVzLFxuXHRcdFx0XHRcdGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cyxcblx0XHRcdFx0XHRsYWJlbDogdmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQubGFiZWwsIGluZGV4LCBjaGFydC5kYXRhLmxhYmVsc1tpbmRleF0pXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgbW9kZWwgPSBhcmMuX21vZGVsO1xuXHRcdFx0Ly8gUmVzZXRzIHRoZSB2aXN1YWwgc3R5bGVzXG5cdFx0XHR0aGlzLnJlbW92ZUhvdmVyU3R5bGUoYXJjKTtcblxuXHRcdFx0Ly8gU2V0IGNvcnJlY3QgYW5nbGVzIGlmIG5vdCByZXNldHRpbmdcblx0XHRcdGlmICghcmVzZXQgfHwgIWFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuXHRcdFx0XHRpZiAoaW5kZXggPT09IDApIHtcblx0XHRcdFx0XHRtb2RlbC5zdGFydEFuZ2xlID0gb3B0cy5yb3RhdGlvbjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtb2RlbC5zdGFydEFuZ2xlID0gbWUuZ2V0TWV0YSgpLmRhdGFbaW5kZXggLSAxXS5fbW9kZWwuZW5kQW5nbGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtb2RlbC5lbmRBbmdsZSA9IG1vZGVsLnN0YXJ0QW5nbGUgKyBtb2RlbC5jaXJjdW1mZXJlbmNlO1xuXHRcdFx0fVxuXG5cdFx0XHRhcmMucGl2b3QoKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0XHRDaGFydC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKHRoaXMsIGFyYywgdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYyk7XG5cdFx0fSxcblxuXHRcdGNhbGN1bGF0ZVRvdGFsOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIHRvdGFsID0gMDtcblx0XHRcdHZhciB2YWx1ZTtcblxuXHRcdFx0aGVscGVycy5lYWNoKG1ldGEuZGF0YSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHRcdFx0dmFsdWUgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuXHRcdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0XHR0b3RhbCArPSBNYXRoLmFicyh2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvKiBpZiAodG90YWwgPT09IDApIHtcblx0XHRcdFx0dG90YWwgPSBOYU47XG5cdFx0XHR9Ki9cblxuXHRcdFx0cmV0dXJuIHRvdGFsO1xuXHRcdH0sXG5cblx0XHRjYWxjdWxhdGVDaXJjdW1mZXJlbmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIHRvdGFsID0gdGhpcy5nZXRNZXRhKCkudG90YWw7XG5cdFx0XHRpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIChNYXRoLlBJICogMi4wKSAqICh2YWx1ZSAvIHRvdGFsKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAwO1xuXHRcdH0sXG5cblx0XHQvLyBnZXRzIHRoZSBtYXggYm9yZGVyIG9yIGhvdmVyIHdpZHRoIHRvIHByb3Blcmx5IHNjYWxlIHBpZSBjaGFydHNcblx0XHRnZXRNYXhCb3JkZXJXaWR0aDogZnVuY3Rpb24oYXJjcykge1xuXHRcdFx0dmFyIG1heCA9IDA7XG5cdFx0XHR2YXIgaW5kZXggPSB0aGlzLmluZGV4O1xuXHRcdFx0dmFyIGxlbmd0aCA9IGFyY3MubGVuZ3RoO1xuXHRcdFx0dmFyIGJvcmRlcldpZHRoO1xuXHRcdFx0dmFyIGhvdmVyV2lkdGg7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Ym9yZGVyV2lkdGggPSBhcmNzW2ldLl9tb2RlbCA/IGFyY3NbaV0uX21vZGVsLmJvcmRlcldpZHRoIDogMDtcblx0XHRcdFx0aG92ZXJXaWR0aCA9IGFyY3NbaV0uX2NoYXJ0ID8gYXJjc1tpXS5fY2hhcnQuY29uZmlnLmRhdGEuZGF0YXNldHNbaW5kZXhdLmhvdmVyQm9yZGVyV2lkdGggOiAwO1xuXG5cdFx0XHRcdG1heCA9IGJvcmRlcldpZHRoID4gbWF4ID8gYm9yZGVyV2lkdGggOiBtYXg7XG5cdFx0XHRcdG1heCA9IGhvdmVyV2lkdGggPiBtYXggPyBob3ZlcldpZHRoIDogbWF4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1heDtcblx0XHR9XG5cdH0pO1xufTtcblxufSx7XCIuLi9jb3JlL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4uL2VsZW1lbnRzL2luZGV4XCI6MzQsXCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5kZXgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdsaW5lJywge1xuXHRzaG93TGluZXM6IHRydWUsXG5cdHNwYW5HYXBzOiBmYWxzZSxcblxuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdsYWJlbCdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cdFx0XHRpZDogJ3gtYXhpcy0wJ1xuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0dHlwZTogJ2xpbmVhcicsXG5cdFx0XHRpZDogJ3ktYXhpcy0wJ1xuXHRcdH1dXG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0ZnVuY3Rpb24gbGluZUVuYWJsZWQoZGF0YXNldCwgb3B0aW9ucykge1xuXHRcdHJldHVybiBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuc2hvd0xpbmUsIG9wdGlvbnMuc2hvd0xpbmVzKTtcblx0fVxuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLmxpbmUgPSBDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdFx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5Qb2ludCxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHRcdHZhciBvcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucztcblx0XHRcdHZhciBsaW5lRWxlbWVudE9wdGlvbnMgPSBvcHRpb25zLmVsZW1lbnRzLmxpbmU7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0XHR2YXIgaSwgaWxlbiwgY3VzdG9tO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgc2hvd0xpbmUgPSBsaW5lRW5hYmxlZChkYXRhc2V0LCBvcHRpb25zKTtcblxuXHRcdFx0Ly8gVXBkYXRlIExpbmVcblx0XHRcdGlmIChzaG93TGluZSkge1xuXHRcdFx0XHRjdXN0b20gPSBsaW5lLmN1c3RvbSB8fCB7fTtcblxuXHRcdFx0XHQvLyBDb21wYXRpYmlsaXR5OiBJZiB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCB3aXRoIG9ubHkgdGhlIG9sZCBuYW1lLCB1c2UgdGhvc2UgdmFsdWVzXG5cdFx0XHRcdGlmICgoZGF0YXNldC50ZW5zaW9uICE9PSB1bmRlZmluZWQpICYmIChkYXRhc2V0LmxpbmVUZW5zaW9uID09PSB1bmRlZmluZWQpKSB7XG5cdFx0XHRcdFx0ZGF0YXNldC5saW5lVGVuc2lvbiA9IGRhdGFzZXQudGVuc2lvbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdFx0bGluZS5fc2NhbGUgPSBzY2FsZTtcblx0XHRcdFx0bGluZS5fZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0XHRcdC8vIERhdGFcblx0XHRcdFx0bGluZS5fY2hpbGRyZW4gPSBwb2ludHM7XG5cdFx0XHRcdC8vIE1vZGVsXG5cdFx0XHRcdGxpbmUuX21vZGVsID0ge1xuXHRcdFx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdFx0XHQvLyBUaGUgZGVmYXVsdCBiZWhhdmlvciBvZiBsaW5lcyBpcyB0byBicmVhayBhdCBudWxsIHZhbHVlcywgYWNjb3JkaW5nXG5cdFx0XHRcdFx0Ly8gdG8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI0MzUjaXNzdWVjb21tZW50LTIxNjcxODE1OFxuXHRcdFx0XHRcdC8vIFRoaXMgb3B0aW9uIGdpdmVzIGxpbmVzIHRoZSBhYmlsaXR5IHRvIHNwYW4gZ2Fwc1xuXHRcdFx0XHRcdHNwYW5HYXBzOiBkYXRhc2V0LnNwYW5HYXBzID8gZGF0YXNldC5zcGFuR2FwcyA6IG9wdGlvbnMuc3BhbkdhcHMsXG5cdFx0XHRcdFx0dGVuc2lvbjogY3VzdG9tLnRlbnNpb24gPyBjdXN0b20udGVuc2lvbiA6IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZGF0YXNldC5saW5lVGVuc2lvbiwgbGluZUVsZW1lbnRPcHRpb25zLnRlbnNpb24pLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiAoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJhY2tncm91bmRDb2xvciksXG5cdFx0XHRcdFx0Ym9yZGVyV2lkdGg6IGN1c3RvbS5ib3JkZXJXaWR0aCA/IGN1c3RvbS5ib3JkZXJXaWR0aCA6IChkYXRhc2V0LmJvcmRlcldpZHRoIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJXaWR0aCksXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IChkYXRhc2V0LmJvcmRlckNvbG9yIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJDb2xvciksXG5cdFx0XHRcdFx0Ym9yZGVyQ2FwU3R5bGU6IGN1c3RvbS5ib3JkZXJDYXBTdHlsZSA/IGN1c3RvbS5ib3JkZXJDYXBTdHlsZSA6IChkYXRhc2V0LmJvcmRlckNhcFN0eWxlIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJDYXBTdHlsZSksXG5cdFx0XHRcdFx0Ym9yZGVyRGFzaDogY3VzdG9tLmJvcmRlckRhc2ggPyBjdXN0b20uYm9yZGVyRGFzaCA6IChkYXRhc2V0LmJvcmRlckRhc2ggfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlckRhc2gpLFxuXHRcdFx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IGN1c3RvbS5ib3JkZXJEYXNoT2Zmc2V0ID8gY3VzdG9tLmJvcmRlckRhc2hPZmZzZXQgOiAoZGF0YXNldC5ib3JkZXJEYXNoT2Zmc2V0IHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KSxcblx0XHRcdFx0XHRib3JkZXJKb2luU3R5bGU6IGN1c3RvbS5ib3JkZXJKb2luU3R5bGUgPyBjdXN0b20uYm9yZGVySm9pblN0eWxlIDogKGRhdGFzZXQuYm9yZGVySm9pblN0eWxlIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJKb2luU3R5bGUpLFxuXHRcdFx0XHRcdGZpbGw6IGN1c3RvbS5maWxsID8gY3VzdG9tLmZpbGwgOiAoZGF0YXNldC5maWxsICE9PSB1bmRlZmluZWQgPyBkYXRhc2V0LmZpbGwgOiBsaW5lRWxlbWVudE9wdGlvbnMuZmlsbCksXG5cdFx0XHRcdFx0c3RlcHBlZExpbmU6IGN1c3RvbS5zdGVwcGVkTGluZSA/IGN1c3RvbS5zdGVwcGVkTGluZSA6IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZGF0YXNldC5zdGVwcGVkTGluZSwgbGluZUVsZW1lbnRPcHRpb25zLnN0ZXBwZWQpLFxuXHRcdFx0XHRcdGN1YmljSW50ZXJwb2xhdGlvbk1vZGU6IGN1c3RvbS5jdWJpY0ludGVycG9sYXRpb25Nb2RlID8gY3VzdG9tLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgOiBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSwgbGluZUVsZW1lbnRPcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUpLFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGxpbmUucGl2b3QoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXBkYXRlIFBvaW50c1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludHNbaV0sIGksIHJlc2V0KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHNob3dMaW5lICYmIGxpbmUuX21vZGVsLnRlbnNpb24gIT09IDApIHtcblx0XHRcdFx0bWUudXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cygpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOb3cgcGl2b3QgdGhlIHBvaW50IGZvciBhbmltYXRpb25cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdHBvaW50c1tpXS5waXZvdCgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRnZXRQb2ludEJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHR2YXIgYmFja2dyb3VuZENvbG9yID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmJhY2tncm91bmRDb2xvcjtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXG5cdFx0XHRpZiAoY3VzdG9tLmJhY2tncm91bmRDb2xvcikge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBjdXN0b20uYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0fSBlbHNlIGlmIChkYXRhc2V0LnBvaW50QmFja2dyb3VuZENvbG9yKSB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvciA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRCYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBiYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0fSBlbHNlIGlmIChkYXRhc2V0LmJhY2tncm91bmRDb2xvcikge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0LmJhY2tncm91bmRDb2xvcjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGJhY2tncm91bmRDb2xvcjtcblx0XHR9LFxuXG5cdFx0Z2V0UG9pbnRCb3JkZXJDb2xvcjogZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHR2YXIgYm9yZGVyQ29sb3IgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuYm9yZGVyQ29sb3I7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblxuXHRcdFx0aWYgKGN1c3RvbS5ib3JkZXJDb2xvcikge1xuXHRcdFx0XHRib3JkZXJDb2xvciA9IGN1c3RvbS5ib3JkZXJDb2xvcjtcblx0XHRcdH0gZWxzZSBpZiAoZGF0YXNldC5wb2ludEJvcmRlckNvbG9yKSB7XG5cdFx0XHRcdGJvcmRlckNvbG9yID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEJvcmRlckNvbG9yLCBpbmRleCwgYm9yZGVyQ29sb3IpO1xuXHRcdFx0fSBlbHNlIGlmIChkYXRhc2V0LmJvcmRlckNvbG9yKSB7XG5cdFx0XHRcdGJvcmRlckNvbG9yID0gZGF0YXNldC5ib3JkZXJDb2xvcjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGJvcmRlckNvbG9yO1xuXHRcdH0sXG5cblx0XHRnZXRQb2ludEJvcmRlcldpZHRoOiBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdHZhciBib3JkZXJXaWR0aCA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ib3JkZXJXaWR0aDtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXG5cdFx0XHRpZiAoIWlzTmFOKGN1c3RvbS5ib3JkZXJXaWR0aCkpIHtcblx0XHRcdFx0Ym9yZGVyV2lkdGggPSBjdXN0b20uYm9yZGVyV2lkdGg7XG5cdFx0XHR9IGVsc2UgaWYgKCFpc05hTihkYXRhc2V0LnBvaW50Qm9yZGVyV2lkdGgpIHx8IGhlbHBlcnMuaXNBcnJheShkYXRhc2V0LnBvaW50Qm9yZGVyV2lkdGgpKSB7XG5cdFx0XHRcdGJvcmRlcldpZHRoID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEJvcmRlcldpZHRoLCBpbmRleCwgYm9yZGVyV2lkdGgpO1xuXHRcdFx0fSBlbHNlIGlmICghaXNOYU4oZGF0YXNldC5ib3JkZXJXaWR0aCkpIHtcblx0XHRcdFx0Ym9yZGVyV2lkdGggPSBkYXRhc2V0LmJvcmRlcldpZHRoO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYm9yZGVyV2lkdGg7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCwgcmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBkYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRcdHZhciB2YWx1ZSA9IGRhdGFzZXQuZGF0YVtpbmRleF07XG5cdFx0XHR2YXIgeVNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnlBeGlzSUQpO1xuXHRcdFx0dmFyIHhTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS54QXhpc0lEKTtcblx0XHRcdHZhciBwb2ludE9wdGlvbnMgPSBtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50O1xuXHRcdFx0dmFyIHgsIHk7XG5cblx0XHRcdC8vIENvbXBhdGliaWxpdHk6IElmIHRoZSBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkIHdpdGggb25seSB0aGUgb2xkIG5hbWUsIHVzZSB0aG9zZSB2YWx1ZXNcblx0XHRcdGlmICgoZGF0YXNldC5yYWRpdXMgIT09IHVuZGVmaW5lZCkgJiYgKGRhdGFzZXQucG9pbnRSYWRpdXMgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0ZGF0YXNldC5wb2ludFJhZGl1cyA9IGRhdGFzZXQucmFkaXVzO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChkYXRhc2V0LmhpdFJhZGl1cyAhPT0gdW5kZWZpbmVkKSAmJiAoZGF0YXNldC5wb2ludEhpdFJhZGl1cyA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50SGl0UmFkaXVzID0gZGF0YXNldC5oaXRSYWRpdXM7XG5cdFx0XHR9XG5cblx0XHRcdHggPSB4U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBOYU4sIGluZGV4LCBkYXRhc2V0SW5kZXgpO1xuXHRcdFx0eSA9IHJlc2V0ID8geVNjYWxlLmdldEJhc2VQaXhlbCgpIDogbWUuY2FsY3VsYXRlUG9pbnRZKHZhbHVlLCBpbmRleCwgZGF0YXNldEluZGV4KTtcblxuXHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0cG9pbnQuX3hTY2FsZSA9IHhTY2FsZTtcblx0XHRcdHBvaW50Ll95U2NhbGUgPSB5U2NhbGU7XG5cdFx0XHRwb2ludC5fZGF0YXNldEluZGV4ID0gZGF0YXNldEluZGV4O1xuXHRcdFx0cG9pbnQuX2luZGV4ID0gaW5kZXg7XG5cblx0XHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0XHRwb2ludC5fbW9kZWwgPSB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHksXG5cdFx0XHRcdHNraXA6IGN1c3RvbS5za2lwIHx8IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuXHRcdFx0XHQvLyBBcHBlYXJhbmNlXG5cdFx0XHRcdHJhZGl1czogY3VzdG9tLnJhZGl1cyB8fCBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50UmFkaXVzLCBpbmRleCwgcG9pbnRPcHRpb25zLnJhZGl1cyksXG5cdFx0XHRcdHBvaW50U3R5bGU6IGN1c3RvbS5wb2ludFN0eWxlIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRTdHlsZSwgaW5kZXgsIHBvaW50T3B0aW9ucy5wb2ludFN0eWxlKSxcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBtZS5nZXRQb2ludEJhY2tncm91bmRDb2xvcihwb2ludCwgaW5kZXgpLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogbWUuZ2V0UG9pbnRCb3JkZXJDb2xvcihwb2ludCwgaW5kZXgpLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogbWUuZ2V0UG9pbnRCb3JkZXJXaWR0aChwb2ludCwgaW5kZXgpLFxuXHRcdFx0XHR0ZW5zaW9uOiBtZXRhLmRhdGFzZXQuX21vZGVsID8gbWV0YS5kYXRhc2V0Ll9tb2RlbC50ZW5zaW9uIDogMCxcblx0XHRcdFx0c3RlcHBlZExpbmU6IG1ldGEuZGF0YXNldC5fbW9kZWwgPyBtZXRhLmRhdGFzZXQuX21vZGVsLnN0ZXBwZWRMaW5lIDogZmFsc2UsXG5cdFx0XHRcdC8vIFRvb2x0aXBcblx0XHRcdFx0aGl0UmFkaXVzOiBjdXN0b20uaGl0UmFkaXVzIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRIaXRSYWRpdXMsIGluZGV4LCBwb2ludE9wdGlvbnMuaGl0UmFkaXVzKVxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Y2FsY3VsYXRlUG9pbnRZOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgeVNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnlBeGlzSUQpO1xuXHRcdFx0dmFyIHN1bVBvcyA9IDA7XG5cdFx0XHR2YXIgc3VtTmVnID0gMDtcblx0XHRcdHZhciBpLCBkcywgZHNNZXRhO1xuXG5cdFx0XHRpZiAoeVNjYWxlLm9wdGlvbnMuc3RhY2tlZCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyBpKyspIHtcblx0XHRcdFx0XHRkcyA9IGNoYXJ0LmRhdGEuZGF0YXNldHNbaV07XG5cdFx0XHRcdFx0ZHNNZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdFx0aWYgKGRzTWV0YS50eXBlID09PSAnbGluZScgJiYgZHNNZXRhLnlBeGlzSUQgPT09IHlTY2FsZS5pZCAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdFx0XHR2YXIgc3RhY2tlZFJpZ2h0VmFsdWUgPSBOdW1iZXIoeVNjYWxlLmdldFJpZ2h0VmFsdWUoZHMuZGF0YVtpbmRleF0pKTtcblx0XHRcdFx0XHRcdGlmIChzdGFja2VkUmlnaHRWYWx1ZSA8IDApIHtcblx0XHRcdFx0XHRcdFx0c3VtTmVnICs9IHN0YWNrZWRSaWdodFZhbHVlIHx8IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzdW1Qb3MgKz0gc3RhY2tlZFJpZ2h0VmFsdWUgfHwgMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgcmlnaHRWYWx1ZSA9IE51bWJlcih5U2NhbGUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSkpO1xuXHRcdFx0XHRpZiAocmlnaHRWYWx1ZSA8IDApIHtcblx0XHRcdFx0XHRyZXR1cm4geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3VtTmVnICsgcmlnaHRWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN1bVBvcyArIHJpZ2h0VmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBhcmVhID0gbWUuY2hhcnQuY2hhcnRBcmVhO1xuXHRcdFx0dmFyIHBvaW50cyA9IChtZXRhLmRhdGEgfHwgW10pO1xuXHRcdFx0dmFyIGksIGlsZW4sIHBvaW50LCBtb2RlbCwgY29udHJvbFBvaW50cztcblxuXHRcdFx0Ly8gT25seSBjb25zaWRlciBwb2ludHMgdGhhdCBhcmUgZHJhd24gaW4gY2FzZSB0aGUgc3BhbkdhcHMgb3B0aW9uIGlzIHVzZWRcblx0XHRcdGlmIChtZXRhLmRhdGFzZXQuX21vZGVsLnNwYW5HYXBzKSB7XG5cdFx0XHRcdHBvaW50cyA9IHBvaW50cy5maWx0ZXIoZnVuY3Rpb24ocHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gIXB0Ll9tb2RlbC5za2lwO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0ZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZXRhLmRhdGFzZXQuX21vZGVsLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcblx0XHRcdFx0aGVscGVycy5zcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRcdHBvaW50ID0gcG9pbnRzW2ldO1xuXHRcdFx0XHRcdG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdFx0XHRcdGNvbnRyb2xQb2ludHMgPSBoZWxwZXJzLnNwbGluZUN1cnZlKFxuXHRcdFx0XHRcdFx0aGVscGVycy5wcmV2aW91c0l0ZW0ocG9pbnRzLCBpKS5fbW9kZWwsXG5cdFx0XHRcdFx0XHRtb2RlbCxcblx0XHRcdFx0XHRcdGhlbHBlcnMubmV4dEl0ZW0ocG9pbnRzLCBpKS5fbW9kZWwsXG5cdFx0XHRcdFx0XHRtZXRhLmRhdGFzZXQuX21vZGVsLnRlbnNpb25cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG5cdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBjb250cm9sUG9pbnRzLm5leHQueDtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmxpbmUuY2FwQmV6aWVyUG9pbnRzKSB7XG5cdFx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdFx0bW9kZWwgPSBwb2ludHNbaV0uX21vZGVsO1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1gsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG5cdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnROZXh0WCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IGNhcENvbnRyb2xQb2ludChtb2RlbC5jb250cm9sUG9pbnROZXh0WSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcblx0XHRcdHZhciBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdFx0dmFyIGlsZW4gPSBwb2ludHMubGVuZ3RoO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRoZWxwZXJzLmNhbnZhcy5jbGlwQXJlYShjaGFydC5jdHgsIGFyZWEpO1xuXG5cdFx0XHRpZiAobGluZUVuYWJsZWQobWUuZ2V0RGF0YXNldCgpLCBjaGFydC5vcHRpb25zKSkge1xuXHRcdFx0XHRtZXRhLmRhdGFzZXQuZHJhdygpO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmNhbnZhcy51bmNsaXBBcmVhKGNoYXJ0LmN0eCk7XG5cblx0XHRcdC8vIERyYXcgdGhlIHBvaW50c1xuXHRcdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0cG9pbnRzW2ldLmRyYXcoYXJlYSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHQvLyBQb2ludFxuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbcG9pbnQuX2RhdGFzZXRJbmRleF07XG5cdFx0XHR2YXIgaW5kZXggPSBwb2ludC5faW5kZXg7XG5cdFx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXG5cdFx0XHRtb2RlbC5yYWRpdXMgPSBjdXN0b20uaG92ZXJSYWRpdXMgfHwgaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhvdmVyUmFkaXVzLCBpbmRleCwgdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmhvdmVyUmFkaXVzKTtcblx0XHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IGN1c3RvbS5ob3ZlckJhY2tncm91bmRDb2xvciB8fCBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBoZWxwZXJzLmdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ob3ZlckJvcmRlckNvbG9yIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRIb3ZlckJvcmRlckNvbG9yLCBpbmRleCwgaGVscGVycy5nZXRIb3ZlckNvbG9yKG1vZGVsLmJvcmRlckNvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRIb3ZlckJvcmRlcldpZHRoLCBpbmRleCwgbW9kZWwuYm9yZGVyV2lkdGgpO1xuXHRcdH0sXG5cblx0XHRyZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuY2hhcnQuZGF0YS5kYXRhc2V0c1twb2ludC5fZGF0YXNldEluZGV4XTtcblx0XHRcdHZhciBpbmRleCA9IHBvaW50Ll9pbmRleDtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cblx0XHRcdC8vIENvbXBhdGliaWxpdHk6IElmIHRoZSBwcm9wZXJ0aWVzIGFyZSBkZWZpbmVkIHdpdGggb25seSB0aGUgb2xkIG5hbWUsIHVzZSB0aG9zZSB2YWx1ZXNcblx0XHRcdGlmICgoZGF0YXNldC5yYWRpdXMgIT09IHVuZGVmaW5lZCkgJiYgKGRhdGFzZXQucG9pbnRSYWRpdXMgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0ZGF0YXNldC5wb2ludFJhZGl1cyA9IGRhdGFzZXQucmFkaXVzO1xuXHRcdFx0fVxuXG5cdFx0XHRtb2RlbC5yYWRpdXMgPSBjdXN0b20ucmFkaXVzIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRSYWRpdXMsIGluZGV4LCBtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJhZGl1cyk7XG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBtZS5nZXRQb2ludEJhY2tncm91bmRDb2xvcihwb2ludCwgaW5kZXgpO1xuXHRcdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSBtZS5nZXRQb2ludEJvcmRlckNvbG9yKHBvaW50LCBpbmRleCk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IG1lLmdldFBvaW50Qm9yZGVyV2lkdGgocG9pbnQsIGluZGV4KTtcblx0XHR9XG5cdH0pO1xufTtcblxufSx7XCIuLi9jb3JlL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4uL2VsZW1lbnRzL2luZGV4XCI6MzQsXCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5kZXgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdwb2xhckFyZWEnLCB7XG5cdHNjYWxlOiB7XG5cdFx0dHlwZTogJ3JhZGlhbExpbmVhcicsXG5cdFx0YW5nbGVMaW5lczoge1xuXHRcdFx0ZGlzcGxheTogZmFsc2Vcblx0XHR9LFxuXHRcdGdyaWRMaW5lczoge1xuXHRcdFx0Y2lyY3VsYXI6IHRydWVcblx0XHR9LFxuXHRcdHBvaW50TGFiZWxzOiB7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdH0sXG5cdFx0dGlja3M6IHtcblx0XHRcdGJlZ2luQXRaZXJvOiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgdGhlIHJvdGF0aW9uIG9mIHRoZSBjaGFydFxuXHRhbmltYXRpb246IHtcblx0XHRhbmltYXRlUm90YXRlOiB0cnVlLFxuXHRcdGFuaW1hdGVTY2FsZTogdHJ1ZVxuXHR9LFxuXG5cdHN0YXJ0QW5nbGU6IC0wLjUgKiBNYXRoLlBJLFxuXHRsZWdlbmRDYWxsYmFjazogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGV4dCA9IFtdO1xuXHRcdHRleHQucHVzaCgnPHVsIGNsYXNzPVwiJyArIGNoYXJ0LmlkICsgJy1sZWdlbmRcIj4nKTtcblxuXHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHR2YXIgZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzO1xuXHRcdHZhciBsYWJlbHMgPSBkYXRhLmxhYmVscztcblxuXHRcdGlmIChkYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YXNldHNbMF0uZGF0YS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0ZXh0LnB1c2goJzxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6JyArIGRhdGFzZXRzWzBdLmJhY2tncm91bmRDb2xvcltpXSArICdcIj48L3NwYW4+Jyk7XG5cdFx0XHRcdGlmIChsYWJlbHNbaV0pIHtcblx0XHRcdFx0XHR0ZXh0LnB1c2gobGFiZWxzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0ZXh0LnB1c2goJzwvbGk+Jyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGV4dC5wdXNoKCc8L3VsPicpO1xuXHRcdHJldHVybiB0ZXh0LmpvaW4oJycpO1xuXHR9LFxuXHRsZWdlbmQ6IHtcblx0XHRsYWJlbHM6IHtcblx0XHRcdGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHRcdGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YS5sYWJlbHMubWFwKGZ1bmN0aW9uKGxhYmVsLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuXHRcdFx0XHRcdFx0dmFyIGRzID0gZGF0YS5kYXRhc2V0c1swXTtcblx0XHRcdFx0XHRcdHZhciBhcmMgPSBtZXRhLmRhdGFbaV07XG5cdFx0XHRcdFx0XHR2YXIgY3VzdG9tID0gYXJjLmN1c3RvbSB8fCB7fTtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZUF0SW5kZXhPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblx0XHRcdFx0XHRcdHZhciBhcmNPcHRzID0gY2hhcnQub3B0aW9ucy5lbGVtZW50cy5hcmM7XG5cdFx0XHRcdFx0XHR2YXIgZmlsbCA9IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uYmFja2dyb3VuZENvbG9yIDogdmFsdWVBdEluZGV4T3JEZWZhdWx0KGRzLmJhY2tncm91bmRDb2xvciwgaSwgYXJjT3B0cy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0XHRcdFx0dmFyIHN0cm9rZSA9IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IHZhbHVlQXRJbmRleE9yRGVmYXVsdChkcy5ib3JkZXJDb2xvciwgaSwgYXJjT3B0cy5ib3JkZXJDb2xvcik7XG5cdFx0XHRcdFx0XHR2YXIgYncgPSBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZHMuYm9yZGVyV2lkdGgsIGksIGFyY09wdHMuYm9yZGVyV2lkdGgpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBsYWJlbCxcblx0XHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBmaWxsLFxuXHRcdFx0XHRcdFx0XHRzdHJva2VTdHlsZTogc3Ryb2tlLFxuXHRcdFx0XHRcdFx0XHRsaW5lV2lkdGg6IGJ3LFxuXHRcdFx0XHRcdFx0XHRoaWRkZW46IGlzTmFOKGRzLmRhdGFbaV0pIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4sXG5cblx0XHRcdFx0XHRcdFx0Ly8gRXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgY29ycmVjdCBpdGVtXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5pbmRleDtcblx0XHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHRtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiA9ICFtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Y2hhcnQudXBkYXRlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhlc2UgdG8gZ2l2ZSBhIG5pY2UgZGVmYXVsdFxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKGl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEubGFiZWxzW2l0ZW0uaW5kZXhdICsgJzogJyArIGl0ZW0ueUxhYmVsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5jb250cm9sbGVycy5wb2xhckFyZWEgPSBDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5BcmMsXG5cblx0XHRsaW5rU2NhbGVzOiBoZWxwZXJzLm5vb3AsXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgYXJjT3B0cyA9IG9wdHMuZWxlbWVudHMuYXJjO1xuXHRcdFx0dmFyIG1pblNpemUgPSBNYXRoLm1pbihjaGFydEFyZWEucmlnaHQgLSBjaGFydEFyZWEubGVmdCwgY2hhcnRBcmVhLmJvdHRvbSAtIGNoYXJ0QXJlYS50b3ApO1xuXHRcdFx0Y2hhcnQub3V0ZXJSYWRpdXMgPSBNYXRoLm1heCgobWluU2l6ZSAtIGFyY09wdHMuYm9yZGVyV2lkdGggLyAyKSAvIDIsIDApO1xuXHRcdFx0Y2hhcnQuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyAoY2hhcnQub3V0ZXJSYWRpdXMgLyAxMDApICogKG9wdHMuY3V0b3V0UGVyY2VudGFnZSkgOiAxLCAwKTtcblx0XHRcdGNoYXJ0LnJhZGl1c0xlbmd0aCA9IChjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LmlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcblxuXHRcdFx0bWUub3V0ZXJSYWRpdXMgPSBjaGFydC5vdXRlclJhZGl1cyAtIChjaGFydC5yYWRpdXNMZW5ndGggKiBtZS5pbmRleCk7XG5cdFx0XHRtZS5pbm5lclJhZGl1cyA9IG1lLm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoO1xuXG5cdFx0XHRtZXRhLmNvdW50ID0gbWUuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcblxuXHRcdFx0aGVscGVycy5lYWNoKG1ldGEuZGF0YSwgZnVuY3Rpb24oYXJjLCBpbmRleCkge1xuXHRcdFx0XHRtZS51cGRhdGVFbGVtZW50KGFyYywgaW5kZXgsIHJlc2V0KTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuXHRcdFx0dmFyIHNjYWxlID0gY2hhcnQuc2NhbGU7XG5cdFx0XHR2YXIgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHM7XG5cblx0XHRcdHZhciBjaXJjdW1mZXJlbmNlID0gbWUuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHRcdHZhciBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcblx0XHRcdHZhciBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcblxuXHRcdFx0Ly8gSWYgdGhlcmUgaXMgTmFOIGRhdGEgYmVmb3JlIHVzLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgc3RhcnRpbmcgYW5nbGUgY29ycmVjdGx5LlxuXHRcdFx0Ly8gV2UgY291bGQgYmUgd2F5IG1vcmUgZWZmaWNpZW50IGhlcmUsIGJ1dCBpdHMgdW5saWtlbHkgdGhhdCB0aGUgcG9sYXIgYXJlYSBjaGFydCB3aWxsIGhhdmUgYSBsb3Qgb2YgZGF0YVxuXHRcdFx0dmFyIHZpc2libGVDb3VudCA9IDA7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaW5kZXg7ICsraSkge1xuXHRcdFx0XHRpZiAoIWlzTmFOKGRhdGFzZXQuZGF0YVtpXSkgJiYgIW1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcblx0XHRcdFx0XHQrK3Zpc2libGVDb3VudDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB2YXIgbmVnSGFsZlBJID0gLTAuNSAqIE1hdGguUEk7XG5cdFx0XHR2YXIgZGF0YXNldFN0YXJ0QW5nbGUgPSBvcHRzLnN0YXJ0QW5nbGU7XG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBhcmMuaGlkZGVuID8gMCA6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKGRhdGFzZXQuZGF0YVtpbmRleF0pO1xuXHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSBkYXRhc2V0U3RhcnRBbmdsZSArIChjaXJjdW1mZXJlbmNlICogdmlzaWJsZUNvdW50KTtcblx0XHRcdHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoYXJjLmhpZGRlbiA/IDAgOiBjaXJjdW1mZXJlbmNlKTtcblxuXHRcdFx0dmFyIHJlc2V0UmFkaXVzID0gYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUgPyAwIDogc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoZGF0YXNldC5kYXRhW2luZGV4XSk7XG5cblx0XHRcdGhlbHBlcnMuZXh0ZW5kKGFyYywge1xuXHRcdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0XHRfaW5kZXg6IGluZGV4LFxuXHRcdFx0XHRfc2NhbGU6IHNjYWxlLFxuXG5cdFx0XHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRcdHg6IGNlbnRlclgsXG5cdFx0XHRcdFx0eTogY2VudGVyWSxcblx0XHRcdFx0XHRpbm5lclJhZGl1czogMCxcblx0XHRcdFx0XHRvdXRlclJhZGl1czogcmVzZXQgPyByZXNldFJhZGl1cyA6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdHN0YXJ0QW5nbGU6IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSA/IGRhdGFzZXRTdGFydEFuZ2xlIDogc3RhcnRBbmdsZSxcblx0XHRcdFx0XHRlbmRBbmdsZTogcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gZGF0YXNldFN0YXJ0QW5nbGUgOiBlbmRBbmdsZSxcblx0XHRcdFx0XHRsYWJlbDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQobGFiZWxzLCBpbmRleCwgbGFiZWxzW2luZGV4XSlcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGJvcmRlciBhbmQgZmlsbCBzdHlsZVxuXHRcdFx0bWUucmVtb3ZlSG92ZXJTdHlsZShhcmMpO1xuXG5cdFx0XHRhcmMucGl2b3QoKTtcblx0XHR9LFxuXG5cdFx0cmVtb3ZlSG92ZXJTdHlsZTogZnVuY3Rpb24oYXJjKSB7XG5cdFx0XHRDaGFydC5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlSG92ZXJTdHlsZS5jYWxsKHRoaXMsIGFyYywgdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYyk7XG5cdFx0fSxcblxuXHRcdGNvdW50VmlzaWJsZUVsZW1lbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblxuXHRcdFx0aGVscGVycy5lYWNoKG1ldGEuZGF0YSwgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgpIHtcblx0XHRcdFx0aWYgKCFpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSAmJiAhZWxlbWVudC5oaWRkZW4pIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGNvdW50O1xuXHRcdH0sXG5cblx0XHRjYWxjdWxhdGVDaXJjdW1mZXJlbmNlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIGNvdW50ID0gdGhpcy5nZXRNZXRhKCkuY291bnQ7XG5cdFx0XHRpZiAoY291bnQgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuICgyICogTWF0aC5QSSkgLyBjb3VudDtcblx0XHRcdH1cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0fSk7XG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS5kZWZhdWx0c1wiOjE5LFwiLi4vZWxlbWVudHMvaW5kZXhcIjozNCxcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgZWxlbWVudHMgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9pbmRleCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ3JhZGFyJywge1xuXHRzY2FsZToge1xuXHRcdHR5cGU6ICdyYWRpYWxMaW5lYXInXG5cdH0sXG5cdGVsZW1lbnRzOiB7XG5cdFx0bGluZToge1xuXHRcdFx0dGVuc2lvbjogMCAvLyBubyBiZXppZXIgaW4gcmFkYXJcblx0XHR9XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuY29udHJvbGxlcnMucmFkYXIgPSBDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXG5cdFx0ZGF0YXNldEVsZW1lbnRUeXBlOiBlbGVtZW50cy5MaW5lLFxuXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBlbGVtZW50cy5Qb2ludCxcblxuXHRcdGxpbmtTY2FsZXM6IGhlbHBlcnMubm9vcCxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBsaW5lID0gbWV0YS5kYXRhc2V0O1xuXHRcdFx0dmFyIHBvaW50cyA9IG1ldGEuZGF0YTtcblx0XHRcdHZhciBjdXN0b20gPSBsaW5lLmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGxpbmVFbGVtZW50T3B0aW9ucyA9IG1lLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMubGluZTtcblx0XHRcdHZhciBzY2FsZSA9IG1lLmNoYXJ0LnNjYWxlO1xuXG5cdFx0XHQvLyBDb21wYXRpYmlsaXR5OiBJZiB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCB3aXRoIG9ubHkgdGhlIG9sZCBuYW1lLCB1c2UgdGhvc2UgdmFsdWVzXG5cdFx0XHRpZiAoKGRhdGFzZXQudGVuc2lvbiAhPT0gdW5kZWZpbmVkKSAmJiAoZGF0YXNldC5saW5lVGVuc2lvbiA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRkYXRhc2V0LmxpbmVUZW5zaW9uID0gZGF0YXNldC50ZW5zaW9uO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmV4dGVuZChtZXRhLmRhdGFzZXQsIHtcblx0XHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdFx0X3NjYWxlOiBzY2FsZSxcblx0XHRcdFx0Ly8gRGF0YVxuXHRcdFx0XHRfY2hpbGRyZW46IHBvaW50cyxcblx0XHRcdFx0X2xvb3A6IHRydWUsXG5cdFx0XHRcdC8vIE1vZGVsXG5cdFx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdFx0XHR0ZW5zaW9uOiBjdXN0b20udGVuc2lvbiA/IGN1c3RvbS50ZW5zaW9uIDogaGVscGVycy52YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmxpbmVUZW5zaW9uLCBsaW5lRWxlbWVudE9wdGlvbnMudGVuc2lvbiksXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBjdXN0b20uYmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmJhY2tncm91bmRDb2xvciA6IChkYXRhc2V0LmJhY2tncm91bmRDb2xvciB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYmFja2dyb3VuZENvbG9yKSxcblx0XHRcdFx0XHRib3JkZXJXaWR0aDogY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogKGRhdGFzZXQuYm9yZGVyV2lkdGggfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlcldpZHRoKSxcblx0XHRcdFx0XHRib3JkZXJDb2xvcjogY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogKGRhdGFzZXQuYm9yZGVyQ29sb3IgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlckNvbG9yKSxcblx0XHRcdFx0XHRmaWxsOiBjdXN0b20uZmlsbCA/IGN1c3RvbS5maWxsIDogKGRhdGFzZXQuZmlsbCAhPT0gdW5kZWZpbmVkID8gZGF0YXNldC5maWxsIDogbGluZUVsZW1lbnRPcHRpb25zLmZpbGwpLFxuXHRcdFx0XHRcdGJvcmRlckNhcFN0eWxlOiBjdXN0b20uYm9yZGVyQ2FwU3R5bGUgPyBjdXN0b20uYm9yZGVyQ2FwU3R5bGUgOiAoZGF0YXNldC5ib3JkZXJDYXBTdHlsZSB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpLFxuXHRcdFx0XHRcdGJvcmRlckRhc2g6IGN1c3RvbS5ib3JkZXJEYXNoID8gY3VzdG9tLmJvcmRlckRhc2ggOiAoZGF0YXNldC5ib3JkZXJEYXNoIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJEYXNoKSxcblx0XHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0OiBjdXN0b20uYm9yZGVyRGFzaE9mZnNldCA/IGN1c3RvbS5ib3JkZXJEYXNoT2Zmc2V0IDogKGRhdGFzZXQuYm9yZGVyRGFzaE9mZnNldCB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCksXG5cdFx0XHRcdFx0Ym9yZGVySm9pblN0eWxlOiBjdXN0b20uYm9yZGVySm9pblN0eWxlID8gY3VzdG9tLmJvcmRlckpvaW5TdHlsZSA6IChkYXRhc2V0LmJvcmRlckpvaW5TdHlsZSB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVySm9pblN0eWxlKSxcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1ldGEuZGF0YXNldC5waXZvdCgpO1xuXG5cdFx0XHQvLyBVcGRhdGUgUG9pbnRzXG5cdFx0XHRoZWxwZXJzLmVhY2gocG9pbnRzLCBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChwb2ludCwgaW5kZXgsIHJlc2V0KTtcblx0XHRcdH0sIG1lKTtcblxuXHRcdFx0Ly8gVXBkYXRlIGJlemllciBjb250cm9sIHBvaW50c1xuXHRcdFx0bWUudXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cygpO1xuXHRcdH0sXG5cdFx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBzY2FsZSA9IG1lLmNoYXJ0LnNjYWxlO1xuXHRcdFx0dmFyIHBvaW50RWxlbWVudE9wdGlvbnMgPSBtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50O1xuXHRcdFx0dmFyIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIGRhdGFzZXQuZGF0YVtpbmRleF0pO1xuXG5cdFx0XHQvLyBDb21wYXRpYmlsaXR5OiBJZiB0aGUgcHJvcGVydGllcyBhcmUgZGVmaW5lZCB3aXRoIG9ubHkgdGhlIG9sZCBuYW1lLCB1c2UgdGhvc2UgdmFsdWVzXG5cdFx0XHRpZiAoKGRhdGFzZXQucmFkaXVzICE9PSB1bmRlZmluZWQpICYmIChkYXRhc2V0LnBvaW50UmFkaXVzID09PSB1bmRlZmluZWQpKSB7XG5cdFx0XHRcdGRhdGFzZXQucG9pbnRSYWRpdXMgPSBkYXRhc2V0LnJhZGl1cztcblx0XHRcdH1cblx0XHRcdGlmICgoZGF0YXNldC5oaXRSYWRpdXMgIT09IHVuZGVmaW5lZCkgJiYgKGRhdGFzZXQucG9pbnRIaXRSYWRpdXMgPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0ZGF0YXNldC5wb2ludEhpdFJhZGl1cyA9IGRhdGFzZXQuaGl0UmFkaXVzO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmV4dGVuZChwb2ludCwge1xuXHRcdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRcdF9kYXRhc2V0SW5kZXg6IG1lLmluZGV4LFxuXHRcdFx0XHRfaW5kZXg6IGluZGV4LFxuXHRcdFx0XHRfc2NhbGU6IHNjYWxlLFxuXG5cdFx0XHRcdC8vIERlc2lyZWQgdmlldyBwcm9wZXJ0aWVzXG5cdFx0XHRcdF9tb2RlbDoge1xuXHRcdFx0XHRcdHg6IHJlc2V0ID8gc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueCwgLy8gdmFsdWUgbm90IHVzZWQgaW4gZGF0YXNldCBzY2FsZSwgYnV0IHdlIHdhbnQgYSBjb25zaXN0ZW50IEFQSSBiZXR3ZWVuIHNjYWxlc1xuXHRcdFx0XHRcdHk6IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueSxcblxuXHRcdFx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdFx0XHR0ZW5zaW9uOiBjdXN0b20udGVuc2lvbiA/IGN1c3RvbS50ZW5zaW9uIDogaGVscGVycy52YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmxpbmVUZW5zaW9uLCBtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmxpbmUudGVuc2lvbiksXG5cdFx0XHRcdFx0cmFkaXVzOiBjdXN0b20ucmFkaXVzID8gY3VzdG9tLnJhZGl1cyA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRSYWRpdXMsIGluZGV4LCBwb2ludEVsZW1lbnRPcHRpb25zLnJhZGl1cyksXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBjdXN0b20uYmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmJhY2tncm91bmRDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRCYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBwb2ludEVsZW1lbnRPcHRpb25zLmJhY2tncm91bmRDb2xvciksXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRCb3JkZXJDb2xvciwgaW5kZXgsIHBvaW50RWxlbWVudE9wdGlvbnMuYm9yZGVyQ29sb3IpLFxuXHRcdFx0XHRcdGJvcmRlcldpZHRoOiBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50Qm9yZGVyV2lkdGgsIGluZGV4LCBwb2ludEVsZW1lbnRPcHRpb25zLmJvcmRlcldpZHRoKSxcblx0XHRcdFx0XHRwb2ludFN0eWxlOiBjdXN0b20ucG9pbnRTdHlsZSA/IGN1c3RvbS5wb2ludFN0eWxlIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludFN0eWxlLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5wb2ludFN0eWxlKSxcblxuXHRcdFx0XHRcdC8vIFRvb2x0aXBcblx0XHRcdFx0XHRoaXRSYWRpdXM6IGN1c3RvbS5oaXRSYWRpdXMgPyBjdXN0b20uaGl0UmFkaXVzIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhpdFJhZGl1cywgaW5kZXgsIHBvaW50RWxlbWVudE9wdGlvbnMuaGl0UmFkaXVzKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cG9pbnQuX21vZGVsLnNraXAgPSBjdXN0b20uc2tpcCA/IGN1c3RvbS5za2lwIDogKGlzTmFOKHBvaW50Ll9tb2RlbC54KSB8fCBpc05hTihwb2ludC5fbW9kZWwueSkpO1xuXHRcdH0sXG5cdFx0dXBkYXRlQmV6aWVyQ29udHJvbFBvaW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2hhcnRBcmVhID0gdGhpcy5jaGFydC5jaGFydEFyZWE7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdFx0XHR2YXIgY29udHJvbFBvaW50cyA9IGhlbHBlcnMuc3BsaW5lQ3VydmUoXG5cdFx0XHRcdFx0aGVscGVycy5wcmV2aW91c0l0ZW0obWV0YS5kYXRhLCBpbmRleCwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRcdGhlbHBlcnMubmV4dEl0ZW0obWV0YS5kYXRhLCBpbmRleCwgdHJ1ZSkuX21vZGVsLFxuXHRcdFx0XHRcdG1vZGVsLnRlbnNpb25cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IHRoZSBiZXppZXIgZ29pbmcgb3V0c2lkZSBvZiB0aGUgYm91bmRzIG9mIHRoZSBncmFwaFxuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1ggPSBNYXRoLm1heChNYXRoLm1pbihjb250cm9sUG9pbnRzLnByZXZpb3VzLngsIGNoYXJ0QXJlYS5yaWdodCksIGNoYXJ0QXJlYS5sZWZ0KTtcblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZID0gTWF0aC5tYXgoTWF0aC5taW4oY29udHJvbFBvaW50cy5wcmV2aW91cy55LCBjaGFydEFyZWEuYm90dG9tKSwgY2hhcnRBcmVhLnRvcCk7XG5cblx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBNYXRoLm1heChNYXRoLm1pbihjb250cm9sUG9pbnRzLm5leHQueCwgY2hhcnRBcmVhLnJpZ2h0KSwgY2hhcnRBcmVhLmxlZnQpO1xuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WSA9IE1hdGgubWF4KE1hdGgubWluKGNvbnRyb2xQb2ludHMubmV4dC55LCBjaGFydEFyZWEuYm90dG9tKSwgY2hhcnRBcmVhLnRvcCk7XG5cblx0XHRcdFx0Ly8gTm93IHBpdm90IHRoZSBwb2ludCBmb3IgYW5pbWF0aW9uXG5cdFx0XHRcdHBvaW50LnBpdm90KCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdC8vIFBvaW50XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1twb2ludC5fZGF0YXNldEluZGV4XTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgaW5kZXggPSBwb2ludC5faW5kZXg7XG5cdFx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cblx0XHRcdG1vZGVsLnJhZGl1cyA9IGN1c3RvbS5ob3ZlclJhZGl1cyA/IGN1c3RvbS5ob3ZlclJhZGl1cyA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRIb3ZlclJhZGl1cywgaW5kZXgsIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ob3ZlclJhZGl1cyk7XG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBoZWxwZXJzLmdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ob3ZlckJvcmRlckNvbG9yID8gY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCb3JkZXJDb2xvciwgaW5kZXgsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihtb2RlbC5ib3JkZXJDb2xvcikpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uaG92ZXJCb3JkZXJXaWR0aCA/IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhvdmVyQm9yZGVyV2lkdGgsIGluZGV4LCBtb2RlbC5ib3JkZXJXaWR0aCk7XG5cdFx0fSxcblxuXHRcdHJlbW92ZUhvdmVyU3R5bGU6IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1twb2ludC5fZGF0YXNldEluZGV4XTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgaW5kZXggPSBwb2ludC5faW5kZXg7XG5cdFx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0XHR2YXIgcG9pbnRFbGVtZW50T3B0aW9ucyA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludDtcblxuXHRcdFx0bW9kZWwucmFkaXVzID0gY3VzdG9tLnJhZGl1cyA/IGN1c3RvbS5yYWRpdXMgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50UmFkaXVzLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5yYWRpdXMpO1xuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50QmFja2dyb3VuZENvbG9yLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSBjdXN0b20uYm9yZGVyQ29sb3IgPyBjdXN0b20uYm9yZGVyQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50Qm9yZGVyQ29sb3IsIGluZGV4LCBwb2ludEVsZW1lbnRPcHRpb25zLmJvcmRlckNvbG9yKTtcblx0XHRcdG1vZGVsLmJvcmRlcldpZHRoID0gY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEJvcmRlcldpZHRoLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5ib3JkZXJXaWR0aCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9lbGVtZW50cy9pbmRleFwiOjM0LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcblxuZGVmYXVsdHMuX3NldCgnc2NhdHRlcicsIHtcblx0aG92ZXI6IHtcblx0XHRtb2RlOiAnc2luZ2xlJ1xuXHR9LFxuXG5cdHNjYWxlczoge1xuXHRcdHhBeGVzOiBbe1xuXHRcdFx0aWQ6ICd4LWF4aXMtMScsICAgIC8vIG5lZWQgYW4gSUQgc28gZGF0YXNldHMgY2FuIHJlZmVyZW5jZSB0aGUgc2NhbGVcblx0XHRcdHR5cGU6ICdsaW5lYXInLCAgICAvLyBzY2F0dGVyIHNob3VsZCBub3QgdXNlIGEgY2F0ZWdvcnkgYXhpc1xuXHRcdFx0cG9zaXRpb246ICdib3R0b20nXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHRpZDogJ3ktYXhpcy0xJyxcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0cG9zaXRpb246ICdsZWZ0J1xuXHRcdH1dXG5cdH0sXG5cblx0c2hvd0xpbmVzOiBmYWxzZSxcblxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7ICAgICAvLyBkb2Vzbid0IG1ha2Ugc2Vuc2UgZm9yIHNjYXR0ZXIgc2luY2UgZGF0YSBhcmUgZm9ybWF0dGVkIGFzIGEgcG9pbnRcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gJygnICsgaXRlbS54TGFiZWwgKyAnLCAnICsgaXRlbS55TGFiZWwgKyAnKSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdC8vIFNjYXR0ZXIgY2hhcnRzIHVzZSBsaW5lIGNvbnRyb2xsZXJzXG5cdENoYXJ0LmNvbnRyb2xsZXJzLnNjYXR0ZXIgPSBDaGFydC5jb250cm9sbGVycy5saW5lO1xuXG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS5kZWZhdWx0c1wiOjE5fV0sMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyogZ2xvYmFsIHdpbmRvdzogZmFsc2UgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRhbmltYXRpb246IHtcblx0XHRkdXJhdGlvbjogMTAwMCxcblx0XHRlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuXHRcdG9uUHJvZ3Jlc3M6IGhlbHBlcnMubm9vcCxcblx0XHRvbkNvbXBsZXRlOiBoZWxwZXJzLm5vb3Bcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5BbmltYXRpb24gPSBFbGVtZW50LmV4dGVuZCh7XG5cdFx0Y2hhcnQ6IG51bGwsIC8vIHRoZSBhbmltYXRpb24gYXNzb2NpYXRlZCBjaGFydCBpbnN0YW5jZVxuXHRcdGN1cnJlbnRTdGVwOiAwLCAvLyB0aGUgY3VycmVudCBhbmltYXRpb24gc3RlcFxuXHRcdG51bVN0ZXBzOiA2MCwgLy8gZGVmYXVsdCBudW1iZXIgb2Ygc3RlcHNcblx0XHRlYXNpbmc6ICcnLCAvLyB0aGUgZWFzaW5nIHRvIHVzZSBmb3IgdGhpcyBhbmltYXRpb25cblx0XHRyZW5kZXI6IG51bGwsIC8vIHJlbmRlciBmdW5jdGlvbiB1c2VkIGJ5IHRoZSBhbmltYXRpb24gc2VydmljZVxuXG5cdFx0b25BbmltYXRpb25Qcm9ncmVzczogbnVsbCwgLy8gdXNlciBzcGVjaWZpZWQgY2FsbGJhY2sgdG8gZmlyZSBvbiBlYWNoIHN0ZXAgb2YgdGhlIGFuaW1hdGlvblxuXHRcdG9uQW5pbWF0aW9uQ29tcGxldGU6IG51bGwsIC8vIHVzZXIgc3BlY2lmaWVkIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgYW5pbWF0aW9uIGZpbmlzaGVzXG5cdH0pO1xuXG5cdENoYXJ0LmFuaW1hdGlvblNlcnZpY2UgPSB7XG5cdFx0ZnJhbWVEdXJhdGlvbjogMTcsXG5cdFx0YW5pbWF0aW9uczogW10sXG5cdFx0ZHJvcEZyYW1lczogMCxcblx0XHRyZXF1ZXN0OiBudWxsLFxuXG5cdFx0LyoqXG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgdG8gYW5pbWF0ZS5cblx0XHQgKiBAcGFyYW0ge0NoYXJ0LkFuaW1hdGlvbn0gYW5pbWF0aW9uIC0gVGhlIGFuaW1hdGlvbiB0aGF0IHdlIHdpbGwgYW5pbWF0ZS5cblx0XHQgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gLSBUaGUgYW5pbWF0aW9uIGR1cmF0aW9uIGluIG1zLlxuXHRcdCAqIEBwYXJhbSB7Qm9vbGVhbn0gbGF6eSAtIGlmIHRydWUsIHRoZSBjaGFydCBpcyBub3QgbWFya2VkIGFzIGFuaW1hdGluZyB0byBlbmFibGUgbW9yZSByZXNwb25zaXZlIGludGVyYWN0aW9uc1xuXHRcdCAqL1xuXHRcdGFkZEFuaW1hdGlvbjogZnVuY3Rpb24oY2hhcnQsIGFuaW1hdGlvbiwgZHVyYXRpb24sIGxhenkpIHtcblx0XHRcdHZhciBhbmltYXRpb25zID0gdGhpcy5hbmltYXRpb25zO1xuXHRcdFx0dmFyIGksIGlsZW47XG5cblx0XHRcdGFuaW1hdGlvbi5jaGFydCA9IGNoYXJ0O1xuXG5cdFx0XHRpZiAoIWxhenkpIHtcblx0XHRcdFx0Y2hhcnQuYW5pbWF0aW5nID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGlmIChhbmltYXRpb25zW2ldLmNoYXJ0ID09PSBjaGFydCkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbnNbaV0gPSBhbmltYXRpb247XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyBxdWV1ZWQsIG1hbnVhbGx5IGtpY2tzdGFydCBhIGRpZ2VzdCwgZm9yIGxhY2sgb2YgYSBiZXR0ZXIgd29yZFxuXHRcdFx0aWYgKGFuaW1hdGlvbnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNhbmNlbEFuaW1hdGlvbjogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRcdHZhciBpbmRleCA9IGhlbHBlcnMuZmluZEluZGV4KHRoaXMuYW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG5cdFx0XHRcdHJldHVybiBhbmltYXRpb24uY2hhcnQgPT09IGNoYXJ0O1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0dGhpcy5hbmltYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRcdGNoYXJ0LmFuaW1hdGluZyA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdGlmIChtZS5yZXF1ZXN0ID09PSBudWxsKSB7XG5cdFx0XHRcdC8vIFNraXAgYW5pbWF0aW9uIGZyYW1lIHJlcXVlc3RzIHVudGlsIHRoZSBhY3RpdmUgb25lIGlzIGV4ZWN1dGVkLlxuXHRcdFx0XHQvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiBwcm9jZXNzaW5nIG1vdXNlIGV2ZW50cywgZS5nLiAnbW91c2Vtb3ZlJ1xuXHRcdFx0XHQvLyBhbmQgJ21vdXNlb3V0JyBldmVudHMgd2lsbCB0cmlnZ2VyIG11bHRpcGxlIHJlbmRlcnMuXG5cdFx0XHRcdG1lLnJlcXVlc3QgPSBoZWxwZXJzLnJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1lLnJlcXVlc3QgPSBudWxsO1xuXHRcdFx0XHRcdG1lLnN0YXJ0RGlnZXN0KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHN0YXJ0RGlnZXN0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblx0XHRcdHZhciBmcmFtZXNUb0Ryb3AgPSAwO1xuXG5cdFx0XHRpZiAobWUuZHJvcEZyYW1lcyA+IDEpIHtcblx0XHRcdFx0ZnJhbWVzVG9Ecm9wID0gTWF0aC5mbG9vcihtZS5kcm9wRnJhbWVzKTtcblx0XHRcdFx0bWUuZHJvcEZyYW1lcyA9IG1lLmRyb3BGcmFtZXMgJSAxO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5hZHZhbmNlKDEgKyBmcmFtZXNUb0Ryb3ApO1xuXG5cdFx0XHR2YXIgZW5kVGltZSA9IERhdGUubm93KCk7XG5cblx0XHRcdG1lLmRyb3BGcmFtZXMgKz0gKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gbWUuZnJhbWVEdXJhdGlvbjtcblxuXHRcdFx0Ly8gRG8gd2UgaGF2ZSBtb3JlIHN0dWZmIHRvIGFuaW1hdGU/XG5cdFx0XHRpZiAobWUuYW5pbWF0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdG1lLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGFkdmFuY2U6IGZ1bmN0aW9uKGNvdW50KSB7XG5cdFx0XHR2YXIgYW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0aW9ucztcblx0XHRcdHZhciBhbmltYXRpb24sIGNoYXJ0O1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHR3aGlsZSAoaSA8IGFuaW1hdGlvbnMubGVuZ3RoKSB7XG5cdFx0XHRcdGFuaW1hdGlvbiA9IGFuaW1hdGlvbnNbaV07XG5cdFx0XHRcdGNoYXJ0ID0gYW5pbWF0aW9uLmNoYXJ0O1xuXG5cdFx0XHRcdGFuaW1hdGlvbi5jdXJyZW50U3RlcCA9IChhbmltYXRpb24uY3VycmVudFN0ZXAgfHwgMCkgKyBjb3VudDtcblx0XHRcdFx0YW5pbWF0aW9uLmN1cnJlbnRTdGVwID0gTWF0aC5taW4oYW5pbWF0aW9uLmN1cnJlbnRTdGVwLCBhbmltYXRpb24ubnVtU3RlcHMpO1xuXG5cdFx0XHRcdGhlbHBlcnMuY2FsbGJhY2soYW5pbWF0aW9uLnJlbmRlciwgW2NoYXJ0LCBhbmltYXRpb25dLCBjaGFydCk7XG5cdFx0XHRcdGhlbHBlcnMuY2FsbGJhY2soYW5pbWF0aW9uLm9uQW5pbWF0aW9uUHJvZ3Jlc3MsIFthbmltYXRpb25dLCBjaGFydCk7XG5cblx0XHRcdFx0aWYgKGFuaW1hdGlvbi5jdXJyZW50U3RlcCA+PSBhbmltYXRpb24ubnVtU3RlcHMpIHtcblx0XHRcdFx0XHRoZWxwZXJzLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXHRcdFx0XHRcdGNoYXJ0LmFuaW1hdGluZyA9IGZhbHNlO1xuXHRcdFx0XHRcdGFuaW1hdGlvbnMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCsraTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5BbmltYXRpb24gaW5zdGVhZFxuXHQgKiBAcHJvcCBDaGFydC5BbmltYXRpb24jYW5pbWF0aW9uT2JqZWN0XG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKi9cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KENoYXJ0LkFuaW1hdGlvbi5wcm90b3R5cGUsICdhbmltYXRpb25PYmplY3QnLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuQW5pbWF0aW9uI2NoYXJ0IGluc3RlYWRcblx0ICogQHByb3AgQ2hhcnQuQW5pbWF0aW9uI2NoYXJ0SW5zdGFuY2Vcblx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuXHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdCAqL1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhcnQuQW5pbWF0aW9uLnByb3RvdHlwZSwgJ2NoYXJ0SW5zdGFuY2UnLCB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmNoYXJ0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dGhpcy5jaGFydCA9IHZhbHVlO1xuXHRcdH1cblx0fSk7XG5cbn07XG5cbn0se1wiLi4vaGVscGVycy9pbmRleFwiOjM5LFwiLi9jb3JlLmRlZmF1bHRzXCI6MTksXCIuL2NvcmUuZWxlbWVudFwiOjIwfV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIEludGVyYWN0aW9uID0gcmVxdWlyZSgnLi9jb3JlLmludGVyYWN0aW9uJyk7XG52YXIgcGxhdGZvcm0gPSByZXF1aXJlKCcuLi9wbGF0Zm9ybXMvcGxhdGZvcm0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXHR2YXIgcGx1Z2lucyA9IENoYXJ0LnBsdWdpbnM7XG5cblx0Ly8gQ3JlYXRlIGEgZGljdGlvbmFyeSBvZiBjaGFydCB0eXBlcywgdG8gYWxsb3cgZm9yIGV4dGVuc2lvbiBvZiBleGlzdGluZyB0eXBlc1xuXHRDaGFydC50eXBlcyA9IHt9O1xuXG5cdC8vIFN0b3JlIGEgcmVmZXJlbmNlIHRvIGVhY2ggaW5zdGFuY2UgLSBhbGxvd2luZyB1cyB0byBnbG9iYWxseSByZXNpemUgY2hhcnQgaW5zdGFuY2VzIG9uIHdpbmRvdyByZXNpemUuXG5cdC8vIERlc3Ryb3kgbWV0aG9kIG9uIHRoZSBjaGFydCB3aWxsIHJlbW92ZSB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNoYXJ0IGZyb20gdGhpcyByZWZlcmVuY2UuXG5cdENoYXJ0Lmluc3RhbmNlcyA9IHt9O1xuXG5cdC8vIENvbnRyb2xsZXJzIGF2YWlsYWJsZSBmb3IgZGF0YXNldCB2aXN1YWxpemF0aW9uIGVnLiBiYXIsIGxpbmUsIHNsaWNlLCBldGMuXG5cdENoYXJ0LmNvbnRyb2xsZXJzID0ge307XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBnaXZlbiBjb25maWcgd2l0aCBnbG9iYWwgYW5kIGNoYXJ0IGRlZmF1bHQgdmFsdWVzLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcblx0XHRjb25maWcgPSBjb25maWcgfHwge307XG5cblx0XHQvLyBEbyBOT1QgdXNlIGNvbmZpZ01lcmdlKCkgZm9yIHRoZSBkYXRhIG9iamVjdCBiZWNhdXNlIHRoaXMgbWV0aG9kIG1lcmdlcyBhcnJheXNcblx0XHQvLyBhbmQgc28gd291bGQgY2hhbmdlIHJlZmVyZW5jZXMgdG8gbGFiZWxzIGFuZCBkYXRhc2V0cywgcHJldmVudGluZyBkYXRhIHVwZGF0ZXMuXG5cdFx0dmFyIGRhdGEgPSBjb25maWcuZGF0YSA9IGNvbmZpZy5kYXRhIHx8IHt9O1xuXHRcdGRhdGEuZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzIHx8IFtdO1xuXHRcdGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG5cblx0XHRjb25maWcub3B0aW9ucyA9IGhlbHBlcnMuY29uZmlnTWVyZ2UoXG5cdFx0XHRkZWZhdWx0cy5nbG9iYWwsXG5cdFx0XHRkZWZhdWx0c1tjb25maWcudHlwZV0sXG5cdFx0XHRjb25maWcub3B0aW9ucyB8fCB7fSk7XG5cblx0XHRyZXR1cm4gY29uZmlnO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNvbmZpZyBvZiB0aGUgY2hhcnRcblx0ICogQHBhcmFtIGNoYXJ0IHtDaGFydH0gY2hhcnQgdG8gdXBkYXRlIHRoZSBvcHRpb25zIGZvclxuXHQgKi9cblx0ZnVuY3Rpb24gdXBkYXRlQ29uZmlnKGNoYXJ0KSB7XG5cdFx0dmFyIG5ld09wdGlvbnMgPSBjaGFydC5vcHRpb25zO1xuXG5cdFx0Ly8gVXBkYXRlIFNjYWxlKHMpIHdpdGggb3B0aW9uc1xuXHRcdGlmIChuZXdPcHRpb25zLnNjYWxlKSB7XG5cdFx0XHRjaGFydC5zY2FsZS5vcHRpb25zID0gbmV3T3B0aW9ucy5zY2FsZTtcblx0XHR9IGVsc2UgaWYgKG5ld09wdGlvbnMuc2NhbGVzKSB7XG5cdFx0XHRuZXdPcHRpb25zLnNjYWxlcy54QXhlcy5jb25jYXQobmV3T3B0aW9ucy5zY2FsZXMueUF4ZXMpLmZvckVhY2goZnVuY3Rpb24oc2NhbGVPcHRpb25zKSB7XG5cdFx0XHRcdGNoYXJ0LnNjYWxlc1tzY2FsZU9wdGlvbnMuaWRdLm9wdGlvbnMgPSBzY2FsZU9wdGlvbnM7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBUb29sdGlwXG5cdFx0Y2hhcnQudG9vbHRpcC5fb3B0aW9ucyA9IG5ld09wdGlvbnMudG9vbHRpcHM7XG5cdH1cblxuXHRmdW5jdGlvbiBwb3NpdGlvbklzSG9yaXpvbnRhbChwb3NpdGlvbikge1xuXHRcdHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nO1xuXHR9XG5cblx0aGVscGVycy5leHRlbmQoQ2hhcnQucHJvdG90eXBlLCAvKiogQGxlbmRzIENoYXJ0ICovIHtcblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGNvbnN0cnVjdDogZnVuY3Rpb24oaXRlbSwgY29uZmlnKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRjb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gcGxhdGZvcm0uYWNxdWlyZUNvbnRleHQoaXRlbSwgY29uZmlnKTtcblx0XHRcdHZhciBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuXHRcdFx0dmFyIGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuXHRcdFx0dmFyIHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcblxuXHRcdFx0bWUuaWQgPSBoZWxwZXJzLnVpZCgpO1xuXHRcdFx0bWUuY3R4ID0gY29udGV4dDtcblx0XHRcdG1lLmNhbnZhcyA9IGNhbnZhcztcblx0XHRcdG1lLmNvbmZpZyA9IGNvbmZpZztcblx0XHRcdG1lLndpZHRoID0gd2lkdGg7XG5cdFx0XHRtZS5oZWlnaHQgPSBoZWlnaHQ7XG5cdFx0XHRtZS5hc3BlY3RSYXRpbyA9IGhlaWdodCA/IHdpZHRoIC8gaGVpZ2h0IDogbnVsbDtcblx0XHRcdG1lLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcblx0XHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBDaGFydCBhbmQgQ2hhcnQuQ29udHJvbGxlciBoYXZlIGJlZW4gbWVyZ2VkLFxuXHRcdFx0ICogdGhlIFwiaW5zdGFuY2VcIiBzdGlsbCBuZWVkIHRvIGJlIGRlZmluZWQgc2luY2UgaXQgbWlnaHQgYmUgY2FsbGVkIGZyb20gcGx1Z2lucy5cblx0XHRcdCAqIEBwcm9wIENoYXJ0I2NoYXJ0XG5cdFx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG5cdFx0XHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdFx0XHRtZS5jaGFydCA9IG1lO1xuXHRcdFx0bWUuY29udHJvbGxlciA9IG1lOyAvLyBjaGFydC5jaGFydC5jb250cm9sbGVyICNpbmNlcHRpb25cblxuXHRcdFx0Ly8gQWRkIHRoZSBjaGFydCBpbnN0YW5jZSB0byB0aGUgZ2xvYmFsIG5hbWVzcGFjZVxuXHRcdFx0Q2hhcnQuaW5zdGFuY2VzW21lLmlkXSA9IG1lO1xuXG5cdFx0XHQvLyBEZWZpbmUgYWxpYXMgdG8gdGhlIGNvbmZpZyBkYXRhOiBgY2hhcnQuZGF0YSA9PT0gY2hhcnQuY29uZmlnLmRhdGFgXG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobWUsICdkYXRhJywge1xuXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBtZS5jb25maWcuZGF0YTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRcdG1lLmNvbmZpZy5kYXRhID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoIWNvbnRleHQgfHwgIWNhbnZhcykge1xuXHRcdFx0XHQvLyBUaGUgZ2l2ZW4gaXRlbSBpcyBub3QgYSBjb21wYXRpYmxlIGNvbnRleHQyZCBlbGVtZW50LCBsZXQncyByZXR1cm4gYmVmb3JlIGZpbmFsaXppbmdcblx0XHRcdFx0Ly8gdGhlIGNoYXJ0IGluaXRpYWxpemF0aW9uIGJ1dCBhZnRlciBzZXR0aW5nIGJhc2ljIGNoYXJ0IC8gY29udHJvbGxlciBwcm9wZXJ0aWVzIHRoYXRcblx0XHRcdFx0Ly8gY2FuIGhlbHAgdG8gZmlndXJlIG91dCB0aGF0IHRoZSBjaGFydCBpcyBub3QgdmFsaWQgKGUuZyBjaGFydC5jYW52YXMgIT09IG51bGwpO1xuXHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjgwN1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjaGFydDogY2FuJ3QgYWNxdWlyZSBjb250ZXh0IGZyb20gdGhlIGdpdmVuIGl0ZW1cIik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bWUuaW5pdGlhbGl6ZSgpO1xuXHRcdFx0bWUudXBkYXRlKCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHQvLyBCZWZvcmUgaW5pdCBwbHVnaW4gbm90aWZpY2F0aW9uXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUluaXQnKTtcblxuXHRcdFx0aGVscGVycy5yZXRpbmFTY2FsZShtZSwgbWUub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdFx0bWUuYmluZEV2ZW50cygpO1xuXG5cdFx0XHRpZiAobWUub3B0aW9ucy5yZXNwb25zaXZlKSB7XG5cdFx0XHRcdC8vIEluaXRpYWwgcmVzaXplIGJlZm9yZSBjaGFydCBkcmF3cyAobXVzdCBiZSBzaWxlbnQgdG8gcHJlc2VydmUgaW5pdGlhbCBhbmltYXRpb25zKS5cblx0XHRcdFx0bWUucmVzaXplKHRydWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgc2NhbGVzIGhhdmUgSURzIGFuZCBhcmUgYnVpbHQgYmVmb3JlIHdlIGJ1aWxkIGFueSBjb250cm9sbGVycy5cblx0XHRcdG1lLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcblx0XHRcdG1lLmJ1aWxkU2NhbGVzKCk7XG5cdFx0XHRtZS5pbml0VG9vbFRpcCgpO1xuXG5cdFx0XHQvLyBBZnRlciBpbml0IHBsdWdpbiBub3RpZmljYXRpb25cblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJJbml0Jyk7XG5cblx0XHRcdHJldHVybiBtZTtcblx0XHR9LFxuXG5cdFx0Y2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aGVscGVycy5jYW52YXMuY2xlYXIodGhpcyk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBTdG9wcyBhbnkgY3VycmVudCBhbmltYXRpb24gbG9vcCBvY2N1cnJpbmdcblx0XHRcdENoYXJ0LmFuaW1hdGlvblNlcnZpY2UuY2FuY2VsQW5pbWF0aW9uKHRoaXMpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHJlc2l6ZTogZnVuY3Rpb24oc2lsZW50KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIGNhbnZhcyA9IG1lLmNhbnZhcztcblx0XHRcdHZhciBhc3BlY3RSYXRpbyA9IChvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgbWUuYXNwZWN0UmF0aW8pIHx8IG51bGw7XG5cblx0XHRcdC8vIHRoZSBjYW52YXMgcmVuZGVyIHdpZHRoIGFuZCBoZWlnaHQgd2lsbCBiZSBjYXN0ZWQgdG8gaW50ZWdlcnMgc28gbWFrZSBzdXJlIHRoYXRcblx0XHRcdC8vIHRoZSBjYW52YXMgZGlzcGxheSBzdHlsZSB1c2VzIHRoZSBzYW1lIGludGVnZXIgdmFsdWVzIHRvIGF2b2lkIGJsdXJyaW5nIGVmZmVjdC5cblxuXHRcdFx0Ly8gU2V0IHRvIDAgaW5zdGVhZCBvZiBjYW52YXMuc2l6ZSBiZWNhdXNlIHRoZSBzaXplIGRlZmF1bHRzIHRvIDMwMHgxNTAgaWYgdGhlIGVsZW1lbnQgaXMgY29sbGFzZWRcblx0XHRcdHZhciBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoaGVscGVycy5nZXRNYXhpbXVtV2lkdGgoY2FudmFzKSkpO1xuXHRcdFx0dmFyIG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoYXNwZWN0UmF0aW8gPyBuZXdXaWR0aCAvIGFzcGVjdFJhdGlvIDogaGVscGVycy5nZXRNYXhpbXVtSGVpZ2h0KGNhbnZhcykpKTtcblxuXHRcdFx0aWYgKG1lLndpZHRoID09PSBuZXdXaWR0aCAmJiBtZS5oZWlnaHQgPT09IG5ld0hlaWdodCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IG1lLndpZHRoID0gbmV3V2lkdGg7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gbWUuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuXHRcdFx0Y2FudmFzLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuXHRcdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArICdweCc7XG5cblx0XHRcdGhlbHBlcnMucmV0aW5hU2NhbGUobWUsIG9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cblx0XHRcdGlmICghc2lsZW50KSB7XG5cdFx0XHRcdC8vIE5vdGlmeSBhbnkgcGx1Z2lucyBhYm91dCB0aGUgcmVzaXplXG5cdFx0XHRcdHZhciBuZXdTaXplID0ge3dpZHRoOiBuZXdXaWR0aCwgaGVpZ2h0OiBuZXdIZWlnaHR9O1xuXHRcdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ3Jlc2l6ZScsIFtuZXdTaXplXSk7XG5cblx0XHRcdFx0Ly8gTm90aWZ5IG9mIHJlc2l6ZVxuXHRcdFx0XHRpZiAobWUub3B0aW9ucy5vblJlc2l6ZSkge1xuXHRcdFx0XHRcdG1lLm9wdGlvbnMub25SZXNpemUobWUsIG5ld1NpemUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWUuc3RvcCgpO1xuXHRcdFx0XHRtZS51cGRhdGUobWUub3B0aW9ucy5yZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb24pO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRlbnN1cmVTY2FsZXNIYXZlSURzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXHRcdFx0dmFyIHNjYWxlc09wdGlvbnMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcblx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSBvcHRpb25zLnNjYWxlO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2goc2NhbGVzT3B0aW9ucy54QXhlcywgZnVuY3Rpb24oeEF4aXNPcHRpb25zLCBpbmRleCkge1xuXHRcdFx0XHR4QXhpc09wdGlvbnMuaWQgPSB4QXhpc09wdGlvbnMuaWQgfHwgKCd4LWF4aXMtJyArIGluZGV4KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2goc2NhbGVzT3B0aW9ucy55QXhlcywgZnVuY3Rpb24oeUF4aXNPcHRpb25zLCBpbmRleCkge1xuXHRcdFx0XHR5QXhpc09wdGlvbnMuaWQgPSB5QXhpc09wdGlvbnMuaWQgfHwgKCd5LWF4aXMtJyArIGluZGV4KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAoc2NhbGVPcHRpb25zKSB7XG5cdFx0XHRcdHNjYWxlT3B0aW9ucy5pZCA9IHNjYWxlT3B0aW9ucy5pZCB8fCAnc2NhbGUnO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBCdWlsZHMgYSBtYXAgb2Ygc2NhbGUgSUQgdG8gc2NhbGUgb2JqZWN0IGZvciBmdXR1cmUgbG9va3VwLlxuXHRcdCAqL1xuXHRcdGJ1aWxkU2NhbGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgc2NhbGVzID0gbWUuc2NhbGVzID0ge307XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblxuXHRcdFx0aWYgKG9wdGlvbnMuc2NhbGVzKSB7XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuY29uY2F0KFxuXHRcdFx0XHRcdChvcHRpb25zLnNjYWxlcy54QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uKHhBeGlzT3B0aW9ucykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtvcHRpb25zOiB4QXhpc09wdGlvbnMsIGR0eXBlOiAnY2F0ZWdvcnknLCBkcG9zaXRpb246ICdib3R0b20nfTtcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHQob3B0aW9ucy5zY2FsZXMueUF4ZXMgfHwgW10pLm1hcChmdW5jdGlvbih5QXhpc09wdGlvbnMpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7b3B0aW9uczogeUF4aXNPcHRpb25zLCBkdHlwZTogJ2xpbmVhcicsIGRwb3NpdGlvbjogJ2xlZnQnfTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5zY2FsZSkge1xuXHRcdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLnNjYWxlLFxuXHRcdFx0XHRcdGR0eXBlOiAncmFkaWFsTGluZWFyJyxcblx0XHRcdFx0XHRpc0RlZmF1bHQ6IHRydWUsXG5cdFx0XHRcdFx0ZHBvc2l0aW9uOiAnY2hhcnRBcmVhJ1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aGVscGVycy5lYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG5cdFx0XHRcdHZhciBzY2FsZVR5cGUgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHNjYWxlT3B0aW9ucy50eXBlLCBpdGVtLmR0eXBlKTtcblx0XHRcdFx0dmFyIHNjYWxlQ2xhc3MgPSBDaGFydC5zY2FsZVNlcnZpY2UuZ2V0U2NhbGVDb25zdHJ1Y3RvcihzY2FsZVR5cGUpO1xuXHRcdFx0XHRpZiAoIXNjYWxlQ2xhc3MpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocG9zaXRpb25Jc0hvcml6b250YWwoc2NhbGVPcHRpb25zLnBvc2l0aW9uKSAhPT0gcG9zaXRpb25Jc0hvcml6b250YWwoaXRlbS5kcG9zaXRpb24pKSB7XG5cdFx0XHRcdFx0c2NhbGVPcHRpb25zLnBvc2l0aW9uID0gaXRlbS5kcG9zaXRpb247XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgc2NhbGUgPSBuZXcgc2NhbGVDbGFzcyh7XG5cdFx0XHRcdFx0aWQ6IHNjYWxlT3B0aW9ucy5pZCxcblx0XHRcdFx0XHRvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG5cdFx0XHRcdFx0Y3R4OiBtZS5jdHgsXG5cdFx0XHRcdFx0Y2hhcnQ6IG1lXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcblx0XHRcdFx0c2NhbGUubWVyZ2VUaWNrc09wdGlvbnMoKTtcblxuXHRcdFx0XHQvLyBUT0RPKFNCKTogSSB0aGluayB3ZSBzaG91bGQgYmUgYWJsZSB0byByZW1vdmUgdGhpcyBjdXN0b20gY2FzZSAob3B0aW9ucy5zY2FsZSlcblx0XHRcdFx0Ly8gYW5kIGNvbnNpZGVyIGl0IGFzIGEgcmVndWxhciBzY2FsZSBwYXJ0IG9mIHRoZSBcInNjYWxlc1wiXCIgbWFwIG9ubHkhIFRoaXMgd291bGRcblx0XHRcdFx0Ly8gbWFrZSB0aGUgbG9naWMgZWFzaWVyIGFuZCByZW1vdmUgc29tZSB1c2VsZXNzPyBjdXN0b20gY29kZS5cblx0XHRcdFx0aWYgKGl0ZW0uaXNEZWZhdWx0KSB7XG5cdFx0XHRcdFx0bWUuc2NhbGUgPSBzY2FsZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdENoYXJ0LnNjYWxlU2VydmljZS5hZGRTY2FsZXNUb0xheW91dCh0aGlzKTtcblx0XHR9LFxuXG5cdFx0YnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdHlwZXMgPSBbXTtcblx0XHRcdHZhciBuZXdDb250cm9sbGVycyA9IFtdO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobWUuZGF0YS5kYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRcdHZhciBtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0dmFyIHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgbWUuY29uZmlnLnR5cGU7XG5cblx0XHRcdFx0aWYgKG1ldGEudHlwZSAmJiBtZXRhLnR5cGUgIT09IHR5cGUpIHtcblx0XHRcdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHRtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtZXRhLnR5cGUgPSB0eXBlO1xuXG5cdFx0XHRcdHR5cGVzLnB1c2gobWV0YS50eXBlKTtcblxuXHRcdFx0XHRpZiAobWV0YS5jb250cm9sbGVyKSB7XG5cdFx0XHRcdFx0bWV0YS5jb250cm9sbGVyLnVwZGF0ZUluZGV4KGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIENvbnRyb2xsZXJDbGFzcyA9IENoYXJ0LmNvbnRyb2xsZXJzW21ldGEudHlwZV07XG5cdFx0XHRcdFx0aWYgKENvbnRyb2xsZXJDbGFzcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG1ldGEudHlwZSArICdcIiBpcyBub3QgYSBjaGFydCB0eXBlLicpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1ldGEuY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyQ2xhc3MobWUsIGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0bmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZSk7XG5cblx0XHRcdHJldHVybiBuZXdDb250cm9sbGVycztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVzZXQgdGhlIGVsZW1lbnRzIG9mIGFsbCBkYXRhc2V0c1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0cmVzZXRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcblx0XHRcdH0sIG1lKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0KiBSZXNldHMgdGhlIGNoYXJ0IGJhY2sgdG8gaXQncyBzdGF0ZSBiZWZvcmUgdGhlIGluaXRpYWwgYW5pbWF0aW9uXG5cdFx0Ki9cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnJlc2V0RWxlbWVudHMoKTtcblx0XHRcdHRoaXMudG9vbHRpcC5pbml0aWFsaXplKCk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRpZiAoIWNvbmZpZyB8fCB0eXBlb2YgY29uZmlnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRjb25maWcgPSB7XG5cdFx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZyxcblx0XHRcdFx0XHRsYXp5OiBhcmd1bWVudHNbMV1cblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQ29uZmlnKG1lKTtcblxuXHRcdFx0aWYgKHBsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW4gY2FzZSB0aGUgZW50aXJlIGRhdGEgb2JqZWN0IGNoYW5nZWRcblx0XHRcdG1lLnRvb2x0aXAuX2RhdGEgPSBtZS5kYXRhO1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgZGF0YXNldCBjb250cm9sbGVycyBhcmUgdXBkYXRlZCBhbmQgbmV3IGNvbnRyb2xsZXJzIGFyZSByZXNldFxuXHRcdFx0dmFyIG5ld0NvbnRyb2xsZXJzID0gbWUuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSBhbGwgZGF0YXNldCBjb250cm9sbGVycyBoYXZlIGNvcnJlY3QgbWV0YSBkYXRhIGNvdW50c1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKCk7XG5cdFx0XHR9LCBtZSk7XG5cblx0XHRcdG1lLnVwZGF0ZUxheW91dCgpO1xuXG5cdFx0XHQvLyBDYW4gb25seSByZXNldCB0aGUgbmV3IGNvbnRyb2xsZXJzIGFmdGVyIHRoZSBzY2FsZXMgaGF2ZSBiZWVuIHVwZGF0ZWRcblx0XHRcdGhlbHBlcnMuZWFjaChuZXdDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuXHRcdFx0XHRjb250cm9sbGVyLnJlc2V0KCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWUudXBkYXRlRGF0YXNldHMoKTtcblxuXHRcdFx0Ly8gRG8gdGhpcyBiZWZvcmUgcmVuZGVyIHNvIHRoYXQgYW55IHBsdWdpbnMgdGhhdCBuZWVkIGZpbmFsIHNjYWxlIHVwZGF0ZXMgY2FuIHVzZSBpdFxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclVwZGF0ZScpO1xuXG5cdFx0XHRpZiAobWUuX2J1ZmZlcmVkUmVuZGVyKSB7XG5cdFx0XHRcdG1lLl9idWZmZXJlZFJlcXVlc3QgPSB7XG5cdFx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZy5kdXJhdGlvbixcblx0XHRcdFx0XHRlYXNpbmc6IGNvbmZpZy5lYXNpbmcsXG5cdFx0XHRcdFx0bGF6eTogY29uZmlnLmxhenlcblx0XHRcdFx0fTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLnJlbmRlcihjb25maWcpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVcGRhdGVzIHRoZSBjaGFydCBsYXlvdXQgdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZUxheW91dGBcblx0XHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJMYXlvdXRgLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dXBkYXRlTGF5b3V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUxheW91dCcpID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdENoYXJ0LmxheW91dFNlcnZpY2UudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIGBhZnRlckxheW91dGAgaW5zdGVhZC5cblx0XHRcdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlclNjYWxlVXBkYXRlXG5cdFx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNS4wXG5cdFx0XHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdFx0XHQgKiBAcHJpdmF0ZVxuXHRcdFx0ICovXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyU2NhbGVVcGRhdGUnKTtcblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJMYXlvdXQnKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBhbGwgZGF0YXNldHMgdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXRzVXBkYXRlYFxuXHRcdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRzVXBkYXRlYC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHVwZGF0ZURhdGFzZXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZS51cGRhdGVEYXRhc2V0KGkpO1xuXHRcdFx0fVxuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldHNVcGRhdGUnKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyBkYXRhc2V0IGF0IGluZGV4IHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0VXBkYXRlYFxuXHRcdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXRVcGRhdGVgLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dXBkYXRlRGF0YXNldDogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldERhdGFzZXRNZXRhKGluZGV4KTtcblx0XHRcdHZhciBhcmdzID0ge1xuXHRcdFx0XHRtZXRhOiBtZXRhLFxuXHRcdFx0XHRpbmRleDogaW5kZXhcblx0XHRcdH07XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBbYXJnc10pID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdG1ldGEuY29udHJvbGxlci51cGRhdGUoKTtcblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRhdGFzZXRVcGRhdGUnLCBbYXJnc10pO1xuXHRcdH0sXG5cblx0XHRyZW5kZXI6IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0aWYgKCFjb25maWcgfHwgdHlwZW9mIGNvbmZpZyAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0Ly8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0Y29uZmlnID0ge1xuXHRcdFx0XHRcdGR1cmF0aW9uOiBjb25maWcsXG5cdFx0XHRcdFx0bGF6eTogYXJndW1lbnRzWzFdXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbjtcblx0XHRcdHZhciBsYXp5ID0gY29uZmlnLmxhenk7XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZVJlbmRlcicpID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBhbmltYXRpb25PcHRpb25zID0gbWUub3B0aW9ucy5hbmltYXRpb247XG5cdFx0XHR2YXIgb25Db21wbGV0ZSA9IGZ1bmN0aW9uKGFuaW1hdGlvbikge1xuXHRcdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyUmVuZGVyJyk7XG5cdFx0XHRcdGhlbHBlcnMuY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFthbmltYXRpb25dLCBtZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAoYW5pbWF0aW9uT3B0aW9ucyAmJiAoKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgZHVyYXRpb24gIT09IDApIHx8ICh0eXBlb2YgZHVyYXRpb24gPT09ICd1bmRlZmluZWQnICYmIGFuaW1hdGlvbk9wdGlvbnMuZHVyYXRpb24gIT09IDApKSkge1xuXHRcdFx0XHR2YXIgYW5pbWF0aW9uID0gbmV3IENoYXJ0LkFuaW1hdGlvbih7XG5cdFx0XHRcdFx0bnVtU3RlcHM6IChkdXJhdGlvbiB8fCBhbmltYXRpb25PcHRpb25zLmR1cmF0aW9uKSAvIDE2LjY2LCAvLyA2MCBmcHNcblx0XHRcdFx0XHRlYXNpbmc6IGNvbmZpZy5lYXNpbmcgfHwgYW5pbWF0aW9uT3B0aW9ucy5lYXNpbmcsXG5cblx0XHRcdFx0XHRyZW5kZXI6IGZ1bmN0aW9uKGNoYXJ0LCBhbmltYXRpb25PYmplY3QpIHtcblx0XHRcdFx0XHRcdHZhciBlYXNpbmdGdW5jdGlvbiA9IGhlbHBlcnMuZWFzaW5nLmVmZmVjdHNbYW5pbWF0aW9uT2JqZWN0LmVhc2luZ107XG5cdFx0XHRcdFx0XHR2YXIgY3VycmVudFN0ZXAgPSBhbmltYXRpb25PYmplY3QuY3VycmVudFN0ZXA7XG5cdFx0XHRcdFx0XHR2YXIgc3RlcERlY2ltYWwgPSBjdXJyZW50U3RlcCAvIGFuaW1hdGlvbk9iamVjdC5udW1TdGVwcztcblxuXHRcdFx0XHRcdFx0Y2hhcnQuZHJhdyhlYXNpbmdGdW5jdGlvbihzdGVwRGVjaW1hbCksIHN0ZXBEZWNpbWFsLCBjdXJyZW50U3RlcCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdG9uQW5pbWF0aW9uUHJvZ3Jlc3M6IGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcyxcblx0XHRcdFx0XHRvbkFuaW1hdGlvbkNvbXBsZXRlOiBvbkNvbXBsZXRlXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdENoYXJ0LmFuaW1hdGlvblNlcnZpY2UuYWRkQW5pbWF0aW9uKG1lLCBhbmltYXRpb24sIGR1cmF0aW9uLCBsYXp5KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLmRyYXcoKTtcblxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM3ODFcblx0XHRcdFx0b25Db21wbGV0ZShuZXcgQ2hhcnQuQW5pbWF0aW9uKHtudW1TdGVwczogMCwgY2hhcnQ6IG1lfSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWU7XG5cdFx0fSxcblxuXHRcdGRyYXc6IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRtZS5jbGVhcigpO1xuXG5cdFx0XHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKGVhc2luZ1ZhbHVlKSkge1xuXHRcdFx0XHRlYXNpbmdWYWx1ZSA9IDE7XG5cdFx0XHR9XG5cblx0XHRcdG1lLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEcmF3JywgW2Vhc2luZ1ZhbHVlXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRHJhdyBhbGwgdGhlIHNjYWxlc1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0Ym94LmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHRcdH0sIG1lKTtcblxuXHRcdFx0aWYgKG1lLnNjYWxlKSB7XG5cdFx0XHRcdG1lLnNjYWxlLmRyYXcoKTtcblx0XHRcdH1cblxuXHRcdFx0bWUuZHJhd0RhdGFzZXRzKGVhc2luZ1ZhbHVlKTtcblxuXHRcdFx0Ly8gRmluYWxseSBkcmF3IHRoZSB0b29sdGlwXG5cdFx0XHRtZS50b29sdGlwLmRyYXcoKTtcblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRyYXcnLCBbZWFzaW5nVmFsdWVdKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0cmFuc2l0aW9uOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSAobWUuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGlmIChtZS5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdFx0bWUuZ2V0RGF0YXNldE1ldGEoaSkuY29udHJvbGxlci50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZS50b29sdGlwLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBEcmF3cyBhbGwgZGF0YXNldHMgdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXRzRHJhd2Bcblx0XHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0c0RyYXdgLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZHJhd0RhdGFzZXRzOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0aWYgKHBsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRGF0YXNldHNEcmF3JywgW2Vhc2luZ1ZhbHVlXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRHJhdyBkYXRhc2V0cyByZXZlcnNlZCB0byBzdXBwb3J0IHByb3BlciBsaW5lIHN0YWNraW5nXG5cdFx0XHRmb3IgKHZhciBpID0gKG1lLmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdFx0XHRcdGlmIChtZS5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG5cdFx0XHRcdFx0bWUuZHJhd0RhdGFzZXQoaSwgZWFzaW5nVmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0c0RyYXcnLCBbZWFzaW5nVmFsdWVdKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRHJhd3MgZGF0YXNldCBhdCBpbmRleCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldERyYXdgXG5cdFx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyRGF0YXNldERyYXdgLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZHJhd0RhdGFzZXQ6IGZ1bmN0aW9uKGluZGV4LCBlYXNpbmdWYWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXHRcdFx0dmFyIGFyZ3MgPSB7XG5cdFx0XHRcdG1ldGE6IG1ldGEsXG5cdFx0XHRcdGluZGV4OiBpbmRleCxcblx0XHRcdFx0ZWFzaW5nVmFsdWU6IGVhc2luZ1ZhbHVlXG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0RHJhdycsIFthcmdzXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bWV0YS5jb250cm9sbGVyLmRyYXcoZWFzaW5nVmFsdWUpO1xuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldERyYXcnLCBbYXJnc10pO1xuXHRcdH0sXG5cblx0XHQvLyBHZXQgdGhlIHNpbmdsZSBlbGVtZW50IHRoYXQgd2FzIGNsaWNrZWQgb25cblx0XHQvLyBAcmV0dXJuIDogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRhdGFzZXQgaW5kZXggYW5kIGVsZW1lbnQgaW5kZXggb2YgdGhlIG1hdGNoaW5nIGVsZW1lbnQuIEFsc28gY29udGFpbnMgdGhlIHJlY3RhbmdsZSB0aGF0IHdhcyBkcmF3XG5cdFx0Z2V0RWxlbWVudEF0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHJldHVybiBJbnRlcmFjdGlvbi5tb2Rlcy5zaW5nbGUodGhpcywgZSk7XG5cdFx0fSxcblxuXHRcdGdldEVsZW1lbnRzQXRFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdFx0cmV0dXJuIEludGVyYWN0aW9uLm1vZGVzLmxhYmVsKHRoaXMsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0XHR9LFxuXG5cdFx0Z2V0RWxlbWVudHNBdFhBeGlzOiBmdW5jdGlvbihlKSB7XG5cdFx0XHRyZXR1cm4gSW50ZXJhY3Rpb24ubW9kZXNbJ3gtYXhpcyddKHRoaXMsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0XHR9LFxuXG5cdFx0Z2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZTogZnVuY3Rpb24oZSwgbW9kZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuXHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH0sXG5cblx0XHRnZXREYXRhc2V0QXRFdmVudDogZnVuY3Rpb24oZSkge1xuXHRcdFx0cmV0dXJuIEludGVyYWN0aW9uLm1vZGVzLmRhdGFzZXQodGhpcywgZSwge2ludGVyc2VjdDogdHJ1ZX0pO1xuXHRcdH0sXG5cblx0XHRnZXREYXRhc2V0TWV0YTogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG5cdFx0XHRpZiAoIWRhdGFzZXQuX21ldGEpIHtcblx0XHRcdFx0ZGF0YXNldC5fbWV0YSA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWV0YSA9IGRhdGFzZXQuX21ldGFbbWUuaWRdO1xuXHRcdFx0aWYgKCFtZXRhKSB7XG5cdFx0XHRcdG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXSA9IHtcblx0XHRcdFx0XHR0eXBlOiBudWxsLFxuXHRcdFx0XHRcdGRhdGE6IFtdLFxuXHRcdFx0XHRcdGRhdGFzZXQ6IG51bGwsXG5cdFx0XHRcdFx0Y29udHJvbGxlcjogbnVsbCxcblx0XHRcdFx0XHRoaWRkZW46IG51bGwsXHRcdFx0Ly8gU2VlIGlzRGF0YXNldFZpc2libGUoKSBjb21tZW50XG5cdFx0XHRcdFx0eEF4aXNJRDogbnVsbCxcblx0XHRcdFx0XHR5QXhpc0lEOiBudWxsXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtZXRhO1xuXHRcdH0sXG5cblx0XHRnZXRWaXNpYmxlRGF0YXNldENvdW50OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjb3VudCA9IDA7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aWYgKHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0aXNEYXRhc2V0VmlzaWJsZTogZnVuY3Rpb24oZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblxuXHRcdFx0Ly8gbWV0YS5oaWRkZW4gaXMgYSBwZXIgY2hhcnQgZGF0YXNldCBoaWRkZW4gZmxhZyBvdmVycmlkZSB3aXRoIDMgc3RhdGVzOiBpZiB0cnVlIG9yIGZhbHNlLFxuXHRcdFx0Ly8gdGhlIGRhdGFzZXQuaGlkZGVuIHZhbHVlIGlzIGlnbm9yZWQsIGVsc2UgaWYgbnVsbCwgdGhlIGRhdGFzZXQgaGlkZGVuIHN0YXRlIGlzIHJldHVybmVkLlxuXHRcdFx0cmV0dXJuIHR5cGVvZiBtZXRhLmhpZGRlbiA9PT0gJ2Jvb2xlYW4nID8gIW1ldGEuaGlkZGVuIDogIXRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmhpZGRlbjtcblx0XHR9LFxuXG5cdFx0Z2VuZXJhdGVMZWdlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5sZWdlbmRDYWxsYmFjayh0aGlzKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRkZXN0cm95RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIGlkID0gdGhpcy5pZDtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG5cdFx0XHR2YXIgbWV0YSA9IGRhdGFzZXQuX21ldGEgJiYgZGF0YXNldC5fbWV0YVtpZF07XG5cblx0XHRcdGlmIChtZXRhKSB7XG5cdFx0XHRcdG1ldGEuY29udHJvbGxlci5kZXN0cm95KCk7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhc2V0Ll9tZXRhW2lkXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZGVzdHJveTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNhbnZhcyA9IG1lLmNhbnZhcztcblx0XHRcdHZhciBpLCBpbGVuO1xuXG5cdFx0XHRtZS5zdG9wKCk7XG5cblx0XHRcdC8vIGRhdGFzZXQgY29udHJvbGxlcnMgbmVlZCB0byBjbGVhbnVwIGFzc29jaWF0ZWQgZGF0YVxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1lLmRlc3Ryb3lEYXRhc2V0TWV0YShpKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNhbnZhcykge1xuXHRcdFx0XHRtZS51bmJpbmRFdmVudHMoKTtcblx0XHRcdFx0aGVscGVycy5jYW52YXMuY2xlYXIobWUpO1xuXHRcdFx0XHRwbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChtZS5jdHgpO1xuXHRcdFx0XHRtZS5jYW52YXMgPSBudWxsO1xuXHRcdFx0XHRtZS5jdHggPSBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2Rlc3Ryb3knKTtcblxuXHRcdFx0ZGVsZXRlIENoYXJ0Lmluc3RhbmNlc1ttZS5pZF07XG5cdFx0fSxcblxuXHRcdHRvQmFzZTY0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTC5hcHBseSh0aGlzLmNhbnZhcywgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0aW5pdFRvb2xUaXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdG1lLnRvb2x0aXAgPSBuZXcgQ2hhcnQuVG9vbHRpcCh7XG5cdFx0XHRcdF9jaGFydDogbWUsXG5cdFx0XHRcdF9jaGFydEluc3RhbmNlOiBtZSwgLy8gZGVwcmVjYXRlZCwgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRfZGF0YTogbWUuZGF0YSxcblx0XHRcdFx0X29wdGlvbnM6IG1lLm9wdGlvbnMudG9vbHRpcHNcblx0XHRcdH0sIG1lKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRiaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycyA9IHt9O1xuXHRcdFx0dmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLmV2ZW50SGFuZGxlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdH07XG5cblx0XHRcdGhlbHBlcnMuZWFjaChtZS5vcHRpb25zLmV2ZW50cywgZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKG1lLCB0eXBlLCBsaXN0ZW5lcik7XG5cdFx0XHRcdGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEVsZW1lbnRzIHVzZWQgdG8gZGV0ZWN0IHNpemUgY2hhbmdlIHNob3VsZCBub3QgYmUgaW5qZWN0ZWQgZm9yIG5vbiByZXNwb25zaXZlIGNoYXJ0cy5cblx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjIxMFxuXHRcdFx0aWYgKG1lLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuXHRcdFx0XHRsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdG1lLnJlc2l6ZSgpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIobWUsICdyZXNpemUnLCBsaXN0ZW5lcik7XG5cdFx0XHRcdGxpc3RlbmVycy5yZXNpemUgPSBsaXN0ZW5lcjtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR1bmJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBsaXN0ZW5lcnMgPSBtZS5fbGlzdGVuZXJzO1xuXHRcdFx0aWYgKCFsaXN0ZW5lcnMpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgbWUuX2xpc3RlbmVycztcblx0XHRcdGhlbHBlcnMuZWFjaChsaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyLCB0eXBlKSB7XG5cdFx0XHRcdHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIobWUsIHR5cGUsIGxpc3RlbmVyKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50cywgbW9kZSwgZW5hYmxlZCkge1xuXHRcdFx0dmFyIG1ldGhvZCA9IGVuYWJsZWQgPyAnc2V0SG92ZXJTdHlsZScgOiAncmVtb3ZlSG92ZXJTdHlsZSc7XG5cdFx0XHR2YXIgZWxlbWVudCwgaSwgaWxlbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cdFx0XHRcdGlmIChlbGVtZW50KSB7XG5cdFx0XHRcdFx0dGhpcy5nZXREYXRhc2V0TWV0YShlbGVtZW50Ll9kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXJbbWV0aG9kXShlbGVtZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGV2ZW50SGFuZGxlcjogZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciB0b29sdGlwID0gbWUudG9vbHRpcDtcblxuXHRcdFx0aWYgKHBsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRXZlbnQnLCBbZV0pID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1ZmZlciBhbnkgdXBkYXRlIGNhbGxzIHNvIHRoYXQgcmVuZGVycyBkbyBub3Qgb2NjdXJcblx0XHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IHRydWU7XG5cdFx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuXHRcdFx0dmFyIGNoYW5nZWQgPSBtZS5oYW5kbGVFdmVudChlKTtcblx0XHRcdGNoYW5nZWQgfD0gdG9vbHRpcCAmJiB0b29sdGlwLmhhbmRsZUV2ZW50KGUpO1xuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRXZlbnQnLCBbZV0pO1xuXG5cdFx0XHR2YXIgYnVmZmVyZWRSZXF1ZXN0ID0gbWUuX2J1ZmZlcmVkUmVxdWVzdDtcblx0XHRcdGlmIChidWZmZXJlZFJlcXVlc3QpIHtcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhbiB1cGRhdGUgdGhhdCB3YXMgdHJpZ2dlcmVkLCB3ZSBuZWVkIHRvIGRvIGEgbm9ybWFsIHJlbmRlclxuXHRcdFx0XHRtZS5yZW5kZXIoYnVmZmVyZWRSZXF1ZXN0KTtcblx0XHRcdH0gZWxzZSBpZiAoY2hhbmdlZCAmJiAhbWUuYW5pbWF0aW5nKSB7XG5cdFx0XHRcdC8vIElmIGVudGVyaW5nLCBsZWF2aW5nLCBvciBjaGFuZ2luZyBlbGVtZW50cywgYW5pbWF0ZSB0aGUgY2hhbmdlIHZpYSBwaXZvdFxuXHRcdFx0XHRtZS5zdG9wKCk7XG5cblx0XHRcdFx0Ly8gV2Ugb25seSBuZWVkIHRvIHJlbmRlciBhdCB0aGlzIHBvaW50LiBVcGRhdGluZyB3aWxsIGNhdXNlIHNjYWxlcyB0byBiZVxuXHRcdFx0XHQvLyByZWNvbXB1dGVkIGdlbmVyYXRpbmcgZmxpY2tlciAmIHVzaW5nIG1vcmUgbWVtb3J5IHRoYW4gbmVjZXNzYXJ5LlxuXHRcdFx0XHRtZS5yZW5kZXIobWUub3B0aW9ucy5ob3Zlci5hbmltYXRpb25EdXJhdGlvbiwgdHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdFx0bWUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cblx0XHRcdHJldHVybiBtZTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgdGhlIGV2ZW50IHRvIGhhbmRsZVxuXHRcdCAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIGNoYXJ0IG5lZWRzIHRvIHJlLXJlbmRlclxuXHRcdCAqL1xuXHRcdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zIHx8IHt9O1xuXHRcdFx0dmFyIGhvdmVyT3B0aW9ucyA9IG9wdGlvbnMuaG92ZXI7XG5cdFx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRtZS5sYXN0QWN0aXZlID0gbWUubGFzdEFjdGl2ZSB8fCBbXTtcblxuXHRcdFx0Ly8gRmluZCBBY3RpdmUgRWxlbWVudHMgZm9yIGhvdmVyIGFuZCB0b29sdGlwc1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0XHRtZS5hY3RpdmUgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLmFjdGl2ZSA9IG1lLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgaG92ZXJPcHRpb25zLm1vZGUsIGhvdmVyT3B0aW9ucyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBvbkhvdmVyIGhvb2tcblx0XHRcdC8vIE5lZWQgdG8gY2FsbCB3aXRoIG5hdGl2ZSBldmVudCBoZXJlIHRvIG5vdCBicmVhayBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0aGVscGVycy5jYWxsYmFjayhvcHRpb25zLm9uSG92ZXIgfHwgb3B0aW9ucy5ob3Zlci5vbkhvdmVyLCBbZS5uYXRpdmUsIG1lLmFjdGl2ZV0sIG1lKTtcblxuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRpZiAob3B0aW9ucy5vbkNsaWNrKSB7XG5cdFx0XHRcdFx0Ly8gVXNlIGUubmF0aXZlIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdFx0b3B0aW9ucy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBtZS5hY3RpdmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBzdHlsaW5nIGZvciBsYXN0IGFjdGl2ZSAoZXZlbiBpZiBpdCBtYXkgc3RpbGwgYmUgYWN0aXZlKVxuXHRcdFx0aWYgKG1lLmxhc3RBY3RpdmUubGVuZ3RoKSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUhvdmVyU3R5bGUobWUubGFzdEFjdGl2ZSwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnVpbHQgaW4gaG92ZXIgc3R5bGluZ1xuXHRcdFx0aWYgKG1lLmFjdGl2ZS5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcblx0XHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5hY3RpdmUsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Y2hhbmdlZCA9ICFoZWxwZXJzLmFycmF5RXF1YWxzKG1lLmFjdGl2ZSwgbWUubGFzdEFjdGl2ZSk7XG5cblx0XHRcdC8vIFJlbWVtYmVyIExhc3QgQWN0aXZlc1xuXHRcdFx0bWUubGFzdEFjdGl2ZSA9IG1lLmFjdGl2ZTtcblxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydCBpbnN0ZWFkLlxuXHQgKiBAY2xhc3MgQ2hhcnQuQ29udHJvbGxlclxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdENoYXJ0LkNvbnRyb2xsZXIgPSBDaGFydDtcbn07XG5cbn0se1wiLi4vaGVscGVycy9pbmRleFwiOjM5LFwiLi4vcGxhdGZvcm1zL3BsYXRmb3JtXCI6NDIsXCIuL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4vY29yZS5pbnRlcmFjdGlvblwiOjIyfV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdHZhciBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcblxuXHQvKipcblx0ICogSG9va3MgdGhlIGFycmF5IG1ldGhvZHMgdGhhdCBhZGQgb3IgcmVtb3ZlIHZhbHVlcyAoJ3B1c2gnLCBwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJyxcblx0ICogJ3Vuc2hpZnQnKSBhbmQgbm90aWZ5IHRoZSBsaXN0ZW5lciBBRlRFUiB0aGUgYXJyYXkgaGFzIGJlZW4gYWx0ZXJlZC4gTGlzdGVuZXJzIGFyZVxuXHQgKiBjYWxsZWQgb24gdGhlICdvbkRhdGEqJyBjYWxsYmFja3MgKGUuZy4gb25EYXRhUHVzaCwgZXRjLikgd2l0aCBzYW1lIGFyZ3VtZW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuXHRcdGlmIChhcnJheS5fY2hhcnRqcykge1xuXHRcdFx0YXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZToge1xuXHRcdFx0XHRsaXN0ZW5lcnM6IFtsaXN0ZW5lcl1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFycmF5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHR2YXIgbWV0aG9kID0gJ29uRGF0YScgKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSk7XG5cdFx0XHR2YXIgYmFzZSA9IGFycmF5W2tleV07XG5cblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdHZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0dmFyIHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG5cblx0XHRcdFx0XHRoZWxwZXJzLmVhY2goYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLCBmdW5jdGlvbihvYmplY3QpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdFx0b2JqZWN0W21ldGhvZF0uYXBwbHkob2JqZWN0LCBhcmdzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHJldHVybiByZXM7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGdpdmVuIGFycmF5IGV2ZW50IGxpc3RlbmVyIGFuZCBjbGVhbnVwIGV4dHJhIGF0dGFjaGVkIHByb3BlcnRpZXMgKHN1Y2ggYXNcblx0ICogdGhlIF9jaGFydGpzIHN0dWIgYW5kIG92ZXJyaWRkZW4gbWV0aG9kcykgaWYgYXJyYXkgZG9lc24ndCBoYXZlIGFueSBtb3JlIGxpc3RlbmVycy5cblx0ICovXG5cdGZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG5cdFx0dmFyIHN0dWIgPSBhcnJheS5fY2hhcnRqcztcblx0XHRpZiAoIXN0dWIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG5cdFx0dmFyIGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdH1cblxuXHRcdGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGFycmF5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZWxldGUgYXJyYXlba2V5XTtcblx0XHR9KTtcblxuXHRcdGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcblx0fVxuXG5cdC8vIEJhc2UgY2xhc3MgZm9yIGFsbCBkYXRhc2V0IGNvbnRyb2xsZXJzIChsaW5lLCBiYXIsIGV0Yylcblx0Q2hhcnQuRGF0YXNldENvbnRyb2xsZXIgPSBmdW5jdGlvbihjaGFydCwgZGF0YXNldEluZGV4KSB7XG5cdFx0dGhpcy5pbml0aWFsaXplKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuXHR9O1xuXG5cdGhlbHBlcnMuZXh0ZW5kKENoYXJ0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZSwge1xuXG5cdFx0LyoqXG5cdFx0ICogRWxlbWVudCB0eXBlIHVzZWQgdG8gZ2VuZXJhdGUgYSBtZXRhIGRhdGFzZXQgKGUuZy4gQ2hhcnQuZWxlbWVudC5MaW5lKS5cblx0XHQgKiBAdHlwZSB7Q2hhcnQuY29yZS5lbGVtZW50fVxuXHRcdCAqL1xuXHRcdGRhdGFzZXRFbGVtZW50VHlwZTogbnVsbCxcblxuXHRcdC8qKlxuXHRcdCAqIEVsZW1lbnQgdHlwZSB1c2VkIHRvIGdlbmVyYXRlIGEgbWV0YSBkYXRhIChlLmcuIENoYXJ0LmVsZW1lbnQuUG9pbnQpLlxuXHRcdCAqIEB0eXBlIHtDaGFydC5jb3JlLmVsZW1lbnR9XG5cdFx0ICovXG5cdFx0ZGF0YUVsZW1lbnRUeXBlOiBudWxsLFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdG1lLmNoYXJ0ID0gY2hhcnQ7XG5cdFx0XHRtZS5pbmRleCA9IGRhdGFzZXRJbmRleDtcblx0XHRcdG1lLmxpbmtTY2FsZXMoKTtcblx0XHRcdG1lLmFkZEVsZW1lbnRzKCk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZUluZGV4OiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG5cdFx0fSxcblxuXHRcdGxpbmtTY2FsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cblx0XHRcdGlmIChtZXRhLnhBeGlzSUQgPT09IG51bGwpIHtcblx0XHRcdFx0bWV0YS54QXhpc0lEID0gZGF0YXNldC54QXhpc0lEIHx8IG1lLmNoYXJ0Lm9wdGlvbnMuc2NhbGVzLnhBeGVzWzBdLmlkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1ldGEueUF4aXNJRCA9PT0gbnVsbCkge1xuXHRcdFx0XHRtZXRhLnlBeGlzSUQgPSBkYXRhc2V0LnlBeGlzSUQgfHwgbWUuY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uaWQ7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldERhdGFzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcblx0XHR9LFxuXG5cdFx0Z2V0TWV0YTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcblx0XHR9LFxuXG5cdFx0Z2V0U2NhbGVGb3JJZDogZnVuY3Rpb24oc2NhbGVJRCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuXHRcdH0sXG5cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZSh0cnVlKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9kYXRhKSB7XG5cdFx0XHRcdHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNyZWF0ZU1ldGFEYXRhc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdHlwZSA9IG1lLmRhdGFzZXRFbGVtZW50VHlwZTtcblx0XHRcdHJldHVybiB0eXBlICYmIG5ldyB0eXBlKHtcblx0XHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRjcmVhdGVNZXRhRGF0YTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdHlwZSA9IG1lLmRhdGFFbGVtZW50VHlwZTtcblx0XHRcdHJldHVybiB0eXBlICYmIG5ldyB0eXBlKHtcblx0XHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRcdF9pbmRleDogaW5kZXhcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRhZGRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgZGF0YSA9IG1lLmdldERhdGFzZXQoKS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuXHRcdFx0dmFyIGksIGlsZW47XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhRGF0YVtpXSA9IG1ldGFEYXRhW2ldIHx8IG1lLmNyZWF0ZU1ldGFEYXRhKGkpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLmRhdGFzZXQgPSBtZXRhLmRhdGFzZXQgfHwgbWUuY3JlYXRlTWV0YURhdGFzZXQoKTtcblx0XHR9LFxuXG5cdFx0YWRkRWxlbWVudEFuZFJlc2V0OiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmNyZWF0ZU1ldGFEYXRhKGluZGV4KTtcblx0XHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKGluZGV4LCAwLCBlbGVtZW50KTtcblx0XHRcdHRoaXMudXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdGJ1aWxkT3JVcGRhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuXG5cdFx0XHQvLyBJbiBvcmRlciB0byBjb3JyZWN0bHkgaGFuZGxlIGRhdGEgYWRkaXRpb24vZGVsZXRpb24gYW5pbWF0aW9uIChhbiB0aHVzIHNpbXVsYXRlXG5cdFx0XHQvLyByZWFsLXRpbWUgY2hhcnRzKSwgd2UgbmVlZCB0byBtb25pdG9yIHRoZXNlIGRhdGEgbW9kaWZpY2F0aW9ucyBhbmQgc3luY2hyb25pemVcblx0XHRcdC8vIHRoZSBpbnRlcm5hbCBtZXRhIGRhdGEgYWNjb3JkaW5nbHkuXG5cdFx0XHRpZiAobWUuX2RhdGEgIT09IGRhdGEpIHtcblx0XHRcdFx0aWYgKG1lLl9kYXRhKSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyBjYXNlIGhhcHBlbnMgd2hlbiB0aGUgdXNlciByZXBsYWNlZCB0aGUgZGF0YSBhcnJheSBpbnN0YW5jZS5cblx0XHRcdFx0XHR1bmxpc3RlbkFycmF5RXZlbnRzKG1lLl9kYXRhLCBtZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCBtZSk7XG5cdFx0XHRcdG1lLl9kYXRhID0gZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmUtc3luYyBtZXRhIGRhdGEgaW4gY2FzZSB0aGUgdXNlciByZXBsYWNlZCB0aGUgZGF0YSBhcnJheSBvciBpZiB3ZSBtaXNzZWRcblx0XHRcdC8vIGFueSB1cGRhdGVzIGFuZCBzbyBtYWtlIHN1cmUgdGhhdCB3ZSBoYW5kbGUgbnVtYmVyIG9mIGRhdGFwb2ludHMgY2hhbmdpbmcuXG5cdFx0XHRtZS5yZXN5bmNFbGVtZW50cygpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGU6IGhlbHBlcnMubm9vcCxcblxuXHRcdHRyYW5zaXRpb246IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGVsZW1lbnRzW2ldLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobWV0YS5kYXRhc2V0KSB7XG5cdFx0XHRcdG1ldGEuZGF0YXNldC50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGlmIChtZXRhLmRhdGFzZXQpIHtcblx0XHRcdFx0bWV0YS5kYXRhc2V0LmRyYXcoKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0ZWxlbWVudHNbaV0uZHJhdygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRyZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50LCBlbGVtZW50T3B0cykge1xuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZWxlbWVudC5fZGF0YXNldEluZGV4XTtcblx0XHRcdHZhciBpbmRleCA9IGVsZW1lbnQuX2luZGV4O1xuXHRcdFx0dmFyIGN1c3RvbSA9IGVsZW1lbnQuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQ7XG5cdFx0XHR2YXIgbW9kZWwgPSBlbGVtZW50Ll9tb2RlbDtcblxuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmJhY2tncm91bmRDb2xvciwgaW5kZXgsIGVsZW1lbnRPcHRzLmJhY2tncm91bmRDb2xvcik7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuYm9yZGVyQ29sb3IsIGluZGV4LCBlbGVtZW50T3B0cy5ib3JkZXJDb2xvcik7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGN1c3RvbS5ib3JkZXJXaWR0aCA/IGN1c3RvbS5ib3JkZXJXaWR0aCA6IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuYm9yZGVyV2lkdGgsIGluZGV4LCBlbGVtZW50T3B0cy5ib3JkZXJXaWR0aCk7XG5cdFx0fSxcblxuXHRcdHNldEhvdmVyU3R5bGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2VsZW1lbnQuX2RhdGFzZXRJbmRleF07XG5cdFx0XHR2YXIgaW5kZXggPSBlbGVtZW50Ll9pbmRleDtcblx0XHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXHRcdFx0dmFyIGdldEhvdmVyQ29sb3IgPSBoZWxwZXJzLmdldEhvdmVyQ29sb3I7XG5cdFx0XHR2YXIgbW9kZWwgPSBlbGVtZW50Ll9tb2RlbDtcblxuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yIDogdmFsdWVPckRlZmF1bHQoZGF0YXNldC5ob3ZlckJhY2tncm91bmRDb2xvciwgaW5kZXgsIGdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ob3ZlckJvcmRlckNvbG9yID8gY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IgOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmhvdmVyQm9yZGVyQ29sb3IsIGluZGV4LCBnZXRIb3ZlckNvbG9yKG1vZGVsLmJvcmRlckNvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoID8gY3VzdG9tLmhvdmVyQm9yZGVyV2lkdGggOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmhvdmVyQm9yZGVyV2lkdGgsIGluZGV4LCBtb2RlbC5ib3JkZXJXaWR0aCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0cmVzeW5jRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YTtcblx0XHRcdHZhciBudW1NZXRhID0gbWV0YS5kYXRhLmxlbmd0aDtcblx0XHRcdHZhciBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG5cblx0XHRcdGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuXHRcdFx0XHRtZXRhLmRhdGEuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcblx0XHRcdH0gZWxzZSBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcblx0XHRcdFx0bWUuaW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGluc2VydEVsZW1lbnRzOiBmdW5jdGlvbihzdGFydCwgY291bnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0XHR0aGlzLmFkZEVsZW1lbnRBbmRSZXNldChzdGFydCArIGkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVB1c2g6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5pbnNlcnRFbGVtZW50cyh0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVBvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmdldE1ldGEoKS5kYXRhLnBvcCgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc2hpZnQoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRvbkRhdGFTcGxpY2U6IGZ1bmN0aW9uKHN0YXJ0LCBjb3VudCkge1xuXHRcdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcblx0XHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRvbkRhdGFVbnNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoMCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQgPSBoZWxwZXJzLmluaGVyaXRzO1xufTtcblxufSx7XCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfc2V0OiBmdW5jdGlvbihzY29wZSwgdmFsdWVzKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMubWVyZ2UodGhpc1tzY29wZV0gfHwgKHRoaXNbc2NvcGVdID0ge30pLCB2YWx1ZXMpO1xuXHR9XG59O1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGNvbG9yID0gcmVxdWlyZSgnY2hhcnRqcy1jb2xvcicpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlKHN0YXJ0LCB2aWV3LCBtb2RlbCwgZWFzZSkge1xuXHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1vZGVsKTtcblx0dmFyIGksIGlsZW4sIGtleSwgYWN0dWFsLCBvcmlnaW4sIHRhcmdldCwgdHlwZSwgYzAsIGMxO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGtleSA9IGtleXNbaV07XG5cblx0XHR0YXJnZXQgPSBtb2RlbFtrZXldO1xuXG5cdFx0Ly8gaWYgYSB2YWx1ZSBpcyBhZGRlZCB0byB0aGUgbW9kZWwgYWZ0ZXIgcGl2b3QoKSBoYXMgYmVlbiBjYWxsZWQsIHRoZSB2aWV3XG5cdFx0Ly8gZG9lc24ndCBjb250YWluIGl0LCBzbyBsZXQncyBpbml0aWFsaXplIHRoZSB2aWV3IHRvIHRoZSB0YXJnZXQgdmFsdWUuXG5cdFx0aWYgKCF2aWV3Lmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdHZpZXdba2V5XSA9IHRhcmdldDtcblx0XHR9XG5cblx0XHRhY3R1YWwgPSB2aWV3W2tleV07XG5cblx0XHRpZiAoYWN0dWFsID09PSB0YXJnZXQgfHwga2V5WzBdID09PSAnXycpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGlmICghc3RhcnQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0c3RhcnRba2V5XSA9IGFjdHVhbDtcblx0XHR9XG5cblx0XHRvcmlnaW4gPSBzdGFydFtrZXldO1xuXG5cdFx0dHlwZSA9IHR5cGVvZiB0YXJnZXQ7XG5cblx0XHRpZiAodHlwZSA9PT0gdHlwZW9mIG9yaWdpbikge1xuXHRcdFx0aWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdGMwID0gY29sb3Iob3JpZ2luKTtcblx0XHRcdFx0aWYgKGMwLnZhbGlkKSB7XG5cdFx0XHRcdFx0YzEgPSBjb2xvcih0YXJnZXQpO1xuXHRcdFx0XHRcdGlmIChjMS52YWxpZCkge1xuXHRcdFx0XHRcdFx0dmlld1trZXldID0gYzEubWl4KGMwLCBlYXNlKS5yZ2JTdHJpbmcoKTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShvcmlnaW4pICYmIGlzRmluaXRlKHRhcmdldCkpIHtcblx0XHRcdFx0dmlld1trZXldID0gb3JpZ2luICsgKHRhcmdldCAtIG9yaWdpbikgKiBlYXNlO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2aWV3W2tleV0gPSB0YXJnZXQ7XG5cdH1cbn1cblxudmFyIEVsZW1lbnQgPSBmdW5jdGlvbihjb25maWd1cmF0aW9uKSB7XG5cdGhlbHBlcnMuZXh0ZW5kKHRoaXMsIGNvbmZpZ3VyYXRpb24pO1xuXHR0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5cbmhlbHBlcnMuZXh0ZW5kKEVsZW1lbnQucHJvdG90eXBlLCB7XG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5oaWRkZW4gPSBmYWxzZTtcblx0fSxcblxuXHRwaXZvdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAoIW1lLl92aWV3KSB7XG5cdFx0XHRtZS5fdmlldyA9IGhlbHBlcnMuY2xvbmUobWUuX21vZGVsKTtcblx0XHR9XG5cdFx0bWUuX3N0YXJ0ID0ge307XG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdHRyYW5zaXRpb246IGZ1bmN0aW9uKGVhc2UpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtb2RlbCA9IG1lLl9tb2RlbDtcblx0XHR2YXIgc3RhcnQgPSBtZS5fc3RhcnQ7XG5cdFx0dmFyIHZpZXcgPSBtZS5fdmlldztcblxuXHRcdC8vIE5vIGFuaW1hdGlvbiAtPiBObyBUcmFuc2l0aW9uXG5cdFx0aWYgKCFtb2RlbCB8fCBlYXNlID09PSAxKSB7XG5cdFx0XHRtZS5fdmlldyA9IG1vZGVsO1xuXHRcdFx0bWUuX3N0YXJ0ID0gbnVsbDtcblx0XHRcdHJldHVybiBtZTtcblx0XHR9XG5cblx0XHRpZiAoIXZpZXcpIHtcblx0XHRcdHZpZXcgPSBtZS5fdmlldyA9IHt9O1xuXHRcdH1cblxuXHRcdGlmICghc3RhcnQpIHtcblx0XHRcdHN0YXJ0ID0gbWUuX3N0YXJ0ID0ge307XG5cdFx0fVxuXG5cdFx0aW50ZXJwb2xhdGUoc3RhcnQsIHZpZXcsIG1vZGVsLCBlYXNlKTtcblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB0aGlzLl9tb2RlbC54LFxuXHRcdFx0eTogdGhpcy5fbW9kZWwueVxuXHRcdH07XG5cdH0sXG5cblx0aGFzVmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBoZWxwZXJzLmlzTnVtYmVyKHRoaXMuX21vZGVsLngpICYmIGhlbHBlcnMuaXNOdW1iZXIodGhpcy5fbW9kZWwueSk7XG5cdH1cbn0pO1xuXG5FbGVtZW50LmV4dGVuZCA9IGhlbHBlcnMuaW5oZXJpdHM7XG5cbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudDtcblxufSx7XCIuLi9oZWxwZXJzL2luZGV4XCI6MzksXCJjaGFydGpzLWNvbG9yXCI6NTN9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBnbG9iYWwgd2luZG93OiBmYWxzZSAqL1xuLyogZ2xvYmFsIGRvY3VtZW50OiBmYWxzZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29sb3IgPSByZXF1aXJlKCdjaGFydGpzLWNvbG9yJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Ly8gLS0gQmFzaWMganMgdXRpbGl0eSBtZXRob2RzXG5cblx0aGVscGVycy5leHRlbmQgPSBmdW5jdGlvbihiYXNlKSB7XG5cdFx0dmFyIHNldEZuID0gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0YmFzZVtrZXldID0gdmFsdWU7XG5cdFx0fTtcblx0XHRmb3IgKHZhciBpID0gMSwgaWxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdGhlbHBlcnMuZWFjaChhcmd1bWVudHNbaV0sIHNldEZuKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJhc2U7XG5cdH07XG5cblx0aGVscGVycy5jb25maWdNZXJnZSA9IGZ1bmN0aW9uKC8qIG9iamVjdHMgLi4uICovKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMubWVyZ2UoaGVscGVycy5jbG9uZShhcmd1bWVudHNbMF0pLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHtcblx0XHRcdG1lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdFx0XHR2YXIgdHZhbCA9IHRhcmdldFtrZXldIHx8IHt9O1xuXHRcdFx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0XHRcdGlmIChrZXkgPT09ICdzY2FsZXMnKSB7XG5cdFx0XHRcdFx0Ly8gc2NhbGUgY29uZmlnIG1lcmdpbmcgaXMgY29tcGxleC4gQWRkIG91ciBvd24gZnVuY3Rpb24gaGVyZSBmb3IgdGhhdFxuXHRcdFx0XHRcdHRhcmdldFtrZXldID0gaGVscGVycy5zY2FsZU1lcmdlKHR2YWwsIHN2YWwpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGtleSA9PT0gJ3NjYWxlJykge1xuXHRcdFx0XHRcdC8vIHVzZWQgaW4gcG9sYXIgYXJlYSAmIHJhZGFyIGNoYXJ0cyBzaW5jZSB0aGVyZSBpcyBvbmx5IG9uZSBzY2FsZVxuXHRcdFx0XHRcdHRhcmdldFtrZXldID0gaGVscGVycy5tZXJnZSh0dmFsLCBbQ2hhcnQuc2NhbGVTZXJ2aWNlLmdldFNjYWxlRGVmYXVsdHMoc3ZhbC50eXBlKSwgc3ZhbF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGhlbHBlcnMuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdGhlbHBlcnMuc2NhbGVNZXJnZSA9IGZ1bmN0aW9uKC8qIG9iamVjdHMgLi4uICovKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMubWVyZ2UoaGVscGVycy5jbG9uZShhcmd1bWVudHNbMF0pLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIHtcblx0XHRcdG1lcmdlcjogZnVuY3Rpb24oa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdFx0XHRpZiAoa2V5ID09PSAneEF4ZXMnIHx8IGtleSA9PT0gJ3lBeGVzJykge1xuXHRcdFx0XHRcdHZhciBzbGVuID0gc291cmNlW2tleV0ubGVuZ3RoO1xuXHRcdFx0XHRcdHZhciBpLCB0eXBlLCBzY2FsZTtcblxuXHRcdFx0XHRcdGlmICghdGFyZ2V0W2tleV0pIHtcblx0XHRcdFx0XHRcdHRhcmdldFtrZXldID0gW107XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHNsZW47ICsraSkge1xuXHRcdFx0XHRcdFx0c2NhbGUgPSBzb3VyY2Vba2V5XVtpXTtcblx0XHRcdFx0XHRcdHR5cGUgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHNjYWxlLnR5cGUsIGtleSA9PT0gJ3hBeGVzJyA/ICdjYXRlZ29yeScgOiAnbGluZWFyJyk7XG5cblx0XHRcdFx0XHRcdGlmIChpID49IHRhcmdldFtrZXldLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRba2V5XS5wdXNoKHt9KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCF0YXJnZXRba2V5XVtpXS50eXBlIHx8IChzY2FsZS50eXBlICYmIHNjYWxlLnR5cGUgIT09IHRhcmdldFtrZXldW2ldLnR5cGUpKSB7XG5cdFx0XHRcdFx0XHRcdC8vIG5ldy91bnR5cGVkIHNjYWxlIG9yIHR5cGUgY2hhbmdlZDogbGV0J3MgYXBwbHkgdGhlIG5ldyBkZWZhdWx0c1xuXHRcdFx0XHRcdFx0XHQvLyB0aGVuIG1lcmdlIHNvdXJjZSBzY2FsZSB0byBjb3JyZWN0bHkgb3ZlcndyaXRlIHRoZSBkZWZhdWx0cy5cblx0XHRcdFx0XHRcdFx0aGVscGVycy5tZXJnZSh0YXJnZXRba2V5XVtpXSwgW0NoYXJ0LnNjYWxlU2VydmljZS5nZXRTY2FsZURlZmF1bHRzKHR5cGUpLCBzY2FsZV0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gc2NhbGVzIHR5cGUgYXJlIHRoZSBzYW1lXG5cdFx0XHRcdFx0XHRcdGhlbHBlcnMubWVyZ2UodGFyZ2V0W2tleV1baV0sIHNjYWxlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGVscGVycy5fbWVyZ2VyKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0aGVscGVycy53aGVyZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGZpbHRlckNhbGxiYWNrKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShjb2xsZWN0aW9uKSAmJiBBcnJheS5wcm90b3R5cGUuZmlsdGVyKSB7XG5cdFx0XHRyZXR1cm4gY29sbGVjdGlvbi5maWx0ZXIoZmlsdGVyQ2FsbGJhY2spO1xuXHRcdH1cblx0XHR2YXIgZmlsdGVyZWQgPSBbXTtcblxuXHRcdGhlbHBlcnMuZWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soaXRlbSkpIHtcblx0XHRcdFx0ZmlsdGVyZWQucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiBmaWx0ZXJlZDtcblx0fTtcblx0aGVscGVycy5maW5kSW5kZXggPSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4ID9cblx0XHRmdW5jdGlvbihhcnJheSwgY2FsbGJhY2ssIHNjb3BlKSB7XG5cdFx0XHRyZXR1cm4gYXJyYXkuZmluZEluZGV4KGNhbGxiYWNrLCBzY29wZSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oYXJyYXksIGNhbGxiYWNrLCBzY29wZSkge1xuXHRcdFx0c2NvcGUgPSBzY29wZSA9PT0gdW5kZWZpbmVkID8gYXJyYXkgOiBzY29wZTtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGlmIChjYWxsYmFjay5jYWxsKHNjb3BlLCBhcnJheVtpXSwgaSwgYXJyYXkpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiAtMTtcblx0XHR9O1xuXHRoZWxwZXJzLmZpbmROZXh0V2hlcmUgPSBmdW5jdGlvbihhcnJheVRvU2VhcmNoLCBmaWx0ZXJDYWxsYmFjaywgc3RhcnRJbmRleCkge1xuXHRcdC8vIERlZmF1bHQgdG8gc3RhcnQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMuaXNOdWxsT3JVbmRlZihzdGFydEluZGV4KSkge1xuXHRcdFx0c3RhcnRJbmRleCA9IC0xO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gc3RhcnRJbmRleCArIDE7IGkgPCBhcnJheVRvU2VhcmNoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRoZWxwZXJzLmZpbmRQcmV2aW91c1doZXJlID0gZnVuY3Rpb24oYXJyYXlUb1NlYXJjaCwgZmlsdGVyQ2FsbGJhY2ssIHN0YXJ0SW5kZXgpIHtcblx0XHQvLyBEZWZhdWx0IHRvIGVuZCBvZiB0aGUgYXJyYXlcblx0XHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKHN0YXJ0SW5kZXgpKSB7XG5cdFx0XHRzdGFydEluZGV4ID0gYXJyYXlUb1NlYXJjaC5sZW5ndGg7XG5cdFx0fVxuXHRcdGZvciAodmFyIGkgPSBzdGFydEluZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdHZhciBjdXJyZW50SXRlbSA9IGFycmF5VG9TZWFyY2hbaV07XG5cdFx0XHRpZiAoZmlsdGVyQ2FsbGJhY2soY3VycmVudEl0ZW0pKSB7XG5cdFx0XHRcdHJldHVybiBjdXJyZW50SXRlbTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGhlbHBlcnMuaW5oZXJpdHMgPSBmdW5jdGlvbihleHRlbnNpb25zKSB7XG5cdFx0Ly8gQmFzaWMgamF2YXNjcmlwdCBpbmhlcml0YW5jZSBiYXNlZCBvbiB0aGUgbW9kZWwgY3JlYXRlZCBpbiBCYWNrYm9uZS5qc1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIENoYXJ0RWxlbWVudCA9IChleHRlbnNpb25zICYmIGV4dGVuc2lvbnMuaGFzT3duUHJvcGVydHkoJ2NvbnN0cnVjdG9yJykpID8gZXh0ZW5zaW9ucy5jb25zdHJ1Y3RvciA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fTtcblxuXHRcdHZhciBTdXJyb2dhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuY29uc3RydWN0b3IgPSBDaGFydEVsZW1lbnQ7XG5cdFx0fTtcblx0XHRTdXJyb2dhdGUucHJvdG90eXBlID0gbWUucHJvdG90eXBlO1xuXHRcdENoYXJ0RWxlbWVudC5wcm90b3R5cGUgPSBuZXcgU3Vycm9nYXRlKCk7XG5cblx0XHRDaGFydEVsZW1lbnQuZXh0ZW5kID0gaGVscGVycy5pbmhlcml0cztcblxuXHRcdGlmIChleHRlbnNpb25zKSB7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZChDaGFydEVsZW1lbnQucHJvdG90eXBlLCBleHRlbnNpb25zKTtcblx0XHR9XG5cblx0XHRDaGFydEVsZW1lbnQuX19zdXBlcl9fID0gbWUucHJvdG90eXBlO1xuXG5cdFx0cmV0dXJuIENoYXJ0RWxlbWVudDtcblx0fTtcblx0Ly8gLS0gTWF0aCBtZXRob2RzXG5cdGhlbHBlcnMuaXNOdW1iZXIgPSBmdW5jdGlvbihuKSB7XG5cdFx0cmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcblx0fTtcblx0aGVscGVycy5hbG1vc3RFcXVhbHMgPSBmdW5jdGlvbih4LCB5LCBlcHNpbG9uKSB7XG5cdFx0cmV0dXJuIE1hdGguYWJzKHggLSB5KSA8IGVwc2lsb247XG5cdH07XG5cdGhlbHBlcnMuYWxtb3N0V2hvbGUgPSBmdW5jdGlvbih4LCBlcHNpbG9uKSB7XG5cdFx0dmFyIHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuXHRcdHJldHVybiAoKChyb3VuZGVkIC0gZXBzaWxvbikgPCB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+IHgpKTtcblx0fTtcblx0aGVscGVycy5tYXggPSBmdW5jdGlvbihhcnJheSkge1xuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24obWF4LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KG1heCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1heDtcblx0XHR9LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuXHR9O1xuXHRoZWxwZXJzLm1pbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG5cdFx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihtaW4sIHZhbHVlKSB7XG5cdFx0XHRpZiAoIWlzTmFOKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gTWF0aC5taW4obWluLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWluO1xuXHRcdH0sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG5cdH07XG5cdGhlbHBlcnMuc2lnbiA9IE1hdGguc2lnbiA/XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIE1hdGguc2lnbih4KTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih4KSB7XG5cdFx0XHR4ID0gK3g7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcblx0XHRcdGlmICh4ID09PSAwIHx8IGlzTmFOKHgpKSB7XG5cdFx0XHRcdHJldHVybiB4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHggPiAwID8gMSA6IC0xO1xuXHRcdH07XG5cdGhlbHBlcnMubG9nMTAgPSBNYXRoLmxvZzEwID9cblx0XHRmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5sb2cxMCh4KTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG5cdFx0fTtcblx0aGVscGVycy50b1JhZGlhbnMgPSBmdW5jdGlvbihkZWdyZWVzKSB7XG5cdFx0cmV0dXJuIGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCk7XG5cdH07XG5cdGhlbHBlcnMudG9EZWdyZWVzID0gZnVuY3Rpb24ocmFkaWFucykge1xuXHRcdHJldHVybiByYWRpYW5zICogKDE4MCAvIE1hdGguUEkpO1xuXHR9O1xuXHQvLyBHZXRzIHRoZSBhbmdsZSBmcm9tIHZlcnRpY2FsIHVwcmlnaHQgdG8gdGhlIHBvaW50IGFib3V0IGEgY2VudHJlLlxuXHRoZWxwZXJzLmdldEFuZ2xlRnJvbVBvaW50ID0gZnVuY3Rpb24oY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcblx0XHR2YXIgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50Lng7XG5cdFx0dmFyIGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuXHRcdHZhciByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuXG5cdFx0aWYgKGFuZ2xlIDwgKC0wLjUgKiBNYXRoLlBJKSkge1xuXHRcdFx0YW5nbGUgKz0gMi4wICogTWF0aC5QSTsgLy8gbWFrZSBzdXJlIHRoZSByZXR1cm5lZCBhbmdsZSBpcyBpbiB0aGUgcmFuZ2Ugb2YgKC1QSS8yLCAzUEkvMl1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YW5nbGU6IGFuZ2xlLFxuXHRcdFx0ZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuXHRcdH07XG5cdH07XG5cdGhlbHBlcnMuZGlzdGFuY2VCZXR3ZWVuUG9pbnRzID0gZnVuY3Rpb24ocHQxLCBwdDIpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xuXHR9O1xuXHRoZWxwZXJzLmFsaWFzUGl4ZWwgPSBmdW5jdGlvbihwaXhlbFdpZHRoKSB7XG5cdFx0cmV0dXJuIChwaXhlbFdpZHRoICUgMiA9PT0gMCkgPyAwIDogMC41O1xuXHR9O1xuXHRoZWxwZXJzLnNwbGluZUN1cnZlID0gZnVuY3Rpb24oZmlyc3RQb2ludCwgbWlkZGxlUG9pbnQsIGFmdGVyUG9pbnQsIHQpIHtcblx0XHQvLyBQcm9wcyB0byBSb2IgU3BlbmNlciBhdCBzY2FsZWQgaW5ub3ZhdGlvbiBmb3IgaGlzIHBvc3Qgb24gc3BsaW5pbmcgYmV0d2VlbiBwb2ludHNcblx0XHQvLyBodHRwOi8vc2NhbGVkaW5ub3ZhdGlvbi5jb20vYW5hbHl0aWNzL3NwbGluZXMvYWJvdXRTcGxpbmVzLmh0bWxcblxuXHRcdC8vIFRoaXMgZnVuY3Rpb24gbXVzdCBhbHNvIHJlc3BlY3QgXCJza2lwcGVkXCIgcG9pbnRzXG5cblx0XHR2YXIgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG5cdFx0dmFyIGN1cnJlbnQgPSBtaWRkbGVQb2ludDtcblx0XHR2YXIgbmV4dCA9IGFmdGVyUG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogYWZ0ZXJQb2ludDtcblxuXHRcdHZhciBkMDEgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudC54IC0gcHJldmlvdXMueCwgMikgKyBNYXRoLnBvdyhjdXJyZW50LnkgLSBwcmV2aW91cy55LCAyKSk7XG5cdFx0dmFyIGQxMiA9IE1hdGguc3FydChNYXRoLnBvdyhuZXh0LnggLSBjdXJyZW50LngsIDIpICsgTWF0aC5wb3cobmV4dC55IC0gY3VycmVudC55LCAyKSk7XG5cblx0XHR2YXIgczAxID0gZDAxIC8gKGQwMSArIGQxMik7XG5cdFx0dmFyIHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuXG5cdFx0Ly8gSWYgYWxsIHBvaW50cyBhcmUgdGhlIHNhbWUsIHMwMSAmIHMwMiB3aWxsIGJlIGluZlxuXHRcdHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuXHRcdHMxMiA9IGlzTmFOKHMxMikgPyAwIDogczEyO1xuXG5cdFx0dmFyIGZhID0gdCAqIHMwMTsgLy8gc2NhbGluZyBmYWN0b3IgZm9yIHRyaWFuZ2xlIFRhXG5cdFx0dmFyIGZiID0gdCAqIHMxMjtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRwcmV2aW91czoge1xuXHRcdFx0XHR4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcblx0XHRcdFx0eTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcblx0XHRcdH0sXG5cdFx0XHRuZXh0OiB7XG5cdFx0XHRcdHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuXHRcdFx0XHR5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGhlbHBlcnMuRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuXHRoZWxwZXJzLnNwbGluZUN1cnZlTW9ub3RvbmUgPSBmdW5jdGlvbihwb2ludHMpIHtcblx0XHQvLyBUaGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgQsOpemllciBjb250cm9sIHBvaW50cyBpbiBhIHNpbWlsYXIgd2F5IHRoYW4gfHNwbGluZUN1cnZlfCxcblx0XHQvLyBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG5cdFx0Ly8gYmV0d2VlbiB0aGUgZGF0YXNldCBkaXNjcmV0ZSBwb2ludHMgZHVlIHRvIHRoZSBpbnRlcnBvbGF0aW9uLlxuXHRcdC8vIFNlZSA6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01vbm90b25lX2N1YmljX2ludGVycG9sYXRpb25cblxuXHRcdHZhciBwb2ludHNXaXRoVGFuZ2VudHMgPSAocG9pbnRzIHx8IFtdKS5tYXAoZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdG1vZGVsOiBwb2ludC5fbW9kZWwsXG5cdFx0XHRcdGRlbHRhSzogMCxcblx0XHRcdFx0bUs6IDBcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHQvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcblx0XHR2YXIgcG9pbnRzTGVuID0gcG9pbnRzV2l0aFRhbmdlbnRzLmxlbmd0aDtcblx0XHR2YXIgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudCwgcG9pbnRBZnRlcjtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcblx0XHRcdHBvaW50Q3VycmVudCA9IHBvaW50c1dpdGhUYW5nZW50c1tpXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRCZWZvcmUgPSBpID4gMCA/IHBvaW50c1dpdGhUYW5nZW50c1tpIC0gMV0gOiBudWxsO1xuXHRcdFx0cG9pbnRBZnRlciA9IGkgPCBwb2ludHNMZW4gLSAxID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXSA6IG51bGw7XG5cdFx0XHRpZiAocG9pbnRBZnRlciAmJiAhcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdHZhciBzbG9wZURlbHRhWCA9IChwb2ludEFmdGVyLm1vZGVsLnggLSBwb2ludEN1cnJlbnQubW9kZWwueCk7XG5cblx0XHRcdFx0Ly8gSW4gdGhlIGNhc2Ugb2YgdHdvIHBvaW50cyB0aGF0IGFwcGVhciBhdCB0aGUgc2FtZSB4IHBpeGVsLCBzbG9wZURlbHRhWCBpcyAwXG5cdFx0XHRcdHBvaW50Q3VycmVudC5kZWx0YUsgPSBzbG9wZURlbHRhWCAhPT0gMCA/IChwb2ludEFmdGVyLm1vZGVsLnkgLSBwb2ludEN1cnJlbnQubW9kZWwueSkgLyBzbG9wZURlbHRhWCA6IDA7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghcG9pbnRCZWZvcmUgfHwgcG9pbnRCZWZvcmUubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICghcG9pbnRBZnRlciB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRCZWZvcmUuZGVsdGFLO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnNpZ24ocG9pbnRCZWZvcmUuZGVsdGFLKSAhPT0gdGhpcy5zaWduKHBvaW50Q3VycmVudC5kZWx0YUspKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSAocG9pbnRCZWZvcmUuZGVsdGFLICsgcG9pbnRDdXJyZW50LmRlbHRhSykgLyAyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkanVzdCB0YW5nZW50cyB0byBlbnN1cmUgbW9ub3RvbmljIHByb3BlcnRpZXNcblx0XHR2YXIgYWxwaGFLLCBiZXRhSywgdGF1Sywgc3F1YXJlZE1hZ25pdHVkZTtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuIC0gMTsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRwb2ludEFmdGVyID0gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCB8fCBwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoZWxwZXJzLmFsbW9zdEVxdWFscyhwb2ludEN1cnJlbnQuZGVsdGFLLCAwLCB0aGlzLkVQU0lMT04pKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IHBvaW50QWZ0ZXIubUsgPSAwO1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0YWxwaGFLID0gcG9pbnRDdXJyZW50Lm1LIC8gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdGJldGFLID0gcG9pbnRBZnRlci5tSyAvIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0XHRzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcblx0XHRcdGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuXHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gYWxwaGFLICogdGF1SyAqIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0XHRwb2ludEFmdGVyLm1LID0gYmV0YUsgKiB0YXVLICogcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlIGNvbnRyb2wgcG9pbnRzXG5cdFx0dmFyIGRlbHRhWDtcblx0XHRmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcblx0XHRcdHBvaW50Q3VycmVudCA9IHBvaW50c1dpdGhUYW5nZW50c1tpXTtcblx0XHRcdGlmIChwb2ludEN1cnJlbnQubW9kZWwuc2tpcCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0cG9pbnRCZWZvcmUgPSBpID4gMCA/IHBvaW50c1dpdGhUYW5nZW50c1tpIC0gMV0gOiBudWxsO1xuXHRcdFx0cG9pbnRBZnRlciA9IGkgPCBwb2ludHNMZW4gLSAxID8gcG9pbnRzV2l0aFRhbmdlbnRzW2kgKyAxXSA6IG51bGw7XG5cdFx0XHRpZiAocG9pbnRCZWZvcmUgJiYgIXBvaW50QmVmb3JlLm1vZGVsLnNraXApIHtcblx0XHRcdFx0ZGVsdGFYID0gKHBvaW50Q3VycmVudC5tb2RlbC54IC0gcG9pbnRCZWZvcmUubW9kZWwueCkgLyAzO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gcG9pbnRDdXJyZW50Lm1vZGVsLnggLSBkZWx0YVg7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBwb2ludEN1cnJlbnQubW9kZWwueSAtIGRlbHRhWCAqIHBvaW50Q3VycmVudC5tSztcblx0XHRcdH1cblx0XHRcdGlmIChwb2ludEFmdGVyICYmICFwb2ludEFmdGVyLm1vZGVsLnNraXApIHtcblx0XHRcdFx0ZGVsdGFYID0gKHBvaW50QWZ0ZXIubW9kZWwueCAtIHBvaW50Q3VycmVudC5tb2RlbC54KSAvIDM7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IHBvaW50Q3VycmVudC5tb2RlbC54ICsgZGVsdGFYO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50TmV4dFkgPSBwb2ludEN1cnJlbnQubW9kZWwueSArIGRlbHRhWCAqIHBvaW50Q3VycmVudC5tSztcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGhlbHBlcnMubmV4dEl0ZW0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBpbmRleCwgbG9vcCkge1xuXHRcdGlmIChsb29wKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggPj0gY29sbGVjdGlvbi5sZW5ndGggLSAxID8gY29sbGVjdGlvblswXSA6IGNvbGxlY3Rpb25baW5kZXggKyAxXTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4ID49IGNvbGxlY3Rpb24ubGVuZ3RoIC0gMSA/IGNvbGxlY3Rpb25bY29sbGVjdGlvbi5sZW5ndGggLSAxXSA6IGNvbGxlY3Rpb25baW5kZXggKyAxXTtcblx0fTtcblx0aGVscGVycy5wcmV2aW91c0l0ZW0gPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBpbmRleCwgbG9vcCkge1xuXHRcdGlmIChsb29wKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggPD0gMCA/IGNvbGxlY3Rpb25bY29sbGVjdGlvbi5sZW5ndGggLSAxXSA6IGNvbGxlY3Rpb25baW5kZXggLSAxXTtcblx0XHR9XG5cdFx0cmV0dXJuIGluZGV4IDw9IDAgPyBjb2xsZWN0aW9uWzBdIDogY29sbGVjdGlvbltpbmRleCAtIDFdO1xuXHR9O1xuXHQvLyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgbmljZSBudW1iZXIgYWxnb3JpdGhtIHVzZWQgaW4gZGV0ZXJtaW5pbmcgd2hlcmUgYXhpcyBsYWJlbHMgd2lsbCBnb1xuXHRoZWxwZXJzLm5pY2VOdW0gPSBmdW5jdGlvbihyYW5nZSwgcm91bmQpIHtcblx0XHR2YXIgZXhwb25lbnQgPSBNYXRoLmZsb29yKGhlbHBlcnMubG9nMTAocmFuZ2UpKTtcblx0XHR2YXIgZnJhY3Rpb24gPSByYW5nZSAvIE1hdGgucG93KDEwLCBleHBvbmVudCk7XG5cdFx0dmFyIG5pY2VGcmFjdGlvbjtcblxuXHRcdGlmIChyb3VuZCkge1xuXHRcdFx0aWYgKGZyYWN0aW9uIDwgMS41KSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDE7XG5cdFx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDwgMykge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAyO1xuXHRcdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8IDcpIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gNTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDEwO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPD0gMS4wKSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSAxO1xuXHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPD0gMikge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gMjtcblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDUpIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDEwO1xuXHRcdH1cblxuXHRcdHJldHVybiBuaWNlRnJhY3Rpb24gKiBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuXHR9O1xuXHQvLyBSZXF1ZXN0IGFuaW1hdGlvbiBwb2x5ZmlsbCAtIGh0dHA6Ly93d3cucGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xuXHRoZWxwZXJzLnJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdH07XG5cdFx0fVxuXHRcdHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHR3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHR3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG5cdFx0XHRmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdFx0XHRyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG5cdFx0XHR9O1xuXHR9KCkpO1xuXHQvLyAtLSBET00gbWV0aG9kc1xuXHRoZWxwZXJzLmdldFJlbGF0aXZlUG9zaXRpb24gPSBmdW5jdGlvbihldnQsIGNoYXJ0KSB7XG5cdFx0dmFyIG1vdXNlWCwgbW91c2VZO1xuXHRcdHZhciBlID0gZXZ0Lm9yaWdpbmFsRXZlbnQgfHwgZXZ0O1xuXHRcdHZhciBjYW52YXMgPSBldnQuY3VycmVudFRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcblx0XHR2YXIgYm91bmRpbmdSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0dmFyIHRvdWNoZXMgPSBlLnRvdWNoZXM7XG5cdFx0aWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtb3VzZVggPSB0b3VjaGVzWzBdLmNsaWVudFg7XG5cdFx0XHRtb3VzZVkgPSB0b3VjaGVzWzBdLmNsaWVudFk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0bW91c2VYID0gZS5jbGllbnRYO1xuXHRcdFx0bW91c2VZID0gZS5jbGllbnRZO1xuXHRcdH1cblxuXHRcdC8vIFNjYWxlIG1vdXNlIGNvb3JkaW5hdGVzIGludG8gY2FudmFzIGNvb3JkaW5hdGVzXG5cdFx0Ly8gYnkgZm9sbG93aW5nIHRoZSBwYXR0ZXJuIGxhaWQgb3V0IGJ5ICdqZXJyeWonIGluIHRoZSBjb21tZW50cyBvZlxuXHRcdC8vIGh0dHA6Ly93d3cuaHRtbDVjYW52YXN0dXRvcmlhbHMuY29tL2FkdmFuY2VkL2h0bWw1LWNhbnZhcy1tb3VzZS1jb29yZGluYXRlcy9cblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KGhlbHBlcnMuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1sZWZ0JykpO1xuXHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChoZWxwZXJzLmdldFN0eWxlKGNhbnZhcywgJ3BhZGRpbmctdG9wJykpO1xuXHRcdHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KGhlbHBlcnMuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1yaWdodCcpKTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoaGVscGVycy5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLWJvdHRvbScpKTtcblx0XHR2YXIgd2lkdGggPSBib3VuZGluZ1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QubGVmdCAtIHBhZGRpbmdMZWZ0IC0gcGFkZGluZ1JpZ2h0O1xuXHRcdHZhciBoZWlnaHQgPSBib3VuZGluZ1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LnRvcCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuXG5cdFx0Ly8gV2UgZGl2aWRlIGJ5IHRoZSBjdXJyZW50IGRldmljZSBwaXhlbCByYXRpbywgYmVjYXVzZSB0aGUgY2FudmFzIGlzIHNjYWxlZCB1cCBieSB0aGF0IGFtb3VudCBpbiBlYWNoIGRpcmVjdGlvbi4gSG93ZXZlclxuXHRcdC8vIHRoZSBiYWNrZW5kIG1vZGVsIGlzIGluIHVuc2NhbGVkIGNvb3JkaW5hdGVzLiBTaW5jZSB3ZSBhcmUgZ29pbmcgdG8gZGVhbCB3aXRoIG91ciBtb2RlbCBjb29yZGluYXRlcywgd2UgZ28gYmFjayBoZXJlXG5cdFx0bW91c2VYID0gTWF0aC5yb3VuZCgobW91c2VYIC0gYm91bmRpbmdSZWN0LmxlZnQgLSBwYWRkaW5nTGVmdCkgLyAod2lkdGgpICogY2FudmFzLndpZHRoIC8gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuXHRcdG1vdXNlWSA9IE1hdGgucm91bmQoKG1vdXNlWSAtIGJvdW5kaW5nUmVjdC50b3AgLSBwYWRkaW5nVG9wKSAvIChoZWlnaHQpICogY2FudmFzLmhlaWdodCAvIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBtb3VzZVgsXG5cdFx0XHR5OiBtb3VzZVlcblx0XHR9O1xuXG5cdH07XG5cblx0Ly8gUHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuXHRmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG5cdFx0dmFyIHZhbHVlSW5QaXhlbHM7XG5cdFx0aWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0dmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcblxuXHRcdFx0aWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuXHRcdFx0XHQvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cblx0XHRcdFx0dmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVJblBpeGVscztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGlmIHRoZSBnaXZlbiB2YWx1ZSBjb250YWlucyBhbiBlZmZlY3RpdmUgY29uc3RyYWludC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGlzQ29uc3RyYWluZWRWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSAnbm9uZSc7XG5cdH1cblxuXHQvLyBQcml2YXRlIGhlbHBlciB0byBnZXQgYSBjb25zdHJhaW50IGRpbWVuc2lvblxuXHQvLyBAcGFyYW0gZG9tTm9kZSA6IHRoZSBub2RlIHRvIGNoZWNrIHRoZSBjb25zdHJhaW50IG9uXG5cdC8vIEBwYXJhbSBtYXhTdHlsZSA6IHRoZSBzdHlsZSB0aGF0IGRlZmluZXMgdGhlIG1heGltdW0gZm9yIHRoZSBkaXJlY3Rpb24gd2UgYXJlIHVzaW5nIChtYXhXaWR0aCAvIG1heEhlaWdodClcblx0Ly8gQHBhcmFtIHBlcmNlbnRhZ2VQcm9wZXJ0eSA6IHByb3BlcnR5IG9mIHBhcmVudCB0byB1c2Ugd2hlbiBjYWxjdWxhdGluZyB3aWR0aCBhcyBhIHBlcmNlbnRhZ2Vcblx0Ly8gQHNlZSBodHRwOi8vd3d3Lm5hdGhhbmFlbGpvbmVzLmNvbS9ibG9nLzIwMTMvcmVhZGluZy1tYXgtd2lkdGgtY3Jvc3MtYnJvd3NlclxuXHRmdW5jdGlvbiBnZXRDb25zdHJhaW50RGltZW5zaW9uKGRvbU5vZGUsIG1heFN0eWxlLCBwZXJjZW50YWdlUHJvcGVydHkpIHtcblx0XHR2YXIgdmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHZhciBwYXJlbnROb2RlID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuXHRcdHZhciBjb25zdHJhaW5lZE5vZGUgPSB2aWV3LmdldENvbXB1dGVkU3R5bGUoZG9tTm9kZSlbbWF4U3R5bGVdO1xuXHRcdHZhciBjb25zdHJhaW5lZENvbnRhaW5lciA9IHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnROb2RlKVttYXhTdHlsZV07XG5cdFx0dmFyIGhhc0NOb2RlID0gaXNDb25zdHJhaW5lZFZhbHVlKGNvbnN0cmFpbmVkTm9kZSk7XG5cdFx0dmFyIGhhc0NDb250YWluZXIgPSBpc0NvbnN0cmFpbmVkVmFsdWUoY29uc3RyYWluZWRDb250YWluZXIpO1xuXHRcdHZhciBpbmZpbml0eSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblxuXHRcdGlmIChoYXNDTm9kZSB8fCBoYXNDQ29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gTWF0aC5taW4oXG5cdFx0XHRcdGhhc0NOb2RlID8gcGFyc2VNYXhTdHlsZShjb25zdHJhaW5lZE5vZGUsIGRvbU5vZGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkgOiBpbmZpbml0eSxcblx0XHRcdFx0aGFzQ0NvbnRhaW5lciA/IHBhcnNlTWF4U3R5bGUoY29uc3RyYWluZWRDb250YWluZXIsIHBhcmVudE5vZGUsIHBlcmNlbnRhZ2VQcm9wZXJ0eSkgOiBpbmZpbml0eSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICdub25lJztcblx0fVxuXHQvLyByZXR1cm5zIE51bWJlciBvciB1bmRlZmluZWQgaWYgbm8gY29uc3RyYWludFxuXHRoZWxwZXJzLmdldENvbnN0cmFpbnRXaWR0aCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHRyZXR1cm4gZ2V0Q29uc3RyYWludERpbWVuc2lvbihkb21Ob2RlLCAnbWF4LXdpZHRoJywgJ2NsaWVudFdpZHRoJyk7XG5cdH07XG5cdC8vIHJldHVybnMgTnVtYmVyIG9yIHVuZGVmaW5lZCBpZiBubyBjb25zdHJhaW50XG5cdGhlbHBlcnMuZ2V0Q29uc3RyYWludEhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHRyZXR1cm4gZ2V0Q29uc3RyYWludERpbWVuc2lvbihkb21Ob2RlLCAnbWF4LWhlaWdodCcsICdjbGllbnRIZWlnaHQnKTtcblx0fTtcblx0aGVscGVycy5nZXRNYXhpbXVtV2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0dmFyIGNvbnRhaW5lciA9IGRvbU5vZGUucGFyZW50Tm9kZTtcblx0XHRpZiAoIWNvbnRhaW5lcikge1xuXHRcdFx0cmV0dXJuIGRvbU5vZGUuY2xpZW50V2lkdGg7XG5cdFx0fVxuXG5cdFx0dmFyIHBhZGRpbmdMZWZ0ID0gcGFyc2VJbnQoaGVscGVycy5nZXRTdHlsZShjb250YWluZXIsICdwYWRkaW5nLWxlZnQnKSwgMTApO1xuXHRcdHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUludChoZWxwZXJzLmdldFN0eWxlKGNvbnRhaW5lciwgJ3BhZGRpbmctcmlnaHQnKSwgMTApO1xuXHRcdHZhciB3ID0gY29udGFpbmVyLmNsaWVudFdpZHRoIC0gcGFkZGluZ0xlZnQgLSBwYWRkaW5nUmlnaHQ7XG5cdFx0dmFyIGN3ID0gaGVscGVycy5nZXRDb25zdHJhaW50V2lkdGgoZG9tTm9kZSk7XG5cdFx0cmV0dXJuIGlzTmFOKGN3KSA/IHcgOiBNYXRoLm1pbih3LCBjdyk7XG5cdH07XG5cdGhlbHBlcnMuZ2V0TWF4aW11bUhlaWdodCA9IGZ1bmN0aW9uKGRvbU5vZGUpIHtcblx0XHR2YXIgY29udGFpbmVyID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBwYXJzZUludChoZWxwZXJzLmdldFN0eWxlKGNvbnRhaW5lciwgJ3BhZGRpbmctdG9wJyksIDEwKTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlSW50KGhlbHBlcnMuZ2V0U3R5bGUoY29udGFpbmVyLCAncGFkZGluZy1ib3R0b20nKSwgMTApO1xuXHRcdHZhciBoID0gY29udGFpbmVyLmNsaWVudEhlaWdodCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuXHRcdHZhciBjaCA9IGhlbHBlcnMuZ2V0Q29uc3RyYWludEhlaWdodChkb21Ob2RlKTtcblx0XHRyZXR1cm4gaXNOYU4oY2gpID8gaCA6IE1hdGgubWluKGgsIGNoKTtcblx0fTtcblx0aGVscGVycy5nZXRTdHlsZSA9IGZ1bmN0aW9uKGVsLCBwcm9wZXJ0eSkge1xuXHRcdHJldHVybiBlbC5jdXJyZW50U3R5bGUgP1xuXHRcdFx0ZWwuY3VycmVudFN0eWxlW3Byb3BlcnR5XSA6XG5cdFx0XHRkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KTtcblx0fTtcblx0aGVscGVycy5yZXRpbmFTY2FsZSA9IGZ1bmN0aW9uKGNoYXJ0LCBmb3JjZVJhdGlvKSB7XG5cdFx0dmFyIHBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcblx0XHRpZiAocGl4ZWxSYXRpbyA9PT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjYW52YXMgPSBjaGFydC5jYW52YXM7XG5cdFx0dmFyIGhlaWdodCA9IGNoYXJ0LmhlaWdodDtcblx0XHR2YXIgd2lkdGggPSBjaGFydC53aWR0aDtcblxuXHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiBwaXhlbFJhdGlvO1xuXHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoICogcGl4ZWxSYXRpbztcblx0XHRjaGFydC5jdHguc2NhbGUocGl4ZWxSYXRpbywgcGl4ZWxSYXRpbyk7XG5cblx0XHQvLyBJZiBubyBzdHlsZSBoYXMgYmVlbiBzZXQgb24gdGhlIGNhbnZhcywgdGhlIHJlbmRlciBzaXplIGlzIHVzZWQgYXMgZGlzcGxheSBzaXplLFxuXHRcdC8vIG1ha2luZyB0aGUgY2hhcnQgdmlzdWFsbHkgYmlnZ2VyLCBzbyBsZXQncyBlbmZvcmNlIGl0IHRvIHRoZSBcImNvcnJlY3RcIiB2YWx1ZXMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNTc1XG5cdFx0Y2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cdFx0Y2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHR9O1xuXHQvLyAtLSBDYW52YXMgbWV0aG9kc1xuXHRoZWxwZXJzLmZvbnRTdHJpbmcgPSBmdW5jdGlvbihwaXhlbFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSkge1xuXHRcdHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG5cdH07XG5cdGhlbHBlcnMubG9uZ2VzdFRleHQgPSBmdW5jdGlvbihjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG5cdFx0Y2FjaGUgPSBjYWNoZSB8fCB7fTtcblx0XHR2YXIgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuXHRcdHZhciBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG5cblx0XHRpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuXHRcdFx0ZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcblx0XHRcdGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcblx0XHRcdGNhY2hlLmZvbnQgPSBmb250O1xuXHRcdH1cblxuXHRcdGN0eC5mb250ID0gZm9udDtcblx0XHR2YXIgbG9uZ2VzdCA9IDA7XG5cdFx0aGVscGVycy5lYWNoKGFycmF5T2ZUaGluZ3MsIGZ1bmN0aW9uKHRoaW5nKSB7XG5cdFx0XHQvLyBVbmRlZmluZWQgc3RyaW5ncyBhbmQgYXJyYXlzIHNob3VsZCBub3QgYmUgbWVhc3VyZWRcblx0XHRcdGlmICh0aGluZyAhPT0gdW5kZWZpbmVkICYmIHRoaW5nICE9PSBudWxsICYmIGhlbHBlcnMuaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcblx0XHRcdFx0bG9uZ2VzdCA9IGhlbHBlcnMubWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuXHRcdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzQXJyYXkodGhpbmcpKSB7XG5cdFx0XHRcdC8vIGlmIGl0IGlzIGFuIGFycmF5IGxldHMgbWVhc3VyZSBlYWNoIGVsZW1lbnRcblx0XHRcdFx0Ly8gdG8gZG8gbWF5YmUgc2ltcGxpZnkgdGhpcyBmdW5jdGlvbiBhIGJpdCBzbyB3ZSBjYW4gZG8gdGhpcyBtb3JlIHJlY3Vyc2l2ZWx5P1xuXHRcdFx0XHRoZWxwZXJzLmVhY2godGhpbmcsIGZ1bmN0aW9uKG5lc3RlZFRoaW5nKSB7XG5cdFx0XHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRcdFx0aWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWhlbHBlcnMuaXNBcnJheShuZXN0ZWRUaGluZykpIHtcblx0XHRcdFx0XHRcdGxvbmdlc3QgPSBoZWxwZXJzLm1lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dmFyIGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcblx0XHRpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBnY0xlbjsgaSsrKSB7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2djW2ldXTtcblx0XHRcdH1cblx0XHRcdGdjLnNwbGljZSgwLCBnY0xlbik7XG5cdFx0fVxuXHRcdHJldHVybiBsb25nZXN0O1xuXHR9O1xuXHRoZWxwZXJzLm1lYXN1cmVUZXh0ID0gZnVuY3Rpb24oY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG5cdFx0dmFyIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXTtcblx0XHRpZiAoIXRleHRXaWR0aCkge1xuXHRcdFx0dGV4dFdpZHRoID0gZGF0YVtzdHJpbmddID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG5cdFx0XHRnYy5wdXNoKHN0cmluZyk7XG5cdFx0fVxuXHRcdGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG5cdFx0XHRsb25nZXN0ID0gdGV4dFdpZHRoO1xuXHRcdH1cblx0XHRyZXR1cm4gbG9uZ2VzdDtcblx0fTtcblx0aGVscGVycy5udW1iZXJPZkxhYmVsTGluZXMgPSBmdW5jdGlvbihhcnJheU9mVGhpbmdzKSB7XG5cdFx0dmFyIG51bWJlck9mTGluZXMgPSAxO1xuXHRcdGhlbHBlcnMuZWFjaChhcnJheU9mVGhpbmdzLCBmdW5jdGlvbih0aGluZykge1xuXHRcdFx0aWYgKGhlbHBlcnMuaXNBcnJheSh0aGluZykpIHtcblx0XHRcdFx0aWYgKHRoaW5nLmxlbmd0aCA+IG51bWJlck9mTGluZXMpIHtcblx0XHRcdFx0XHRudW1iZXJPZkxpbmVzID0gdGhpbmcubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG51bWJlck9mTGluZXM7XG5cdH07XG5cblx0aGVscGVycy5jb2xvciA9ICFjb2xvciA/XG5cdFx0ZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0NvbG9yLmpzIG5vdCBmb3VuZCEnKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFsIENhbnZhc0dyYWRpZW50ICovXG5cdFx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBDYW52YXNHcmFkaWVudCkge1xuXHRcdFx0XHR2YWx1ZSA9IGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3I7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjb2xvcih2YWx1ZSk7XG5cdFx0fTtcblxuXHRoZWxwZXJzLmdldEhvdmVyQ29sb3IgPSBmdW5jdGlvbihjb2xvclZhbHVlKSB7XG5cdFx0LyogZ2xvYmFsIENhbnZhc1BhdHRlcm4gKi9cblx0XHRyZXR1cm4gKGNvbG9yVmFsdWUgaW5zdGFuY2VvZiBDYW52YXNQYXR0ZXJuKSA/XG5cdFx0XHRjb2xvclZhbHVlIDpcblx0XHRcdGhlbHBlcnMuY29sb3IoY29sb3JWYWx1ZSkuc2F0dXJhdGUoMC41KS5kYXJrZW4oMC4xKS5yZ2JTdHJpbmcoKTtcblx0fTtcbn07XG5cbn0se1wiLi4vaGVscGVycy9pbmRleFwiOjM5LFwiLi9jb3JlLmRlZmF1bHRzXCI6MTksXCJjaGFydGpzLWNvbG9yXCI6NTN9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgcmVsYXRpdmUgcG9zaXRpb24gZm9yIGFuIGV2ZW50XG4gKiBAcGFyYW0ge0V2ZW50fElFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gZ2V0IHRoZSBwb3NpdGlvbiBmb3JcbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0XG4gKiBAcmV0dXJucyB7UG9pbnR9IHRoZSBldmVudCBwb3NpdGlvblxuICovXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KSB7XG5cdGlmIChlLm5hdGl2ZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBlLngsXG5cdFx0XHR5OiBlLnlcblx0XHR9O1xuXHR9XG5cblx0cmV0dXJuIGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHRyYXZlcnNlIGFsbCBvZiB0aGUgdmlzaWJsZSBlbGVtZW50cyBpbiB0aGUgY2hhcnRcbiAqIEBwYXJhbSBjaGFydCB7Y2hhcnR9IHRoZSBjaGFydFxuICogQHBhcmFtIGhhbmRsZXIge0Z1bmN0aW9ufSB0aGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSBmb3IgZWFjaCB2aXNpYmxlIGl0ZW1cbiAqL1xuZnVuY3Rpb24gcGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGhhbmRsZXIpIHtcblx0dmFyIGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcblx0dmFyIG1ldGEsIGksIGosIGlsZW4sIGpsZW47XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGlmICghY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdGZvciAoaiA9IDAsIGpsZW4gPSBtZXRhLmRhdGEubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IG1ldGEuZGF0YVtqXTtcblx0XHRcdGlmICghZWxlbWVudC5fdmlldy5za2lwKSB7XG5cdFx0XHRcdGhhbmRsZXIoZWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgaXRlbXMgdGhhdCBpbnRlcnNlY3QgdGhlIGV2ZW50IHBvc2l0aW9uXG4gKiBAcGFyYW0gaXRlbXMge0NoYXJ0RWxlbWVudFtdfSBlbGVtZW50cyB0byBmaWx0ZXJcbiAqIEBwYXJhbSBwb3NpdGlvbiB7UG9pbnR9IHRoZSBwb2ludCB0byBiZSBuZWFyZXN0IHRvXG4gKiBAcmV0dXJuIHtDaGFydEVsZW1lbnRbXX0gdGhlIG5lYXJlc3QgaXRlbXNcbiAqL1xuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSB7XG5cdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBpdGVtcyBuZWFyZXN0IHRvIHRoZSBldmVudCBwb3NpdGlvbiBjb25zaWRlcmluZyBhbGwgdmlzaWJsZSBpdGVtcyBpbiB0ZWggY2hhcnRcbiAqIEBwYXJhbSBjaGFydCB7Q2hhcnR9IHRoZSBjaGFydCB0byBsb29rIGF0IGVsZW1lbnRzIGZyb21cbiAqIEBwYXJhbSBwb3NpdGlvbiB7UG9pbnR9IHRoZSBwb2ludCB0byBiZSBuZWFyZXN0IHRvXG4gKiBAcGFyYW0gaW50ZXJzZWN0IHtCb29sZWFufSBpZiB0cnVlLCBvbmx5IGNvbnNpZGVyIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBwb3NpdGlvblxuICogQHBhcmFtIGRpc3RhbmNlTWV0cmljIHtGdW5jdGlvbn0gZnVuY3Rpb24gdG8gcHJvdmlkZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHNcbiAqIEByZXR1cm4ge0NoYXJ0RWxlbWVudFtdfSB0aGUgbmVhcmVzdCBpdGVtc1xuICovXG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBpbnRlcnNlY3QsIGRpc3RhbmNlTWV0cmljKSB7XG5cdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0dmFyIG5lYXJlc3RJdGVtcyA9IFtdO1xuXG5cdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0aWYgKGludGVyc2VjdCAmJiAhZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQoKTtcblx0XHR2YXIgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcblxuXHRcdGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG5cdFx0XHRuZWFyZXN0SXRlbXMgPSBbZWxlbWVudF07XG5cdFx0XHRtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdH0gZWxzZSBpZiAoZGlzdGFuY2UgPT09IG1pbkRpc3RhbmNlKSB7XG5cdFx0XHQvLyBDYW4gaGF2ZSBtdWx0aXBsZSBpdGVtcyBhdCB0aGUgc2FtZSBkaXN0YW5jZSBpbiB3aGljaCBjYXNlIHdlIHNvcnQgYnkgc2l6ZVxuXHRcdFx0bmVhcmVzdEl0ZW1zLnB1c2goZWxlbWVudCk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gbmVhcmVzdEl0ZW1zO1xufVxuXG4vKipcbiAqIEdldCBhIGRpc3RhbmNlIG1ldHJpYyBmdW5jdGlvbiBmb3IgdHdvIHBvaW50cyBiYXNlZCBvbiB0aGVcbiAqIGF4aXMgbW9kZSBzZXR0aW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gYXhpcyB0aGUgYXhpcyBtb2RlLiB4fHl8eHlcbiAqL1xuZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcblx0dmFyIHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG5cdHZhciB1c2VZID0gYXhpcy5pbmRleE9mKCd5JykgIT09IC0xO1xuXG5cdHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuXHRcdHZhciBkZWx0YVggPSB1c2VYID8gTWF0aC5hYnMocHQxLnggLSBwdDIueCkgOiAwO1xuXHRcdHZhciBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuXHRcdHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiBpbmRleE1vZGUoY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdC8vIERlZmF1bHQgYXhpcyBmb3IgaW5kZXggbW9kZSBpcyAneCcgdG8gbWF0Y2ggb2xkIGJlaGF2aW91clxuXHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3gnO1xuXHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0dmFyIGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24pIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgZmFsc2UsIGRpc3RhbmNlTWV0cmljKTtcblx0dmFyIGVsZW1lbnRzID0gW107XG5cblx0aWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBtZXRhLmRhdGFbaXRlbXNbMF0uX2luZGV4XTtcblxuXHRcdFx0Ly8gZG9uJ3QgY291bnQgaXRlbXMgdGhhdCBhcmUgc2tpcHBlZCAobnVsbCBkYXRhKVxuXHRcdFx0aWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0XHRlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG4vKipcbiAqIEBpbnRlcmZhY2UgSUludGVyYWN0aW9uT3B0aW9uc1xuICovXG4vKipcbiAqIElmIHRydWUsIG9ubHkgY29uc2lkZXIgaXRlbXMgdGhhdCBpbnRlcnNlY3QgdGhlIHBvaW50XG4gKiBAbmFtZSBJSW50ZXJmYWNlT3B0aW9ucyNib29sZWFuXG4gKiBAdHlwZSBCb29sZWFuXG4gKi9cblxuLyoqXG4gKiBDb250YWlucyBpbnRlcmFjdGlvbiByZWxhdGVkIGZ1bmN0aW9uc1xuICogQG5hbWVzcGFjZSBDaGFydC5JbnRlcmFjdGlvblxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Ly8gSGVscGVyIGZ1bmN0aW9uIGZvciBkaWZmZXJlbnQgbW9kZXNcblx0bW9kZXM6IHtcblx0XHRzaW5nbGU6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdFx0XHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbWVudHM7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gZWxlbWVudHMuc2xpY2UoMCwgMSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5sYWJlbFxuXHRcdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi40LjBcblx0XHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRsYWJlbDogaW5kZXhNb2RlLFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBpdGVtcyBhdCB0aGUgc2FtZSBpbmRleC4gSWYgdGhlIG9wdGlvbnMuaW50ZXJzZWN0IHBhcmFtZXRlciBpcyB0cnVlLCB3ZSBvbmx5IHJldHVybiBpdGVtcyBpZiB3ZSBpbnRlcnNlY3Qgc29tZXRoaW5nXG5cdFx0ICogSWYgdGhlIG9wdGlvbnMuaW50ZXJzZWN0IG1vZGUgaXMgZmFsc2UsIHdlIGZpbmQgdGhlIG5lYXJlc3QgaXRlbSBhbmQgcmV0dXJuIHRoZSBpdGVtcyBhdCB0aGUgc2FtZSBpbmRleCBhcyB0aGF0IGl0ZW1cblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMuaW5kZXhcblx0XHQgKiBAc2luY2UgdjIuNC4wXG5cdFx0ICogQHBhcmFtIGNoYXJ0IHtjaGFydH0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSBlIHtFdmVudH0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSBvcHRpb25zIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIHRvIHVzZSBkdXJpbmcgaW50ZXJhY3Rpb25cblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0aW5kZXg6IGluZGV4TW9kZSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgaXRlbXMgaW4gdGhlIHNhbWUgZGF0YXNldC4gSWYgdGhlIG9wdGlvbnMuaW50ZXJzZWN0IHBhcmFtZXRlciBpcyB0cnVlLCB3ZSBvbmx5IHJldHVybiBpdGVtcyBpZiB3ZSBpbnRlcnNlY3Qgc29tZXRoaW5nXG5cdFx0ICogSWYgdGhlIG9wdGlvbnMuaW50ZXJzZWN0IGlzIGZhbHNlLCB3ZSBmaW5kIHRoZSBuZWFyZXN0IGl0ZW0gYW5kIHJldHVybiB0aGUgaXRlbXMgaW4gdGhhdCBkYXRhc2V0XG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmRhdGFzZXRcblx0XHQgKiBAcGFyYW0gY2hhcnQge2NoYXJ0fSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIGUge0V2ZW50fSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIG9wdGlvbnMge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgdG8gdXNlIGR1cmluZyBpbnRlcmFjdGlvblxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRkYXRhc2V0OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5Jztcblx0XHRcdHZhciBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhvcHRpb25zLmF4aXMpO1xuXHRcdFx0dmFyIGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24pIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgZmFsc2UsIGRpc3RhbmNlTWV0cmljKTtcblxuXHRcdFx0aWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0aXRlbXMgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpdGVtc1swXS5fZGF0YXNldEluZGV4KS5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy54LWF4aXNcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNC4wLiBVc2UgaW5kZXggbW9kZSBhbmQgaW50ZXJzZWN0ID09IHRydWVcblx0XHQgKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHQneC1heGlzJzogZnVuY3Rpb24oY2hhcnQsIGUpIHtcblx0XHRcdHJldHVybiBpbmRleE1vZGUoY2hhcnQsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUG9pbnQgbW9kZSByZXR1cm5zIGFsbCBlbGVtZW50cyB0aGF0IGhpdCB0ZXN0IGJhc2VkIG9uIHRoZSBldmVudCBwb3NpdGlvblxuXHRcdCAqIG9mIHRoZSBldmVudFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5pbnRlcnNlY3Rcblx0XHQgKiBAcGFyYW0gY2hhcnQge2NoYXJ0fSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIGUge0V2ZW50fSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHBvaW50OiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRyZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogbmVhcmVzdCBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnQgY2xvc2VzdCB0byB0aGUgcG9pbnRcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMuaW50ZXJzZWN0XG5cdFx0ICogQHBhcmFtIGNoYXJ0IHtjaGFydH0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSBlIHtFdmVudH0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSBvcHRpb25zIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHRuZWFyZXN0OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHRvcHRpb25zLmF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5Jztcblx0XHRcdHZhciBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhvcHRpb25zLmF4aXMpO1xuXHRcdFx0dmFyIG5lYXJlc3RJdGVtcyA9IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIG9wdGlvbnMuaW50ZXJzZWN0LCBkaXN0YW5jZU1ldHJpYyk7XG5cblx0XHRcdC8vIFdlIGhhdmUgbXVsdGlwbGUgaXRlbXMgYXQgdGhlIHNhbWUgZGlzdGFuY2UgZnJvbSB0aGUgZXZlbnQuIE5vdyBzb3J0IGJ5IHNtYWxsZXN0XG5cdFx0XHRpZiAobmVhcmVzdEl0ZW1zLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0bmVhcmVzdEl0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0XHRcdHZhciBzaXplQSA9IGEuZ2V0QXJlYSgpO1xuXHRcdFx0XHRcdHZhciBzaXplQiA9IGIuZ2V0QXJlYSgpO1xuXHRcdFx0XHRcdHZhciByZXQgPSBzaXplQSAtIHNpemVCO1xuXG5cdFx0XHRcdFx0aWYgKHJldCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0Ly8gaWYgZXF1YWwgc29ydCBieSBkYXRhc2V0IGluZGV4XG5cdFx0XHRcdFx0XHRyZXQgPSBhLl9kYXRhc2V0SW5kZXggLSBiLl9kYXRhc2V0SW5kZXg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IDEgaXRlbVxuXHRcdFx0cmV0dXJuIG5lYXJlc3RJdGVtcy5zbGljZSgwLCAxKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogeCBtb2RlIHJldHVybnMgdGhlIGVsZW1lbnRzIHRoYXQgaGl0LXRlc3QgYXQgdGhlIGN1cnJlbnQgeCBjb29yZGluYXRlXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLnhcblx0XHQgKiBAcGFyYW0gY2hhcnQge2NoYXJ0fSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIGUge0V2ZW50fSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIG9wdGlvbnMge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgdG8gdXNlXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdHg6IGZ1bmN0aW9uKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdFx0dmFyIGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG5cblx0XHRcdHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRcdGlmIChlbGVtZW50LmluWFJhbmdlKHBvc2l0aW9uLngpKSB7XG5cdFx0XHRcdFx0aXRlbXMucHVzaChlbGVtZW50KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdFx0XHRpbnRlcnNlY3RzSXRlbSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBJZiB3ZSB3YW50IHRvIHRyaWdnZXIgb24gYW4gaW50ZXJzZWN0IGFuZCB3ZSBkb24ndCBoYXZlIGFueSBpdGVtc1xuXHRcdFx0Ly8gdGhhdCBpbnRlcnNlY3QgdGhlIHBvc2l0aW9uLCByZXR1cm4gbm90aGluZ1xuXHRcdFx0aWYgKG9wdGlvbnMuaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuXHRcdFx0XHRpdGVtcyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiB5IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudHMgdGhhdCBoaXQtdGVzdCBhdCB0aGUgY3VycmVudCB5IGNvb3JkaW5hdGVcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueVxuXHRcdCAqIEBwYXJhbSBjaGFydCB7Y2hhcnR9IHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0gZSB7RXZlbnR9IHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0gb3B0aW9ucyB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyB0byB1c2Vcblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0eTogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0XHR2YXIgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5ZUmFuZ2UocG9zaXRpb24ueSkpIHtcblx0XHRcdFx0XHRpdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGludGVyc2VjdHNJdGVtID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIElmIHdlIHdhbnQgdG8gdHJpZ2dlciBvbiBhbiBpbnRlcnNlY3QgYW5kIHdlIGRvbid0IGhhdmUgYW55IGl0ZW1zXG5cdFx0XHQvLyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb24sIHJldHVybiBub3RoaW5nXG5cdFx0XHRpZiAob3B0aW9ucy5pbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG5cdFx0XHRcdGl0ZW1zID0gW107XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fVxuXHR9XG59O1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9jb3JlLmRlZmF1bHRzJyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cmVzcG9uc2l2ZTogdHJ1ZSxcblx0cmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uOiAwLFxuXHRtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuXHRldmVudHM6IFsnbW91c2Vtb3ZlJywgJ21vdXNlb3V0JywgJ2NsaWNrJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJ10sXG5cdGhvdmVyOiB7XG5cdFx0b25Ib3ZlcjogbnVsbCxcblx0XHRtb2RlOiAnbmVhcmVzdCcsXG5cdFx0aW50ZXJzZWN0OiB0cnVlLFxuXHRcdGFuaW1hdGlvbkR1cmF0aW9uOiA0MDBcblx0fSxcblx0b25DbGljazogbnVsbCxcblx0ZGVmYXVsdENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcblx0ZGVmYXVsdEZvbnRDb2xvcjogJyM2NjYnLFxuXHRkZWZhdWx0Rm9udEZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuXHRkZWZhdWx0Rm9udFNpemU6IDEyLFxuXHRkZWZhdWx0Rm9udFN0eWxlOiAnbm9ybWFsJyxcblx0c2hvd0xpbmVzOiB0cnVlLFxuXG5cdC8vIEVsZW1lbnQgZGVmYXVsdHMgZGVmaW5lZCBpbiBlbGVtZW50IGV4dGVuc2lvbnNcblx0ZWxlbWVudHM6IHt9LFxuXG5cdC8vIExheW91dCBvcHRpb25zIHN1Y2ggYXMgcGFkZGluZ1xuXHRsYXlvdXQ6IHtcblx0XHRwYWRkaW5nOiB7XG5cdFx0XHR0b3A6IDAsXG5cdFx0XHRyaWdodDogMCxcblx0XHRcdGJvdHRvbTogMCxcblx0XHRcdGxlZnQ6IDBcblx0XHR9XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG5cdC8vIE9jY3VweSB0aGUgZ2xvYmFsIHZhcmlhYmxlIG9mIENoYXJ0LCBhbmQgY3JlYXRlIGEgc2ltcGxlIGJhc2UgY2xhc3Ncblx0dmFyIENoYXJ0ID0gZnVuY3Rpb24oaXRlbSwgY29uZmlnKSB7XG5cdFx0dGhpcy5jb25zdHJ1Y3QoaXRlbSwgY29uZmlnKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRDaGFydC5DaGFydCA9IENoYXJ0O1xuXG5cdHJldHVybiBDaGFydDtcbn07XG5cbn0se1wiLi9jb3JlLmRlZmF1bHRzXCI6MTl9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0ZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcblx0XHRyZXR1cm4gaGVscGVycy53aGVyZShhcnJheSwgZnVuY3Rpb24odikge1xuXHRcdFx0cmV0dXJuIHYucG9zaXRpb24gPT09IHBvc2l0aW9uO1xuXHRcdH0pO1xuXHR9XG5cblx0ZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG5cdFx0YXJyYXkuZm9yRWFjaChmdW5jdGlvbih2LCBpKSB7XG5cdFx0XHR2Ll90bXBJbmRleF8gPSBpO1xuXHRcdFx0cmV0dXJuIHY7XG5cdFx0fSk7XG5cdFx0YXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIgdjAgPSByZXZlcnNlID8gYiA6IGE7XG5cdFx0XHR2YXIgdjEgPSByZXZlcnNlID8gYSA6IGI7XG5cdFx0XHRyZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgP1xuXHRcdFx0XHR2MC5fdG1wSW5kZXhfIC0gdjEuX3RtcEluZGV4XyA6XG5cdFx0XHRcdHYwLndlaWdodCAtIHYxLndlaWdodDtcblx0XHR9KTtcblx0XHRhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcblx0XHRcdGRlbGV0ZSB2Ll90bXBJbmRleF87XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQGludGVyZmFjZSBJTGF5b3V0SXRlbVxuXHQgKiBAcHJvcCB7U3RyaW5nfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSBpbiB0aGUgY2hhcnQgbGF5b3V0LiBQb3NzaWJsZSB2YWx1ZXMgYXJlXG5cdCAqICdsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCBhbmQgJ2NoYXJ0QXJlYSdcblx0ICogQHByb3Age051bWJlcn0gd2VpZ2h0IC0gVGhlIHdlaWdodCB1c2VkIHRvIHNvcnQgdGhlIGl0ZW0uIEhpZ2hlciB3ZWlnaHRzIGFyZSBmdXJ0aGVyIGF3YXkgZnJvbSB0aGUgY2hhcnQgYXJlYVxuXHQgKiBAcHJvcCB7Qm9vbGVhbn0gZnVsbFdpZHRoIC0gaWYgdHJ1ZSwgYW5kIHRoZSBpdGVtIGlzIGhvcml6b250YWwsIHRoZW4gcHVzaCB2ZXJ0aWNhbCBib3hlcyBkb3duXG5cdCAqIEBwcm9wIHtGdW5jdGlvbn0gaXNIb3Jpem9udGFsIC0gcmV0dXJucyB0cnVlIGlmIHRoZSBsYXlvdXQgaXRlbSBpcyBob3Jpem9udGFsIChpZS4gdG9wIG9yIGJvdHRvbSlcblx0ICogQHByb3Age0Z1bmN0aW9ufSB1cGRhdGUgLSBUYWtlcyB0d28gcGFyYW1ldGVyczogd2lkdGggYW5kIGhlaWdodC4gUmV0dXJucyBzaXplIG9mIGl0ZW1cblx0ICogQHByb3Age0Z1bmN0aW9ufSBnZXRQYWRkaW5nIC0gIFJldHVybnMgYW4gb2JqZWN0IHdpdGggcGFkZGluZyBvbiB0aGUgZWRnZXNcblx0ICogQHByb3Age051bWJlcn0gd2lkdGggLSBXaWR0aCBvZiBpdGVtLiBNdXN0IGJlIHZhbGlkIGFmdGVyIHVwZGF0ZSgpXG5cdCAqIEBwcm9wIHtOdW1iZXJ9IGhlaWdodCAtIEhlaWdodCBvZiBpdGVtLiBNdXN0IGJlIHZhbGlkIGFmdGVyIHVwZGF0ZSgpXG5cdCAqIEBwcm9wIHtOdW1iZXJ9IGxlZnQgLSBMZWZ0IGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcblx0ICogQHByb3Age051bWJlcn0gdG9wIC0gVG9wIGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcblx0ICogQHByb3Age051bWJlcn0gcmlnaHQgLSBSaWdodCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG5cdCAqIEBwcm9wIHtOdW1iZXJ9IGJvdHRvbSAtIEJvdHRvbSBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG5cdCAqL1xuXG5cdC8vIFRoZSBsYXlvdXQgc2VydmljZSBpcyB2ZXJ5IHNlbGYgZXhwbGFuYXRvcnkuICBJdCdzIHJlc3BvbnNpYmxlIGZvciB0aGUgbGF5b3V0IHdpdGhpbiBhIGNoYXJ0LlxuXHQvLyBTY2FsZXMsIExlZ2VuZHMgYW5kIFBsdWdpbnMgYWxsIHJlbHkgb24gdGhlIGxheW91dCBzZXJ2aWNlIGFuZCBjYW4gZWFzaWx5IHJlZ2lzdGVyIHRvIGJlIHBsYWNlZCBhbnl3aGVyZSB0aGV5IG5lZWRcblx0Ly8gSXQgaXMgdGhpcyBzZXJ2aWNlJ3MgcmVzcG9uc2liaWxpdHkgb2YgY2Fycnlpbmcgb3V0IHRoYXQgbGF5b3V0LlxuXHRDaGFydC5sYXlvdXRTZXJ2aWNlID0ge1xuXHRcdGRlZmF1bHRzOiB7fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVyIGEgYm94IHRvIGEgY2hhcnQuXG5cdFx0ICogQSBib3ggaXMgc2ltcGx5IGEgcmVmZXJlbmNlIHRvIGFuIG9iamVjdCB0aGF0IHJlcXVpcmVzIGxheW91dC4gZWcuIFNjYWxlcywgTGVnZW5kLCBUaXRsZS5cblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byB1c2Vcblx0XHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBpdGVtIC0gdGhlIGl0ZW0gdG8gYWRkIHRvIGJlIGxheWVkIG91dFxuXHRcdCAqL1xuXHRcdGFkZEJveDogZnVuY3Rpb24oY2hhcnQsIGl0ZW0pIHtcblx0XHRcdGlmICghY2hhcnQuYm94ZXMpIHtcblx0XHRcdFx0Y2hhcnQuYm94ZXMgPSBbXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5pdGlhbGl6ZSBpdGVtIHdpdGggZGVmYXVsdCB2YWx1ZXNcblx0XHRcdGl0ZW0uZnVsbFdpZHRoID0gaXRlbS5mdWxsV2lkdGggfHwgZmFsc2U7XG5cdFx0XHRpdGVtLnBvc2l0aW9uID0gaXRlbS5wb3NpdGlvbiB8fCAndG9wJztcblx0XHRcdGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcblxuXHRcdFx0Y2hhcnQuYm94ZXMucHVzaChpdGVtKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVtb3ZlIGEgbGF5b3V0SXRlbSBmcm9tIGEgY2hhcnRcblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCB0byByZW1vdmUgdGhlIGJveCBmcm9tXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IGxheW91dEl0ZW0gLSB0aGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgbGF5b3V0XG5cdFx0ICovXG5cdFx0cmVtb3ZlQm94OiBmdW5jdGlvbihjaGFydCwgbGF5b3V0SXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG5cdFx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHRcdGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFNldHMgKG9yIHVwZGF0ZXMpIG9wdGlvbnMgb24gdGhlIGdpdmVuIGBpdGVtYC5cblx0XHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydCBpbiB3aGljaCB0aGUgaXRlbSBsaXZlcyAob3Igd2lsbCBiZSBhZGRlZCB0bylcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIHRoZSBpdGVtIHRvIGNvbmZpZ3VyZSB3aXRoIHRoZSBnaXZlbiBvcHRpb25zXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgbmV3IGl0ZW0gb3B0aW9ucy5cblx0XHQgKi9cblx0XHRjb25maWd1cmU6IGZ1bmN0aW9uKGNoYXJ0LCBpdGVtLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcHJvcHMgPSBbJ2Z1bGxXaWR0aCcsICdwb3NpdGlvbicsICd3ZWlnaHQnXTtcblx0XHRcdHZhciBpbGVuID0gcHJvcHMubGVuZ3RoO1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdHByb3AgPSBwcm9wc1tpXTtcblx0XHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0XHRpdGVtW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGaXRzIGJveGVzIG9mIHRoZSBnaXZlbiBjaGFydCBpbnRvIHRoZSBnaXZlbiBzaXplIGJ5IGhhdmluZyBlYWNoIGJveCBtZWFzdXJlIGl0c2VsZlxuXHRcdCAqIHRoZW4gcnVubmluZyBhIGZpdHRpbmcgYWxnb3JpdGhtXG5cdFx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnRcblx0XHQgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggLSB0aGUgd2lkdGggdG8gZml0IGludG9cblx0XHQgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gdGhlIGhlaWdodCB0byBmaXQgaW50b1xuXHRcdCAqL1xuXHRcdHVwZGF0ZTogZnVuY3Rpb24oY2hhcnQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRcdGlmICghY2hhcnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbGF5b3V0T3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMubGF5b3V0IHx8IHt9O1xuXHRcdFx0dmFyIHBhZGRpbmcgPSBoZWxwZXJzLm9wdGlvbnMudG9QYWRkaW5nKGxheW91dE9wdGlvbnMucGFkZGluZyk7XG5cdFx0XHR2YXIgbGVmdFBhZGRpbmcgPSBwYWRkaW5nLmxlZnQ7XG5cdFx0XHR2YXIgcmlnaHRQYWRkaW5nID0gcGFkZGluZy5yaWdodDtcblx0XHRcdHZhciB0b3BQYWRkaW5nID0gcGFkZGluZy50b3A7XG5cdFx0XHR2YXIgYm90dG9tUGFkZGluZyA9IHBhZGRpbmcuYm90dG9tO1xuXG5cdFx0XHR2YXIgbGVmdEJveGVzID0gZmlsdGVyQnlQb3NpdGlvbihjaGFydC5ib3hlcywgJ2xlZnQnKTtcblx0XHRcdHZhciByaWdodEJveGVzID0gZmlsdGVyQnlQb3NpdGlvbihjaGFydC5ib3hlcywgJ3JpZ2h0Jyk7XG5cdFx0XHR2YXIgdG9wQm94ZXMgPSBmaWx0ZXJCeVBvc2l0aW9uKGNoYXJ0LmJveGVzLCAndG9wJyk7XG5cdFx0XHR2YXIgYm90dG9tQm94ZXMgPSBmaWx0ZXJCeVBvc2l0aW9uKGNoYXJ0LmJveGVzLCAnYm90dG9tJyk7XG5cdFx0XHR2YXIgY2hhcnRBcmVhQm94ZXMgPSBmaWx0ZXJCeVBvc2l0aW9uKGNoYXJ0LmJveGVzLCAnY2hhcnRBcmVhJyk7XG5cblx0XHRcdC8vIFNvcnQgYm94ZXMgYnkgd2VpZ2h0LiBBIGhpZ2hlciB3ZWlnaHQgaXMgZnVydGhlciBhd2F5IGZyb20gdGhlIGNoYXJ0IGFyZWFcblx0XHRcdHNvcnRCeVdlaWdodChsZWZ0Qm94ZXMsIHRydWUpO1xuXHRcdFx0c29ydEJ5V2VpZ2h0KHJpZ2h0Qm94ZXMsIGZhbHNlKTtcblx0XHRcdHNvcnRCeVdlaWdodCh0b3BCb3hlcywgdHJ1ZSk7XG5cdFx0XHRzb3J0QnlXZWlnaHQoYm90dG9tQm94ZXMsIGZhbHNlKTtcblxuXHRcdFx0Ly8gRXNzZW50aWFsbHkgd2Ugbm93IGhhdmUgYW55IG51bWJlciBvZiBib3hlcyBvbiBlYWNoIG9mIHRoZSA0IHNpZGVzLlxuXHRcdFx0Ly8gT3VyIGNhbnZhcyBsb29rcyBsaWtlIHRoZSBmb2xsb3dpbmcuXG5cdFx0XHQvLyBUaGUgYXJlYXMgTDEgYW5kIEwyIGFyZSB0aGUgbGVmdCBheGVzLiBSMSBpcyB0aGUgcmlnaHQgYXhpcywgVDEgaXMgdGhlIHRvcCBheGlzIGFuZFxuXHRcdFx0Ly8gQjEgaXMgdGhlIGJvdHRvbSBheGlzXG5cdFx0XHQvLyBUaGVyZSBhcmUgYWxzbyA0IHF1YWRyYW50LWxpa2UgbG9jYXRpb25zIChsZWZ0IHRvIHJpZ2h0IGluc3RlYWQgb2YgY2xvY2t3aXNlKSByZXNlcnZlZCBmb3IgY2hhcnQgb3ZlcmxheXNcblx0XHRcdC8vIFRoZXNlIGxvY2F0aW9ucyBhcmUgc2luZ2xlLWJveCBsb2NhdGlvbnMgb25seSwgd2hlbiB0cnlpbmcgdG8gcmVnaXN0ZXIgYSBjaGFydEFyZWEgbG9jYXRpb24gdGhhdCBpcyBhbHJlYWR5IHRha2VuLFxuXHRcdFx0Ly8gYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG5cdFx0XHQvL1xuXHRcdFx0Ly8gfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG5cdFx0XHQvLyB8ICAgICAgICAgICAgICAgICAgVDEgKEZ1bGwgV2lkdGgpICAgICAgICAgICAgICAgICAgIHxcblx0XHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdFx0Ly8gfCAgICB8ICAgIHwgICAgICAgICAgICAgICAgIFQyICAgICAgICAgICAgICAgICAgfCAgICB8XG5cdFx0XHQvLyB8ICAgIHwtLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLXxcblx0XHRcdC8vIHwgICAgfCAgICB8IEMxIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEMyIHwgICAgfFxuXHRcdFx0Ly8gfCAgICB8ICAgIHwtLS0tfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwtLS0tfCAgICB8XG5cdFx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHRcdC8vIHwgTDEgfCBMMiB8ICAgICAgICAgICBDaGFydEFyZWEgKEMwKSAgICAgICAgICAgIHwgUjEgfFxuXHRcdFx0Ly8gfCAgICB8ICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICB8XG5cdFx0XHQvLyB8ICAgIHwgICAgfC0tLS18ICAgICAgICAgICAgICAgICAgICAgICAgICAgfC0tLS18ICAgIHxcblx0XHRcdC8vIHwgICAgfCAgICB8IEMzIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEM0IHwgICAgfFxuXHRcdFx0Ly8gfCAgICB8LS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS18XG5cdFx0XHQvLyB8ICAgIHwgICAgfCAgICAgICAgICAgICAgICAgQjEgICAgICAgICAgICAgICAgICB8ICAgIHxcblx0XHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdFx0Ly8gfCAgICAgICAgICAgICAgICAgIEIyIChGdWxsIFdpZHRoKSAgICAgICAgICAgICAgICAgICB8XG5cdFx0XHQvLyB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcblx0XHRcdC8vXG5cdFx0XHQvLyBXaGF0IHdlIGRvIHRvIGZpbmQgdGhlIGJlc3Qgc2l6aW5nLCB3ZSBkbyB0aGUgZm9sbG93aW5nXG5cdFx0XHQvLyAxLiBEZXRlcm1pbmUgdGhlIG1pbmltdW0gc2l6ZSBvZiB0aGUgY2hhcnQgYXJlYS5cblx0XHRcdC8vIDIuIFNwbGl0IHRoZSByZW1haW5pbmcgd2lkdGggZXF1YWxseSBiZXR3ZWVuIGVhY2ggdmVydGljYWwgYXhpc1xuXHRcdFx0Ly8gMy4gU3BsaXQgdGhlIHJlbWFpbmluZyBoZWlnaHQgZXF1YWxseSBiZXR3ZWVuIGVhY2ggaG9yaXpvbnRhbCBheGlzXG5cdFx0XHQvLyA0LiBHaXZlIGVhY2ggbGF5b3V0IHRoZSBtYXhpbXVtIHNpemUgaXQgY2FuIGJlLiBUaGUgbGF5b3V0IHdpbGwgcmV0dXJuIGl0J3MgbWluaW11bSBzaXplXG5cdFx0XHQvLyA1LiBBZGp1c3QgdGhlIHNpemVzIG9mIGVhY2ggYXhpcyBiYXNlZCBvbiBpdCdzIG1pbmltdW0gcmVwb3J0ZWQgc2l6ZS5cblx0XHRcdC8vIDYuIFJlZml0IGVhY2ggYXhpc1xuXHRcdFx0Ly8gNy4gUG9zaXRpb24gZWFjaCBheGlzIGluIHRoZSBmaW5hbCBsb2NhdGlvblxuXHRcdFx0Ly8gOC4gVGVsbCB0aGUgY2hhcnQgdGhlIGZpbmFsIGxvY2F0aW9uIG9mIHRoZSBjaGFydCBhcmVhXG5cdFx0XHQvLyA5LiBUZWxsIGFueSBheGVzIHRoYXQgb3ZlcmxheSB0aGUgY2hhcnQgYXJlYSB0aGUgcG9zaXRpb25zIG9mIHRoZSBjaGFydCBhcmVhXG5cblx0XHRcdC8vIFN0ZXAgMVxuXHRcdFx0dmFyIGNoYXJ0V2lkdGggPSB3aWR0aCAtIGxlZnRQYWRkaW5nIC0gcmlnaHRQYWRkaW5nO1xuXHRcdFx0dmFyIGNoYXJ0SGVpZ2h0ID0gaGVpZ2h0IC0gdG9wUGFkZGluZyAtIGJvdHRvbVBhZGRpbmc7XG5cdFx0XHR2YXIgY2hhcnRBcmVhV2lkdGggPSBjaGFydFdpZHRoIC8gMjsgLy8gbWluIDUwJVxuXHRcdFx0dmFyIGNoYXJ0QXJlYUhlaWdodCA9IGNoYXJ0SGVpZ2h0IC8gMjsgLy8gbWluIDUwJVxuXG5cdFx0XHQvLyBTdGVwIDJcblx0XHRcdHZhciB2ZXJ0aWNhbEJveFdpZHRoID0gKHdpZHRoIC0gY2hhcnRBcmVhV2lkdGgpIC8gKGxlZnRCb3hlcy5sZW5ndGggKyByaWdodEJveGVzLmxlbmd0aCk7XG5cblx0XHRcdC8vIFN0ZXAgM1xuXHRcdFx0dmFyIGhvcml6b250YWxCb3hIZWlnaHQgPSAoaGVpZ2h0IC0gY2hhcnRBcmVhSGVpZ2h0KSAvICh0b3BCb3hlcy5sZW5ndGggKyBib3R0b21Cb3hlcy5sZW5ndGgpO1xuXG5cdFx0XHQvLyBTdGVwIDRcblx0XHRcdHZhciBtYXhDaGFydEFyZWFXaWR0aCA9IGNoYXJ0V2lkdGg7XG5cdFx0XHR2YXIgbWF4Q2hhcnRBcmVhSGVpZ2h0ID0gY2hhcnRIZWlnaHQ7XG5cdFx0XHR2YXIgbWluQm94U2l6ZXMgPSBbXTtcblxuXHRcdFx0ZnVuY3Rpb24gZ2V0TWluaW11bUJveFNpemUoYm94KSB7XG5cdFx0XHRcdHZhciBtaW5TaXplO1xuXHRcdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gYm94LmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0XHRtaW5TaXplID0gYm94LnVwZGF0ZShib3guZnVsbFdpZHRoID8gY2hhcnRXaWR0aCA6IG1heENoYXJ0QXJlYVdpZHRoLCBob3Jpem9udGFsQm94SGVpZ2h0KTtcblx0XHRcdFx0XHRtYXhDaGFydEFyZWFIZWlnaHQgLT0gbWluU2l6ZS5oZWlnaHQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWluU2l6ZSA9IGJveC51cGRhdGUodmVydGljYWxCb3hXaWR0aCwgY2hhcnRBcmVhSGVpZ2h0KTtcblx0XHRcdFx0XHRtYXhDaGFydEFyZWFXaWR0aCAtPSBtaW5TaXplLndpZHRoO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWluQm94U2l6ZXMucHVzaCh7XG5cdFx0XHRcdFx0aG9yaXpvbnRhbDogaXNIb3Jpem9udGFsLFxuXHRcdFx0XHRcdG1pblNpemU6IG1pblNpemUsXG5cdFx0XHRcdFx0Ym94OiBib3gsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLmNvbmNhdChyaWdodEJveGVzLCB0b3BCb3hlcywgYm90dG9tQm94ZXMpLCBnZXRNaW5pbXVtQm94U2l6ZSk7XG5cblx0XHRcdC8vIElmIGEgaG9yaXpvbnRhbCBib3ggaGFzIHBhZGRpbmcsIHdlIG1vdmUgdGhlIGxlZnQgYm94ZXMgb3ZlciB0byBhdm9pZCB1Z2x5IGNoYXJ0cyAoc2VlIGlzc3VlICMyNDc4KVxuXHRcdFx0dmFyIG1heEhvcml6b250YWxMZWZ0UGFkZGluZyA9IDA7XG5cdFx0XHR2YXIgbWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyA9IDA7XG5cdFx0XHR2YXIgbWF4VmVydGljYWxUb3BQYWRkaW5nID0gMDtcblx0XHRcdHZhciBtYXhWZXJ0aWNhbEJvdHRvbVBhZGRpbmcgPSAwO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godG9wQm94ZXMuY29uY2F0KGJvdHRvbUJveGVzKSwgZnVuY3Rpb24oaG9yaXpvbnRhbEJveCkge1xuXHRcdFx0XHRpZiAoaG9yaXpvbnRhbEJveC5nZXRQYWRkaW5nKSB7XG5cdFx0XHRcdFx0dmFyIGJveFBhZGRpbmcgPSBob3Jpem9udGFsQm94LmdldFBhZGRpbmcoKTtcblx0XHRcdFx0XHRtYXhIb3Jpem9udGFsTGVmdFBhZGRpbmcgPSBNYXRoLm1heChtYXhIb3Jpem9udGFsTGVmdFBhZGRpbmcsIGJveFBhZGRpbmcubGVmdCk7XG5cdFx0XHRcdFx0bWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyA9IE1hdGgubWF4KG1heEhvcml6b250YWxSaWdodFBhZGRpbmcsIGJveFBhZGRpbmcucmlnaHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGxlZnRCb3hlcy5jb25jYXQocmlnaHRCb3hlcyksIGZ1bmN0aW9uKHZlcnRpY2FsQm94KSB7XG5cdFx0XHRcdGlmICh2ZXJ0aWNhbEJveC5nZXRQYWRkaW5nKSB7XG5cdFx0XHRcdFx0dmFyIGJveFBhZGRpbmcgPSB2ZXJ0aWNhbEJveC5nZXRQYWRkaW5nKCk7XG5cdFx0XHRcdFx0bWF4VmVydGljYWxUb3BQYWRkaW5nID0gTWF0aC5tYXgobWF4VmVydGljYWxUb3BQYWRkaW5nLCBib3hQYWRkaW5nLnRvcCk7XG5cdFx0XHRcdFx0bWF4VmVydGljYWxCb3R0b21QYWRkaW5nID0gTWF0aC5tYXgobWF4VmVydGljYWxCb3R0b21QYWRkaW5nLCBib3hQYWRkaW5nLmJvdHRvbSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBtYXhDaGFydEFyZWFIZWlnaHQgYW5kIG1heENoYXJ0QXJlYVdpZHRoIGFyZSB0aGUgc2l6ZSB0aGUgY2hhcnQgYXJlYSBjb3VsZFxuXHRcdFx0Ly8gYmUgaWYgdGhlIGF4ZXMgYXJlIGRyYXduIGF0IHRoZWlyIG1pbmltdW0gc2l6ZXMuXG5cdFx0XHQvLyBTdGVwcyA1ICYgNlxuXHRcdFx0dmFyIHRvdGFsTGVmdEJveGVzV2lkdGggPSBsZWZ0UGFkZGluZztcblx0XHRcdHZhciB0b3RhbFJpZ2h0Qm94ZXNXaWR0aCA9IHJpZ2h0UGFkZGluZztcblx0XHRcdHZhciB0b3RhbFRvcEJveGVzSGVpZ2h0ID0gdG9wUGFkZGluZztcblx0XHRcdHZhciB0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ID0gYm90dG9tUGFkZGluZztcblxuXHRcdFx0Ly8gRnVuY3Rpb24gdG8gZml0IGEgYm94XG5cdFx0XHRmdW5jdGlvbiBmaXRCb3goYm94KSB7XG5cdFx0XHRcdHZhciBtaW5Cb3hTaXplID0gaGVscGVycy5maW5kTmV4dFdoZXJlKG1pbkJveFNpemVzLCBmdW5jdGlvbihtaW5Cb3gpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWluQm94LmJveCA9PT0gYm94O1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAobWluQm94U2l6ZSkge1xuXHRcdFx0XHRcdGlmIChib3guaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0XHRcdHZhciBzY2FsZU1hcmdpbiA9IHtcblx0XHRcdFx0XHRcdFx0bGVmdDogTWF0aC5tYXgodG90YWxMZWZ0Qm94ZXNXaWR0aCwgbWF4SG9yaXpvbnRhbExlZnRQYWRkaW5nKSxcblx0XHRcdFx0XHRcdFx0cmlnaHQ6IE1hdGgubWF4KHRvdGFsUmlnaHRCb3hlc1dpZHRoLCBtYXhIb3Jpem9udGFsUmlnaHRQYWRkaW5nKSxcblx0XHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0XHRib3R0b206IDBcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHVzZSBtaW4gc2l6ZSBoZXJlIGJlY2F1c2Ugb2YgbGFiZWwgcm90YXRpb24uIFdoZW4gdGhlIGxhYmVscyBhcmUgcm90YXRlZCwgdGhlaXIgcm90YXRpb24gaGlnaGx5IGRlcGVuZHNcblx0XHRcdFx0XHRcdC8vIG9uIHRoZSBtYXJnaW4uIFNvbWV0aW1lcyB0aGV5IG5lZWQgdG8gaW5jcmVhc2UgaW4gc2l6ZSBzbGlnaHRseVxuXHRcdFx0XHRcdFx0Ym94LnVwZGF0ZShib3guZnVsbFdpZHRoID8gY2hhcnRXaWR0aCA6IG1heENoYXJ0QXJlYVdpZHRoLCBjaGFydEhlaWdodCAvIDIsIHNjYWxlTWFyZ2luKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym94LnVwZGF0ZShtaW5Cb3hTaXplLm1pblNpemUud2lkdGgsIG1heENoYXJ0QXJlYUhlaWdodCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSwgYW5kIGNhbGN1bGF0ZSB0aGUgbGVmdCBhbmQgcmlnaHQgbWFyZ2lucyBmb3IgdGhlIGhvcml6b250YWwgYm94ZXNcblx0XHRcdGhlbHBlcnMuZWFjaChsZWZ0Qm94ZXMuY29uY2F0KHJpZ2h0Qm94ZXMpLCBmaXRCb3gpO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0dG90YWxMZWZ0Qm94ZXNXaWR0aCArPSBib3gud2lkdGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHR0b3RhbFJpZ2h0Qm94ZXNXaWR0aCArPSBib3gud2lkdGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBMZWZ0IGFuZCBSaWdodCBtYXJnaW5zIGZvciB0aGUgaG9yaXpvbnRhbCBib3hlc1xuXHRcdFx0aGVscGVycy5lYWNoKHRvcEJveGVzLmNvbmNhdChib3R0b21Cb3hlcyksIGZpdEJveCk7XG5cblx0XHRcdC8vIEZpZ3VyZSBvdXQgaG93IG11Y2ggbWFyZ2luIGlzIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBvZiB0aGUgdmVydGljYWwgYm94ZXNcblx0XHRcdGhlbHBlcnMuZWFjaCh0b3BCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdHRvdGFsVG9wQm94ZXNIZWlnaHQgKz0gYm94LmhlaWdodDtcblx0XHRcdH0pO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHR0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ICs9IGJveC5oZWlnaHQ7XG5cdFx0XHR9KTtcblxuXHRcdFx0ZnVuY3Rpb24gZmluYWxGaXRWZXJ0aWNhbEJveChib3gpIHtcblx0XHRcdFx0dmFyIG1pbkJveFNpemUgPSBoZWxwZXJzLmZpbmROZXh0V2hlcmUobWluQm94U2l6ZXMsIGZ1bmN0aW9uKG1pblNpemUpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWluU2l6ZS5ib3ggPT09IGJveDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0dmFyIHNjYWxlTWFyZ2luID0ge1xuXHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0cmlnaHQ6IDAsXG5cdFx0XHRcdFx0dG9wOiB0b3RhbFRvcEJveGVzSGVpZ2h0LFxuXHRcdFx0XHRcdGJvdHRvbTogdG90YWxCb3R0b21Cb3hlc0hlaWdodFxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGlmIChtaW5Cb3hTaXplKSB7XG5cdFx0XHRcdFx0Ym94LnVwZGF0ZShtaW5Cb3hTaXplLm1pblNpemUud2lkdGgsIG1heENoYXJ0QXJlYUhlaWdodCwgc2NhbGVNYXJnaW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExldCB0aGUgbGVmdCBsYXlvdXQga25vdyB0aGUgZmluYWwgbWFyZ2luXG5cdFx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLmNvbmNhdChyaWdodEJveGVzKSwgZmluYWxGaXRWZXJ0aWNhbEJveCk7XG5cblx0XHRcdC8vIFJlY2FsY3VsYXRlIGJlY2F1c2UgdGhlIHNpemUgb2YgZWFjaCBsYXlvdXQgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNsaWdodGx5IGR1ZSB0byB0aGUgbWFyZ2lucyAobGFiZWwgcm90YXRpb24gZm9yIGluc3RhbmNlKVxuXHRcdFx0dG90YWxMZWZ0Qm94ZXNXaWR0aCA9IGxlZnRQYWRkaW5nO1xuXHRcdFx0dG90YWxSaWdodEJveGVzV2lkdGggPSByaWdodFBhZGRpbmc7XG5cdFx0XHR0b3RhbFRvcEJveGVzSGVpZ2h0ID0gdG9wUGFkZGluZztcblx0XHRcdHRvdGFsQm90dG9tQm94ZXNIZWlnaHQgPSBib3R0b21QYWRkaW5nO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0dG90YWxMZWZ0Qm94ZXNXaWR0aCArPSBib3gud2lkdGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHR0b3RhbFJpZ2h0Qm94ZXNXaWR0aCArPSBib3gud2lkdGg7XG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRvcEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0dG90YWxUb3BCb3hlc0hlaWdodCArPSBib3guaGVpZ2h0O1xuXHRcdFx0fSk7XG5cdFx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHR0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ICs9IGJveC5oZWlnaHQ7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gV2UgbWF5IGJlIGFkZGluZyBzb21lIHBhZGRpbmcgdG8gYWNjb3VudCBmb3Igcm90YXRlZCB4IGF4aXMgbGFiZWxzXG5cdFx0XHR2YXIgbGVmdFBhZGRpbmdBZGRpdGlvbiA9IE1hdGgubWF4KG1heEhvcml6b250YWxMZWZ0UGFkZGluZyAtIHRvdGFsTGVmdEJveGVzV2lkdGgsIDApO1xuXHRcdFx0dG90YWxMZWZ0Qm94ZXNXaWR0aCArPSBsZWZ0UGFkZGluZ0FkZGl0aW9uO1xuXHRcdFx0dG90YWxSaWdodEJveGVzV2lkdGggKz0gTWF0aC5tYXgobWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyAtIHRvdGFsUmlnaHRCb3hlc1dpZHRoLCAwKTtcblxuXHRcdFx0dmFyIHRvcFBhZGRpbmdBZGRpdGlvbiA9IE1hdGgubWF4KG1heFZlcnRpY2FsVG9wUGFkZGluZyAtIHRvdGFsVG9wQm94ZXNIZWlnaHQsIDApO1xuXHRcdFx0dG90YWxUb3BCb3hlc0hlaWdodCArPSB0b3BQYWRkaW5nQWRkaXRpb247XG5cdFx0XHR0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ICs9IE1hdGgubWF4KG1heFZlcnRpY2FsQm90dG9tUGFkZGluZyAtIHRvdGFsQm90dG9tQm94ZXNIZWlnaHQsIDApO1xuXG5cdFx0XHQvLyBGaWd1cmUgb3V0IGlmIG91ciBjaGFydCBhcmVhIGNoYW5nZWQuIFRoaXMgd291bGQgb2NjdXIgaWYgdGhlIGRhdGFzZXQgbGF5b3V0IGxhYmVsIHJvdGF0aW9uXG5cdFx0XHQvLyBjaGFuZ2VkIGR1ZSB0byB0aGUgYXBwbGljYXRpb24gb2YgdGhlIG1hcmdpbnMgaW4gc3RlcCA2LiBTaW5jZSB3ZSBjYW4gb25seSBnZXQgYmlnZ2VyLCB0aGlzIGlzIHNhZmUgdG8gZG9cblx0XHRcdC8vIHdpdGhvdXQgY2FsbGluZyBgZml0YCBhZ2FpblxuXHRcdFx0dmFyIG5ld01heENoYXJ0QXJlYUhlaWdodCA9IGhlaWdodCAtIHRvdGFsVG9wQm94ZXNIZWlnaHQgLSB0b3RhbEJvdHRvbUJveGVzSGVpZ2h0O1xuXHRcdFx0dmFyIG5ld01heENoYXJ0QXJlYVdpZHRoID0gd2lkdGggLSB0b3RhbExlZnRCb3hlc1dpZHRoIC0gdG90YWxSaWdodEJveGVzV2lkdGg7XG5cblx0XHRcdGlmIChuZXdNYXhDaGFydEFyZWFXaWR0aCAhPT0gbWF4Q2hhcnRBcmVhV2lkdGggfHwgbmV3TWF4Q2hhcnRBcmVhSGVpZ2h0ICE9PSBtYXhDaGFydEFyZWFIZWlnaHQpIHtcblx0XHRcdFx0aGVscGVycy5lYWNoKGxlZnRCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdFx0Ym94LmhlaWdodCA9IG5ld01heENoYXJ0QXJlYUhlaWdodDtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHRcdGJveC5oZWlnaHQgPSBuZXdNYXhDaGFydEFyZWFIZWlnaHQ7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh0b3BCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdFx0aWYgKCFib3guZnVsbFdpZHRoKSB7XG5cdFx0XHRcdFx0XHRib3gud2lkdGggPSBuZXdNYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChib3R0b21Cb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdFx0aWYgKCFib3guZnVsbFdpZHRoKSB7XG5cdFx0XHRcdFx0XHRib3gud2lkdGggPSBuZXdNYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdG1heENoYXJ0QXJlYUhlaWdodCA9IG5ld01heENoYXJ0QXJlYUhlaWdodDtcblx0XHRcdFx0bWF4Q2hhcnRBcmVhV2lkdGggPSBuZXdNYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RlcCA3IC0gUG9zaXRpb24gdGhlIGJveGVzXG5cdFx0XHR2YXIgbGVmdCA9IGxlZnRQYWRkaW5nICsgbGVmdFBhZGRpbmdBZGRpdGlvbjtcblx0XHRcdHZhciB0b3AgPSB0b3BQYWRkaW5nICsgdG9wUGFkZGluZ0FkZGl0aW9uO1xuXG5cdFx0XHRmdW5jdGlvbiBwbGFjZUJveChib3gpIHtcblx0XHRcdFx0aWYgKGJveC5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRcdGJveC5sZWZ0ID0gYm94LmZ1bGxXaWR0aCA/IGxlZnRQYWRkaW5nIDogdG90YWxMZWZ0Qm94ZXNXaWR0aDtcblx0XHRcdFx0XHRib3gucmlnaHQgPSBib3guZnVsbFdpZHRoID8gd2lkdGggLSByaWdodFBhZGRpbmcgOiB0b3RhbExlZnRCb3hlc1dpZHRoICsgbWF4Q2hhcnRBcmVhV2lkdGg7XG5cdFx0XHRcdFx0Ym94LnRvcCA9IHRvcDtcblx0XHRcdFx0XHRib3guYm90dG9tID0gdG9wICsgYm94LmhlaWdodDtcblxuXHRcdFx0XHRcdC8vIE1vdmUgdG8gbmV4dCBwb2ludFxuXHRcdFx0XHRcdHRvcCA9IGJveC5ib3R0b207XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJveC5sZWZ0ID0gbGVmdDtcblx0XHRcdFx0XHRib3gucmlnaHQgPSBsZWZ0ICsgYm94LndpZHRoO1xuXHRcdFx0XHRcdGJveC50b3AgPSB0b3RhbFRvcEJveGVzSGVpZ2h0O1xuXHRcdFx0XHRcdGJveC5ib3R0b20gPSB0b3RhbFRvcEJveGVzSGVpZ2h0ICsgbWF4Q2hhcnRBcmVhSGVpZ2h0O1xuXG5cdFx0XHRcdFx0Ly8gTW92ZSB0byBuZXh0IHBvaW50XG5cdFx0XHRcdFx0bGVmdCA9IGJveC5yaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLmNvbmNhdCh0b3BCb3hlcyksIHBsYWNlQm94KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgY2hhcnQgd2lkdGggYW5kIGhlaWdodFxuXHRcdFx0bGVmdCArPSBtYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdHRvcCArPSBtYXhDaGFydEFyZWFIZWlnaHQ7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChyaWdodEJveGVzLCBwbGFjZUJveCk7XG5cdFx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIHBsYWNlQm94KTtcblxuXHRcdFx0Ly8gU3RlcCA4XG5cdFx0XHRjaGFydC5jaGFydEFyZWEgPSB7XG5cdFx0XHRcdGxlZnQ6IHRvdGFsTGVmdEJveGVzV2lkdGgsXG5cdFx0XHRcdHRvcDogdG90YWxUb3BCb3hlc0hlaWdodCxcblx0XHRcdFx0cmlnaHQ6IHRvdGFsTGVmdEJveGVzV2lkdGggKyBtYXhDaGFydEFyZWFXaWR0aCxcblx0XHRcdFx0Ym90dG9tOiB0b3RhbFRvcEJveGVzSGVpZ2h0ICsgbWF4Q2hhcnRBcmVhSGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBTdGVwIDlcblx0XHRcdGhlbHBlcnMuZWFjaChjaGFydEFyZWFCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdGJveC5sZWZ0ID0gY2hhcnQuY2hhcnRBcmVhLmxlZnQ7XG5cdFx0XHRcdGJveC50b3AgPSBjaGFydC5jaGFydEFyZWEudG9wO1xuXHRcdFx0XHRib3gucmlnaHQgPSBjaGFydC5jaGFydEFyZWEucmlnaHQ7XG5cdFx0XHRcdGJveC5ib3R0b20gPSBjaGFydC5jaGFydEFyZWEuYm90dG9tO1xuXG5cdFx0XHRcdGJveC51cGRhdGUobWF4Q2hhcnRBcmVhV2lkdGgsIG1heENoYXJ0QXJlYUhlaWdodCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG59O1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRwbHVnaW5zOiB7fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHQvKipcblx0ICogVGhlIHBsdWdpbiBzZXJ2aWNlIHNpbmdsZXRvblxuXHQgKiBAbmFtZXNwYWNlIENoYXJ0LnBsdWdpbnNcblx0ICogQHNpbmNlIDIuMS4wXG5cdCAqL1xuXHRDaGFydC5wbHVnaW5zID0ge1xuXHRcdC8qKlxuXHRcdCAqIEdsb2JhbGx5IHJlZ2lzdGVyZWQgcGx1Z2lucy5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdF9wbHVnaW5zOiBbXSxcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgaWRlbnRpZmllciBpcyB1c2VkIHRvIGludmFsaWRhdGUgdGhlIGRlc2NyaXB0b3JzIGNhY2hlIGF0dGFjaGVkIHRvIGVhY2ggY2hhcnRcblx0XHQgKiB3aGVuIGEgZ2xvYmFsIHBsdWdpbiBpcyByZWdpc3RlcmVkIG9yIHVucmVnaXN0ZXJlZC4gSW4gdGhpcyBjYXNlLCB0aGUgY2FjaGUgSUQgaXNcblx0XHQgKiBpbmNyZW1lbnRlZCBhbmQgZGVzY3JpcHRvcnMgYXJlIHJlZ2VuZXJhdGVkIGR1cmluZyBmb2xsb3dpbmcgQVBJIGNhbGxzLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0X2NhY2hlSWQ6IDAsXG5cblx0XHQvKipcblx0XHQgKiBSZWdpc3RlcnMgdGhlIGdpdmVuIHBsdWdpbihzKSBpZiBub3QgYWxyZWFkeSByZWdpc3RlcmVkLlxuXHRcdCAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBwbHVnaW5zIHBsdWdpbiBpbnN0YW5jZShzKS5cblx0XHQgKi9cblx0XHRyZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdFx0dmFyIHAgPSB0aGlzLl9wbHVnaW5zO1xuXHRcdFx0KFtdKS5jb25jYXQocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcblx0XHRcdFx0aWYgKHAuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuXHRcdFx0XHRcdHAucHVzaChwbHVnaW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5fY2FjaGVJZCsrO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBVbnJlZ2lzdGVycyB0aGUgZ2l2ZW4gcGx1Z2luKHMpIG9ubHkgaWYgcmVnaXN0ZXJlZC5cblx0XHQgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gcGx1Z2lucyBwbHVnaW4gaW5zdGFuY2UocykuXG5cdFx0ICovXG5cdFx0dW5yZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdFx0dmFyIHAgPSB0aGlzLl9wbHVnaW5zO1xuXHRcdFx0KFtdKS5jb25jYXQocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcblx0XHRcdFx0dmFyIGlkeCA9IHAuaW5kZXhPZihwbHVnaW4pO1xuXHRcdFx0XHRpZiAoaWR4ICE9PSAtMSkge1xuXHRcdFx0XHRcdHAuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbGwgcmVnaXN0ZXJlZCBwbHVnaW5zLlxuXHRcdCAqIEBzaW5jZSAyLjEuNVxuXHRcdCAqL1xuXHRcdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3BsdWdpbnMgPSBbXTtcblx0XHRcdHRoaXMuX2NhY2hlSWQrKztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHJlZ2lzdGVyZWQgcGx1Z2lucz9cblx0XHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHRcdCAqIEBzaW5jZSAyLjEuNVxuXHRcdCAqL1xuXHRcdGNvdW50OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9wbHVnaW5zLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBhbGwgcmVnaXN0ZXJlZCBwbHVnaW4gaW5zdGFuY2VzLlxuXHRcdCAqIEByZXR1cm5zIHtBcnJheX0gYXJyYXkgb2YgcGx1Z2luIG9iamVjdHMuXG5cdFx0ICogQHNpbmNlIDIuMS41XG5cdFx0ICovXG5cdFx0Z2V0QWxsOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9wbHVnaW5zO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBDYWxscyBlbmFibGVkIHBsdWdpbnMgZm9yIGBjaGFydGAgb24gdGhlIHNwZWNpZmllZCBob29rIGFuZCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuXHRcdCAqIFRoaXMgbWV0aG9kIGltbWVkaWF0ZWx5IHJldHVybnMgYXMgc29vbiBhcyBhIHBsdWdpbiBleHBsaWNpdGx5IHJldHVybnMgZmFsc2UuIFRoZVxuXHRcdCAqIHJldHVybmVkIHZhbHVlIGNhbiBiZSB1c2VkLCBmb3IgaW5zdGFuY2UsIHRvIGludGVycnVwdCB0aGUgY3VycmVudCBhY3Rpb24uXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlIGZvciB3aGljaCBwbHVnaW5zIHNob3VsZCBiZSBjYWxsZWQuXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgcGx1Z2luIG1ldGhvZCB0byBjYWxsIChlLmcuICdiZWZvcmVVcGRhdGUnKS5cblx0XHQgKiBAcGFyYW0ge0FycmF5fSBbYXJnc10gLSBFeHRyYSBhcmd1bWVudHMgdG8gYXBwbHkgdG8gdGhlIGhvb2sgY2FsbC5cblx0XHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gZmFsc2UgaWYgYW55IG9mIHRoZSBwbHVnaW5zIHJldHVybiBmYWxzZSwgZWxzZSByZXR1cm5zIHRydWUuXG5cdFx0ICovXG5cdFx0bm90aWZ5OiBmdW5jdGlvbihjaGFydCwgaG9vaywgYXJncykge1xuXHRcdFx0dmFyIGRlc2NyaXB0b3JzID0gdGhpcy5kZXNjcmlwdG9ycyhjaGFydCk7XG5cdFx0XHR2YXIgaWxlbiA9IGRlc2NyaXB0b3JzLmxlbmd0aDtcblx0XHRcdHZhciBpLCBkZXNjcmlwdG9yLCBwbHVnaW4sIHBhcmFtcywgbWV0aG9kO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yc1tpXTtcblx0XHRcdFx0cGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG5cdFx0XHRcdG1ldGhvZCA9IHBsdWdpbltob29rXTtcblx0XHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRwYXJhbXMgPSBbY2hhcnRdLmNvbmNhdChhcmdzIHx8IFtdKTtcblx0XHRcdFx0XHRwYXJhbXMucHVzaChkZXNjcmlwdG9yLm9wdGlvbnMpO1xuXHRcdFx0XHRcdGlmIChtZXRob2QuYXBwbHkocGx1Z2luLCBwYXJhbXMpID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmV0dXJucyBkZXNjcmlwdG9ycyBvZiBlbmFibGVkIHBsdWdpbnMgZm9yIHRoZSBnaXZlbiBjaGFydC5cblx0XHQgKiBAcmV0dXJucyB7QXJyYXl9IFt7IHBsdWdpbiwgb3B0aW9ucyB9XVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZGVzY3JpcHRvcnM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHR2YXIgY2FjaGUgPSBjaGFydC5fcGx1Z2lucyB8fCAoY2hhcnQuX3BsdWdpbnMgPSB7fSk7XG5cdFx0XHRpZiAoY2FjaGUuaWQgPT09IHRoaXMuX2NhY2hlSWQpIHtcblx0XHRcdFx0cmV0dXJuIGNhY2hlLmRlc2NyaXB0b3JzO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGx1Z2lucyA9IFtdO1xuXHRcdFx0dmFyIGRlc2NyaXB0b3JzID0gW107XG5cdFx0XHR2YXIgY29uZmlnID0gKGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZykgfHwge307XG5cdFx0XHR2YXIgb3B0aW9ucyA9IChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zKSB8fCB7fTtcblxuXHRcdFx0dGhpcy5fcGx1Z2lucy5jb25jYXQoY29uZmlnLnBsdWdpbnMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24ocGx1Z2luKSB7XG5cdFx0XHRcdHZhciBpZHggPSBwbHVnaW5zLmluZGV4T2YocGx1Z2luKTtcblx0XHRcdFx0aWYgKGlkeCAhPT0gLTEpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaWQgPSBwbHVnaW4uaWQ7XG5cdFx0XHRcdHZhciBvcHRzID0gb3B0aW9uc1tpZF07XG5cdFx0XHRcdGlmIChvcHRzID09PSBmYWxzZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChvcHRzID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0b3B0cyA9IGhlbHBlcnMuY2xvbmUoZGVmYXVsdHMuZ2xvYmFsLnBsdWdpbnNbaWRdKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHBsdWdpbnMucHVzaChwbHVnaW4pO1xuXHRcdFx0XHRkZXNjcmlwdG9ycy5wdXNoKHtcblx0XHRcdFx0XHRwbHVnaW46IHBsdWdpbixcblx0XHRcdFx0XHRvcHRpb25zOiBvcHRzIHx8IHt9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdGNhY2hlLmRlc2NyaXB0b3JzID0gZGVzY3JpcHRvcnM7XG5cdFx0XHRjYWNoZS5pZCA9IHRoaXMuX2NhY2hlSWQ7XG5cdFx0XHRyZXR1cm4gZGVzY3JpcHRvcnM7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBQbHVnaW4gZXh0ZW5zaW9uIGhvb2tzLlxuXHQgKiBAaW50ZXJmYWNlIElQbHVnaW5cblx0ICogQHNpbmNlIDIuMS4wXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZUluaXRcblx0ICogQGRlc2MgQ2FsbGVkIGJlZm9yZSBpbml0aWFsaXppbmcgYGNoYXJ0YC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2FmdGVySW5pdFxuXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgYGNoYXJ0YCBoYXMgYmVlbiBpbml0aWFsaXplZCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB1cGRhdGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVVcGRhdGVcblx0ICogQGRlc2MgQ2FsbGVkIGJlZm9yZSB1cGRhdGluZyBgY2hhcnRgLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCwgdGhlIHVwZGF0ZVxuXHQgKiBpcyBjYW5jZWxsZWQgKGFuZCB0aHVzIHN1YnNlcXVlbnQgcmVuZGVyKHMpKSB1bnRpbCBhbm90aGVyIGB1cGRhdGVgIGlzIHRyaWdnZXJlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgdXBkYXRlLlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlclVwZGF0ZVxuXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgYGNoYXJ0YCBoYXMgYmVlbiB1cGRhdGVkIGFuZCBiZWZvcmUgcmVuZGVyaW5nLiBOb3RlIHRoYXQgdGhpc1xuXHQgKiBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgY2hhcnQgdXBkYXRlIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYmVmb3JlRGF0YXNldHNVcGRhdGVcbiBcdCAqIEBkZXNjIENhbGxlZCBiZWZvcmUgdXBkYXRpbmcgdGhlIGBjaGFydGAgZGF0YXNldHMuIElmIGFueSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgLFxuXHQgKiB0aGUgZGF0YXNldHMgdXBkYXRlIGlzIGNhbmNlbGxlZCB1bnRpbCBhbm90aGVyIGB1cGRhdGVgIGlzIHRyaWdnZXJlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBmYWxzZSB0byBjYW5jZWwgdGhlIGRhdGFzZXRzIHVwZGF0ZS5cblx0ICogQHNpbmNlIHZlcnNpb24gMi4xLjVcblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEYXRhc2V0c1VwZGF0ZVxuXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgZGF0YXNldHMgaGF2ZSBiZWVuIHVwZGF0ZWQuIE5vdGUgdGhhdCB0aGlzIGhvb2tcblx0ICogd2lsbCBub3QgYmUgY2FsbGVkIGlmIHRoZSBkYXRhc2V0cyB1cGRhdGUgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKiBAc2luY2UgdmVyc2lvbiAyLjEuNVxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVEYXRhc2V0VXBkYXRlXG4gXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIHVwZGF0aW5nIHRoZSBgY2hhcnRgIGRhdGFzZXQgYXQgdGhlIGdpdmVuIGBhcmdzLmluZGV4YC4gSWYgYW55IHBsdWdpblxuXHQgKiByZXR1cm5zIGBmYWxzZWAsIHRoZSBkYXRhc2V0cyB1cGRhdGUgaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHVwZGF0ZWAgaXMgdHJpZ2dlcmVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBUaGUgY2FsbCBhcmd1bWVudHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmluZGV4IC0gVGhlIGRhdGFzZXQgaW5kZXguXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLm1ldGEgLSBUaGUgZGF0YXNldCBtZXRhZGF0YS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgZGF0YXNldHMgZHJhd2luZy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEYXRhc2V0VXBkYXRlXG4gXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgZGF0YXNldHMgYXQgdGhlIGdpdmVuIGBhcmdzLmluZGV4YCBoYXMgYmVlbiB1cGRhdGVkLiBOb3RlXG5cdCAqIHRoYXQgdGhpcyBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgZGF0YXNldHMgdXBkYXRlIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBUaGUgY2FsbCBhcmd1bWVudHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmluZGV4IC0gVGhlIGRhdGFzZXQgaW5kZXguXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLm1ldGEgLSBUaGUgZGF0YXNldCBtZXRhZGF0YS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZUxheW91dFxuXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGxheWluZyBvdXQgYGNoYXJ0YC4gSWYgYW55IHBsdWdpbiByZXR1cm5zIGBmYWxzZWAsXG5cdCAqIHRoZSBsYXlvdXQgdXBkYXRlIGlzIGNhbmNlbGxlZCB1bnRpbCBhbm90aGVyIGB1cGRhdGVgIGlzIHRyaWdnZXJlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgbGF5b3V0LlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlckxheW91dFxuXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgaGFzIGJlZW4gbGF5ZWQgb3V0LiBOb3RlIHRoYXQgdGhpcyBob29rIHdpbGwgbm90XG5cdCAqIGJlIGNhbGxlZCBpZiB0aGUgbGF5b3V0IHVwZGF0ZSBoYXMgYmVlbiBwcmV2aW91c2x5IGNhbmNlbGxlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZVJlbmRlclxuXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIHJlbmRlcmluZyBgY2hhcnRgLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCxcblx0ICogdGhlIHJlbmRlcmluZyBpcyBjYW5jZWxsZWQgdW50aWwgYW5vdGhlciBgcmVuZGVyYCBpcyB0cmlnZ2VyZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYGZhbHNlYCB0byBjYW5jZWwgdGhlIGNoYXJ0IHJlbmRlcmluZy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJSZW5kZXJcblx0ICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGhhcyBiZWVuIGZ1bGx5IHJlbmRlcmVkIChhbmQgYW5pbWF0aW9uIGNvbXBsZXRlZCkuIE5vdGVcblx0ICogdGhhdCB0aGlzIGhvb2sgd2lsbCBub3QgYmUgY2FsbGVkIGlmIHRoZSByZW5kZXJpbmcgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVEcmF3XG5cdCAqIEBkZXNjIENhbGxlZCBiZWZvcmUgZHJhd2luZyBgY2hhcnRgIGF0IGV2ZXJ5IGFuaW1hdGlvbiBmcmFtZSBzcGVjaWZpZWQgYnkgdGhlIGdpdmVuXG5cdCAqIGVhc2luZyB2YWx1ZS4gSWYgYW55IHBsdWdpbiByZXR1cm5zIGBmYWxzZWAsIHRoZSBmcmFtZSBkcmF3aW5nIGlzIGNhbmNlbGxlZCB1bnRpbFxuXHQgKiBhbm90aGVyIGByZW5kZXJgIGlzIHRyaWdnZXJlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGVhc2luZ1ZhbHVlIC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHZhbHVlLCBiZXR3ZWVuIDAuMCBhbmQgMS4wLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cblx0ICogQHJldHVybnMge0Jvb2xlYW59IGBmYWxzZWAgdG8gY2FuY2VsIHRoZSBjaGFydCBkcmF3aW5nLlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNhZnRlckRyYXdcblx0ICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGhhcyBiZWVuIGRyYXduIGZvciB0aGUgc3BlY2lmaWMgZWFzaW5nIHZhbHVlLiBOb3RlXG5cdCAqIHRoYXQgdGhpcyBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgZHJhd2luZyBoYXMgYmVlbiBwcmV2aW91c2x5IGNhbmNlbGxlZC5cblx0ICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGVhc2luZ1ZhbHVlIC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHZhbHVlLCBiZXR3ZWVuIDAuMCBhbmQgMS4wLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYmVmb3JlRGF0YXNldHNEcmF3XG4gXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGRyYXdpbmcgdGhlIGBjaGFydGAgZGF0YXNldHMuIElmIGFueSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgLFxuXHQgKiB0aGUgZGF0YXNldHMgZHJhd2luZyBpcyBjYW5jZWxsZWQgdW50aWwgYW5vdGhlciBgcmVuZGVyYCBpcyB0cmlnZ2VyZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBlYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgZGF0YXNldHMgZHJhd2luZy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEYXRhc2V0c0RyYXdcblx0ICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGRhdGFzZXRzIGhhdmUgYmVlbiBkcmF3bi4gTm90ZSB0aGF0IHRoaXMgaG9va1xuXHQgKiB3aWxsIG5vdCBiZSBjYWxsZWQgaWYgdGhlIGRhdGFzZXRzIGRyYXdpbmcgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBlYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZURhdGFzZXREcmF3XG4gXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGRyYXdpbmcgdGhlIGBjaGFydGAgZGF0YXNldCBhdCB0aGUgZ2l2ZW4gYGFyZ3MuaW5kZXhgIChkYXRhc2V0c1xuXHQgKiBhcmUgZHJhd24gaW4gdGhlIHJldmVyc2Ugb3JkZXIpLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCwgdGhlIGRhdGFzZXRzIGRyYXdpbmdcblx0ICogaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHJlbmRlcmAgaXMgdHJpZ2dlcmVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBUaGUgY2FsbCBhcmd1bWVudHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmluZGV4IC0gVGhlIGRhdGFzZXQgaW5kZXguXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLm1ldGEgLSBUaGUgZGF0YXNldCBtZXRhZGF0YS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGFyZ3MuZWFzaW5nVmFsdWUgLSBUaGUgY3VycmVudCBhbmltYXRpb24gdmFsdWUsIGJldHdlZW4gMC4wIGFuZCAxLjAuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYGZhbHNlYCB0byBjYW5jZWwgdGhlIGNoYXJ0IGRhdGFzZXRzIGRyYXdpbmcuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2FmdGVyRGF0YXNldERyYXdcbiBcdCAqIEBkZXNjIENhbGxlZCBhZnRlciB0aGUgYGNoYXJ0YCBkYXRhc2V0cyBhdCB0aGUgZ2l2ZW4gYGFyZ3MuaW5kZXhgIGhhdmUgYmVlbiBkcmF3blxuXHQgKiAoZGF0YXNldHMgYXJlIGRyYXduIGluIHRoZSByZXZlcnNlIG9yZGVyKS4gTm90ZSB0aGF0IHRoaXMgaG9vayB3aWxsIG5vdCBiZSBjYWxsZWRcblx0ICogaWYgdGhlIGRhdGFzZXRzIGRyYXdpbmcgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIFRoZSBjYWxsIGFyZ3VtZW50cy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGFyZ3MuaW5kZXggLSBUaGUgZGF0YXNldCBpbmRleC5cblx0ICogQHBhcmFtIHtPYmplY3R9IGFyZ3MubWV0YSAtIFRoZSBkYXRhc2V0IG1ldGFkYXRhLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gYXJncy5lYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG5cdCAqL1xuXHQvKipcblx0ICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZUV2ZW50XG4gXHQgKiBAZGVzYyBDYWxsZWQgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIHNwZWNpZmllZCBgZXZlbnRgLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCxcblx0ICogdGhlIGV2ZW50IHdpbGwgYmUgZGlzY2FyZGVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJFdmVudFxuXHQgKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBldmVudGAgaGFzIGJlZW4gY29uc3VtZWQuIE5vdGUgdGhhdCB0aGlzIGhvb2tcblx0ICogd2lsbCBub3QgYmUgY2FsbGVkIGlmIHRoZSBgZXZlbnRgIGhhcyBiZWVuIHByZXZpb3VzbHkgZGlzY2FyZGVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cblx0ICovXG5cdC8qKlxuXHQgKiBAbWV0aG9kIElQbHVnaW4jcmVzaXplXG5cdCAqIEBkZXNjIENhbGxlZCBhZnRlciB0aGUgY2hhcnQgYXMgYmVlbiByZXNpemVkLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIFRoZSBuZXcgY2FudmFzIGRpc3BsYXkgc2l6ZSAoZXEuIGNhbnZhcy5zdHlsZSB3aWR0aCAmIGhlaWdodCkuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKi9cblx0LyoqXG5cdCAqIEBtZXRob2QgSVBsdWdpbiNkZXN0cm95XG5cdCAqIEBkZXNjIENhbGxlZCBhZnRlciB0aGUgY2hhcnQgYXMgYmVlbiBkZXN0cm95ZWQuXG5cdCAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuXHQgKi9cblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5wbHVnaW5zIGluc3RlYWRcblx0ICogQG5hbWVzcGFjZSBDaGFydC5wbHVnaW5TZXJ2aWNlXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi4xLjVcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Q2hhcnQucGx1Z2luU2VydmljZSA9IENoYXJ0LnBsdWdpbnM7XG5cblx0LyoqXG5cdCAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBpbmhlcml0aW5nIGZyb20gQ2hhcnQuUGx1Z2luZ0Jhc2UgaGFzIG5vXG5cdCAqIGVmZmVjdCwgaW5zdGVhZCBzaW1wbHkgY3JlYXRlL3JlZ2lzdGVyIHBsdWdpbnMgdmlhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cblx0ICogQGludGVyZmFjZSBDaGFydC5QbHVnaW5CYXNlXG5cdCAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi41LjBcblx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0Q2hhcnQuUGx1Z2luQmFzZSA9IEVsZW1lbnQuZXh0ZW5kKHt9KTtcbn07XG5cbn0se1wiLi4vaGVscGVycy9pbmRleFwiOjM5LFwiLi9jb3JlLmRlZmF1bHRzXCI6MTksXCIuL2NvcmUuZWxlbWVudFwiOjIwfV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi9jb3JlLmVsZW1lbnQnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi9jb3JlLnRpY2tzJyk7XG5cbmRlZmF1bHRzLl9zZXQoJ3NjYWxlJywge1xuXHRkaXNwbGF5OiB0cnVlLFxuXHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRvZmZzZXQ6IGZhbHNlLFxuXG5cdC8vIGdyaWQgbGluZSBzZXR0aW5nc1xuXHRncmlkTGluZXM6IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdGNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjEpJyxcblx0XHRsaW5lV2lkdGg6IDEsXG5cdFx0ZHJhd0JvcmRlcjogdHJ1ZSxcblx0XHRkcmF3T25DaGFydEFyZWE6IHRydWUsXG5cdFx0ZHJhd1RpY2tzOiB0cnVlLFxuXHRcdHRpY2tNYXJrTGVuZ3RoOiAxMCxcblx0XHR6ZXJvTGluZVdpZHRoOiAxLFxuXHRcdHplcm9MaW5lQ29sb3I6ICdyZ2JhKDAsMCwwLDAuMjUpJyxcblx0XHR6ZXJvTGluZUJvcmRlckRhc2g6IFtdLFxuXHRcdHplcm9MaW5lQm9yZGVyRGFzaE9mZnNldDogMC4wLFxuXHRcdG9mZnNldEdyaWRMaW5lczogZmFsc2UsXG5cdFx0Ym9yZGVyRGFzaDogW10sXG5cdFx0Ym9yZGVyRGFzaE9mZnNldDogMC4wXG5cdH0sXG5cblx0Ly8gc2NhbGUgbGFiZWxcblx0c2NhbGVMYWJlbDoge1xuXHRcdC8vIGRpc3BsYXkgcHJvcGVydHlcblx0XHRkaXNwbGF5OiBmYWxzZSxcblxuXHRcdC8vIGFjdHVhbCBsYWJlbFxuXHRcdGxhYmVsU3RyaW5nOiAnJyxcblxuXHRcdC8vIGxpbmUgaGVpZ2h0XG5cdFx0bGluZUhlaWdodDogMS4yLFxuXG5cdFx0Ly8gdG9wL2JvdHRvbSBwYWRkaW5nXG5cdFx0cGFkZGluZzoge1xuXHRcdFx0dG9wOiA0LFxuXHRcdFx0Ym90dG9tOiA0XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGxhYmVsIHNldHRpbmdzXG5cdHRpY2tzOiB7XG5cdFx0YmVnaW5BdFplcm86IGZhbHNlLFxuXHRcdG1pblJvdGF0aW9uOiAwLFxuXHRcdG1heFJvdGF0aW9uOiA1MCxcblx0XHRtaXJyb3I6IGZhbHNlLFxuXHRcdHBhZGRpbmc6IDAsXG5cdFx0cmV2ZXJzZTogZmFsc2UsXG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRhdXRvU2tpcDogdHJ1ZSxcblx0XHRhdXRvU2tpcFBhZGRpbmc6IDAsXG5cdFx0bGFiZWxPZmZzZXQ6IDAsXG5cdFx0Ly8gV2UgcGFzcyB0aHJvdWdoIGFycmF5cyB0byBiZSByZW5kZXJlZCBhcyBtdWx0aWxpbmUgbGFiZWxzLCB3ZSBjb252ZXJ0IE90aGVycyB0byBzdHJpbmdzIGhlcmUuXG5cdFx0Y2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuXHRcdG1pbm9yOiB7fSxcblx0XHRtYWpvcjoge31cblx0fVxufSk7XG5cbmZ1bmN0aW9uIGxhYmVsc0Zyb21UaWNrcyh0aWNrcykge1xuXHR2YXIgbGFiZWxzID0gW107XG5cdHZhciBpLCBpbGVuO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRsYWJlbHMucHVzaCh0aWNrc1tpXS5sYWJlbCk7XG5cdH1cblxuXHRyZXR1cm4gbGFiZWxzO1xufVxuXG5mdW5jdGlvbiBnZXRMaW5lVmFsdWUoc2NhbGUsIGluZGV4LCBvZmZzZXRHcmlkTGluZXMpIHtcblx0dmFyIGxpbmVWYWx1ZSA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpbmRleCk7XG5cblx0aWYgKG9mZnNldEdyaWRMaW5lcykge1xuXHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0bGluZVZhbHVlIC09IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGluZVZhbHVlIC09IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaW5kZXggLSAxKSkgLyAyO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbGluZVZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0ZnVuY3Rpb24gY29tcHV0ZVRleHRTaXplKGNvbnRleHQsIHRpY2ssIGZvbnQpIHtcblx0XHRyZXR1cm4gaGVscGVycy5pc0FycmF5KHRpY2spID9cblx0XHRcdGhlbHBlcnMubG9uZ2VzdFRleHQoY29udGV4dCwgZm9udCwgdGljaykgOlxuXHRcdFx0Y29udGV4dC5tZWFzdXJlVGV4dCh0aWNrKS53aWR0aDtcblx0fVxuXG5cdGZ1bmN0aW9uIHBhcnNlRm9udE9wdGlvbnMob3B0aW9ucykge1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKTtcblx0XHR2YXIgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSk7XG5cdFx0dmFyIGZhbWlseSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRzdHlsZTogc3R5bGUsXG5cdFx0XHRmYW1pbHk6IGZhbWlseSxcblx0XHRcdGZvbnQ6IGhlbHBlcnMuZm9udFN0cmluZyhzaXplLCBzdHlsZSwgZmFtaWx5KVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBwYXJzZUxpbmVIZWlnaHQob3B0aW9ucykge1xuXHRcdHJldHVybiBoZWxwZXJzLm9wdGlvbnMudG9MaW5lSGVpZ2h0KFxuXHRcdFx0aGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIDEuMiksXG5cdFx0XHRoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZm9udFNpemUsIGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpKTtcblx0fVxuXG5cdENoYXJ0LlNjYWxlID0gRWxlbWVudC5leHRlbmQoe1xuXHRcdC8qKlxuXHRcdCAqIEdldCB0aGUgcGFkZGluZyBuZWVkZWQgZm9yIHRoZSBzY2FsZVxuXHRcdCAqIEBtZXRob2QgZ2V0UGFkZGluZ1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHJldHVybnMge1BhZGRpbmd9IHRoZSBuZWNlc3NhcnkgcGFkZGluZ1xuXHRcdCAqL1xuXHRcdGdldFBhZGRpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGxlZnQ6IG1lLnBhZGRpbmdMZWZ0IHx8IDAsXG5cdFx0XHRcdHRvcDogbWUucGFkZGluZ1RvcCB8fCAwLFxuXHRcdFx0XHRyaWdodDogbWUucGFkZGluZ1JpZ2h0IHx8IDAsXG5cdFx0XHRcdGJvdHRvbTogbWUucGFkZGluZ0JvdHRvbSB8fCAwXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBzY2FsZSB0aWNrIG9iamVjdHMgKHtsYWJlbCwgbWFqb3J9KVxuXHRcdCAqIEBzaW5jZSAyLjdcblx0XHQgKi9cblx0XHRnZXRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdGlja3M7XG5cdFx0fSxcblxuXHRcdC8vIFRoZXNlIG1ldGhvZHMgYXJlIG9yZGVyZWQgYnkgbGlmZWN5bGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblx0XHQvLyBBbnkgZnVuY3Rpb24gZGVmaW5lZCBoZXJlIGlzIGluaGVyaXRlZCBieSBhbGwgc2NhbGUgdHlwZXMuXG5cdFx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgc2NhbGUgdHlwZVxuXG5cdFx0bWVyZ2VUaWNrc09wdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuXHRcdFx0aWYgKHRpY2tzLm1pbm9yID09PSBmYWxzZSkge1xuXHRcdFx0XHR0aWNrcy5taW5vciA9IHtcblx0XHRcdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRpY2tzLm1ham9yID09PSBmYWxzZSkge1xuXHRcdFx0XHR0aWNrcy5tYWpvciA9IHtcblx0XHRcdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHRpY2tzKSB7XG5cdFx0XHRcdGlmIChrZXkgIT09ICdtYWpvcicgJiYga2V5ICE9PSAnbWlub3InKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB0aWNrcy5taW5vcltrZXldID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdFx0dGlja3MubWlub3Jba2V5XSA9IHRpY2tzW2tleV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0eXBlb2YgdGlja3MubWFqb3Jba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHRpY2tzLm1ham9yW2tleV0gPSB0aWNrc1trZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcblx0XHR9LFxuXHRcdHVwZGF0ZTogZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBpLCBpbGVuLCBsYWJlbHMsIGxhYmVsLCB0aWNrcywgdGljaztcblxuXHRcdFx0Ly8gVXBkYXRlIExpZmVjeWNsZSAtIFByb2JhYmx5IGRvbid0IHdhbnQgdG8gZXZlciBleHRlbmQgb3Igb3ZlcndyaXRlIHRoaXMgZnVuY3Rpb24gOylcblx0XHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0XHQvLyBBYnNvcmIgdGhlIG1hc3RlciBtZWFzdXJlbWVudHNcblx0XHRcdG1lLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0XHRtZS5tYXJnaW5zID0gaGVscGVycy5leHRlbmQoe1xuXHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRyaWdodDogMCxcblx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRib3R0b206IDBcblx0XHRcdH0sIG1hcmdpbnMpO1xuXHRcdFx0bWUubG9uZ2VzdFRleHRDYWNoZSA9IG1lLmxvbmdlc3RUZXh0Q2FjaGUgfHwge307XG5cblx0XHRcdC8vIERpbWVuc2lvbnNcblx0XHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXG5cdFx0XHQvLyBEYXRhIG1pbi9tYXhcblx0XHRcdG1lLmJlZm9yZURhdGFMaW1pdHMoKTtcblx0XHRcdG1lLmRldGVybWluZURhdGFMaW1pdHMoKTtcblx0XHRcdG1lLmFmdGVyRGF0YUxpbWl0cygpO1xuXG5cdFx0XHQvLyBUaWNrcyAtIGB0aGlzLnRpY2tzYCBpcyBub3cgREVQUkVDQVRFRCFcblx0XHRcdC8vIEludGVybmFsIHRpY2tzIGFyZSBub3cgc3RvcmVkIGFzIG9iamVjdHMgaW4gdGhlIFBSSVZBVEUgYHRoaXMuX3RpY2tzYCBtZW1iZXJcblx0XHRcdC8vIGFuZCBtdXN0IG5vdCBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIG91dHNpZGUgdGhpcyBjbGFzcy4gYHRoaXMudGlja3NgIGJlaW5nXG5cdFx0XHQvLyBhcm91bmQgZm9yIGxvbmcgdGltZSBhbmQgbm90IG1hcmtlZCBhcyBwcml2YXRlLCB3ZSBjYW4ndCBjaGFuZ2UgaXRzIHN0cnVjdHVyZVxuXHRcdFx0Ly8gd2l0aG91dCB1bmV4cGVjdGVkIGJyZWFraW5nIGNoYW5nZXMuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2NhbGUgdGlja3MsXG5cdFx0XHQvLyB1c2Ugc2NhbGUuZ2V0VGlja3MoKSBpbnN0ZWFkLlxuXG5cdFx0XHRtZS5iZWZvcmVCdWlsZFRpY2tzKCk7XG5cblx0XHRcdC8vIE5ldyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBvYmplY3RzIGJ1dCBmb3IgQkFDS1dBUkQgQ09NUEFULFxuXHRcdFx0Ly8gd2Ugc3RpbGwgc3VwcG9ydCBubyByZXR1cm4gKGB0aGlzLnRpY2tzYCBpbnRlcm5hbGx5IHNldCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kKS5cblx0XHRcdHRpY2tzID0gbWUuYnVpbGRUaWNrcygpIHx8IFtdO1xuXG5cdFx0XHRtZS5hZnRlckJ1aWxkVGlja3MoKTtcblxuXHRcdFx0bWUuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG5cblx0XHRcdC8vIE5ldyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHJldHVybiB0aGUgZm9ybWF0dGVkIHRpY2sgbGFiZWxzIGJ1dCBmb3IgQkFDS1dBUkRcblx0XHRcdC8vIENPTVBBVCwgd2Ugc3RpbGwgc3VwcG9ydCBubyByZXR1cm4gKGB0aGlzLnRpY2tzYCBpbnRlcm5hbGx5IGNoYW5nZWQgYnkgY2FsbGluZ1xuXHRcdFx0Ly8gdGhpcyBtZXRob2QgYW5kIHN1cHBvc2VkIHRvIGNvbnRhaW4gb25seSBzdHJpbmcgdmFsdWVzKS5cblx0XHRcdGxhYmVscyA9IG1lLmNvbnZlcnRUaWNrc1RvTGFiZWxzKHRpY2tzKSB8fCBtZS50aWNrcztcblxuXHRcdFx0bWUuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcblxuXHRcdFx0bWUudGlja3MgPSBsYWJlbHM7ICAgLy8gQkFDS1dBUkQgQ09NUEFUSUJJTElUWVxuXG5cdFx0XHQvLyBJTVBPUlRBTlQ6IGZyb20gdGhpcyBwb2ludCwgd2UgY29uc2lkZXIgdGhhdCBgdGhpcy50aWNrc2Agd2lsbCBORVZFUiBjaGFuZ2UhXG5cblx0XHRcdC8vIEJBQ0tXQVJEIENPTVBBVDogc3luY2hyb25pemUgYF90aWNrc2Agd2l0aCBsYWJlbHMgKHNvIHBvdGVudGlhbGx5IGB0aGlzLnRpY2tzYClcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGxhYmVsID0gbGFiZWxzW2ldO1xuXHRcdFx0XHR0aWNrID0gdGlja3NbaV07XG5cdFx0XHRcdGlmICghdGljaykge1xuXHRcdFx0XHRcdHRpY2tzLnB1c2godGljayA9IHtcblx0XHRcdFx0XHRcdGxhYmVsOiBsYWJlbCxcblx0XHRcdFx0XHRcdG1ham9yOiBmYWxzZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRpY2subGFiZWwgPSBsYWJlbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZS5fdGlja3MgPSB0aWNrcztcblxuXHRcdFx0Ly8gVGljayBSb3RhdGlvblxuXHRcdFx0bWUuYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uKCk7XG5cdFx0XHRtZS5jYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRcdG1lLmFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uKCk7XG5cdFx0XHQvLyBGaXRcblx0XHRcdG1lLmJlZm9yZUZpdCgpO1xuXHRcdFx0bWUuZml0KCk7XG5cdFx0XHRtZS5hZnRlckZpdCgpO1xuXHRcdFx0Ly9cblx0XHRcdG1lLmFmdGVyVXBkYXRlKCk7XG5cblx0XHRcdHJldHVybiBtZS5taW5TaXplO1xuXG5cdFx0fSxcblx0XHRhZnRlclVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRoZWxwZXJzLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW3RoaXNdKTtcblx0XHR9LFxuXG5cdFx0Ly9cblxuXHRcdGJlZm9yZVNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcblx0XHR9LFxuXHRcdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0XHRtZS5yaWdodCA9IG1lLndpZHRoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRcdG1lLnBhZGRpbmdUb3AgPSAwO1xuXHRcdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXHRcdH0sXG5cdFx0YWZ0ZXJTZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBsaW1pdHNcblx0XHRiZWZvcmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZURhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdFx0fSxcblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBoZWxwZXJzLm5vb3AsXG5cdFx0YWZ0ZXJEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRGF0YUxpbWl0cywgW3RoaXNdKTtcblx0XHR9LFxuXG5cdFx0Ly9cblx0XHRiZWZvcmVCdWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUJ1aWxkVGlja3MsIFt0aGlzXSk7XG5cdFx0fSxcblx0XHRidWlsZFRpY2tzOiBoZWxwZXJzLm5vb3AsXG5cdFx0YWZ0ZXJCdWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQnVpbGRUaWNrcywgW3RoaXNdKTtcblx0XHR9LFxuXG5cdFx0YmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0XHR9LFxuXHRcdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHQvLyBDb252ZXJ0IHRpY2tzIHRvIHN0cmluZ3Ncblx0XHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0XHRtZS50aWNrcyA9IG1lLnRpY2tzLm1hcCh0aWNrT3B0cy51c2VyQ2FsbGJhY2sgfHwgdGlja09wdHMuY2FsbGJhY2ssIHRoaXMpO1xuXHRcdH0sXG5cdFx0YWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG5cdFx0fSxcblxuXHRcdC8vXG5cblx0XHRiZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbdGhpc10pO1xuXHRcdH0sXG5cdFx0Y2FsY3VsYXRlVGlja1JvdGF0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY29udGV4dCA9IG1lLmN0eDtcblx0XHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0XHR2YXIgbGFiZWxzID0gbGFiZWxzRnJvbVRpY2tzKG1lLl90aWNrcyk7XG5cblx0XHRcdC8vIEdldCB0aGUgd2lkdGggb2YgZWFjaCBncmlkIGJ5IGNhbGN1bGF0aW5nIHRoZSBkaWZmZXJlbmNlXG5cdFx0XHQvLyBiZXR3ZWVuIHggb2Zmc2V0cyBiZXR3ZWVuIDAgYW5kIDEuXG5cdFx0XHR2YXIgdGlja0ZvbnQgPSBwYXJzZUZvbnRPcHRpb25zKHRpY2tPcHRzKTtcblx0XHRcdGNvbnRleHQuZm9udCA9IHRpY2tGb250LmZvbnQ7XG5cblx0XHRcdHZhciBsYWJlbFJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcblxuXHRcdFx0aWYgKGxhYmVscy5sZW5ndGggJiYgbWUub3B0aW9ucy5kaXNwbGF5ICYmIG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdHZhciBvcmlnaW5hbExhYmVsV2lkdGggPSBoZWxwZXJzLmxvbmdlc3RUZXh0KGNvbnRleHQsIHRpY2tGb250LmZvbnQsIGxhYmVscywgbWUubG9uZ2VzdFRleHRDYWNoZSk7XG5cdFx0XHRcdHZhciBsYWJlbFdpZHRoID0gb3JpZ2luYWxMYWJlbFdpZHRoO1xuXHRcdFx0XHR2YXIgY29zUm90YXRpb24sIHNpblJvdGF0aW9uO1xuXG5cdFx0XHRcdC8vIEFsbG93IDMgcGl4ZWxzIHgyIHBhZGRpbmcgZWl0aGVyIHNpZGUgZm9yIGxhYmVsIHJlYWRhYmlsaXR5XG5cdFx0XHRcdHZhciB0aWNrV2lkdGggPSBtZS5nZXRQaXhlbEZvclRpY2soMSkgLSBtZS5nZXRQaXhlbEZvclRpY2soMCkgLSA2O1xuXG5cdFx0XHRcdC8vIE1heCBsYWJlbCByb3RhdGlvbiBjYW4gYmUgc2V0IG9yIGRlZmF1bHQgdG8gOTAgLSBhbHNvIGFjdCBhcyBhIGxvb3AgY291bnRlclxuXHRcdFx0XHR3aGlsZSAobGFiZWxXaWR0aCA+IHRpY2tXaWR0aCAmJiBsYWJlbFJvdGF0aW9uIDwgdGlja09wdHMubWF4Um90YXRpb24pIHtcblx0XHRcdFx0XHR2YXIgYW5nbGVSYWRpYW5zID0gaGVscGVycy50b1JhZGlhbnMobGFiZWxSb3RhdGlvbik7XG5cdFx0XHRcdFx0Y29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZVJhZGlhbnMpO1xuXHRcdFx0XHRcdHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcblxuXHRcdFx0XHRcdGlmIChzaW5Sb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aCA+IG1lLm1heEhlaWdodCkge1xuXHRcdFx0XHRcdFx0Ly8gZ28gYmFjayBvbmUgc3RlcFxuXHRcdFx0XHRcdFx0bGFiZWxSb3RhdGlvbi0tO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bGFiZWxSb3RhdGlvbisrO1xuXHRcdFx0XHRcdGxhYmVsV2lkdGggPSBjb3NSb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZS5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcblx0XHR9LFxuXHRcdGFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbdGhpc10pO1xuXHRcdH0sXG5cblx0XHQvL1xuXG5cdFx0YmVmb3JlRml0OiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW3RoaXNdKTtcblx0XHR9LFxuXHRcdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0Ly8gUmVzZXRcblx0XHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHtcblx0XHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRcdGhlaWdodDogMFxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGxhYmVscyA9IGxhYmVsc0Zyb21UaWNrcyhtZS5fdGlja3MpO1xuXG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdFx0dmFyIHNjYWxlTGFiZWxPcHRzID0gb3B0cy5zY2FsZUxhYmVsO1xuXHRcdFx0dmFyIGdyaWRMaW5lT3B0cyA9IG9wdHMuZ3JpZExpbmVzO1xuXHRcdFx0dmFyIGRpc3BsYXkgPSBvcHRzLmRpc3BsYXk7XG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cblx0XHRcdHZhciB0aWNrRm9udCA9IHBhcnNlRm9udE9wdGlvbnModGlja09wdHMpO1xuXHRcdFx0dmFyIHRpY2tNYXJrTGVuZ3RoID0gb3B0cy5ncmlkTGluZXMudGlja01hcmtMZW5ndGg7XG5cblx0XHRcdC8vIFdpZHRoXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdC8vIHN1YnRyYWN0IHRoZSBtYXJnaW5zIHRvIGxpbmUgdXAgd2l0aCB0aGUgY2hhcnRBcmVhIGlmIHdlIGFyZSBhIGZ1bGwgd2lkdGggc2NhbGVcblx0XHRcdFx0bWluU2l6ZS53aWR0aCA9IG1lLmlzRnVsbFdpZHRoKCkgPyBtZS5tYXhXaWR0aCAtIG1lLm1hcmdpbnMubGVmdCAtIG1lLm1hcmdpbnMucmlnaHQgOiBtZS5tYXhXaWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1pblNpemUud2lkdGggPSBkaXNwbGF5ICYmIGdyaWRMaW5lT3B0cy5kcmF3VGlja3MgPyB0aWNrTWFya0xlbmd0aCA6IDA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGhlaWdodFxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRtaW5TaXplLmhlaWdodCA9IGRpc3BsYXkgJiYgZ3JpZExpbmVPcHRzLmRyYXdUaWNrcyA/IHRpY2tNYXJrTGVuZ3RoIDogMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0OyAvLyBmaWxsIGFsbCB0aGUgaGVpZ2h0XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFyZSB3ZSBzaG93aW5nIGEgdGl0bGUgZm9yIHRoZSBzY2FsZT9cblx0XHRcdGlmIChzY2FsZUxhYmVsT3B0cy5kaXNwbGF5ICYmIGRpc3BsYXkpIHtcblx0XHRcdFx0dmFyIHNjYWxlTGFiZWxMaW5lSGVpZ2h0ID0gcGFyc2VMaW5lSGVpZ2h0KHNjYWxlTGFiZWxPcHRzKTtcblx0XHRcdFx0dmFyIHNjYWxlTGFiZWxQYWRkaW5nID0gaGVscGVycy5vcHRpb25zLnRvUGFkZGluZyhzY2FsZUxhYmVsT3B0cy5wYWRkaW5nKTtcblx0XHRcdFx0dmFyIGRlbHRhSGVpZ2h0ID0gc2NhbGVMYWJlbExpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy5oZWlnaHQ7XG5cblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdG1pblNpemUuaGVpZ2h0ICs9IGRlbHRhSGVpZ2h0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1pblNpemUud2lkdGggKz0gZGVsdGFIZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRG9uJ3QgYm90aGVyIGZpdHRpbmcgdGhlIHRpY2tzIGlmIHdlIGFyZSBub3Qgc2hvd2luZyB0aGVtXG5cdFx0XHRpZiAodGlja09wdHMuZGlzcGxheSAmJiBkaXNwbGF5KSB7XG5cdFx0XHRcdHZhciBsYXJnZXN0VGV4dFdpZHRoID0gaGVscGVycy5sb25nZXN0VGV4dChtZS5jdHgsIHRpY2tGb250LmZvbnQsIGxhYmVscywgbWUubG9uZ2VzdFRleHRDYWNoZSk7XG5cdFx0XHRcdHZhciB0YWxsZXN0TGFiZWxIZWlnaHRJbkxpbmVzID0gaGVscGVycy5udW1iZXJPZkxhYmVsTGluZXMobGFiZWxzKTtcblx0XHRcdFx0dmFyIGxpbmVTcGFjZSA9IHRpY2tGb250LnNpemUgKiAwLjU7XG5cdFx0XHRcdHZhciB0aWNrUGFkZGluZyA9IG1lLm9wdGlvbnMudGlja3MucGFkZGluZztcblxuXHRcdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdFx0Ly8gQSBob3Jpem9udGFsIGF4aXMgaXMgbW9yZSBjb25zdHJhaW5lZCBieSB0aGUgaGVpZ2h0LlxuXHRcdFx0XHRcdG1lLmxvbmdlc3RMYWJlbFdpZHRoID0gbGFyZ2VzdFRleHRXaWR0aDtcblxuXHRcdFx0XHRcdHZhciBhbmdsZVJhZGlhbnMgPSBoZWxwZXJzLnRvUmFkaWFucyhtZS5sYWJlbFJvdGF0aW9uKTtcblx0XHRcdFx0XHR2YXIgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZVJhZGlhbnMpO1xuXHRcdFx0XHRcdHZhciBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlUmFkaWFucyk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIC0gaW1wcm92ZSB0aGlzIGNhbGN1bGF0aW9uXG5cdFx0XHRcdFx0dmFyIGxhYmVsSGVpZ2h0ID0gKHNpblJvdGF0aW9uICogbGFyZ2VzdFRleHRXaWR0aClcblx0XHRcdFx0XHRcdCsgKHRpY2tGb250LnNpemUgKiB0YWxsZXN0TGFiZWxIZWlnaHRJbkxpbmVzKVxuXHRcdFx0XHRcdFx0KyAobGluZVNwYWNlICogKHRhbGxlc3RMYWJlbEhlaWdodEluTGluZXMgLSAxKSlcblx0XHRcdFx0XHRcdCsgbGluZVNwYWNlOyAvLyBwYWRkaW5nXG5cblx0XHRcdFx0XHRtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKG1lLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcblxuXHRcdFx0XHRcdG1lLmN0eC5mb250ID0gdGlja0ZvbnQuZm9udDtcblx0XHRcdFx0XHR2YXIgZmlyc3RMYWJlbFdpZHRoID0gY29tcHV0ZVRleHRTaXplKG1lLmN0eCwgbGFiZWxzWzBdLCB0aWNrRm9udC5mb250KTtcblx0XHRcdFx0XHR2YXIgbGFzdExhYmVsV2lkdGggPSBjb21wdXRlVGV4dFNpemUobWUuY3R4LCBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdLCB0aWNrRm9udC5mb250KTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSB0aGF0IG91ciB0aWNrcyBhcmUgYWx3YXlzIGluc2lkZSB0aGUgY2FudmFzLiBXaGVuIHJvdGF0ZWQsIHRpY2tzIGFyZSByaWdodCBhbGlnbmVkXG5cdFx0XHRcdFx0Ly8gd2hpY2ggbWVhbnMgdGhhdCB0aGUgcmlnaHQgcGFkZGluZyBpcyBkb21pbmF0ZWQgYnkgdGhlIGZvbnQgaGVpZ2h0XG5cdFx0XHRcdFx0aWYgKG1lLmxhYmVsUm90YXRpb24gIT09IDApIHtcblx0XHRcdFx0XHRcdG1lLnBhZGRpbmdMZWZ0ID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyAoY29zUm90YXRpb24gKiBmaXJzdExhYmVsV2lkdGgpICsgMyA6IChjb3NSb3RhdGlvbiAqIGxpbmVTcGFjZSkgKyAzOyAvLyBhZGQgMyBweCB0byBtb3ZlIGF3YXkgZnJvbSBjYW52YXMgZWRnZXNcblx0XHRcdFx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IG9wdHMucG9zaXRpb24gPT09ICdib3R0b20nID8gKGNvc1JvdGF0aW9uICogbGluZVNwYWNlKSArIDMgOiAoY29zUm90YXRpb24gKiBsYXN0TGFiZWxXaWR0aCkgKyAzO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtZS5wYWRkaW5nTGVmdCA9IGZpcnN0TGFiZWxXaWR0aCAvIDIgKyAzOyAvLyBhZGQgMyBweCB0byBtb3ZlIGF3YXkgZnJvbSBjYW52YXMgZWRnZXNcblx0XHRcdFx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IGxhc3RMYWJlbFdpZHRoIC8gMiArIDM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEEgdmVydGljYWwgYXhpcyBpcyBtb3JlIGNvbnN0cmFpbmVkIGJ5IHRoZSB3aWR0aC4gTGFiZWxzIGFyZSB0aGVcblx0XHRcdFx0XHQvLyBkb21pbmFudCBmYWN0b3IgaGVyZSwgc28gZ2V0IHRoYXQgbGVuZ3RoIGZpcnN0IGFuZCBhY2NvdW50IGZvciBwYWRkaW5nXG5cdFx0XHRcdFx0aWYgKHRpY2tPcHRzLm1pcnJvcikge1xuXHRcdFx0XHRcdFx0bGFyZ2VzdFRleHRXaWR0aCA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIHVzZSBsaW5lU3BhY2UgZm9yIGNvbnNpc3RlbmN5IHdpdGggaG9yaXpvbnRhbCBheGlzXG5cdFx0XHRcdFx0XHQvLyB0aWNrUGFkZGluZyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGhvcml6b250YWxcblx0XHRcdFx0XHRcdGxhcmdlc3RUZXh0V2lkdGggKz0gdGlja1BhZGRpbmcgKyBsaW5lU3BhY2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWluU2l6ZS53aWR0aCA9IE1hdGgubWluKG1lLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFyZ2VzdFRleHRXaWR0aCk7XG5cblx0XHRcdFx0XHRtZS5wYWRkaW5nVG9wID0gdGlja0ZvbnQuc2l6ZSAvIDI7XG5cdFx0XHRcdFx0bWUucGFkZGluZ0JvdHRvbSA9IHRpY2tGb250LnNpemUgLyAyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1lLmhhbmRsZU1hcmdpbnMoKTtcblxuXHRcdFx0bWUud2lkdGggPSBtaW5TaXplLndpZHRoO1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZSBtYXJnaW5zIGFuZCBwYWRkaW5nIGludGVyYWN0aW9uc1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0aGFuZGxlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0aWYgKG1lLm1hcmdpbnMpIHtcblx0XHRcdFx0bWUucGFkZGluZ0xlZnQgPSBNYXRoLm1heChtZS5wYWRkaW5nTGVmdCAtIG1lLm1hcmdpbnMubGVmdCwgMCk7XG5cdFx0XHRcdG1lLnBhZGRpbmdUb3AgPSBNYXRoLm1heChtZS5wYWRkaW5nVG9wIC0gbWUubWFyZ2lucy50b3AsIDApO1xuXHRcdFx0XHRtZS5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heChtZS5wYWRkaW5nUmlnaHQgLSBtZS5tYXJnaW5zLnJpZ2h0LCAwKTtcblx0XHRcdFx0bWUucGFkZGluZ0JvdHRvbSA9IE1hdGgubWF4KG1lLnBhZGRpbmdCb3R0b20gLSBtZS5tYXJnaW5zLmJvdHRvbSwgMCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGFmdGVyRml0OiBmdW5jdGlvbigpIHtcblx0XHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyRml0LCBbdGhpc10pO1xuXHRcdH0sXG5cblx0XHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRcdGlzSG9yaXpvbnRhbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuXHRcdH0sXG5cdFx0aXNGdWxsV2lkdGg6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICh0aGlzLm9wdGlvbnMuZnVsbFdpZHRoKTtcblx0XHR9LFxuXG5cdFx0Ly8gR2V0IHRoZSBjb3JyZWN0IHZhbHVlLiBOYU4gYmFkIGlucHV0cywgSWYgdGhlIHZhbHVlIHR5cGUgaXMgb2JqZWN0IGdldCB0aGUgeCBvciB5IGJhc2VkIG9uIHdoZXRoZXIgd2UgYXJlIGhvcml6b250YWwgb3Igbm90XG5cdFx0Z2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24ocmF3VmFsdWUpIHtcblx0XHRcdC8vIE51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMgZmlyc3Rcblx0XHRcdGlmIChoZWxwZXJzLmlzTnVsbE9yVW5kZWYocmF3VmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiBOYU47XG5cdFx0XHR9XG5cdFx0XHQvLyBpc05hTihvYmplY3QpIHJldHVybnMgdHJ1ZSwgc28gbWFrZSBzdXJlIE5hTiBpcyBjaGVja2luZyBmb3IgYSBudW1iZXI7IERpc2NhcmQgSW5maW5pdGUgdmFsdWVzXG5cdFx0XHRpZiAodHlwZW9mIHJhd1ZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocmF3VmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiBOYU47XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiBpdCBpcyBpbiBmYWN0IGFuIG9iamVjdCwgZGl2ZSBpbiBvbmUgbW9yZSBsZXZlbFxuXHRcdFx0aWYgKHJhd1ZhbHVlKSB7XG5cdFx0XHRcdGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdFx0aWYgKHJhd1ZhbHVlLnggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS54KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAocmF3VmFsdWUueSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS55KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBWYWx1ZSBpcyBnb29kLCByZXR1cm4gaXRcblx0XHRcdHJldHVybiByYXdWYWx1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gVXNlZCB0byBnZXQgdGhlIHZhbHVlIHRvIGRpc3BsYXkgaW4gdGhlIHRvb2x0aXAgZm9yIHRoZSBkYXRhIGF0IHRoZSBnaXZlbiBpbmRleFxuXHRcdC8vIGZ1bmN0aW9uIGdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleClcblx0XHRnZXRMYWJlbEZvckluZGV4OiBoZWxwZXJzLm5vb3AsXG5cblx0XHQvLyBVc2VkIHRvIGdldCBkYXRhIHZhbHVlIGxvY2F0aW9ucy4gIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBoZWxwZXJzLm5vb3AsXG5cblx0XHQvLyBVc2VkIHRvIGdldCB0aGUgZGF0YSB2YWx1ZSBmcm9tIGEgZ2l2ZW4gcGl4ZWwuIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgZ2V0UGl4ZWxGb3JWYWx1ZVxuXHRcdGdldFZhbHVlRm9yUGl4ZWw6IGhlbHBlcnMubm9vcCxcblxuXHRcdC8vIFVzZWQgZm9yIHRpY2sgbG9jYXRpb24sIHNob3VsZFxuXHRcdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0dmFyIGlubmVyV2lkdGggPSBtZS53aWR0aCAtIChtZS5wYWRkaW5nTGVmdCArIG1lLnBhZGRpbmdSaWdodCk7XG5cdFx0XHRcdHZhciB0aWNrV2lkdGggPSBpbm5lcldpZHRoIC8gTWF0aC5tYXgoKG1lLl90aWNrcy5sZW5ndGggLSAob2Zmc2V0ID8gMCA6IDEpKSwgMSk7XG5cdFx0XHRcdHZhciBwaXhlbCA9ICh0aWNrV2lkdGggKiBpbmRleCkgKyBtZS5wYWRkaW5nTGVmdDtcblxuXHRcdFx0XHRpZiAob2Zmc2V0KSB7XG5cdFx0XHRcdFx0cGl4ZWwgKz0gdGlja1dpZHRoIC8gMjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBmaW5hbFZhbCA9IG1lLmxlZnQgKyBNYXRoLnJvdW5kKHBpeGVsKTtcblx0XHRcdFx0ZmluYWxWYWwgKz0gbWUuaXNGdWxsV2lkdGgoKSA/IG1lLm1hcmdpbnMubGVmdCA6IDA7XG5cdFx0XHRcdHJldHVybiBmaW5hbFZhbDtcblx0XHRcdH1cblx0XHRcdHZhciBpbm5lckhlaWdodCA9IG1lLmhlaWdodCAtIChtZS5wYWRkaW5nVG9wICsgbWUucGFkZGluZ0JvdHRvbSk7XG5cdFx0XHRyZXR1cm4gbWUudG9wICsgKGluZGV4ICogKGlubmVySGVpZ2h0IC8gKG1lLl90aWNrcy5sZW5ndGggLSAxKSkpO1xuXHRcdH0sXG5cblx0XHQvLyBVdGlsaXR5IGZvciBnZXR0aW5nIHRoZSBwaXhlbCBsb2NhdGlvbiBvZiBhIHBlcmNlbnRhZ2Ugb2Ygc2NhbGVcblx0XHRnZXRQaXhlbEZvckRlY2ltYWw6IGZ1bmN0aW9uKGRlY2ltYWwpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0dmFyIGlubmVyV2lkdGggPSBtZS53aWR0aCAtIChtZS5wYWRkaW5nTGVmdCArIG1lLnBhZGRpbmdSaWdodCk7XG5cdFx0XHRcdHZhciB2YWx1ZU9mZnNldCA9IChpbm5lcldpZHRoICogZGVjaW1hbCkgKyBtZS5wYWRkaW5nTGVmdDtcblxuXHRcdFx0XHR2YXIgZmluYWxWYWwgPSBtZS5sZWZ0ICsgTWF0aC5yb3VuZCh2YWx1ZU9mZnNldCk7XG5cdFx0XHRcdGZpbmFsVmFsICs9IG1lLmlzRnVsbFdpZHRoKCkgPyBtZS5tYXJnaW5zLmxlZnQgOiAwO1xuXHRcdFx0XHRyZXR1cm4gZmluYWxWYWw7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWUudG9wICsgKGRlY2ltYWwgKiBtZS5oZWlnaHQpO1xuXHRcdH0sXG5cblx0XHRnZXRCYXNlUGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldEJhc2VWYWx1ZSgpKTtcblx0XHR9LFxuXG5cdFx0Z2V0QmFzZVZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdFx0dmFyIG1heCA9IG1lLm1heDtcblxuXHRcdFx0cmV0dXJuIG1lLmJlZ2luQXRaZXJvID8gMCA6XG5cdFx0XHRcdG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6XG5cdFx0XHRcdG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6XG5cdFx0XHRcdDA7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgYSBzdWJzZXQgb2YgdGlja3MgdG8gYmUgcGxvdHRlZCB0byBhdm9pZCBvdmVybGFwcGluZyBsYWJlbHMuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRfYXV0b1NraXA6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0XHR2YXIgc2tpcFJhdGlvO1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdHZhciBvcHRpb25UaWNrcyA9IG1lLm9wdGlvbnMudGlja3MubWlub3I7XG5cdFx0XHR2YXIgdGlja0NvdW50ID0gdGlja3MubGVuZ3RoO1xuXHRcdFx0dmFyIGxhYmVsUm90YXRpb25SYWRpYW5zID0gaGVscGVycy50b1JhZGlhbnMobWUubGFiZWxSb3RhdGlvbik7XG5cdFx0XHR2YXIgY29zUm90YXRpb24gPSBNYXRoLmNvcyhsYWJlbFJvdGF0aW9uUmFkaWFucyk7XG5cdFx0XHR2YXIgbG9uZ2VzdFJvdGF0ZWRMYWJlbCA9IG1lLmxvbmdlc3RMYWJlbFdpZHRoICogY29zUm90YXRpb247XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHR2YXIgaSwgdGljaywgc2hvdWxkU2tpcDtcblxuXHRcdFx0Ly8gZmlndXJlIG91dCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZ3JpZGxpbmVzIHRvIHNob3dcblx0XHRcdHZhciBtYXhUaWNrcztcblx0XHRcdGlmIChvcHRpb25UaWNrcy5tYXhUaWNrc0xpbWl0KSB7XG5cdFx0XHRcdG1heFRpY2tzID0gb3B0aW9uVGlja3MubWF4VGlja3NMaW1pdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRza2lwUmF0aW8gPSBmYWxzZTtcblxuXHRcdFx0XHRpZiAoKGxvbmdlc3RSb3RhdGVkTGFiZWwgKyBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcpICogdGlja0NvdW50ID4gKG1lLndpZHRoIC0gKG1lLnBhZGRpbmdMZWZ0ICsgbWUucGFkZGluZ1JpZ2h0KSkpIHtcblx0XHRcdFx0XHRza2lwUmF0aW8gPSAxICsgTWF0aC5mbG9vcigoKGxvbmdlc3RSb3RhdGVkTGFiZWwgKyBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcpICogdGlja0NvdW50KSAvIChtZS53aWR0aCAtIChtZS5wYWRkaW5nTGVmdCArIG1lLnBhZGRpbmdSaWdodCkpKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIHRoZXkgZGVmaW5lZCBhIG1heCBudW1iZXIgb2Ygb3B0aW9uVGlja3MsXG5cdFx0XHRcdC8vIGluY3JlYXNlIHNraXBSYXRpbyB1bnRpbCB0aGF0IG51bWJlciBpcyBtZXRcblx0XHRcdFx0aWYgKG1heFRpY2tzICYmIHRpY2tDb3VudCA+IG1heFRpY2tzKSB7XG5cdFx0XHRcdFx0c2tpcFJhdGlvID0gTWF0aC5tYXgoc2tpcFJhdGlvLCBNYXRoLmZsb29yKHRpY2tDb3VudCAvIG1heFRpY2tzKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHRpY2tDb3VudDsgaSsrKSB7XG5cdFx0XHRcdHRpY2sgPSB0aWNrc1tpXTtcblxuXHRcdFx0XHQvLyBTaW5jZSB3ZSBhbHdheXMgc2hvdyB0aGUgbGFzdCB0aWNrLHdlIG5lZWQgbWF5IG5lZWQgdG8gaGlkZSB0aGUgbGFzdCBzaG93biBvbmUgYmVmb3JlXG5cdFx0XHRcdHNob3VsZFNraXAgPSAoc2tpcFJhdGlvID4gMSAmJiBpICUgc2tpcFJhdGlvID4gMCkgfHwgKGkgJSBza2lwUmF0aW8gPT09IDAgJiYgaSArIHNraXBSYXRpbyA+PSB0aWNrQ291bnQpO1xuXHRcdFx0XHRpZiAoc2hvdWxkU2tpcCAmJiBpICE9PSB0aWNrQ291bnQgLSAxIHx8IGhlbHBlcnMuaXNOdWxsT3JVbmRlZih0aWNrLmxhYmVsKSkge1xuXHRcdFx0XHRcdC8vIGxlYXZlIHRpY2sgaW4gcGxhY2UgYnV0IG1ha2Ugc3VyZSBpdCdzIG5vdCBkaXNwbGF5ZWQgKCM0NjM1KVxuXHRcdFx0XHRcdGRlbGV0ZSB0aWNrLmxhYmVsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJlc3VsdC5wdXNoKHRpY2spO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgc2NhbGUgb24gdGhlIGNhbnZhc1xuXHRcdC8vIEBwYXJhbSB7cmVjdGFuZ2xlfSBjaGFydEFyZWEgOiB0aGUgYXJlYSBvZiB0aGUgY2hhcnQgdG8gZHJhdyBmdWxsIGdyaWQgbGluZXMgb25cblx0XHRkcmF3OiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XG5cdFx0XHRpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjb250ZXh0ID0gbWUuY3R4O1xuXHRcdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdFx0dmFyIG9wdGlvblRpY2tzID0gb3B0aW9ucy50aWNrcy5taW5vcjtcblx0XHRcdHZhciBvcHRpb25NYWpvclRpY2tzID0gb3B0aW9ucy50aWNrcy5tYWpvciB8fCBvcHRpb25UaWNrcztcblx0XHRcdHZhciBncmlkTGluZXMgPSBvcHRpb25zLmdyaWRMaW5lcztcblx0XHRcdHZhciBzY2FsZUxhYmVsID0gb3B0aW9ucy5zY2FsZUxhYmVsO1xuXG5cdFx0XHR2YXIgaXNSb3RhdGVkID0gbWUubGFiZWxSb3RhdGlvbiAhPT0gMDtcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdFx0dmFyIHRpY2tzID0gb3B0aW9uVGlja3MuYXV0b1NraXAgPyBtZS5fYXV0b1NraXAobWUuZ2V0VGlja3MoKSkgOiBtZS5nZXRUaWNrcygpO1xuXHRcdFx0dmFyIHRpY2tGb250Q29sb3IgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvblRpY2tzLmZvbnRDb2xvciwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0XHR2YXIgdGlja0ZvbnQgPSBwYXJzZUZvbnRPcHRpb25zKG9wdGlvblRpY2tzKTtcblx0XHRcdHZhciBtYWpvclRpY2tGb250Q29sb3IgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbk1ham9yVGlja3MuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHRcdHZhciBtYWpvclRpY2tGb250ID0gcGFyc2VGb250T3B0aW9ucyhvcHRpb25NYWpvclRpY2tzKTtcblxuXHRcdFx0dmFyIHRsID0gZ3JpZExpbmVzLmRyYXdUaWNrcyA/IGdyaWRMaW5lcy50aWNrTWFya0xlbmd0aCA6IDA7XG5cblx0XHRcdHZhciBzY2FsZUxhYmVsRm9udENvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChzY2FsZUxhYmVsLmZvbnRDb2xvciwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0XHR2YXIgc2NhbGVMYWJlbEZvbnQgPSBwYXJzZUZvbnRPcHRpb25zKHNjYWxlTGFiZWwpO1xuXHRcdFx0dmFyIHNjYWxlTGFiZWxQYWRkaW5nID0gaGVscGVycy5vcHRpb25zLnRvUGFkZGluZyhzY2FsZUxhYmVsLnBhZGRpbmcpO1xuXHRcdFx0dmFyIGxhYmVsUm90YXRpb25SYWRpYW5zID0gaGVscGVycy50b1JhZGlhbnMobWUubGFiZWxSb3RhdGlvbik7XG5cblx0XHRcdHZhciBpdGVtc1RvRHJhdyA9IFtdO1xuXG5cdFx0XHR2YXIgeFRpY2tTdGFydCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdyaWdodCcgPyBtZS5sZWZ0IDogbWUucmlnaHQgLSB0bDtcblx0XHRcdHZhciB4VGlja0VuZCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdyaWdodCcgPyBtZS5sZWZ0ICsgdGwgOiBtZS5yaWdodDtcblx0XHRcdHZhciB5VGlja1N0YXJ0ID0gb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyBtZS50b3AgOiBtZS5ib3R0b20gLSB0bDtcblx0XHRcdHZhciB5VGlja0VuZCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nID8gbWUudG9wICsgdGwgOiBtZS5ib3R0b207XG5cblx0XHRcdGhlbHBlcnMuZWFjaCh0aWNrcywgZnVuY3Rpb24odGljaywgaW5kZXgpIHtcblx0XHRcdFx0Ly8gYXV0b3NraXBwZXIgc2tpcHBlZCB0aGlzIHRpY2sgKCM0NjM1KVxuXHRcdFx0XHRpZiAodGljay5sYWJlbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGxhYmVsID0gdGljay5sYWJlbDtcblx0XHRcdFx0dmFyIGxpbmVXaWR0aCwgbGluZUNvbG9yLCBib3JkZXJEYXNoLCBib3JkZXJEYXNoT2Zmc2V0O1xuXHRcdFx0XHRpZiAoaW5kZXggPT09IG1lLnplcm9MaW5lSW5kZXggJiYgb3B0aW9ucy5vZmZzZXQgPT09IGdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMpIHtcblx0XHRcdFx0XHQvLyBEcmF3IHRoZSBmaXJzdCBpbmRleCBzcGVjaWFsbHlcblx0XHRcdFx0XHRsaW5lV2lkdGggPSBncmlkTGluZXMuemVyb0xpbmVXaWR0aDtcblx0XHRcdFx0XHRsaW5lQ29sb3IgPSBncmlkTGluZXMuemVyb0xpbmVDb2xvcjtcblx0XHRcdFx0XHRib3JkZXJEYXNoID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaDtcblx0XHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaE9mZnNldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaW5lV2lkdGggPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZXMubGluZVdpZHRoLCBpbmRleCk7XG5cdFx0XHRcdFx0bGluZUNvbG9yID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCBpbmRleCk7XG5cdFx0XHRcdFx0Ym9yZGVyRGFzaCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZ3JpZExpbmVzLmJvcmRlckRhc2gsIGdsb2JhbERlZmF1bHRzLmJvcmRlckRhc2gpO1xuXHRcdFx0XHRcdGJvcmRlckRhc2hPZmZzZXQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGdyaWRMaW5lcy5ib3JkZXJEYXNoT2Zmc2V0LCBnbG9iYWxEZWZhdWx0cy5ib3JkZXJEYXNoT2Zmc2V0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENvbW1vbiBwcm9wZXJ0aWVzXG5cdFx0XHRcdHZhciB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyLCBsYWJlbFgsIGxhYmVsWTtcblx0XHRcdFx0dmFyIHRleHRBbGlnbiA9ICdtaWRkbGUnO1xuXHRcdFx0XHR2YXIgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRcdHZhciB0aWNrUGFkZGluZyA9IG9wdGlvblRpY2tzLnBhZGRpbmc7XG5cblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdHZhciBsYWJlbFlPZmZzZXQgPSB0bCArIHRpY2tQYWRkaW5nO1xuXG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nKSB7XG5cdFx0XHRcdFx0XHQvLyBib3R0b21cblx0XHRcdFx0XHRcdHRleHRCYXNlbGluZSA9ICFpc1JvdGF0ZWQgPyAndG9wJyA6ICdtaWRkbGUnO1xuXHRcdFx0XHRcdFx0dGV4dEFsaWduID0gIWlzUm90YXRlZCA/ICdjZW50ZXInIDogJ3JpZ2h0Jztcblx0XHRcdFx0XHRcdGxhYmVsWSA9IG1lLnRvcCArIGxhYmVsWU9mZnNldDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gdG9wXG5cdFx0XHRcdFx0XHR0ZXh0QmFzZWxpbmUgPSAhaXNSb3RhdGVkID8gJ2JvdHRvbScgOiAnbWlkZGxlJztcblx0XHRcdFx0XHRcdHRleHRBbGlnbiA9ICFpc1JvdGF0ZWQgPyAnY2VudGVyJyA6ICdsZWZ0Jztcblx0XHRcdFx0XHRcdGxhYmVsWSA9IG1lLmJvdHRvbSAtIGxhYmVsWU9mZnNldDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgeExpbmVWYWx1ZSA9IGdldExpbmVWYWx1ZShtZSwgaW5kZXgsIGdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgJiYgdGlja3MubGVuZ3RoID4gMSk7XG5cdFx0XHRcdFx0aWYgKHhMaW5lVmFsdWUgPCBtZS5sZWZ0KSB7XG5cdFx0XHRcdFx0XHRsaW5lQ29sb3IgPSAncmdiYSgwLDAsMCwwKSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHhMaW5lVmFsdWUgKz0gaGVscGVycy5hbGlhc1BpeGVsKGxpbmVXaWR0aCk7XG5cblx0XHRcdFx0XHRsYWJlbFggPSBtZS5nZXRQaXhlbEZvclRpY2soaW5kZXgpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7IC8vIHggdmFsdWVzIGZvciBvcHRpb25UaWNrcyAobmVlZCB0byBjb25zaWRlciBvZmZzZXRMYWJlbCBvcHRpb24pXG5cblx0XHRcdFx0XHR0eDEgPSB0eDIgPSB4MSA9IHgyID0geExpbmVWYWx1ZTtcblx0XHRcdFx0XHR0eTEgPSB5VGlja1N0YXJ0O1xuXHRcdFx0XHRcdHR5MiA9IHlUaWNrRW5kO1xuXHRcdFx0XHRcdHkxID0gY2hhcnRBcmVhLnRvcDtcblx0XHRcdFx0XHR5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGlzTGVmdCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0Jztcblx0XHRcdFx0XHR2YXIgbGFiZWxYT2Zmc2V0O1xuXG5cdFx0XHRcdFx0aWYgKG9wdGlvblRpY2tzLm1pcnJvcikge1xuXHRcdFx0XHRcdFx0dGV4dEFsaWduID0gaXNMZWZ0ID8gJ2xlZnQnIDogJ3JpZ2h0Jztcblx0XHRcdFx0XHRcdGxhYmVsWE9mZnNldCA9IHRpY2tQYWRkaW5nO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0ZXh0QWxpZ24gPSBpc0xlZnQgPyAncmlnaHQnIDogJ2xlZnQnO1xuXHRcdFx0XHRcdFx0bGFiZWxYT2Zmc2V0ID0gdGwgKyB0aWNrUGFkZGluZztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsYWJlbFggPSBpc0xlZnQgPyBtZS5yaWdodCAtIGxhYmVsWE9mZnNldCA6IG1lLmxlZnQgKyBsYWJlbFhPZmZzZXQ7XG5cblx0XHRcdFx0XHR2YXIgeUxpbmVWYWx1ZSA9IGdldExpbmVWYWx1ZShtZSwgaW5kZXgsIGdyaWRMaW5lcy5vZmZzZXRHcmlkTGluZXMgJiYgdGlja3MubGVuZ3RoID4gMSk7XG5cdFx0XHRcdFx0aWYgKHlMaW5lVmFsdWUgPCBtZS50b3ApIHtcblx0XHRcdFx0XHRcdGxpbmVDb2xvciA9ICdyZ2JhKDAsMCwwLDApJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0eUxpbmVWYWx1ZSArPSBoZWxwZXJzLmFsaWFzUGl4ZWwobGluZVdpZHRoKTtcblxuXHRcdFx0XHRcdGxhYmVsWSA9IG1lLmdldFBpeGVsRm9yVGljayhpbmRleCkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcblxuXHRcdFx0XHRcdHR4MSA9IHhUaWNrU3RhcnQ7XG5cdFx0XHRcdFx0dHgyID0geFRpY2tFbmQ7XG5cdFx0XHRcdFx0eDEgPSBjaGFydEFyZWEubGVmdDtcblx0XHRcdFx0XHR4MiA9IGNoYXJ0QXJlYS5yaWdodDtcblx0XHRcdFx0XHR0eTEgPSB0eTIgPSB5MSA9IHkyID0geUxpbmVWYWx1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGl0ZW1zVG9EcmF3LnB1c2goe1xuXHRcdFx0XHRcdHR4MTogdHgxLFxuXHRcdFx0XHRcdHR5MTogdHkxLFxuXHRcdFx0XHRcdHR4MjogdHgyLFxuXHRcdFx0XHRcdHR5MjogdHkyLFxuXHRcdFx0XHRcdHgxOiB4MSxcblx0XHRcdFx0XHR5MTogeTEsXG5cdFx0XHRcdFx0eDI6IHgyLFxuXHRcdFx0XHRcdHkyOiB5Mixcblx0XHRcdFx0XHRsYWJlbFg6IGxhYmVsWCxcblx0XHRcdFx0XHRsYWJlbFk6IGxhYmVsWSxcblx0XHRcdFx0XHRnbFdpZHRoOiBsaW5lV2lkdGgsXG5cdFx0XHRcdFx0Z2xDb2xvcjogbGluZUNvbG9yLFxuXHRcdFx0XHRcdGdsQm9yZGVyRGFzaDogYm9yZGVyRGFzaCxcblx0XHRcdFx0XHRnbEJvcmRlckRhc2hPZmZzZXQ6IGJvcmRlckRhc2hPZmZzZXQsXG5cdFx0XHRcdFx0cm90YXRpb246IC0xICogbGFiZWxSb3RhdGlvblJhZGlhbnMsXG5cdFx0XHRcdFx0bGFiZWw6IGxhYmVsLFxuXHRcdFx0XHRcdG1ham9yOiB0aWNrLm1ham9yLFxuXHRcdFx0XHRcdHRleHRCYXNlbGluZTogdGV4dEJhc2VsaW5lLFxuXHRcdFx0XHRcdHRleHRBbGlnbjogdGV4dEFsaWduXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIERyYXcgYWxsIG9mIHRoZSB0aWNrIGxhYmVscywgdGljayBtYXJrcywgYW5kIGdyaWQgbGluZXMgYXQgdGhlIGNvcnJlY3QgcGxhY2VzXG5cdFx0XHRoZWxwZXJzLmVhY2goaXRlbXNUb0RyYXcsIGZ1bmN0aW9uKGl0ZW1Ub0RyYXcpIHtcblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kaXNwbGF5KSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zYXZlKCk7XG5cdFx0XHRcdFx0Y29udGV4dC5saW5lV2lkdGggPSBpdGVtVG9EcmF3LmdsV2lkdGg7XG5cdFx0XHRcdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9IGl0ZW1Ub0RyYXcuZ2xDb2xvcjtcblx0XHRcdFx0XHRpZiAoY29udGV4dC5zZXRMaW5lRGFzaCkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRMaW5lRGFzaChpdGVtVG9EcmF3LmdsQm9yZGVyRGFzaCk7XG5cdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVEYXNoT2Zmc2V0ID0gaXRlbVRvRHJhdy5nbEJvcmRlckRhc2hPZmZzZXQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcblxuXHRcdFx0XHRcdGlmIChncmlkTGluZXMuZHJhd1RpY2tzKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtVG9EcmF3LnR4MSwgaXRlbVRvRHJhdy50eTEpO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbVRvRHJhdy50eDIsIGl0ZW1Ub0RyYXcudHkyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZ3JpZExpbmVzLmRyYXdPbkNoYXJ0QXJlYSkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oaXRlbVRvRHJhdy54MSwgaXRlbVRvRHJhdy55MSk7XG5cdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhpdGVtVG9EcmF3LngyLCBpdGVtVG9EcmF3LnkyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250ZXh0LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGNvbnRleHQucmVzdG9yZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG9wdGlvblRpY2tzLmRpc3BsYXkpIHtcblx0XHRcdFx0XHQvLyBNYWtlIHN1cmUgd2UgZHJhdyB0ZXh0IGluIHRoZSBjb3JyZWN0IGNvbG9yIGFuZCBmb250XG5cdFx0XHRcdFx0Y29udGV4dC5zYXZlKCk7XG5cdFx0XHRcdFx0Y29udGV4dC50cmFuc2xhdGUoaXRlbVRvRHJhdy5sYWJlbFgsIGl0ZW1Ub0RyYXcubGFiZWxZKTtcblx0XHRcdFx0XHRjb250ZXh0LnJvdGF0ZShpdGVtVG9EcmF3LnJvdGF0aW9uKTtcblx0XHRcdFx0XHRjb250ZXh0LmZvbnQgPSBpdGVtVG9EcmF3Lm1ham9yID8gbWFqb3JUaWNrRm9udC5mb250IDogdGlja0ZvbnQuZm9udDtcblx0XHRcdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGl0ZW1Ub0RyYXcubWFqb3IgPyBtYWpvclRpY2tGb250Q29sb3IgOiB0aWNrRm9udENvbG9yO1xuXHRcdFx0XHRcdGNvbnRleHQudGV4dEJhc2VsaW5lID0gaXRlbVRvRHJhdy50ZXh0QmFzZWxpbmU7XG5cdFx0XHRcdFx0Y29udGV4dC50ZXh0QWxpZ24gPSBpdGVtVG9EcmF3LnRleHRBbGlnbjtcblxuXHRcdFx0XHRcdHZhciBsYWJlbCA9IGl0ZW1Ub0RyYXcubGFiZWw7XG5cdFx0XHRcdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwLCB5ID0gMDsgaSA8IGxhYmVsLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFdlIGp1c3QgbWFrZSBzdXJlIHRoZSBtdWx0aWxpbmUgZWxlbWVudCBpcyBhIHN0cmluZyBoZXJlLi5cblx0XHRcdFx0XHRcdFx0Y29udGV4dC5maWxsVGV4dCgnJyArIGxhYmVsW2ldLCAwLCB5KTtcblx0XHRcdFx0XHRcdFx0Ly8gYXBwbHkgc2FtZSBsaW5lU3BhY2luZyBhcyBjYWxjdWxhdGVkIEAgTCMzMjBcblx0XHRcdFx0XHRcdFx0eSArPSAodGlja0ZvbnQuc2l6ZSAqIDEuNSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuZmlsbFRleHQobGFiZWwsIDAsIDApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb250ZXh0LnJlc3RvcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChzY2FsZUxhYmVsLmRpc3BsYXkpIHtcblx0XHRcdFx0Ly8gRHJhdyB0aGUgc2NhbGUgbGFiZWxcblx0XHRcdFx0dmFyIHNjYWxlTGFiZWxYO1xuXHRcdFx0XHR2YXIgc2NhbGVMYWJlbFk7XG5cdFx0XHRcdHZhciByb3RhdGlvbiA9IDA7XG5cdFx0XHRcdHZhciBoYWxmTGluZUhlaWdodCA9IHBhcnNlTGluZUhlaWdodChzY2FsZUxhYmVsKSAvIDI7XG5cblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdHNjYWxlTGFiZWxYID0gbWUubGVmdCArICgobWUucmlnaHQgLSBtZS5sZWZ0KSAvIDIpOyAvLyBtaWRwb2ludCBvZiB0aGUgd2lkdGhcblx0XHRcdFx0XHRzY2FsZUxhYmVsWSA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nXG5cdFx0XHRcdFx0XHQ/IG1lLmJvdHRvbSAtIGhhbGZMaW5lSGVpZ2h0IC0gc2NhbGVMYWJlbFBhZGRpbmcuYm90dG9tXG5cdFx0XHRcdFx0XHQ6IG1lLnRvcCArIGhhbGZMaW5lSGVpZ2h0ICsgc2NhbGVMYWJlbFBhZGRpbmcudG9wO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBpc0xlZnQgPSBvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCc7XG5cdFx0XHRcdFx0c2NhbGVMYWJlbFggPSBpc0xlZnRcblx0XHRcdFx0XHRcdD8gbWUubGVmdCArIGhhbGZMaW5lSGVpZ2h0ICsgc2NhbGVMYWJlbFBhZGRpbmcudG9wXG5cdFx0XHRcdFx0XHQ6IG1lLnJpZ2h0IC0gaGFsZkxpbmVIZWlnaHQgLSBzY2FsZUxhYmVsUGFkZGluZy50b3A7XG5cdFx0XHRcdFx0c2NhbGVMYWJlbFkgPSBtZS50b3AgKyAoKG1lLmJvdHRvbSAtIG1lLnRvcCkgLyAyKTtcblx0XHRcdFx0XHRyb3RhdGlvbiA9IGlzTGVmdCA/IC0wLjUgKiBNYXRoLlBJIDogMC41ICogTWF0aC5QSTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnRleHQuc2F2ZSgpO1xuXHRcdFx0XHRjb250ZXh0LnRyYW5zbGF0ZShzY2FsZUxhYmVsWCwgc2NhbGVMYWJlbFkpO1xuXHRcdFx0XHRjb250ZXh0LnJvdGF0ZShyb3RhdGlvbik7XG5cdFx0XHRcdGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gc2NhbGVMYWJlbEZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0XHRcdGNvbnRleHQuZm9udCA9IHNjYWxlTGFiZWxGb250LmZvbnQ7XG5cdFx0XHRcdGNvbnRleHQuZmlsbFRleHQoc2NhbGVMYWJlbC5sYWJlbFN0cmluZywgMCwgMCk7XG5cdFx0XHRcdGNvbnRleHQucmVzdG9yZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZ3JpZExpbmVzLmRyYXdCb3JkZXIpIHtcblx0XHRcdFx0Ly8gRHJhdyB0aGUgbGluZSBhdCB0aGUgZWRnZSBvZiB0aGUgYXhpc1xuXHRcdFx0XHRjb250ZXh0LmxpbmVXaWR0aCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIDApO1xuXHRcdFx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCAwKTtcblx0XHRcdFx0dmFyIHgxID0gbWUubGVmdDtcblx0XHRcdFx0dmFyIHgyID0gbWUucmlnaHQ7XG5cdFx0XHRcdHZhciB5MSA9IG1lLnRvcDtcblx0XHRcdFx0dmFyIHkyID0gbWUuYm90dG9tO1xuXG5cdFx0XHRcdHZhciBhbGlhc1BpeGVsID0gaGVscGVycy5hbGlhc1BpeGVsKGNvbnRleHQubGluZVdpZHRoKTtcblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdHkxID0geTIgPSBvcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyA/IG1lLmJvdHRvbSA6IG1lLnRvcDtcblx0XHRcdFx0XHR5MSArPSBhbGlhc1BpeGVsO1xuXHRcdFx0XHRcdHkyICs9IGFsaWFzUGl4ZWw7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eDEgPSB4MiA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0JyA/IG1lLnJpZ2h0IDogbWUubGVmdDtcblx0XHRcdFx0XHR4MSArPSBhbGlhc1BpeGVsO1xuXHRcdFx0XHRcdHgyICs9IGFsaWFzUGl4ZWw7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyh4MSwgeTEpO1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuXHRcdFx0XHRjb250ZXh0LnN0cm9rZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59O1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOSxcIi4vY29yZS5kZWZhdWx0c1wiOjE5LFwiLi9jb3JlLmVsZW1lbnRcIjoyMCxcIi4vY29yZS50aWNrc1wiOjI4fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuc2NhbGVTZXJ2aWNlID0ge1xuXHRcdC8vIFNjYWxlIHJlZ2lzdHJhdGlvbiBvYmplY3QuIEV4dGVuc2lvbnMgY2FuIHJlZ2lzdGVyIG5ldyBzY2FsZSB0eXBlcyAoc3VjaCBhcyBsb2cgb3IgREIgc2NhbGVzKSBhbmQgdGhlblxuXHRcdC8vIHVzZSB0aGUgbmV3IGNoYXJ0IG9wdGlvbnMgdG8gZ3JhYiB0aGUgY29ycmVjdCBzY2FsZVxuXHRcdGNvbnN0cnVjdG9yczoge30sXG5cdFx0Ly8gVXNlIGEgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIHNvIHRoYXQgd2UgY2FuIG1vdmUgdG8gYW4gRVM2IG1hcCB3aGVuIHdlIG5vIGxvbmdlciBuZWVkIHRvIHN1cHBvcnRcblx0XHQvLyBvbGQgYnJvd3NlcnNcblxuXHRcdC8vIFNjYWxlIGNvbmZpZyBkZWZhdWx0c1xuXHRcdGRlZmF1bHRzOiB7fSxcblx0XHRyZWdpc3RlclNjYWxlVHlwZTogZnVuY3Rpb24odHlwZSwgc2NhbGVDb25zdHJ1Y3Rvciwgc2NhbGVEZWZhdWx0cykge1xuXHRcdFx0dGhpcy5jb25zdHJ1Y3RvcnNbdHlwZV0gPSBzY2FsZUNvbnN0cnVjdG9yO1xuXHRcdFx0dGhpcy5kZWZhdWx0c1t0eXBlXSA9IGhlbHBlcnMuY2xvbmUoc2NhbGVEZWZhdWx0cyk7XG5cdFx0fSxcblx0XHRnZXRTY2FsZUNvbnN0cnVjdG9yOiBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyB0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA6IHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdGdldFNjYWxlRGVmYXVsdHM6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdC8vIFJldHVybiB0aGUgc2NhbGUgZGVmYXVsdHMgbWVyZ2VkIHdpdGggdGhlIGdsb2JhbCBzZXR0aW5ncyBzbyB0aGF0IHdlIGFsd2F5cyB1c2UgdGhlIGxhdGVzdCBvbmVzXG5cdFx0XHRyZXR1cm4gdGhpcy5kZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGhlbHBlcnMubWVyZ2Uoe30sIFtkZWZhdWx0cy5zY2FsZSwgdGhpcy5kZWZhdWx0c1t0eXBlXV0pIDoge307XG5cdFx0fSxcblx0XHR1cGRhdGVTY2FsZURlZmF1bHRzOiBmdW5jdGlvbih0eXBlLCBhZGRpdGlvbnMpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHRpZiAobWUuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcblx0XHRcdFx0bWUuZGVmYXVsdHNbdHlwZV0gPSBoZWxwZXJzLmV4dGVuZChtZS5kZWZhdWx0c1t0eXBlXSwgYWRkaXRpb25zKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFkZFNjYWxlc1RvTGF5b3V0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0Ly8gQWRkcyBlYWNoIHNjYWxlIHRvIHRoZSBjaGFydC5ib3hlcyBhcnJheSB0byBiZSBzaXplZCBhY2NvcmRpbmdseVxuXHRcdFx0aGVscGVycy5lYWNoKGNoYXJ0LnNjYWxlcywgZnVuY3Rpb24oc2NhbGUpIHtcblx0XHRcdFx0Ly8gU2V0IElMYXlvdXRJdGVtIHBhcmFtZXRlcnMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdHNjYWxlLmZ1bGxXaWR0aCA9IHNjYWxlLm9wdGlvbnMuZnVsbFdpZHRoO1xuXHRcdFx0XHRzY2FsZS5wb3NpdGlvbiA9IHNjYWxlLm9wdGlvbnMucG9zaXRpb247XG5cdFx0XHRcdHNjYWxlLndlaWdodCA9IHNjYWxlLm9wdGlvbnMud2VpZ2h0O1xuXHRcdFx0XHRDaGFydC5sYXlvdXRTZXJ2aWNlLmFkZEJveChjaGFydCwgc2NhbGUpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xufTtcblxufSx7XCIuLi9oZWxwZXJzL2luZGV4XCI6MzksXCIuL2NvcmUuZGVmYXVsdHNcIjoxOX1dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbi8qKlxuICogTmFtZXNwYWNlIHRvIGhvbGQgc3RhdGljIHRpY2sgZ2VuZXJhdGlvbiBmdW5jdGlvbnNcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuVGlja3NcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBOYW1lc3BhY2UgdG8gaG9sZCBnZW5lcmF0b3JzIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgdGlja3Ncblx0ICogQG5hbWVzcGFjZSBDaGFydC5UaWNrcy5nZW5lcmF0b3JzXG5cdCAqL1xuXHRnZW5lcmF0b3JzOiB7XG5cdFx0LyoqXG5cdFx0ICogSW50ZXJmYWNlIGZvciB0aGUgb3B0aW9ucyBwcm92aWRlZCB0byB0aGUgbnVtZXJpYyB0aWNrIGdlbmVyYXRvclxuXHRcdCAqIEBpbnRlcmZhY2UgSU51bWVyaWNUaWNrR2VuZXJhdGlvbk9wdGlvbnNcblx0XHQgKi9cblx0XHQvKipcblx0XHQgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdGlja3MgdG8gZGlzcGxheVxuXHRcdCAqIEBuYW1lIElOdW1lcmljVGlja0dlbmVyYXRpb25PcHRpb25zI21heFRpY2tzXG5cdFx0ICogQHR5cGUgTnVtYmVyXG5cdFx0ICovXG5cdFx0LyoqXG5cdFx0ICogVGhlIGRpc3RhbmNlIGJldHdlZW4gZWFjaCB0aWNrLlxuXHRcdCAqIEBuYW1lIElOdW1lcmljVGlja0dlbmVyYXRpb25PcHRpb25zI3N0ZXBTaXplXG5cdFx0ICogQHR5cGUgTnVtYmVyXG5cdFx0ICogQG9wdGlvbmFsXG5cdFx0ICovXG5cdFx0LyoqXG5cdFx0ICogRm9yY2VkIG1pbmltdW0gZm9yIHRoZSB0aWNrcy4gSWYgbm90IHNwZWNpZmllZCwgdGhlIG1pbmltdW0gb2YgdGhlIGRhdGEgcmFuZ2UgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHRpY2sgbWluaW11bVxuXHRcdCAqIEBuYW1lIElOdW1lcmljVGlja0dlbmVyYXRpb25PcHRpb25zI21pblxuXHRcdCAqIEB0eXBlIE51bWJlclxuXHRcdCAqIEBvcHRpb25hbFxuXHRcdCAqL1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBtYXhpbXVtIHZhbHVlIG9mIHRoZSB0aWNrcy4gSWYgbm90IHNwZWNpZmllZCwgdGhlIG1heGltdW0gb2YgdGhlIGRhdGEgcmFuZ2UgaXMgdXNlZCB0byBjYWxjdWxhdGUgdGhlIHRpY2sgbWF4aW11bVxuXHRcdCAqIEBuYW1lIElOdW1lcmljVGlja0dlbmVyYXRpb25PcHRpb25zI21heFxuXHRcdCAqIEB0eXBlIE51bWJlclxuXHRcdCAqIEBvcHRpb25hbFxuXHRcdCAqL1xuXG5cdFx0LyoqXG5cdFx0ICogR2VuZXJhdGUgYSBzZXQgb2YgbGluZWFyIHRpY2tzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5nZW5lcmF0b3JzLmxpbmVhclxuXHRcdCAqIEBwYXJhbSBnZW5lcmF0aW9uT3B0aW9ucyB7SU51bWVyaWNUaWNrR2VuZXJhdGlvbk9wdGlvbnN9IHRoZSBvcHRpb25zIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHRpY2tzXG5cdFx0ICogQHBhcmFtIGRhdGFSYW5nZSB7SVJhbmdlfSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcblx0XHQgKiBAcmV0dXJucyB7QXJyYXk8TnVtYmVyPn0gYXJyYXkgb2YgdGljayB2YWx1ZXNcblx0XHQgKi9cblx0XHRsaW5lYXI6IGZ1bmN0aW9uKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcblx0XHRcdHZhciB0aWNrcyA9IFtdO1xuXHRcdFx0Ly8gVG8gZ2V0IGEgXCJuaWNlXCIgdmFsdWUgZm9yIHRoZSB0aWNrIHNwYWNpbmcsIHdlIHdpbGwgdXNlIHRoZSBhcHByb3ByaWF0ZWx5IG5hbWVkXG5cdFx0XHQvLyBcIm5pY2UgbnVtYmVyXCIgYWxnb3JpdGhtLiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTA2ODgxL25pY2UtbGFiZWwtYWxnb3JpdGhtLWZvci1jaGFydHMtd2l0aC1taW5pbXVtLXRpY2tzXG5cdFx0XHQvLyBmb3IgZGV0YWlscy5cblxuXHRcdFx0dmFyIHNwYWNpbmc7XG5cdFx0XHRpZiAoZ2VuZXJhdGlvbk9wdGlvbnMuc3RlcFNpemUgJiYgZ2VuZXJhdGlvbk9wdGlvbnMuc3RlcFNpemUgPiAwKSB7XG5cdFx0XHRcdHNwYWNpbmcgPSBnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBuaWNlUmFuZ2UgPSBoZWxwZXJzLm5pY2VOdW0oZGF0YVJhbmdlLm1heCAtIGRhdGFSYW5nZS5taW4sIGZhbHNlKTtcblx0XHRcdFx0c3BhY2luZyA9IGhlbHBlcnMubmljZU51bShuaWNlUmFuZ2UgLyAoZ2VuZXJhdGlvbk9wdGlvbnMubWF4VGlja3MgLSAxKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbmljZU1pbiA9IE1hdGguZmxvb3IoZGF0YVJhbmdlLm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcblx0XHRcdHZhciBuaWNlTWF4ID0gTWF0aC5jZWlsKGRhdGFSYW5nZS5tYXggLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG5cblx0XHRcdC8vIElmIG1pbiwgbWF4IGFuZCBzdGVwU2l6ZSBpcyBzZXQgYW5kIHRoZXkgbWFrZSBhbiBldmVubHkgc3BhY2VkIHNjYWxlIHVzZSBpdC5cblx0XHRcdGlmIChnZW5lcmF0aW9uT3B0aW9ucy5taW4gJiYgZ2VuZXJhdGlvbk9wdGlvbnMubWF4ICYmIGdlbmVyYXRpb25PcHRpb25zLnN0ZXBTaXplKSB7XG5cdFx0XHRcdC8vIElmIHZlcnkgY2xvc2UgdG8gb3VyIHdob2xlIG51bWJlciwgdXNlIGl0LlxuXHRcdFx0XHRpZiAoaGVscGVycy5hbG1vc3RXaG9sZSgoZ2VuZXJhdGlvbk9wdGlvbnMubWF4IC0gZ2VuZXJhdGlvbk9wdGlvbnMubWluKSAvIGdlbmVyYXRpb25PcHRpb25zLnN0ZXBTaXplLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRcdFx0XHRuaWNlTWluID0gZ2VuZXJhdGlvbk9wdGlvbnMubWluO1xuXHRcdFx0XHRcdG5pY2VNYXggPSBnZW5lcmF0aW9uT3B0aW9ucy5tYXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuXHRcdFx0Ly8gSWYgdmVyeSBjbG9zZSB0byBvdXIgcm91bmRlZCB2YWx1ZSwgdXNlIGl0LlxuXHRcdFx0aWYgKGhlbHBlcnMuYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRcdFx0bnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCB0aGUgdmFsdWVzIGludG8gdGhlIHRpY2tzIGFycmF5XG5cdFx0XHR0aWNrcy5wdXNoKGdlbmVyYXRpb25PcHRpb25zLm1pbiAhPT0gdW5kZWZpbmVkID8gZ2VuZXJhdGlvbk9wdGlvbnMubWluIDogbmljZU1pbik7XG5cdFx0XHRmb3IgKHZhciBqID0gMTsgaiA8IG51bVNwYWNlczsgKytqKSB7XG5cdFx0XHRcdHRpY2tzLnB1c2gobmljZU1pbiArIChqICogc3BhY2luZykpO1xuXHRcdFx0fVxuXHRcdFx0dGlja3MucHVzaChnZW5lcmF0aW9uT3B0aW9ucy5tYXggIT09IHVuZGVmaW5lZCA/IGdlbmVyYXRpb25PcHRpb25zLm1heCA6IG5pY2VNYXgpO1xuXG5cdFx0XHRyZXR1cm4gdGlja3M7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEdlbmVyYXRlIGEgc2V0IG9mIGxvZ2FyaXRobWljIHRpY2tzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5nZW5lcmF0b3JzLmxvZ2FyaXRobWljXG5cdFx0ICogQHBhcmFtIGdlbmVyYXRpb25PcHRpb25zIHtJTnVtZXJpY1RpY2tHZW5lcmF0aW9uT3B0aW9uc30gdGhlIG9wdGlvbnMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgdGlja3Ncblx0XHQgKiBAcGFyYW0gZGF0YVJhbmdlIHtJUmFuZ2V9IHRoZSByYW5nZSBvZiB0aGUgZGF0YVxuXHRcdCAqIEByZXR1cm5zIHtBcnJheTxOdW1iZXI+fSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuXHRcdCAqL1xuXHRcdGxvZ2FyaXRobWljOiBmdW5jdGlvbihnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG5cdFx0XHR2YXIgdGlja3MgPSBbXTtcblx0XHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cblx0XHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCB0aGUgbWF4IG51bWJlciBvZiB0aWNrcyB3ZSBjYW4gc3VwcG9ydCBpdCBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZlxuXHRcdFx0Ly8gdGhlIGF4aXMgYXJlYS4gRm9yIG5vdywgd2Ugc2F5IHRoYXQgdGhlIG1pbmltdW0gdGljayBzcGFjaW5nIGluIHBpeGVscyBtdXN0IGJlIDUwXG5cdFx0XHQvLyBXZSBhbHNvIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyB0byAxMSB3aGljaCBnaXZlcyBhIG5pY2UgMTAgc3F1YXJlcyBvblxuXHRcdFx0Ly8gdGhlIGdyYXBoXG5cdFx0XHR2YXIgdGlja1ZhbCA9IHZhbHVlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcblxuXHRcdFx0dmFyIGVuZEV4cCA9IE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChkYXRhUmFuZ2UubWF4KSk7XG5cdFx0XHR2YXIgZW5kU2lnbmlmaWNhbmQgPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIE1hdGgucG93KDEwLCBlbmRFeHApKTtcblx0XHRcdHZhciBleHAsIHNpZ25pZmljYW5kO1xuXG5cdFx0XHRpZiAodGlja1ZhbCA9PT0gMCkge1xuXHRcdFx0XHRleHAgPSBNYXRoLmZsb29yKGhlbHBlcnMubG9nMTAoZGF0YVJhbmdlLm1pbk5vdFplcm8pKTtcblx0XHRcdFx0c2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKGRhdGFSYW5nZS5taW5Ob3RaZXJvIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuXG5cdFx0XHRcdHRpY2tzLnB1c2godGlja1ZhbCk7XG5cdFx0XHRcdHRpY2tWYWwgPSBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXhwID0gTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKHRpY2tWYWwpKTtcblx0XHRcdFx0c2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKHRpY2tWYWwgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG5cdFx0XHR9XG5cblx0XHRcdGRvIHtcblx0XHRcdFx0dGlja3MucHVzaCh0aWNrVmFsKTtcblxuXHRcdFx0XHQrK3NpZ25pZmljYW5kO1xuXHRcdFx0XHRpZiAoc2lnbmlmaWNhbmQgPT09IDEwKSB7XG5cdFx0XHRcdFx0c2lnbmlmaWNhbmQgPSAxO1xuXHRcdFx0XHRcdCsrZXhwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGlja1ZhbCA9IHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCk7XG5cdFx0XHR9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcblxuXHRcdFx0dmFyIGxhc3RUaWNrID0gdmFsdWVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcblx0XHRcdHRpY2tzLnB1c2gobGFzdFRpY2spO1xuXG5cdFx0XHRyZXR1cm4gdGlja3M7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBOYW1lc3BhY2UgdG8gaG9sZCBmb3JtYXR0ZXJzIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgdGlja3Ncblx0ICogQG5hbWVzcGFjZSBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzXG5cdCAqL1xuXHRmb3JtYXR0ZXJzOiB7XG5cdFx0LyoqXG5cdFx0ICogRm9ybWF0dGVyIGZvciB2YWx1ZSBsYWJlbHNcblx0XHQgKiBAbWV0aG9kIENoYXJ0LlRpY2tzLmZvcm1hdHRlcnMudmFsdWVzXG5cdFx0ICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBkaXNwbGF5XG5cdFx0ICogQHJldHVybiB7U3RyaW5nfEFycmF5fSB0aGUgbGFiZWwgdG8gZGlzcGxheVxuXHRcdCAqL1xuXHRcdHZhbHVlczogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiBoZWxwZXJzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGb3JtYXR0ZXIgZm9yIGxpbmVhciBudW1lcmljIHRpY2tzXG5cdFx0ICogQG1ldGhvZCBDaGFydC5UaWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHRcdCAqIEBwYXJhbSB0aWNrVmFsdWUge051bWJlcn0gdGhlIHZhbHVlIHRvIGJlIGZvcm1hdHRlZFxuXHRcdCAqIEBwYXJhbSBpbmRleCB7TnVtYmVyfSB0aGUgcG9zaXRpb24gb2YgdGhlIHRpY2tWYWx1ZSBwYXJhbWV0ZXIgaW4gdGhlIHRpY2tzIGFycmF5XG5cdFx0ICogQHBhcmFtIHRpY2tzIHtBcnJheTxOdW1iZXI+fSB0aGUgbGlzdCBvZiB0aWNrcyBiZWluZyBjb252ZXJ0ZWRcblx0XHQgKiBAcmV0dXJuIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGlja1ZhbHVlIHBhcmFtZXRlclxuXHRcdCAqL1xuXHRcdGxpbmVhcjogZnVuY3Rpb24odGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcblx0XHRcdC8vIElmIHdlIGhhdmUgbG90cyBvZiB0aWNrcywgZG9uJ3QgdXNlIHRoZSBvbmVzXG5cdFx0XHR2YXIgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0gLSB0aWNrc1sxXSA6IHRpY2tzWzFdIC0gdGlja3NbMF07XG5cblx0XHRcdC8vIElmIHdlIGhhdmUgYSBudW1iZXIgbGlrZSAyLjUgYXMgdGhlIGRlbHRhLCBmaWd1cmUgb3V0IGhvdyBtYW55IGRlY2ltYWwgcGxhY2VzIHdlIG5lZWRcblx0XHRcdGlmIChNYXRoLmFicyhkZWx0YSkgPiAxKSB7XG5cdFx0XHRcdGlmICh0aWNrVmFsdWUgIT09IE1hdGguZmxvb3IodGlja1ZhbHVlKSkge1xuXHRcdFx0XHRcdC8vIG5vdCBhbiBpbnRlZ2VyXG5cdFx0XHRcdFx0ZGVsdGEgPSB0aWNrVmFsdWUgLSBNYXRoLmZsb29yKHRpY2tWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIGxvZ0RlbHRhID0gaGVscGVycy5sb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuXHRcdFx0dmFyIHRpY2tTdHJpbmcgPSAnJztcblxuXHRcdFx0aWYgKHRpY2tWYWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR2YXIgbnVtRGVjaW1hbCA9IC0xICogTWF0aC5mbG9vcihsb2dEZWx0YSk7XG5cdFx0XHRcdG51bURlY2ltYWwgPSBNYXRoLm1heChNYXRoLm1pbihudW1EZWNpbWFsLCAyMCksIDApOyAvLyB0b0ZpeGVkIGhhcyBhIG1heCBvZiAyMCBkZWNpbWFsIHBsYWNlc1xuXHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRml4ZWQobnVtRGVjaW1hbCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aWNrU3RyaW5nID0gJzAnOyAvLyBuZXZlciBzaG93IGRlY2ltYWwgcGxhY2VzIGZvciAwXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aWNrU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRsb2dhcml0aG1pYzogZnVuY3Rpb24odGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcblx0XHRcdHZhciByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMCh0aWNrVmFsdWUpKSkpO1xuXG5cdFx0XHRpZiAodGlja1ZhbHVlID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAnMCc7XG5cdFx0XHR9IGVsc2UgaWYgKHJlbWFpbiA9PT0gMSB8fCByZW1haW4gPT09IDIgfHwgcmVtYWluID09PSA1IHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSB0aWNrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdHJldHVybiB0aWNrVmFsdWUudG9FeHBvbmVudGlhbCgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxufTtcblxufSx7XCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vY29yZS5kZWZhdWx0cycpO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuL2NvcmUuZWxlbWVudCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0dG9vbHRpcHM6IHtcblx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdGN1c3RvbTogbnVsbCxcblx0XHRtb2RlOiAnbmVhcmVzdCcsXG5cdFx0cG9zaXRpb246ICdhdmVyYWdlJyxcblx0XHRpbnRlcnNlY3Q6IHRydWUsXG5cdFx0YmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyxcblx0XHR0aXRsZUZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdHRpdGxlU3BhY2luZzogMixcblx0XHR0aXRsZU1hcmdpbkJvdHRvbTogNixcblx0XHR0aXRsZUZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdHRpdGxlQWxpZ246ICdsZWZ0Jyxcblx0XHRib2R5U3BhY2luZzogMixcblx0XHRib2R5Rm9udENvbG9yOiAnI2ZmZicsXG5cdFx0Ym9keUFsaWduOiAnbGVmdCcsXG5cdFx0Zm9vdGVyRm9udFN0eWxlOiAnYm9sZCcsXG5cdFx0Zm9vdGVyU3BhY2luZzogMixcblx0XHRmb290ZXJNYXJnaW5Ub3A6IDYsXG5cdFx0Zm9vdGVyRm9udENvbG9yOiAnI2ZmZicsXG5cdFx0Zm9vdGVyQWxpZ246ICdsZWZ0Jyxcblx0XHR5UGFkZGluZzogNixcblx0XHR4UGFkZGluZzogNixcblx0XHRjYXJldFBhZGRpbmc6IDIsXG5cdFx0Y2FyZXRTaXplOiA1LFxuXHRcdGNvcm5lclJhZGl1czogNixcblx0XHRtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcblx0XHRkaXNwbGF5Q29sb3JzOiB0cnVlLFxuXHRcdGJvcmRlckNvbG9yOiAncmdiYSgwLDAsMCwwKScsXG5cdFx0Ym9yZGVyV2lkdGg6IDAsXG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGJlZm9yZVRpdGxlOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHR0aXRsZTogZnVuY3Rpb24odG9vbHRpcEl0ZW1zLCBkYXRhKSB7XG5cdFx0XHRcdC8vIFBpY2sgZmlyc3QgeExhYmVsIGZvciBub3dcblx0XHRcdFx0dmFyIHRpdGxlID0gJyc7XG5cdFx0XHRcdHZhciBsYWJlbHMgPSBkYXRhLmxhYmVscztcblx0XHRcdFx0dmFyIGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcblxuXHRcdFx0XHRpZiAodG9vbHRpcEl0ZW1zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgaXRlbSA9IHRvb2x0aXBJdGVtc1swXTtcblxuXHRcdFx0XHRcdGlmIChpdGVtLnhMYWJlbCkge1xuXHRcdFx0XHRcdFx0dGl0bGUgPSBpdGVtLnhMYWJlbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGxhYmVsQ291bnQgPiAwICYmIGl0ZW0uaW5kZXggPCBsYWJlbENvdW50KSB7XG5cdFx0XHRcdFx0XHR0aXRsZSA9IGxhYmVsc1tpdGVtLmluZGV4XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0XHR9LFxuXHRcdFx0YWZ0ZXJUaXRsZTogaGVscGVycy5ub29wLFxuXG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGJlZm9yZUJvZHk6IGhlbHBlcnMubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0XHRcdGJlZm9yZUxhYmVsOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGRhdGEpIHtcblx0XHRcdFx0dmFyIGxhYmVsID0gZGF0YS5kYXRhc2V0c1t0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXhdLmxhYmVsIHx8ICcnO1xuXG5cdFx0XHRcdGlmIChsYWJlbCkge1xuXHRcdFx0XHRcdGxhYmVsICs9ICc6ICc7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGFiZWwgKz0gdG9vbHRpcEl0ZW0ueUxhYmVsO1xuXHRcdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWxDb2xvcjogZnVuY3Rpb24odG9vbHRpcEl0ZW0sIGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcblx0XHRcdFx0dmFyIGFjdGl2ZUVsZW1lbnQgPSBtZXRhLmRhdGFbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuXHRcdFx0XHR2YXIgdmlldyA9IGFjdGl2ZUVsZW1lbnQuX3ZpZXc7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IHZpZXcuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiB2aWV3LmJhY2tncm91bmRDb2xvclxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsVGV4dENvbG9yOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX29wdGlvbnMuYm9keUZvbnRDb2xvcjtcblx0XHRcdH0sXG5cdFx0XHRhZnRlckxhYmVsOiBoZWxwZXJzLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW1zLCBkYXRhKVxuXHRcdFx0YWZ0ZXJCb2R5OiBoZWxwZXJzLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW1zLCBkYXRhKVxuXHRcdFx0YmVmb3JlRm9vdGVyOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRmb290ZXI6IGhlbHBlcnMubm9vcCxcblx0XHRcdGFmdGVyRm9vdGVyOiBoZWxwZXJzLm5vb3Bcblx0XHR9XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0LyoqXG4gXHQgKiBIZWxwZXIgbWV0aG9kIHRvIG1lcmdlIHRoZSBvcGFjaXR5IGludG8gYSBjb2xvclxuIFx0ICovXG5cdGZ1bmN0aW9uIG1lcmdlT3BhY2l0eShjb2xvclN0cmluZywgb3BhY2l0eSkge1xuXHRcdHZhciBjb2xvciA9IGhlbHBlcnMuY29sb3IoY29sb3JTdHJpbmcpO1xuXHRcdHJldHVybiBjb2xvci5hbHBoYShvcGFjaXR5ICogY29sb3IuYWxwaGEoKSkucmdiYVN0cmluZygpO1xuXHR9XG5cblx0Ly8gSGVscGVyIHRvIHB1c2ggb3IgY29uY2F0IGJhc2VkIG9uIGlmIHRoZSAybmQgcGFyYW1ldGVyIGlzIGFuIGFycmF5IG9yIG5vdFxuXHRmdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG5cdFx0aWYgKHRvUHVzaCkge1xuXHRcdFx0aWYgKGhlbHBlcnMuaXNBcnJheSh0b1B1c2gpKSB7XG5cdFx0XHRcdC8vIGJhc2UgPSBiYXNlLmNvbmNhdCh0b1B1c2gpO1xuXHRcdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YmFzZS5wdXNoKHRvUHVzaCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJhc2U7XG5cdH1cblxuXHQvLyBQcml2YXRlIGhlbHBlciB0byBjcmVhdGUgYSB0b29sdGlwIGl0ZW0gbW9kZWxcblx0Ly8gQHBhcmFtIGVsZW1lbnQgOiB0aGUgY2hhcnQgZWxlbWVudCAocG9pbnQsIGFyYywgYmFyKSB0byBjcmVhdGUgdGhlIHRvb2x0aXAgaXRlbSBmb3Jcblx0Ly8gQHJldHVybiA6IG5ldyB0b29sdGlwIGl0ZW1cblx0ZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oZWxlbWVudCkge1xuXHRcdHZhciB4U2NhbGUgPSBlbGVtZW50Ll94U2NhbGU7XG5cdFx0dmFyIHlTY2FsZSA9IGVsZW1lbnQuX3lTY2FsZSB8fCBlbGVtZW50Ll9zY2FsZTsgLy8gaGFuZGxlIHJhZGFyIHx8IHBvbGFyQXJlYSBjaGFydHNcblx0XHR2YXIgaW5kZXggPSBlbGVtZW50Ll9pbmRleDtcblx0XHR2YXIgZGF0YXNldEluZGV4ID0gZWxlbWVudC5fZGF0YXNldEluZGV4O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHhMYWJlbDogeFNjYWxlID8geFNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHRcdHlMYWJlbDogeVNjYWxlID8geVNjYWxlLmdldExhYmVsRm9ySW5kZXgoaW5kZXgsIGRhdGFzZXRJbmRleCkgOiAnJyxcblx0XHRcdGluZGV4OiBpbmRleCxcblx0XHRcdGRhdGFzZXRJbmRleDogZGF0YXNldEluZGV4LFxuXHRcdFx0eDogZWxlbWVudC5fbW9kZWwueCxcblx0XHRcdHk6IGVsZW1lbnQuX21vZGVsLnlcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEhlbHBlciB0byBnZXQgdGhlIHJlc2V0IG1vZGVsIGZvciB0aGUgdG9vbHRpcFxuXHQgKiBAcGFyYW0gdG9vbHRpcE9wdHMge09iamVjdH0gdGhlIHRvb2x0aXAgb3B0aW9uc1xuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0QmFzZU1vZGVsKHRvb2x0aXBPcHRzKSB7XG5cdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0Ly8gUG9zaXRpb25pbmdcblx0XHRcdHhQYWRkaW5nOiB0b29sdGlwT3B0cy54UGFkZGluZyxcblx0XHRcdHlQYWRkaW5nOiB0b29sdGlwT3B0cy55UGFkZGluZyxcblx0XHRcdHhBbGlnbjogdG9vbHRpcE9wdHMueEFsaWduLFxuXHRcdFx0eUFsaWduOiB0b29sdGlwT3B0cy55QWxpZ24sXG5cblx0XHRcdC8vIEJvZHlcblx0XHRcdGJvZHlGb250Q29sb3I6IHRvb2x0aXBPcHRzLmJvZHlGb250Q29sb3IsXG5cdFx0XHRfYm9keUZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmJvZHlGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0XHRfYm9keUZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQodG9vbHRpcE9wdHMuYm9keUZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0XHRfYm9keUFsaWduOiB0b29sdGlwT3B0cy5ib2R5QWxpZ24sXG5cdFx0XHRib2R5Rm9udFNpemU6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmJvZHlGb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKSxcblx0XHRcdGJvZHlTcGFjaW5nOiB0b29sdGlwT3B0cy5ib2R5U3BhY2luZyxcblxuXHRcdFx0Ly8gVGl0bGVcblx0XHRcdHRpdGxlRm9udENvbG9yOiB0b29sdGlwT3B0cy50aXRsZUZvbnRDb2xvcixcblx0XHRcdF90aXRsZUZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLnRpdGxlRm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpLFxuXHRcdFx0X3RpdGxlRm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy50aXRsZUZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSksXG5cdFx0XHR0aXRsZUZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy50aXRsZUZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdFx0X3RpdGxlQWxpZ246IHRvb2x0aXBPcHRzLnRpdGxlQWxpZ24sXG5cdFx0XHR0aXRsZVNwYWNpbmc6IHRvb2x0aXBPcHRzLnRpdGxlU3BhY2luZyxcblx0XHRcdHRpdGxlTWFyZ2luQm90dG9tOiB0b29sdGlwT3B0cy50aXRsZU1hcmdpbkJvdHRvbSxcblxuXHRcdFx0Ly8gRm9vdGVyXG5cdFx0XHRmb290ZXJGb250Q29sb3I6IHRvb2x0aXBPcHRzLmZvb3RlckZvbnRDb2xvcixcblx0XHRcdF9mb290ZXJGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy5mb290ZXJGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0XHRfZm9vdGVyRm9udFN0eWxlOiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy5mb290ZXJGb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpLFxuXHRcdFx0Zm9vdGVyRm9udFNpemU6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmZvb3RlckZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdFx0X2Zvb3RlckFsaWduOiB0b29sdGlwT3B0cy5mb290ZXJBbGlnbixcblx0XHRcdGZvb3RlclNwYWNpbmc6IHRvb2x0aXBPcHRzLmZvb3RlclNwYWNpbmcsXG5cdFx0XHRmb290ZXJNYXJnaW5Ub3A6IHRvb2x0aXBPcHRzLmZvb3Rlck1hcmdpblRvcCxcblxuXHRcdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdFx0Y2FyZXRTaXplOiB0b29sdGlwT3B0cy5jYXJldFNpemUsXG5cdFx0XHRjb3JuZXJSYWRpdXM6IHRvb2x0aXBPcHRzLmNvcm5lclJhZGl1cyxcblx0XHRcdGJhY2tncm91bmRDb2xvcjogdG9vbHRpcE9wdHMuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0b3BhY2l0eTogMCxcblx0XHRcdGxlZ2VuZENvbG9yQmFja2dyb3VuZDogdG9vbHRpcE9wdHMubXVsdGlLZXlCYWNrZ3JvdW5kLFxuXHRcdFx0ZGlzcGxheUNvbG9yczogdG9vbHRpcE9wdHMuZGlzcGxheUNvbG9ycyxcblx0XHRcdGJvcmRlckNvbG9yOiB0b29sdGlwT3B0cy5ib3JkZXJDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiB0b29sdGlwT3B0cy5ib3JkZXJXaWR0aFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBzaXplIG9mIHRoZSB0b29sdGlwXG5cdCAqL1xuXHRmdW5jdGlvbiBnZXRUb29sdGlwU2l6ZSh0b29sdGlwLCBtb2RlbCkge1xuXHRcdHZhciBjdHggPSB0b29sdGlwLl9jaGFydC5jdHg7XG5cblx0XHR2YXIgaGVpZ2h0ID0gbW9kZWwueVBhZGRpbmcgKiAyOyAvLyBUb29sdGlwIFBhZGRpbmdcblx0XHR2YXIgd2lkdGggPSAwO1xuXG5cdFx0Ly8gQ291bnQgb2YgYWxsIGxpbmVzIGluIHRoZSBib2R5XG5cdFx0dmFyIGJvZHkgPSBtb2RlbC5ib2R5O1xuXHRcdHZhciBjb21iaW5lZEJvZHlMZW5ndGggPSBib2R5LnJlZHVjZShmdW5jdGlvbihjb3VudCwgYm9keUl0ZW0pIHtcblx0XHRcdHJldHVybiBjb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGg7XG5cdFx0fSwgMCk7XG5cdFx0Y29tYmluZWRCb2R5TGVuZ3RoICs9IG1vZGVsLmJlZm9yZUJvZHkubGVuZ3RoICsgbW9kZWwuYWZ0ZXJCb2R5Lmxlbmd0aDtcblxuXHRcdHZhciB0aXRsZUxpbmVDb3VudCA9IG1vZGVsLnRpdGxlLmxlbmd0aDtcblx0XHR2YXIgZm9vdGVyTGluZUNvdW50ID0gbW9kZWwuZm9vdGVyLmxlbmd0aDtcblx0XHR2YXIgdGl0bGVGb250U2l6ZSA9IG1vZGVsLnRpdGxlRm9udFNpemU7XG5cdFx0dmFyIGJvZHlGb250U2l6ZSA9IG1vZGVsLmJvZHlGb250U2l6ZTtcblx0XHR2YXIgZm9vdGVyRm9udFNpemUgPSBtb2RlbC5mb290ZXJGb250U2l6ZTtcblxuXHRcdGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udFNpemU7IC8vIFRpdGxlIExpbmVzXG5cdFx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gKHRpdGxlTGluZUNvdW50IC0gMSkgKiBtb2RlbC50aXRsZVNwYWNpbmcgOiAwOyAvLyBUaXRsZSBMaW5lIFNwYWNpbmdcblx0XHRoZWlnaHQgKz0gdGl0bGVMaW5lQ291bnQgPyBtb2RlbC50aXRsZU1hcmdpbkJvdHRvbSA6IDA7IC8vIFRpdGxlJ3MgYm90dG9tIE1hcmdpblxuXHRcdGhlaWdodCArPSBjb21iaW5lZEJvZHlMZW5ndGggKiBib2R5Rm9udFNpemU7IC8vIEJvZHkgTGluZXNcblx0XHRoZWlnaHQgKz0gY29tYmluZWRCb2R5TGVuZ3RoID8gKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogbW9kZWwuYm9keVNwYWNpbmcgOiAwOyAvLyBCb2R5IExpbmUgU3BhY2luZ1xuXHRcdGhlaWdodCArPSBmb290ZXJMaW5lQ291bnQgPyBtb2RlbC5mb290ZXJNYXJnaW5Ub3AgOiAwOyAvLyBGb290ZXIgTWFyZ2luXG5cdFx0aGVpZ2h0ICs9IGZvb3RlckxpbmVDb3VudCAqIChmb290ZXJGb250U2l6ZSk7IC8vIEZvb3RlciBMaW5lc1xuXHRcdGhlaWdodCArPSBmb290ZXJMaW5lQ291bnQgPyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBtb2RlbC5mb290ZXJTcGFjaW5nIDogMDsgLy8gRm9vdGVyIExpbmUgU3BhY2luZ1xuXG5cdFx0Ly8gVGl0bGUgd2lkdGhcblx0XHR2YXIgd2lkdGhQYWRkaW5nID0gMDtcblx0XHR2YXIgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuXHRcdFx0d2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY3R4Lm1lYXN1cmVUZXh0KGxpbmUpLndpZHRoICsgd2lkdGhQYWRkaW5nKTtcblx0XHR9O1xuXG5cdFx0Y3R4LmZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcodGl0bGVGb250U2l6ZSwgbW9kZWwuX3RpdGxlRm9udFN0eWxlLCBtb2RlbC5fdGl0bGVGb250RmFtaWx5KTtcblx0XHRoZWxwZXJzLmVhY2gobW9kZWwudGl0bGUsIG1heExpbmVXaWR0aCk7XG5cblx0XHQvLyBCb2R5IHdpZHRoXG5cdFx0Y3R4LmZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoYm9keUZvbnRTaXplLCBtb2RlbC5fYm9keUZvbnRTdHlsZSwgbW9kZWwuX2JvZHlGb250RmFtaWx5KTtcblx0XHRoZWxwZXJzLmVhY2gobW9kZWwuYmVmb3JlQm9keS5jb25jYXQobW9kZWwuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcblxuXHRcdC8vIEJvZHkgbGluZXMgbWF5IGluY2x1ZGUgc29tZSBleHRyYSB3aWR0aCBkdWUgdG8gdGhlIGNvbG9yIGJveFxuXHRcdHdpZHRoUGFkZGluZyA9IG1vZGVsLmRpc3BsYXlDb2xvcnMgPyAoYm9keUZvbnRTaXplICsgMikgOiAwO1xuXHRcdGhlbHBlcnMuZWFjaChib2R5LCBmdW5jdGlvbihib2R5SXRlbSkge1xuXHRcdFx0aGVscGVycy5lYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcblx0XHRcdGhlbHBlcnMuZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcblx0XHRcdGhlbHBlcnMuZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcblx0XHR9KTtcblxuXHRcdC8vIFJlc2V0IGJhY2sgdG8gMFxuXHRcdHdpZHRoUGFkZGluZyA9IDA7XG5cblx0XHQvLyBGb290ZXIgd2lkdGhcblx0XHRjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgbW9kZWwuX2Zvb3RlckZvbnRTdHlsZSwgbW9kZWwuX2Zvb3RlckZvbnRGYW1pbHkpO1xuXHRcdGhlbHBlcnMuZWFjaChtb2RlbC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG5cblx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdHdpZHRoICs9IDIgKiBtb2RlbC54UGFkZGluZztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodFxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogSGVscGVyIHRvIGdldCB0aGUgYWxpZ25tZW50IG9mIGEgdG9vbHRpcCBnaXZlbiB0aGUgc2l6ZVxuXHQgKi9cblx0ZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KHRvb2x0aXAsIHNpemUpIHtcblx0XHR2YXIgbW9kZWwgPSB0b29sdGlwLl9tb2RlbDtcblx0XHR2YXIgY2hhcnQgPSB0b29sdGlwLl9jaGFydDtcblx0XHR2YXIgY2hhcnRBcmVhID0gdG9vbHRpcC5fY2hhcnQuY2hhcnRBcmVhO1xuXHRcdHZhciB4QWxpZ24gPSAnY2VudGVyJztcblx0XHR2YXIgeUFsaWduID0gJ2NlbnRlcic7XG5cblx0XHRpZiAobW9kZWwueSA8IHNpemUuaGVpZ2h0KSB7XG5cdFx0XHR5QWxpZ24gPSAndG9wJztcblx0XHR9IGVsc2UgaWYgKG1vZGVsLnkgPiAoY2hhcnQuaGVpZ2h0IC0gc2l6ZS5oZWlnaHQpKSB7XG5cdFx0XHR5QWxpZ24gPSAnYm90dG9tJztcblx0XHR9XG5cblx0XHR2YXIgbGYsIHJmOyAvLyBmdW5jdGlvbnMgdG8gZGV0ZXJtaW5lIGxlZnQsIHJpZ2h0IGFsaWdubWVudFxuXHRcdHZhciBvbGYsIG9yZjsgLy8gZnVuY3Rpb25zIHRvIGRldGVybWluZSBpZiBsZWZ0L3JpZ2h0IGFsaWdubWVudCBjYXVzZXMgdG9vbHRpcCB0byBnbyBvdXRzaWRlIGNoYXJ0XG5cdFx0dmFyIHlmOyAvLyBmdW5jdGlvbiB0byBnZXQgdGhlIHkgYWxpZ25tZW50IGlmIHRoZSB0b29sdGlwIGdvZXMgb3V0c2lkZSBvZiB0aGUgbGVmdCBvciByaWdodCBlZGdlc1xuXHRcdHZhciBtaWRYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG5cdFx0dmFyIG1pZFkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcblxuXHRcdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0XHRsZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdFx0cmV0dXJuIHggPD0gbWlkWDtcblx0XHRcdH07XG5cdFx0XHRyZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdFx0cmV0dXJuIHggPiBtaWRYO1xuXHRcdFx0fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRcdHJldHVybiB4IDw9IChzaXplLndpZHRoIC8gMik7XG5cdFx0XHR9O1xuXHRcdFx0cmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRcdHJldHVybiB4ID49IChjaGFydC53aWR0aCAtIChzaXplLndpZHRoIC8gMikpO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRvbGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCArIHNpemUud2lkdGggPiBjaGFydC53aWR0aDtcblx0XHR9O1xuXHRcdG9yZiA9IGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiB4IC0gc2l6ZS53aWR0aCA8IDA7XG5cdFx0fTtcblx0XHR5ZiA9IGZ1bmN0aW9uKHkpIHtcblx0XHRcdHJldHVybiB5IDw9IG1pZFkgPyAndG9wJyA6ICdib3R0b20nO1xuXHRcdH07XG5cblx0XHRpZiAobGYobW9kZWwueCkpIHtcblx0XHRcdHhBbGlnbiA9ICdsZWZ0JztcblxuXHRcdFx0Ly8gSXMgdG9vbHRpcCB0b28gd2lkZSBhbmQgZ29lcyBvdmVyIHRoZSByaWdodCBzaWRlIG9mIHRoZSBjaGFydC4/XG5cdFx0XHRpZiAob2xmKG1vZGVsLngpKSB7XG5cdFx0XHRcdHhBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHR5QWxpZ24gPSB5Zihtb2RlbC55KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHJmKG1vZGVsLngpKSB7XG5cdFx0XHR4QWxpZ24gPSAncmlnaHQnO1xuXG5cdFx0XHQvLyBJcyB0b29sdGlwIHRvbyB3aWRlIGFuZCBnb2VzIG91dHNpZGUgbGVmdCBlZGdlIG9mIGNhbnZhcz9cblx0XHRcdGlmIChvcmYobW9kZWwueCkpIHtcblx0XHRcdFx0eEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdHlBbGlnbiA9IHlmKG1vZGVsLnkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBvcHRzID0gdG9vbHRpcC5fb3B0aW9ucztcblx0XHRyZXR1cm4ge1xuXHRcdFx0eEFsaWduOiBvcHRzLnhBbGlnbiA/IG9wdHMueEFsaWduIDogeEFsaWduLFxuXHRcdFx0eUFsaWduOiBvcHRzLnlBbGlnbiA/IG9wdHMueUFsaWduIDogeUFsaWduXG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBASGVscGVyIHRvIGdldCB0aGUgbG9jYXRpb24gYSB0b29sdGlwIG5lZWRzIHRvIGJlIHBsYWNlZCBhdCBnaXZlbiB0aGUgaW5pdGlhbCBwb3NpdGlvbiAodmlhIHRoZSB2bSkgYW5kIHRoZSBzaXplIGFuZCBhbGlnbm1lbnRcblx0ICovXG5cdGZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludCh2bSwgc2l6ZSwgYWxpZ25tZW50KSB7XG5cdFx0Ly8gQmFja2dyb3VuZCBQb3NpdGlvblxuXHRcdHZhciB4ID0gdm0ueDtcblx0XHR2YXIgeSA9IHZtLnk7XG5cblx0XHR2YXIgY2FyZXRTaXplID0gdm0uY2FyZXRTaXplO1xuXHRcdHZhciBjYXJldFBhZGRpbmcgPSB2bS5jYXJldFBhZGRpbmc7XG5cdFx0dmFyIGNvcm5lclJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblx0XHR2YXIgeEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcblx0XHR2YXIgeUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcblx0XHR2YXIgcGFkZGluZ0FuZFNpemUgPSBjYXJldFNpemUgKyBjYXJldFBhZGRpbmc7XG5cdFx0dmFyIHJhZGl1c0FuZFBhZGRpbmcgPSBjb3JuZXJSYWRpdXMgKyBjYXJldFBhZGRpbmc7XG5cblx0XHRpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHR4IC09IHNpemUud2lkdGg7XG5cdFx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0XHR4IC09IChzaXplLndpZHRoIC8gMik7XG5cdFx0fVxuXG5cdFx0aWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcblx0XHRcdHkgKz0gcGFkZGluZ0FuZFNpemU7XG5cdFx0fSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG5cdFx0XHR5IC09IHNpemUuaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHkgLT0gKHNpemUuaGVpZ2h0IC8gMik7XG5cdFx0fVxuXG5cdFx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRcdGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0XHR4ICs9IHBhZGRpbmdBbmRTaXplO1xuXHRcdFx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdFx0eCAtPSBwYWRkaW5nQW5kU2l6ZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHR4IC09IHJhZGl1c0FuZFBhZGRpbmc7XG5cdFx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdHggKz0gcmFkaXVzQW5kUGFkZGluZztcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogeCxcblx0XHRcdHk6IHlcblx0XHR9O1xuXHR9XG5cblx0Q2hhcnQuVG9vbHRpcCA9IEVsZW1lbnQuZXh0ZW5kKHtcblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX21vZGVsID0gZ2V0QmFzZU1vZGVsKHRoaXMuX29wdGlvbnMpO1xuXHRcdH0sXG5cblx0XHQvLyBHZXQgdGhlIHRpdGxlXG5cdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0XHRnZXRUaXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdHMgPSBtZS5fb3B0aW9ucztcblx0XHRcdHZhciBjYWxsYmFja3MgPSBvcHRzLmNhbGxiYWNrcztcblxuXHRcdFx0dmFyIGJlZm9yZVRpdGxlID0gY2FsbGJhY2tzLmJlZm9yZVRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdFx0dmFyIHRpdGxlID0gY2FsbGJhY2tzLnRpdGxlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdFx0dmFyIGFmdGVyVGl0bGUgPSBjYWxsYmFja3MuYWZ0ZXJUaXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdFx0dmFyIGxpbmVzID0gW107XG5cdFx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgYmVmb3JlVGl0bGUpO1xuXHRcdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHRpdGxlKTtcblx0XHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBhZnRlclRpdGxlKTtcblxuXHRcdFx0cmV0dXJuIGxpbmVzO1xuXHRcdH0sXG5cblx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRcdGdldEJlZm9yZUJvZHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGxpbmVzID0gdGhpcy5fb3B0aW9ucy5jYWxsYmFja3MuYmVmb3JlQm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0cmV0dXJuIGhlbHBlcnMuaXNBcnJheShsaW5lcykgPyBsaW5lcyA6IGxpbmVzICE9PSB1bmRlZmluZWQgPyBbbGluZXNdIDogW107XG5cdFx0fSxcblxuXHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdFx0Z2V0Qm9keTogZnVuY3Rpb24odG9vbHRpcEl0ZW1zLCBkYXRhKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblx0XHRcdHZhciBib2R5SXRlbXMgPSBbXTtcblxuXHRcdFx0aGVscGVycy5lYWNoKHRvb2x0aXBJdGVtcywgZnVuY3Rpb24odG9vbHRpcEl0ZW0pIHtcblx0XHRcdFx0dmFyIGJvZHlJdGVtID0ge1xuXHRcdFx0XHRcdGJlZm9yZTogW10sXG5cdFx0XHRcdFx0bGluZXM6IFtdLFxuXHRcdFx0XHRcdGFmdGVyOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRwdXNoT3JDb25jYXQoYm9keUl0ZW0uYmVmb3JlLCBjYWxsYmFja3MuYmVmb3JlTGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKTtcblx0XHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBjYWxsYmFja3MubGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKTtcblx0XHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBjYWxsYmFja3MuYWZ0ZXJMYWJlbC5jYWxsKG1lLCB0b29sdGlwSXRlbSwgZGF0YSkpO1xuXG5cdFx0XHRcdGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gYm9keUl0ZW1zO1xuXHRcdH0sXG5cblx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRcdGdldEFmdGVyQm9keTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbGluZXMgPSB0aGlzLl9vcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBoZWxwZXJzLmlzQXJyYXkobGluZXMpID8gbGluZXMgOiBsaW5lcyAhPT0gdW5kZWZpbmVkID8gW2xpbmVzXSA6IFtdO1xuXHRcdH0sXG5cblx0XHQvLyBHZXQgdGhlIGZvb3RlciBhbmQgYmVmb3JlRm9vdGVyIGFuZCBhZnRlckZvb3RlciBsaW5lc1xuXHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdFx0Z2V0Rm9vdGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2FsbGJhY2tzID0gbWUuX29wdGlvbnMuY2FsbGJhY2tzO1xuXG5cdFx0XHR2YXIgYmVmb3JlRm9vdGVyID0gY2FsbGJhY2tzLmJlZm9yZUZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHRcdHZhciBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdFx0dmFyIGFmdGVyRm9vdGVyID0gY2FsbGJhY2tzLmFmdGVyRm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0XHR2YXIgbGluZXMgPSBbXTtcblx0XHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBiZWZvcmVGb290ZXIpO1xuXHRcdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIGZvb3Rlcik7XG5cdFx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgYWZ0ZXJGb290ZXIpO1xuXG5cdFx0XHRyZXR1cm4gbGluZXM7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oY2hhbmdlZCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUuX29wdGlvbnM7XG5cblx0XHRcdC8vIE5lZWQgdG8gcmVnZW5lcmF0ZSB0aGUgbW9kZWwgYmVjYXVzZSBpdHMgZmFzdGVyIHRoYW4gdXNpbmcgZXh0ZW5kIGFuZCBpdCBpcyBuZWNlc3NhcnkgZHVlIHRvIHRoZSBvcHRpbWl6YXRpb24gaW4gQ2hhcnQuRWxlbWVudC50cmFuc2l0aW9uXG5cdFx0XHQvLyB0aGF0IGRvZXMgX3ZpZXcgPSBfbW9kZWwgaWYgZWFzZSA9PT0gMS4gVGhpcyBjYXVzZXMgdGhlIDJuZCB0b29sdGlwIHVwZGF0ZSB0byBzZXQgcHJvcGVydGllcyBpbiBib3RoIHRoZSB2aWV3IGFuZCBtb2RlbCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0XHQvLyB3aGljaCBicmVha3MgYW55IGFuaW1hdGlvbnMuXG5cdFx0XHR2YXIgZXhpc3RpbmdNb2RlbCA9IG1lLl9tb2RlbDtcblx0XHRcdHZhciBtb2RlbCA9IG1lLl9tb2RlbCA9IGdldEJhc2VNb2RlbChvcHRzKTtcblx0XHRcdHZhciBhY3RpdmUgPSBtZS5fYWN0aXZlO1xuXG5cdFx0XHR2YXIgZGF0YSA9IG1lLl9kYXRhO1xuXG5cdFx0XHQvLyBJbiB0aGUgY2FzZSB3aGVyZSBhY3RpdmUubGVuZ3RoID09PSAwIHdlIG5lZWQgdG8ga2VlcCB0aGVzZSBhdCBleGlzdGluZyB2YWx1ZXMgZm9yIGdvb2QgYW5pbWF0aW9uc1xuXHRcdFx0dmFyIGFsaWdubWVudCA9IHtcblx0XHRcdFx0eEFsaWduOiBleGlzdGluZ01vZGVsLnhBbGlnbixcblx0XHRcdFx0eUFsaWduOiBleGlzdGluZ01vZGVsLnlBbGlnblxuXHRcdFx0fTtcblx0XHRcdHZhciBiYWNrZ3JvdW5kUG9pbnQgPSB7XG5cdFx0XHRcdHg6IGV4aXN0aW5nTW9kZWwueCxcblx0XHRcdFx0eTogZXhpc3RpbmdNb2RlbC55XG5cdFx0XHR9O1xuXHRcdFx0dmFyIHRvb2x0aXBTaXplID0ge1xuXHRcdFx0XHR3aWR0aDogZXhpc3RpbmdNb2RlbC53aWR0aCxcblx0XHRcdFx0aGVpZ2h0OiBleGlzdGluZ01vZGVsLmhlaWdodFxuXHRcdFx0fTtcblx0XHRcdHZhciB0b29sdGlwUG9zaXRpb24gPSB7XG5cdFx0XHRcdHg6IGV4aXN0aW5nTW9kZWwuY2FyZXRYLFxuXHRcdFx0XHR5OiBleGlzdGluZ01vZGVsLmNhcmV0WVxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGksIGxlbjtcblxuXHRcdFx0aWYgKGFjdGl2ZS5sZW5ndGgpIHtcblx0XHRcdFx0bW9kZWwub3BhY2l0eSA9IDE7XG5cblx0XHRcdFx0dmFyIGxhYmVsQ29sb3JzID0gW107XG5cdFx0XHRcdHZhciBsYWJlbFRleHRDb2xvcnMgPSBbXTtcblx0XHRcdFx0dG9vbHRpcFBvc2l0aW9uID0gQ2hhcnQuVG9vbHRpcC5wb3NpdGlvbmVyc1tvcHRzLnBvc2l0aW9uXShhY3RpdmUsIG1lLl9ldmVudFBvc2l0aW9uKTtcblxuXHRcdFx0XHR2YXIgdG9vbHRpcEl0ZW1zID0gW107XG5cdFx0XHRcdGZvciAoaSA9IDAsIGxlbiA9IGFjdGl2ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0XHRcdHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKGFjdGl2ZVtpXSkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSBmaWx0ZXIgZnVuY3Rpb24sIHVzZSBpdCB0byBtb2RpZnkgdGhlIHRvb2x0aXAgaXRlbXNcblx0XHRcdFx0aWYgKG9wdHMuZmlsdGVyKSB7XG5cdFx0XHRcdFx0dG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcihmdW5jdGlvbihhKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0cy5maWx0ZXIoYSwgZGF0YSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgdXNlciBwcm92aWRlZCBhIHNvcnRpbmcgZnVuY3Rpb24sIHVzZSBpdCB0byBtb2RpZnkgdGhlIHRvb2x0aXAgaXRlbXNcblx0XHRcdFx0aWYgKG9wdHMuaXRlbVNvcnQpIHtcblx0XHRcdFx0XHR0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gb3B0cy5pdGVtU29ydChhLCBiLCBkYXRhKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIERldGVybWluZSBjb2xvcnMgZm9yIGJveGVzXG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh0b29sdGlwSXRlbXMsIGZ1bmN0aW9uKHRvb2x0aXBJdGVtKSB7XG5cdFx0XHRcdFx0bGFiZWxDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbENvbG9yLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBtZS5fY2hhcnQpKTtcblx0XHRcdFx0XHRsYWJlbFRleHRDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbFRleHRDb2xvci5jYWxsKG1lLCB0b29sdGlwSXRlbSwgbWUuX2NoYXJ0KSk7XG5cdFx0XHRcdH0pO1xuXG5cblx0XHRcdFx0Ly8gQnVpbGQgdGhlIFRleHQgTGluZXNcblx0XHRcdFx0bW9kZWwudGl0bGUgPSBtZS5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0XHRtb2RlbC5iZWZvcmVCb2R5ID0gbWUuZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0XHRtb2RlbC5ib2R5ID0gbWUuZ2V0Qm9keSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0XHRtb2RlbC5hZnRlckJvZHkgPSBtZS5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdFx0bW9kZWwuZm9vdGVyID0gbWUuZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cblx0XHRcdFx0Ly8gSW5pdGlhbCBwb3NpdGlvbmluZyBhbmQgY29sb3JzXG5cdFx0XHRcdG1vZGVsLnggPSBNYXRoLnJvdW5kKHRvb2x0aXBQb3NpdGlvbi54KTtcblx0XHRcdFx0bW9kZWwueSA9IE1hdGgucm91bmQodG9vbHRpcFBvc2l0aW9uLnkpO1xuXHRcdFx0XHRtb2RlbC5jYXJldFBhZGRpbmcgPSBvcHRzLmNhcmV0UGFkZGluZztcblx0XHRcdFx0bW9kZWwubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcblx0XHRcdFx0bW9kZWwubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuXG5cdFx0XHRcdC8vIGRhdGEgcG9pbnRzXG5cdFx0XHRcdG1vZGVsLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG5cblx0XHRcdFx0Ly8gV2UgbmVlZCB0byBkZXRlcm1pbmUgYWxpZ25tZW50IG9mIHRoZSB0b29sdGlwXG5cdFx0XHRcdHRvb2x0aXBTaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgbW9kZWwpO1xuXHRcdFx0XHRhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcywgdG9vbHRpcFNpemUpO1xuXHRcdFx0XHQvLyBGaW5hbCBTaXplIGFuZCBQb3NpdGlvblxuXHRcdFx0XHRiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQobW9kZWwsIHRvb2x0aXBTaXplLCBhbGlnbm1lbnQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bW9kZWwub3BhY2l0eSA9IDA7XG5cdFx0XHR9XG5cblx0XHRcdG1vZGVsLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG5cdFx0XHRtb2RlbC55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuXHRcdFx0bW9kZWwueCA9IGJhY2tncm91bmRQb2ludC54O1xuXHRcdFx0bW9kZWwueSA9IGJhY2tncm91bmRQb2ludC55O1xuXHRcdFx0bW9kZWwud2lkdGggPSB0b29sdGlwU2l6ZS53aWR0aDtcblx0XHRcdG1vZGVsLmhlaWdodCA9IHRvb2x0aXBTaXplLmhlaWdodDtcblxuXHRcdFx0Ly8gUG9pbnQgd2hlcmUgdGhlIGNhcmV0IG9uIHRoZSB0b29sdGlwIHBvaW50cyB0b1xuXHRcdFx0bW9kZWwuY2FyZXRYID0gdG9vbHRpcFBvc2l0aW9uLng7XG5cdFx0XHRtb2RlbC5jYXJldFkgPSB0b29sdGlwUG9zaXRpb24ueTtcblxuXHRcdFx0bWUuX21vZGVsID0gbW9kZWw7XG5cblx0XHRcdGlmIChjaGFuZ2VkICYmIG9wdHMuY3VzdG9tKSB7XG5cdFx0XHRcdG9wdHMuY3VzdG9tLmNhbGwobWUsIG1vZGVsKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lO1xuXHRcdH0sXG5cdFx0ZHJhd0NhcmV0OiBmdW5jdGlvbih0b29sdGlwUG9pbnQsIHNpemUpIHtcblx0XHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdFx0dmFyIGNhcmV0UG9zaXRpb24gPSB0aGlzLmdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCB2bSk7XG5cblx0XHRcdGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG5cdFx0XHRjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDIsIGNhcmV0UG9zaXRpb24ueTIpO1xuXHRcdFx0Y3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngzLCBjYXJldFBvc2l0aW9uLnkzKTtcblx0XHR9LFxuXHRcdGdldENhcmV0UG9zaXRpb246IGZ1bmN0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgdm0pIHtcblx0XHRcdHZhciB4MSwgeDIsIHgzLCB5MSwgeTIsIHkzO1xuXHRcdFx0dmFyIGNhcmV0U2l6ZSA9IHZtLmNhcmV0U2l6ZTtcblx0XHRcdHZhciBjb3JuZXJSYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cdFx0XHR2YXIgeEFsaWduID0gdm0ueEFsaWduO1xuXHRcdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHRcdHZhciBwdFggPSB0b29sdGlwUG9pbnQueDtcblx0XHRcdHZhciBwdFkgPSB0b29sdGlwUG9pbnQueTtcblx0XHRcdHZhciB3aWR0aCA9IHNpemUud2lkdGg7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG5cblx0XHRcdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0XHRcdHkyID0gcHRZICsgKGhlaWdodCAvIDIpO1xuXG5cdFx0XHRcdGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0XHRcdHgxID0gcHRYO1xuXHRcdFx0XHRcdHgyID0geDEgLSBjYXJldFNpemU7XG5cdFx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHRcdHkxID0geTIgKyBjYXJldFNpemU7XG5cdFx0XHRcdFx0eTMgPSB5MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4MSA9IHB0WCArIHdpZHRoO1xuXHRcdFx0XHRcdHgyID0geDEgKyBjYXJldFNpemU7XG5cdFx0XHRcdFx0eDMgPSB4MTtcblxuXHRcdFx0XHRcdHkxID0geTIgLSBjYXJldFNpemU7XG5cdFx0XHRcdFx0eTMgPSB5MiArIGNhcmV0U2l6ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHRcdFx0eDIgPSBwdFggKyBjb3JuZXJSYWRpdXMgKyAoY2FyZXRTaXplKTtcblx0XHRcdFx0XHR4MSA9IHgyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHRcdH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHRcdFx0eDIgPSBwdFggKyB3aWR0aCAtIGNvcm5lclJhZGl1cyAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0XHR4MSA9IHgyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eDIgPSBwdFggKyAod2lkdGggLyAyKTtcblx0XHRcdFx0XHR4MSA9IHgyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcblx0XHRcdFx0XHR5MSA9IHB0WTtcblx0XHRcdFx0XHR5MiA9IHkxIC0gY2FyZXRTaXplO1xuXHRcdFx0XHRcdHkzID0geTE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eTEgPSBwdFkgKyBoZWlnaHQ7XG5cdFx0XHRcdFx0eTIgPSB5MSArIGNhcmV0U2l6ZTtcblx0XHRcdFx0XHR5MyA9IHkxO1xuXHRcdFx0XHRcdC8vIGludmVydCBkcmF3aW5nIG9yZGVyXG5cdFx0XHRcdFx0dmFyIHRtcCA9IHgzO1xuXHRcdFx0XHRcdHgzID0geDE7XG5cdFx0XHRcdFx0eDEgPSB0bXA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB7eDE6IHgxLCB4MjogeDIsIHgzOiB4MywgeTE6IHkxLCB5MjogeTIsIHkzOiB5M307XG5cdFx0fSxcblx0XHRkcmF3VGl0bGU6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCBvcGFjaXR5KSB7XG5cdFx0XHR2YXIgdGl0bGUgPSB2bS50aXRsZTtcblxuXHRcdFx0aWYgKHRpdGxlLmxlbmd0aCkge1xuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gdm0uX3RpdGxlQWxpZ247XG5cdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblxuXHRcdFx0XHR2YXIgdGl0bGVGb250U2l6ZSA9IHZtLnRpdGxlRm9udFNpemU7XG5cdFx0XHRcdHZhciB0aXRsZVNwYWNpbmcgPSB2bS50aXRsZVNwYWNpbmc7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS50aXRsZUZvbnRDb2xvciwgb3BhY2l0eSk7XG5cdFx0XHRcdGN0eC5mb250ID0gaGVscGVycy5mb250U3RyaW5nKHRpdGxlRm9udFNpemUsIHZtLl90aXRsZUZvbnRTdHlsZSwgdm0uX3RpdGxlRm9udEZhbWlseSk7XG5cblx0XHRcdFx0dmFyIGksIGxlbjtcblx0XHRcdFx0Zm9yIChpID0gMCwgbGVuID0gdGl0bGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0XHRjdHguZmlsbFRleHQodGl0bGVbaV0sIHB0LngsIHB0LnkpO1xuXHRcdFx0XHRcdHB0LnkgKz0gdGl0bGVGb250U2l6ZSArIHRpdGxlU3BhY2luZzsgLy8gTGluZSBIZWlnaHQgYW5kIHNwYWNpbmdcblxuXHRcdFx0XHRcdGlmIChpICsgMSA9PT0gdGl0bGUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRwdC55ICs9IHZtLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nOyAvLyBJZiBMYXN0LCBhZGQgbWFyZ2luLCByZW1vdmUgc3BhY2luZ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZHJhd0JvZHk6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCBvcGFjaXR5KSB7XG5cdFx0XHR2YXIgYm9keUZvbnRTaXplID0gdm0uYm9keUZvbnRTaXplO1xuXHRcdFx0dmFyIGJvZHlTcGFjaW5nID0gdm0uYm9keVNwYWNpbmc7XG5cdFx0XHR2YXIgYm9keSA9IHZtLmJvZHk7XG5cblx0XHRcdGN0eC50ZXh0QWxpZ24gPSB2bS5fYm9keUFsaWduO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuXHRcdFx0Y3R4LmZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoYm9keUZvbnRTaXplLCB2bS5fYm9keUZvbnRTdHlsZSwgdm0uX2JvZHlGb250RmFtaWx5KTtcblxuXHRcdFx0Ly8gQmVmb3JlIEJvZHlcblx0XHRcdHZhciB4TGluZVBhZGRpbmcgPSAwO1xuXHRcdFx0dmFyIGZpbGxMaW5lT2ZUZXh0ID0gZnVuY3Rpb24obGluZSkge1xuXHRcdFx0XHRjdHguZmlsbFRleHQobGluZSwgcHQueCArIHhMaW5lUGFkZGluZywgcHQueSk7XG5cdFx0XHRcdHB0LnkgKz0gYm9keUZvbnRTaXplICsgYm9keVNwYWNpbmc7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBCZWZvcmUgYm9keSBsaW5lc1xuXHRcdFx0aGVscGVycy5lYWNoKHZtLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdFx0dmFyIGRyYXdDb2xvckJveGVzID0gdm0uZGlzcGxheUNvbG9ycztcblx0XHRcdHhMaW5lUGFkZGluZyA9IGRyYXdDb2xvckJveGVzID8gKGJvZHlGb250U2l6ZSArIDIpIDogMDtcblxuXHRcdFx0Ly8gRHJhdyBib2R5IGxpbmVzIG5vd1xuXHRcdFx0aGVscGVycy5lYWNoKGJvZHksIGZ1bmN0aW9uKGJvZHlJdGVtLCBpKSB7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goYm9keUl0ZW0ubGluZXMsIGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRcdFx0XHQvLyBEcmF3IExlZ2VuZC1saWtlIGJveGVzIGlmIG5lZWRlZFxuXHRcdFx0XHRcdGlmIChkcmF3Q29sb3JCb3hlcykge1xuXHRcdFx0XHRcdFx0Ly8gRmlsbCBhIHdoaXRlIHJlY3Qgc28gdGhhdCBjb2xvdXJzIG1lcmdlIG5pY2VseSBpZiB0aGUgb3BhY2l0eSBpcyA8IDFcblx0XHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0ubGVnZW5kQ29sb3JCYWNrZ3JvdW5kLCBvcGFjaXR5KTtcblx0XHRcdFx0XHRcdGN0eC5maWxsUmVjdChwdC54LCBwdC55LCBib2R5Rm9udFNpemUsIGJvZHlGb250U2l6ZSk7XG5cblx0XHRcdFx0XHRcdC8vIEJvcmRlclxuXHRcdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0ubGFiZWxDb2xvcnNbaV0uYm9yZGVyQ29sb3IsIG9wYWNpdHkpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QocHQueCwgcHQueSwgYm9keUZvbnRTaXplLCBib2R5Rm9udFNpemUpO1xuXG5cdFx0XHRcdFx0XHQvLyBJbm5lciBzcXVhcmVcblx0XHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0ubGFiZWxDb2xvcnNbaV0uYmFja2dyb3VuZENvbG9yLCBvcGFjaXR5KTtcblx0XHRcdFx0XHRcdGN0eC5maWxsUmVjdChwdC54ICsgMSwgcHQueSArIDEsIGJvZHlGb250U2l6ZSAtIDIsIGJvZHlGb250U2l6ZSAtIDIpO1xuXHRcdFx0XHRcdFx0dmFyIHRleHRDb2xvciA9IG1lcmdlT3BhY2l0eSh2bS5sYWJlbFRleHRDb2xvcnNbaV0sIG9wYWNpdHkpO1xuXHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmaWxsTGluZU9mVGV4dChsaW5lKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gUmVzZXQgYmFjayB0byAwIGZvciBhZnRlciBib2R5XG5cdFx0XHR4TGluZVBhZGRpbmcgPSAwO1xuXG5cdFx0XHQvLyBBZnRlciBib2R5IGxpbmVzXG5cdFx0XHRoZWxwZXJzLmVhY2godm0uYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG5cdFx0XHRwdC55IC09IGJvZHlTcGFjaW5nOyAvLyBSZW1vdmUgbGFzdCBib2R5IHNwYWNpbmdcblx0XHR9LFxuXHRcdGRyYXdGb290ZXI6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCBvcGFjaXR5KSB7XG5cdFx0XHR2YXIgZm9vdGVyID0gdm0uZm9vdGVyO1xuXG5cdFx0XHRpZiAoZm9vdGVyLmxlbmd0aCkge1xuXHRcdFx0XHRwdC55ICs9IHZtLmZvb3Rlck1hcmdpblRvcDtcblxuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gdm0uX2Zvb3RlckFsaWduO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS5mb290ZXJGb250Q29sb3IsIG9wYWNpdHkpO1xuXHRcdFx0XHRjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyh2bS5mb290ZXJGb250U2l6ZSwgdm0uX2Zvb3RlckZvbnRTdHlsZSwgdm0uX2Zvb3RlckZvbnRGYW1pbHkpO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChmb290ZXIsIGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRcdFx0XHRjdHguZmlsbFRleHQobGluZSwgcHQueCwgcHQueSk7XG5cdFx0XHRcdFx0cHQueSArPSB2bS5mb290ZXJGb250U2l6ZSArIHZtLmZvb3RlclNwYWNpbmc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZHJhd0JhY2tncm91bmQ6IGZ1bmN0aW9uKHB0LCB2bSwgY3R4LCB0b29sdGlwU2l6ZSwgb3BhY2l0eSkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS5iYWNrZ3JvdW5kQ29sb3IsIG9wYWNpdHkpO1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gbWVyZ2VPcGFjaXR5KHZtLmJvcmRlckNvbG9yLCBvcGFjaXR5KTtcblx0XHRcdGN0eC5saW5lV2lkdGggPSB2bS5ib3JkZXJXaWR0aDtcblx0XHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0XHR2YXIgeUFsaWduID0gdm0ueUFsaWduO1xuXHRcdFx0dmFyIHggPSBwdC54O1xuXHRcdFx0dmFyIHkgPSBwdC55O1xuXHRcdFx0dmFyIHdpZHRoID0gdG9vbHRpcFNpemUud2lkdGg7XG5cdFx0XHR2YXIgaGVpZ2h0ID0gdG9vbHRpcFNpemUuaGVpZ2h0O1xuXHRcdFx0dmFyIHJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KTtcblx0XHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHRcdHRoaXMuZHJhd0NhcmV0KHB0LCB0b29sdGlwU2l6ZSk7XG5cdFx0XHR9XG5cdFx0XHRjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG5cdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XG5cdFx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHRcdH1cblx0XHRcdGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcblx0XHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRcdGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG5cdFx0XHRcdHRoaXMuZHJhd0NhcmV0KHB0LCB0b29sdGlwU2l6ZSk7XG5cdFx0XHR9XG5cdFx0XHRjdHgubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XG5cdFx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0XHR0aGlzLmRyYXdDYXJldChwdCwgdG9vbHRpcFNpemUpO1xuXHRcdFx0fVxuXHRcdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHksIHggKyByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXG5cdFx0XHRjdHguZmlsbCgpO1xuXG5cdFx0XHRpZiAodm0uYm9yZGVyV2lkdGggPiAwKSB7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRcdGlmICh2bS5vcGFjaXR5ID09PSAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHRvb2x0aXBTaXplID0ge1xuXHRcdFx0XHR3aWR0aDogdm0ud2lkdGgsXG5cdFx0XHRcdGhlaWdodDogdm0uaGVpZ2h0XG5cdFx0XHR9O1xuXHRcdFx0dmFyIHB0ID0ge1xuXHRcdFx0XHR4OiB2bS54LFxuXHRcdFx0XHR5OiB2bS55XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJRTExL0VkZ2UgZG9lcyBub3QgbGlrZSB2ZXJ5IHNtYWxsIG9wYWNpdGllcywgc28gc25hcCB0byAwXG5cdFx0XHR2YXIgb3BhY2l0eSA9IE1hdGguYWJzKHZtLm9wYWNpdHkgPCAxZS0zKSA/IDAgOiB2bS5vcGFjaXR5O1xuXG5cdFx0XHQvLyBUcnV0aHkvZmFsc2V5IHZhbHVlIGZvciBlbXB0eSB0b29sdGlwXG5cdFx0XHR2YXIgaGFzVG9vbHRpcENvbnRlbnQgPSB2bS50aXRsZS5sZW5ndGggfHwgdm0uYmVmb3JlQm9keS5sZW5ndGggfHwgdm0uYm9keS5sZW5ndGggfHwgdm0uYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB2bS5mb290ZXIubGVuZ3RoO1xuXG5cdFx0XHRpZiAodGhpcy5fb3B0aW9ucy5lbmFibGVkICYmIGhhc1Rvb2x0aXBDb250ZW50KSB7XG5cdFx0XHRcdC8vIERyYXcgQmFja2dyb3VuZFxuXHRcdFx0XHR0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCB2bSwgY3R4LCB0b29sdGlwU2l6ZSwgb3BhY2l0eSk7XG5cblx0XHRcdFx0Ly8gRHJhdyBUaXRsZSwgQm9keSwgYW5kIEZvb3RlclxuXHRcdFx0XHRwdC54ICs9IHZtLnhQYWRkaW5nO1xuXHRcdFx0XHRwdC55ICs9IHZtLnlQYWRkaW5nO1xuXG5cdFx0XHRcdC8vIFRpdGxlc1xuXHRcdFx0XHR0aGlzLmRyYXdUaXRsZShwdCwgdm0sIGN0eCwgb3BhY2l0eSk7XG5cblx0XHRcdFx0Ly8gQm9keVxuXHRcdFx0XHR0aGlzLmRyYXdCb2R5KHB0LCB2bSwgY3R4LCBvcGFjaXR5KTtcblxuXHRcdFx0XHQvLyBGb290ZXJcblx0XHRcdFx0dGhpcy5kcmF3Rm9vdGVyKHB0LCB2bSwgY3R4LCBvcGFjaXR5KTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gaGFuZGxlXG5cdFx0ICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIHRvb2x0aXAgY2hhbmdlZFxuXHRcdCAqL1xuXHRcdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5fb3B0aW9ucztcblx0XHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRcdG1lLl9sYXN0QWN0aXZlID0gbWUuX2xhc3RBY3RpdmUgfHwgW107XG5cblx0XHRcdC8vIEZpbmQgQWN0aXZlIEVsZW1lbnRzIGZvciB0b29sdGlwc1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0XHRtZS5fYWN0aXZlID0gW107XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5fYWN0aXZlID0gbWUuX2NoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtZW1iZXIgTGFzdCBBY3RpdmVzXG5cdFx0XHRjaGFuZ2VkID0gIWhlbHBlcnMuYXJyYXlFcXVhbHMobWUuX2FjdGl2ZSwgbWUuX2xhc3RBY3RpdmUpO1xuXG5cdFx0XHQvLyBJZiB0b29sdGlwIGRpZG4ndCBjaGFuZ2UsIGRvIG5vdCBoYW5kbGUgdGhlIHRhcmdldCBldmVudFxuXHRcdFx0aWYgKCFjaGFuZ2VkKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0bWUuX2xhc3RBY3RpdmUgPSBtZS5fYWN0aXZlO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuY3VzdG9tKSB7XG5cdFx0XHRcdG1lLl9ldmVudFBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdHg6IGUueCxcblx0XHRcdFx0XHR5OiBlLnlcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR2YXIgbW9kZWwgPSBtZS5fbW9kZWw7XG5cdFx0XHRcdG1lLnVwZGF0ZSh0cnVlKTtcblx0XHRcdFx0bWUucGl2b3QoKTtcblxuXHRcdFx0XHQvLyBTZWUgaWYgb3VyIHRvb2x0aXAgcG9zaXRpb24gY2hhbmdlZFxuXHRcdFx0XHRjaGFuZ2VkIHw9IChtb2RlbC54ICE9PSBtZS5fbW9kZWwueCkgfHwgKG1vZGVsLnkgIT09IG1lLl9tb2RlbC55KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogQG5hbWVzcGFjZSBDaGFydC5Ub29sdGlwLnBvc2l0aW9uZXJzXG5cdCAqL1xuXHRDaGFydC5Ub29sdGlwLnBvc2l0aW9uZXJzID0ge1xuXHRcdC8qKlxuXHRcdCAqIEF2ZXJhZ2UgbW9kZSBwbGFjZXMgdGhlIHRvb2x0aXAgYXQgdGhlIGF2ZXJhZ2UgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnRzIHNob3duXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnMuYXZlcmFnZVxuXHRcdCAqIEBwYXJhbSBlbGVtZW50cyB7Q2hhcnRFbGVtZW50W119IHRoZSBlbGVtZW50cyBiZWluZyBkaXNwbGF5ZWQgaW4gdGhlIHRvb2x0aXBcblx0XHQgKiBAcmV0dXJucyB7UG9pbnR9IHRvb2x0aXAgcG9zaXRpb25cblx0XHQgKi9cblx0XHRhdmVyYWdlOiBmdW5jdGlvbihlbGVtZW50cykge1xuXHRcdFx0aWYgKCFlbGVtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaSwgbGVuO1xuXHRcdFx0dmFyIHggPSAwO1xuXHRcdFx0dmFyIHkgPSAwO1xuXHRcdFx0dmFyIGNvdW50ID0gMDtcblxuXHRcdFx0Zm9yIChpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0dmFyIGVsID0gZWxlbWVudHNbaV07XG5cdFx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdFx0dmFyIHBvcyA9IGVsLnRvb2x0aXBQb3NpdGlvbigpO1xuXHRcdFx0XHRcdHggKz0gcG9zLng7XG5cdFx0XHRcdFx0eSArPSBwb3MueTtcblx0XHRcdFx0XHQrK2NvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IE1hdGgucm91bmQoeCAvIGNvdW50KSxcblx0XHRcdFx0eTogTWF0aC5yb3VuZCh5IC8gY291bnQpXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBHZXRzIHRoZSB0b29sdGlwIHBvc2l0aW9uIG5lYXJlc3Qgb2YgdGhlIGl0ZW0gbmVhcmVzdCB0byB0aGUgZXZlbnQgcG9zaXRpb25cblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuVG9vbHRpcC5wb3NpdGlvbmVycy5uZWFyZXN0XG5cdFx0ICogQHBhcmFtIGVsZW1lbnRzIHtDaGFydC5FbGVtZW50W119IHRoZSB0b29sdGlwIGVsZW1lbnRzXG5cdFx0ICogQHBhcmFtIGV2ZW50UG9zaXRpb24ge1BvaW50fSB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGluIGNhbnZhcyBjb29yZGluYXRlc1xuXHRcdCAqIEByZXR1cm5zIHtQb2ludH0gdGhlIHRvb2x0aXAgcG9zaXRpb25cblx0XHQgKi9cblx0XHRuZWFyZXN0OiBmdW5jdGlvbihlbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuXHRcdFx0dmFyIHggPSBldmVudFBvc2l0aW9uLng7XG5cdFx0XHR2YXIgeSA9IGV2ZW50UG9zaXRpb24ueTtcblx0XHRcdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRcdHZhciBpLCBsZW4sIG5lYXJlc3RFbGVtZW50O1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdFx0aWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcblx0XHRcdFx0XHR2YXIgY2VudGVyID0gZWwuZ2V0Q2VudGVyUG9pbnQoKTtcblx0XHRcdFx0XHR2YXIgZCA9IGhlbHBlcnMuZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG5cblx0XHRcdFx0XHRpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG5cdFx0XHRcdFx0XHRtaW5EaXN0YW5jZSA9IGQ7XG5cdFx0XHRcdFx0XHRuZWFyZXN0RWxlbWVudCA9IGVsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAobmVhcmVzdEVsZW1lbnQpIHtcblx0XHRcdFx0dmFyIHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG5cdFx0XHRcdHggPSB0cC54O1xuXHRcdFx0XHR5ID0gdHAueTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeVxuXHRcdFx0fTtcblx0XHR9XG5cdH07XG59O1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOSxcIi4vY29yZS5kZWZhdWx0c1wiOjE5LFwiLi9jb3JlLmVsZW1lbnRcIjoyMH1dLDMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge1xuXHRcdGFyYzoge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6ICcjZmZmJyxcblx0XHRcdGJvcmRlcldpZHRoOiAyXG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50LmV4dGVuZCh7XG5cdGluTGFiZWxSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblxuXHRcdGlmICh2bSkge1xuXHRcdFx0cmV0dXJuIChNYXRoLnBvdyhtb3VzZVggLSB2bS54LCAyKSA8IE1hdGgucG93KHZtLnJhZGl1cyArIHZtLmhvdmVyUmFkaXVzLCAyKSk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRpblJhbmdlOiBmdW5jdGlvbihjaGFydFgsIGNoYXJ0WSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0pIHtcblx0XHRcdHZhciBwb2ludFJlbGF0aXZlUG9zaXRpb24gPSBoZWxwZXJzLmdldEFuZ2xlRnJvbVBvaW50KHZtLCB7eDogY2hhcnRYLCB5OiBjaGFydFl9KTtcblx0XHRcdHZhclx0YW5nbGUgPSBwb2ludFJlbGF0aXZlUG9zaXRpb24uYW5nbGU7XG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBwb2ludFJlbGF0aXZlUG9zaXRpb24uZGlzdGFuY2U7XG5cblx0XHRcdC8vIFNhbml0aXNlIGFuZ2xlIHJhbmdlXG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IHZtLnN0YXJ0QW5nbGU7XG5cdFx0XHR2YXIgZW5kQW5nbGUgPSB2bS5lbmRBbmdsZTtcblx0XHRcdHdoaWxlIChlbmRBbmdsZSA8IHN0YXJ0QW5nbGUpIHtcblx0XHRcdFx0ZW5kQW5nbGUgKz0gMi4wICogTWF0aC5QSTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA+IGVuZEFuZ2xlKSB7XG5cdFx0XHRcdGFuZ2xlIC09IDIuMCAqIE1hdGguUEk7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoYW5nbGUgPCBzdGFydEFuZ2xlKSB7XG5cdFx0XHRcdGFuZ2xlICs9IDIuMCAqIE1hdGguUEk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENoZWNrIGlmIHdpdGhpbiB0aGUgcmFuZ2Ugb2YgdGhlIG9wZW4vY2xvc2UgYW5nbGVcblx0XHRcdHZhciBiZXR3ZWVuQW5nbGVzID0gKGFuZ2xlID49IHN0YXJ0QW5nbGUgJiYgYW5nbGUgPD0gZW5kQW5nbGUpO1xuXHRcdFx0dmFyIHdpdGhpblJhZGl1cyA9IChkaXN0YW5jZSA+PSB2bS5pbm5lclJhZGl1cyAmJiBkaXN0YW5jZSA8PSB2bS5vdXRlclJhZGl1cyk7XG5cblx0XHRcdHJldHVybiAoYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXMpO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0sXG5cblx0Z2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIGhhbGZBbmdsZSA9ICh2bS5zdGFydEFuZ2xlICsgdm0uZW5kQW5nbGUpIC8gMjtcblx0XHR2YXIgaGFsZlJhZGl1cyA9ICh2bS5pbm5lclJhZGl1cyArIHZtLm91dGVyUmFkaXVzKSAvIDI7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLnggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcblx0XHRcdHk6IHZtLnkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuXHRcdH07XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4gTWF0aC5QSSAqICgodm0uZW5kQW5nbGUgLSB2bS5zdGFydEFuZ2xlKSAvICgyICogTWF0aC5QSSkpICogKE1hdGgucG93KHZtLm91dGVyUmFkaXVzLCAyKSAtIE1hdGgucG93KHZtLmlubmVyUmFkaXVzLCAyKSk7XG5cdH0sXG5cblx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBjZW50cmVBbmdsZSA9IHZtLnN0YXJ0QW5nbGUgKyAoKHZtLmVuZEFuZ2xlIC0gdm0uc3RhcnRBbmdsZSkgLyAyKTtcblx0XHR2YXIgcmFuZ2VGcm9tQ2VudHJlID0gKHZtLm91dGVyUmFkaXVzIC0gdm0uaW5uZXJSYWRpdXMpIC8gMiArIHZtLmlubmVyUmFkaXVzO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLnggKyAoTWF0aC5jb3MoY2VudHJlQW5nbGUpICogcmFuZ2VGcm9tQ2VudHJlKSxcblx0XHRcdHk6IHZtLnkgKyAoTWF0aC5zaW4oY2VudHJlQW5nbGUpICogcmFuZ2VGcm9tQ2VudHJlKVxuXHRcdH07XG5cdH0sXG5cblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBzQSA9IHZtLnN0YXJ0QW5nbGU7XG5cdFx0dmFyIGVBID0gdm0uZW5kQW5nbGU7XG5cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cblx0XHRjdHguYXJjKHZtLngsIHZtLnksIHZtLm91dGVyUmFkaXVzLCBzQSwgZUEpO1xuXHRcdGN0eC5hcmModm0ueCwgdm0ueSwgdm0uaW5uZXJSYWRpdXMsIGVBLCBzQSwgdHJ1ZSk7XG5cblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdm0uYm9yZGVyQ29sb3I7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvcjtcblxuXHRcdGN0eC5maWxsKCk7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ2JldmVsJztcblxuXHRcdGlmICh2bS5ib3JkZXJXaWR0aCkge1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fVxufSk7XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9jb3JlL2NvcmUuZWxlbWVudFwiOjIwLFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmVsZW1lbnQnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG52YXIgZ2xvYmFsRGVmYXVsdHMgPSBkZWZhdWx0cy5nbG9iYWw7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRsaW5lOiB7XG5cdFx0XHR0ZW5zaW9uOiAwLjQsXG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGdsb2JhbERlZmF1bHRzLmRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlcldpZHRoOiAzLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGdsb2JhbERlZmF1bHRzLmRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlckNhcFN0eWxlOiAnYnV0dCcsXG5cdFx0XHRib3JkZXJEYXNoOiBbXSxcblx0XHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRcdGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcblx0XHRcdGNhcEJlemllclBvaW50czogdHJ1ZSxcblx0XHRcdGZpbGw6IHRydWUsIC8vIGRvIHdlIGZpbGwgaW4gdGhlIGFyZWEgYmV0d2VlbiB0aGUgbGluZSBhbmQgaXRzIGJhc2UgYXhpc1xuXHRcdH1cblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudC5leHRlbmQoe1xuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB2bSA9IG1lLl92aWV3O1xuXHRcdHZhciBjdHggPSBtZS5fY2hhcnQuY3R4O1xuXHRcdHZhciBzcGFuR2FwcyA9IHZtLnNwYW5HYXBzO1xuXHRcdHZhciBwb2ludHMgPSBtZS5fY2hpbGRyZW4uc2xpY2UoKTsgLy8gY2xvbmUgYXJyYXlcblx0XHR2YXIgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzID0gZ2xvYmFsRGVmYXVsdHMuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGFzdERyYXduSW5kZXggPSAtMTtcblx0XHR2YXIgaW5kZXgsIGN1cnJlbnQsIHByZXZpb3VzLCBjdXJyZW50Vk07XG5cblx0XHQvLyBJZiB3ZSBhcmUgbG9vcGluZywgYWRkaW5nIHRoZSBmaXJzdCBwb2ludCBhZ2FpblxuXHRcdGlmIChtZS5fbG9vcCAmJiBwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRwb2ludHMucHVzaChwb2ludHNbMF0pO1xuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHQvLyBTdHJva2UgTGluZSBPcHRpb25zXG5cdFx0Y3R4LmxpbmVDYXAgPSB2bS5ib3JkZXJDYXBTdHlsZSB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyQ2FwU3R5bGU7XG5cblx0XHQvLyBJRSA5IGFuZCAxMCBkbyBub3Qgc3VwcG9ydCBsaW5lIGRhc2hcblx0XHRpZiAoY3R4LnNldExpbmVEYXNoKSB7XG5cdFx0XHRjdHguc2V0TGluZURhc2godm0uYm9yZGVyRGFzaCB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaCk7XG5cdFx0fVxuXG5cdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdm0uYm9yZGVyRGFzaE9mZnNldCB8fCBnbG9iYWxPcHRpb25MaW5lRWxlbWVudHMuYm9yZGVyRGFzaE9mZnNldDtcblx0XHRjdHgubGluZUpvaW4gPSB2bS5ib3JkZXJKb2luU3R5bGUgfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckpvaW5TdHlsZTtcblx0XHRjdHgubGluZVdpZHRoID0gdm0uYm9yZGVyV2lkdGggfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlcldpZHRoO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yIHx8IGdsb2JhbERlZmF1bHRzLmRlZmF1bHRDb2xvcjtcblxuXHRcdC8vIFN0cm9rZSBMaW5lXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGxhc3REcmF3bkluZGV4ID0gLTE7XG5cblx0XHRmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwb2ludHMubGVuZ3RoOyArK2luZGV4KSB7XG5cdFx0XHRjdXJyZW50ID0gcG9pbnRzW2luZGV4XTtcblx0XHRcdHByZXZpb3VzID0gaGVscGVycy5wcmV2aW91c0l0ZW0ocG9pbnRzLCBpbmRleCk7XG5cdFx0XHRjdXJyZW50Vk0gPSBjdXJyZW50Ll92aWV3O1xuXG5cdFx0XHQvLyBGaXJzdCBwb2ludCBtb3ZlcyB0byBpdCdzIHN0YXJ0aW5nIHBvc2l0aW9uIG5vIG1hdHRlciB3aGF0XG5cdFx0XHRpZiAoaW5kZXggPT09IDApIHtcblx0XHRcdFx0aWYgKCFjdXJyZW50Vk0uc2tpcCkge1xuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdFx0XHRsYXN0RHJhd25JbmRleCA9IGluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwcmV2aW91cyA9IGxhc3REcmF3bkluZGV4ID09PSAtMSA/IHByZXZpb3VzIDogcG9pbnRzW2xhc3REcmF3bkluZGV4XTtcblxuXHRcdFx0XHRpZiAoIWN1cnJlbnRWTS5za2lwKSB7XG5cdFx0XHRcdFx0aWYgKChsYXN0RHJhd25JbmRleCAhPT0gKGluZGV4IC0gMSkgJiYgIXNwYW5HYXBzKSB8fCBsYXN0RHJhd25JbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdC8vIFRoZXJlIHdhcyBhIGdhcCBhbmQgdGhpcyBpcyB0aGUgZmlyc3QgcG9pbnQgYWZ0ZXIgdGhlIGdhcFxuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyhjdXJyZW50Vk0ueCwgY3VycmVudFZNLnkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBMaW5lIHRvIG5leHQgcG9pbnRcblx0XHRcdFx0XHRcdGhlbHBlcnMuY2FudmFzLmxpbmVUbyhjdHgsIHByZXZpb3VzLl92aWV3LCBjdXJyZW50Ll92aWV3KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bGFzdERyYXduSW5kZXggPSBpbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN0eC5zdHJva2UoKTtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9XG59KTtcblxufSx7XCIuLi9jb3JlL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4uL2NvcmUvY29yZS5lbGVtZW50XCI6MjAsXCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZWxlbWVudCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbnZhciBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cG9pbnQ6IHtcblx0XHRcdHJhZGl1czogMyxcblx0XHRcdHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0XHQvLyBIb3ZlclxuXHRcdFx0aGl0UmFkaXVzOiAxLFxuXHRcdFx0aG92ZXJSYWRpdXM6IDQsXG5cdFx0XHRob3ZlckJvcmRlcldpZHRoOiAxXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24geFJhbmdlKG1vdXNlWCkge1xuXHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRyZXR1cm4gdm0gPyAoTWF0aC5wb3cobW91c2VYIC0gdm0ueCwgMikgPCBNYXRoLnBvdyh2bS5yYWRpdXMgKyB2bS5oaXRSYWRpdXMsIDIpKSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB5UmFuZ2UobW91c2VZKSB7XG5cdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdHJldHVybiB2bSA/IChNYXRoLnBvdyhtb3VzZVkgLSB2bS55LCAyKSA8IE1hdGgucG93KHZtLnJhZGl1cyArIHZtLmhpdFJhZGl1cywgMikpIDogZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudC5leHRlbmQoe1xuXHRpblJhbmdlOiBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHZtID8gKChNYXRoLnBvdyhtb3VzZVggLSB2bS54LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHZtLnksIDIpKSA8IE1hdGgucG93KHZtLmhpdFJhZGl1cyArIHZtLnJhZGl1cywgMikpIDogZmFsc2U7XG5cdH0sXG5cblx0aW5MYWJlbFJhbmdlOiB4UmFuZ2UsXG5cdGluWFJhbmdlOiB4UmFuZ2UsXG5cdGluWVJhbmdlOiB5UmFuZ2UsXG5cblx0Z2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55XG5cdFx0fTtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gTWF0aC5QSSAqIE1hdGgucG93KHRoaXMuX3ZpZXcucmFkaXVzLCAyKTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55LFxuXHRcdFx0cGFkZGluZzogdm0ucmFkaXVzICsgdm0uYm9yZGVyV2lkdGhcblx0XHR9O1xuXHR9LFxuXG5cdGRyYXc6IGZ1bmN0aW9uKGNoYXJ0QXJlYSkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIG1vZGVsID0gdGhpcy5fbW9kZWw7XG5cdFx0dmFyIGN0eCA9IHRoaXMuX2NoYXJ0LmN0eDtcblx0XHR2YXIgcG9pbnRTdHlsZSA9IHZtLnBvaW50U3R5bGU7XG5cdFx0dmFyIHJhZGl1cyA9IHZtLnJhZGl1cztcblx0XHR2YXIgeCA9IHZtLng7XG5cdFx0dmFyIHkgPSB2bS55O1xuXHRcdHZhciBjb2xvciA9IGhlbHBlcnMuY29sb3I7XG5cdFx0dmFyIGVyck1hcmdpbiA9IDEuMDE7IC8vIDEuMDEgaXMgbWFyZ2luIGZvciBBY2N1bXVsYXRlZCBlcnJvci4gKEVzcGVjaWFsbHkgRWRnZSwgSUUuKVxuXHRcdHZhciByYXRpbyA9IDA7XG5cblx0XHRpZiAodm0uc2tpcCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yIHx8IGRlZmF1bHRDb2xvcjtcblx0XHRjdHgubGluZVdpZHRoID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdCh2bS5ib3JkZXJXaWR0aCwgZGVmYXVsdHMuZ2xvYmFsLmVsZW1lbnRzLnBvaW50LmJvcmRlcldpZHRoKTtcblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yIHx8IGRlZmF1bHRDb2xvcjtcblxuXHRcdC8vIENsaXBpbmcgZm9yIFBvaW50cy5cblx0XHQvLyBnb2luZyBvdXQgZnJvbSBpbm5lciBjaGFyQXJlYT9cblx0XHRpZiAoKGNoYXJ0QXJlYSAhPT0gdW5kZWZpbmVkKSAmJiAoKG1vZGVsLnggPCBjaGFydEFyZWEubGVmdCkgfHwgKGNoYXJ0QXJlYS5yaWdodCAqIGVyck1hcmdpbiA8IG1vZGVsLngpIHx8IChtb2RlbC55IDwgY2hhcnRBcmVhLnRvcCkgfHwgKGNoYXJ0QXJlYS5ib3R0b20gKiBlcnJNYXJnaW4gPCBtb2RlbC55KSkpIHtcblx0XHRcdC8vIFBvaW50IGZhZGUgb3V0XG5cdFx0XHRpZiAobW9kZWwueCA8IGNoYXJ0QXJlYS5sZWZ0KSB7XG5cdFx0XHRcdHJhdGlvID0gKHggLSBtb2RlbC54KSAvIChjaGFydEFyZWEubGVmdCAtIG1vZGVsLngpO1xuXHRcdFx0fSBlbHNlIGlmIChjaGFydEFyZWEucmlnaHQgKiBlcnJNYXJnaW4gPCBtb2RlbC54KSB7XG5cdFx0XHRcdHJhdGlvID0gKG1vZGVsLnggLSB4KSAvIChtb2RlbC54IC0gY2hhcnRBcmVhLnJpZ2h0KTtcblx0XHRcdH0gZWxzZSBpZiAobW9kZWwueSA8IGNoYXJ0QXJlYS50b3ApIHtcblx0XHRcdFx0cmF0aW8gPSAoeSAtIG1vZGVsLnkpIC8gKGNoYXJ0QXJlYS50b3AgLSBtb2RlbC55KTtcblx0XHRcdH0gZWxzZSBpZiAoY2hhcnRBcmVhLmJvdHRvbSAqIGVyck1hcmdpbiA8IG1vZGVsLnkpIHtcblx0XHRcdFx0cmF0aW8gPSAobW9kZWwueSAtIHkpIC8gKG1vZGVsLnkgLSBjaGFydEFyZWEuYm90dG9tKTtcblx0XHRcdH1cblx0XHRcdHJhdGlvID0gTWF0aC5yb3VuZChyYXRpbyAqIDEwMCkgLyAxMDA7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcihjdHguc3Ryb2tlU3R5bGUpLmFscGhhKHJhdGlvKS5yZ2JTdHJpbmcoKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBjb2xvcihjdHguZmlsbFN0eWxlKS5hbHBoYShyYXRpbykucmdiU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0aGVscGVycy5jYW52YXMuZHJhd1BvaW50KGN0eCwgcG9pbnRTdHlsZSwgcmFkaXVzLCB4LCB5KTtcblx0fVxufSk7XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9jb3JlL2NvcmUuZWxlbWVudFwiOjIwLFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmVsZW1lbnQnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRlbGVtZW50czoge1xuXHRcdHJlY3RhbmdsZToge1xuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyQ29sb3I6IGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJTa2lwcGVkOiAnYm90dG9tJyxcblx0XHRcdGJvcmRlcldpZHRoOiAwXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24gaXNWZXJ0aWNhbChiYXIpIHtcblx0cmV0dXJuIGJhci5fdmlldy53aWR0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGJvdW5kcyBvZiB0aGUgYmFyIHJlZ2FyZGxlc3Mgb2YgdGhlIG9yaWVudGF0aW9uXG4gKiBAcGFyYW0gYmFyIHtDaGFydC5FbGVtZW50LlJlY3RhbmdsZX0gdGhlIGJhclxuICogQHJldHVybiB7Qm91bmRzfSBib3VuZHMgb2YgdGhlIGJhclxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhcikge1xuXHR2YXIgdm0gPSBiYXIuX3ZpZXc7XG5cdHZhciB4MSwgeDIsIHkxLCB5MjtcblxuXHRpZiAoaXNWZXJ0aWNhbChiYXIpKSB7XG5cdFx0Ly8gdmVydGljYWxcblx0XHR2YXIgaGFsZldpZHRoID0gdm0ud2lkdGggLyAyO1xuXHRcdHgxID0gdm0ueCAtIGhhbGZXaWR0aDtcblx0XHR4MiA9IHZtLnggKyBoYWxmV2lkdGg7XG5cdFx0eTEgPSBNYXRoLm1pbih2bS55LCB2bS5iYXNlKTtcblx0XHR5MiA9IE1hdGgubWF4KHZtLnksIHZtLmJhc2UpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIGhvcml6b250YWwgYmFyXG5cdFx0dmFyIGhhbGZIZWlnaHQgPSB2bS5oZWlnaHQgLyAyO1xuXHRcdHgxID0gTWF0aC5taW4odm0ueCwgdm0uYmFzZSk7XG5cdFx0eDIgPSBNYXRoLm1heCh2bS54LCB2bS5iYXNlKTtcblx0XHR5MSA9IHZtLnkgLSBoYWxmSGVpZ2h0O1xuXHRcdHkyID0gdm0ueSArIGhhbGZIZWlnaHQ7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGxlZnQ6IHgxLFxuXHRcdHRvcDogeTEsXG5cdFx0cmlnaHQ6IHgyLFxuXHRcdGJvdHRvbTogeTJcblx0fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50LmV4dGVuZCh7XG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBzaWduWCwgc2lnblksIGJvcmRlclNraXBwZWQ7XG5cdFx0dmFyIGJvcmRlcldpZHRoID0gdm0uYm9yZGVyV2lkdGg7XG5cblx0XHRpZiAoIXZtLmhvcml6b250YWwpIHtcblx0XHRcdC8vIGJhclxuXHRcdFx0bGVmdCA9IHZtLnggLSB2bS53aWR0aCAvIDI7XG5cdFx0XHRyaWdodCA9IHZtLnggKyB2bS53aWR0aCAvIDI7XG5cdFx0XHR0b3AgPSB2bS55O1xuXHRcdFx0Ym90dG9tID0gdm0uYmFzZTtcblx0XHRcdHNpZ25YID0gMTtcblx0XHRcdHNpZ25ZID0gYm90dG9tID4gdG9wID8gMSA6IC0xO1xuXHRcdFx0Ym9yZGVyU2tpcHBlZCA9IHZtLmJvcmRlclNraXBwZWQgfHwgJ2JvdHRvbSc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGhvcml6b250YWwgYmFyXG5cdFx0XHRsZWZ0ID0gdm0uYmFzZTtcblx0XHRcdHJpZ2h0ID0gdm0ueDtcblx0XHRcdHRvcCA9IHZtLnkgLSB2bS5oZWlnaHQgLyAyO1xuXHRcdFx0Ym90dG9tID0gdm0ueSArIHZtLmhlaWdodCAvIDI7XG5cdFx0XHRzaWduWCA9IHJpZ2h0ID4gbGVmdCA/IDEgOiAtMTtcblx0XHRcdHNpZ25ZID0gMTtcblx0XHRcdGJvcmRlclNraXBwZWQgPSB2bS5ib3JkZXJTa2lwcGVkIHx8ICdsZWZ0Jztcblx0XHR9XG5cblx0XHQvLyBDYW52YXMgZG9lc24ndCBhbGxvdyB1cyB0byBzdHJva2UgaW5zaWRlIHRoZSB3aWR0aCBzbyB3ZSBjYW5cblx0XHQvLyBhZGp1c3QgdGhlIHNpemVzIHRvIGZpdCBpZiB3ZSdyZSBzZXR0aW5nIGEgc3Ryb2tlIG9uIHRoZSBsaW5lXG5cdFx0aWYgKGJvcmRlcldpZHRoKSB7XG5cdFx0XHQvLyBib3JkZXJXaWR0aCBzaG9sZCBiZSBsZXNzIHRoYW4gYmFyIHdpZHRoIGFuZCBiYXIgaGVpZ2h0LlxuXHRcdFx0dmFyIGJhclNpemUgPSBNYXRoLm1pbihNYXRoLmFicyhsZWZ0IC0gcmlnaHQpLCBNYXRoLmFicyh0b3AgLSBib3R0b20pKTtcblx0XHRcdGJvcmRlcldpZHRoID0gYm9yZGVyV2lkdGggPiBiYXJTaXplID8gYmFyU2l6ZSA6IGJvcmRlcldpZHRoO1xuXHRcdFx0dmFyIGhhbGZTdHJva2UgPSBib3JkZXJXaWR0aCAvIDI7XG5cdFx0XHQvLyBBZGp1c3QgYm9yZGVyV2lkdGggd2hlbiBiYXIgdG9wIHBvc2l0aW9uIGlzIG5lYXIgdm0uYmFzZSh6ZXJvKS5cblx0XHRcdHZhciBib3JkZXJMZWZ0ID0gbGVmdCArIChib3JkZXJTa2lwcGVkICE9PSAnbGVmdCcgPyBoYWxmU3Ryb2tlICogc2lnblggOiAwKTtcblx0XHRcdHZhciBib3JkZXJSaWdodCA9IHJpZ2h0ICsgKGJvcmRlclNraXBwZWQgIT09ICdyaWdodCcgPyAtaGFsZlN0cm9rZSAqIHNpZ25YIDogMCk7XG5cdFx0XHR2YXIgYm9yZGVyVG9wID0gdG9wICsgKGJvcmRlclNraXBwZWQgIT09ICd0b3AnID8gaGFsZlN0cm9rZSAqIHNpZ25ZIDogMCk7XG5cdFx0XHR2YXIgYm9yZGVyQm90dG9tID0gYm90dG9tICsgKGJvcmRlclNraXBwZWQgIT09ICdib3R0b20nID8gLWhhbGZTdHJva2UgKiBzaWduWSA6IDApO1xuXHRcdFx0Ly8gbm90IGJlY29tZSBhIHZlcnRpY2FsIGxpbmU/XG5cdFx0XHRpZiAoYm9yZGVyTGVmdCAhPT0gYm9yZGVyUmlnaHQpIHtcblx0XHRcdFx0dG9wID0gYm9yZGVyVG9wO1xuXHRcdFx0XHRib3R0b20gPSBib3JkZXJCb3R0b207XG5cdFx0XHR9XG5cdFx0XHQvLyBub3QgYmVjb21lIGEgaG9yaXpvbnRhbCBsaW5lP1xuXHRcdFx0aWYgKGJvcmRlclRvcCAhPT0gYm9yZGVyQm90dG9tKSB7XG5cdFx0XHRcdGxlZnQgPSBib3JkZXJMZWZ0O1xuXHRcdFx0XHRyaWdodCA9IGJvcmRlclJpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHZtLmJvcmRlckNvbG9yO1xuXHRcdGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aDtcblxuXHRcdC8vIENvcm5lciBwb2ludHMsIGZyb20gYm90dG9tLWxlZnQgdG8gYm90dG9tLXJpZ2h0IGNsb2Nrd2lzZVxuXHRcdC8vIHwgMSAyIHxcblx0XHQvLyB8IDAgMyB8XG5cdFx0dmFyIGNvcm5lcnMgPSBbXG5cdFx0XHRbbGVmdCwgYm90dG9tXSxcblx0XHRcdFtsZWZ0LCB0b3BdLFxuXHRcdFx0W3JpZ2h0LCB0b3BdLFxuXHRcdFx0W3JpZ2h0LCBib3R0b21dXG5cdFx0XTtcblxuXHRcdC8vIEZpbmQgZmlyc3QgKHN0YXJ0aW5nKSBjb3JuZXIgd2l0aCBmYWxsYmFjayB0byAnYm90dG9tJ1xuXHRcdHZhciBib3JkZXJzID0gWydib3R0b20nLCAnbGVmdCcsICd0b3AnLCAncmlnaHQnXTtcblx0XHR2YXIgc3RhcnRDb3JuZXIgPSBib3JkZXJzLmluZGV4T2YoYm9yZGVyU2tpcHBlZCwgMCk7XG5cdFx0aWYgKHN0YXJ0Q29ybmVyID09PSAtMSkge1xuXHRcdFx0c3RhcnRDb3JuZXIgPSAwO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGNvcm5lckF0KGluZGV4KSB7XG5cdFx0XHRyZXR1cm4gY29ybmVyc1soc3RhcnRDb3JuZXIgKyBpbmRleCkgJSA0XTtcblx0XHR9XG5cblx0XHQvLyBEcmF3IHJlY3RhbmdsZSBmcm9tICdzdGFydENvcm5lcidcblx0XHR2YXIgY29ybmVyID0gY29ybmVyQXQoMCk7XG5cdFx0Y3R4Lm1vdmVUbyhjb3JuZXJbMF0sIGNvcm5lclsxXSk7XG5cblx0XHRmb3IgKHZhciBpID0gMTsgaSA8IDQ7IGkrKykge1xuXHRcdFx0Y29ybmVyID0gY29ybmVyQXQoaSk7XG5cdFx0XHRjdHgubGluZVRvKGNvcm5lclswXSwgY29ybmVyWzFdKTtcblx0XHR9XG5cblx0XHRjdHguZmlsbCgpO1xuXHRcdGlmIChib3JkZXJXaWR0aCkge1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fSxcblxuXHRoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHZtLmJhc2UgLSB2bS55O1xuXHR9LFxuXG5cdGluUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCwgbW91c2VZKSB7XG5cdFx0dmFyIGluUmFuZ2UgPSBmYWxzZTtcblxuXHRcdGlmICh0aGlzLl92aWV3KSB7XG5cdFx0XHR2YXIgYm91bmRzID0gZ2V0QmFyQm91bmRzKHRoaXMpO1xuXHRcdFx0aW5SYW5nZSA9IG1vdXNlWCA+PSBib3VuZHMubGVmdCAmJiBtb3VzZVggPD0gYm91bmRzLnJpZ2h0ICYmIG1vdXNlWSA+PSBib3VuZHMudG9wICYmIG1vdXNlWSA8PSBib3VuZHMuYm90dG9tO1xuXHRcdH1cblxuXHRcdHJldHVybiBpblJhbmdlO1xuXHR9LFxuXG5cdGluTGFiZWxSYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmICghbWUuX3ZpZXcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgaW5SYW5nZSA9IGZhbHNlO1xuXHRcdHZhciBib3VuZHMgPSBnZXRCYXJCb3VuZHMobWUpO1xuXG5cdFx0aWYgKGlzVmVydGljYWwobWUpKSB7XG5cdFx0XHRpblJhbmdlID0gbW91c2VYID49IGJvdW5kcy5sZWZ0ICYmIG1vdXNlWCA8PSBib3VuZHMucmlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGluUmFuZ2UgPSBtb3VzZVkgPj0gYm91bmRzLnRvcCAmJiBtb3VzZVkgPD0gYm91bmRzLmJvdHRvbTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5SYW5nZTtcblx0fSxcblxuXHRpblhSYW5nZTogZnVuY3Rpb24obW91c2VYKSB7XG5cdFx0dmFyIGJvdW5kcyA9IGdldEJhckJvdW5kcyh0aGlzKTtcblx0XHRyZXR1cm4gbW91c2VYID49IGJvdW5kcy5sZWZ0ICYmIG1vdXNlWCA8PSBib3VuZHMucmlnaHQ7XG5cdH0sXG5cblx0aW5ZUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWSkge1xuXHRcdHZhciBib3VuZHMgPSBnZXRCYXJCb3VuZHModGhpcyk7XG5cdFx0cmV0dXJuIG1vdXNlWSA+PSBib3VuZHMudG9wICYmIG1vdXNlWSA8PSBib3VuZHMuYm90dG9tO1xuXHR9LFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciB4LCB5O1xuXHRcdGlmIChpc1ZlcnRpY2FsKHRoaXMpKSB7XG5cdFx0XHR4ID0gdm0ueDtcblx0XHRcdHkgPSAodm0ueSArIHZtLmJhc2UpIC8gMjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0eCA9ICh2bS54ICsgdm0uYmFzZSkgLyAyO1xuXHRcdFx0eSA9IHZtLnk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHt4OiB4LCB5OiB5fTtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB2bS53aWR0aCAqIE1hdGguYWJzKHZtLnkgLSB2bS5iYXNlKTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHZtLngsXG5cdFx0XHR5OiB2bS55XG5cdFx0fTtcblx0fVxufSk7XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9jb3JlL2NvcmUuZWxlbWVudFwiOjIwfV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMuQXJjID0gcmVxdWlyZSgnLi9lbGVtZW50LmFyYycpO1xubW9kdWxlLmV4cG9ydHMuTGluZSA9IHJlcXVpcmUoJy4vZWxlbWVudC5saW5lJyk7XG5tb2R1bGUuZXhwb3J0cy5Qb2ludCA9IHJlcXVpcmUoJy4vZWxlbWVudC5wb2ludCcpO1xubW9kdWxlLmV4cG9ydHMuUmVjdGFuZ2xlID0gcmVxdWlyZSgnLi9lbGVtZW50LnJlY3RhbmdsZScpO1xuXG59LHtcIi4vZWxlbWVudC5hcmNcIjozMCxcIi4vZWxlbWVudC5saW5lXCI6MzEsXCIuL2VsZW1lbnQucG9pbnRcIjozMixcIi4vZWxlbWVudC5yZWN0YW5nbGVcIjozM31dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuY29yZScpO1xuXG4vKipcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jYW52YXNcbiAqL1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHtcblx0LyoqXG5cdCAqIENsZWFycyB0aGUgZW50aXJlIGNhbnZhcyBhc3NvY2lhdGVkIHRvIHRoZSBnaXZlbiBgY2hhcnRgLlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBmb3Igd2hpY2ggdG8gY2xlYXIgdGhlIGNhbnZhcy5cblx0ICovXG5cdGNsZWFyOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdGNoYXJ0LmN0eC5jbGVhclJlY3QoMCwgMCwgY2hhcnQud2lkdGgsIGNoYXJ0LmhlaWdodCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBcInBhdGhcIiBmb3IgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgYXQgcG9zaXRpb24gKHgsIHkpIHdpdGggYVxuXHQgKiBnaXZlbiBzaXplICh3aWR0aCwgaGVpZ2h0KSBhbmQgdGhlIHNhbWUgYHJhZGl1c2AgZm9yIGFsbCBjb3JuZXJzLlxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IC0gVGhlIGNhbnZhcyAyRCBDb250ZXh0LlxuXHQgKiBAcGFyYW0ge051bWJlcn0geCAtIFRoZSB4IGF4aXMgb2YgdGhlIGNvb3JkaW5hdGUgZm9yIHRoZSByZWN0YW5nbGUgc3RhcnRpbmcgcG9pbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB5IC0gVGhlIHkgYXhpcyBvZiB0aGUgY29vcmRpbmF0ZSBmb3IgdGhlIHJlY3RhbmdsZSBzdGFydGluZyBwb2ludC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIC0gVGhlIHJlY3RhbmdsZSdzIHdpZHRoLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IC0gVGhlIHJlY3RhbmdsZSdzIGhlaWdodC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1cyAtIFRoZSByb3VuZGVkIGFtb3VudCAoaW4gcGl4ZWxzKSBmb3IgdGhlIGZvdXIgY29ybmVycy5cblx0ICogQHRvZG8gaGFuZGxlIGByYWRpdXNgIGFzIHRvcC1sZWZ0LCB0b3AtcmlnaHQsIGJvdHRvbS1yaWdodCwgYm90dG9tLWxlZnQgYXJyYXkvb2JqZWN0P1xuXHQgKi9cblx0cm91bmRlZFJlY3Q6IGZ1bmN0aW9uKGN0eCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgcmFkaXVzKSB7XG5cdFx0aWYgKHJhZGl1cykge1xuXHRcdFx0dmFyIHJ4ID0gTWF0aC5taW4ocmFkaXVzLCB3aWR0aCAvIDIpO1xuXHRcdFx0dmFyIHJ5ID0gTWF0aC5taW4ocmFkaXVzLCBoZWlnaHQgLyAyKTtcblxuXHRcdFx0Y3R4Lm1vdmVUbyh4ICsgcngsIHkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGggLSByeCwgeSk7XG5cdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJ5KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcnkpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByeCwgeSArIGhlaWdodCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyByeCwgeSArIGhlaWdodCk7XG5cdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcnkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcnkpO1xuXHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJ4LCB5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3R4LnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9LFxuXG5cdGRyYXdQb2ludDogZnVuY3Rpb24oY3R4LCBzdHlsZSwgcmFkaXVzLCB4LCB5KSB7XG5cdFx0dmFyIHR5cGUsIGVkZ2VMZW5ndGgsIHhPZmZzZXQsIHlPZmZzZXQsIGhlaWdodCwgc2l6ZTtcblxuXHRcdGlmICh0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHR0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcblx0XHRcdGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuXHRcdFx0XHRjdHguZHJhd0ltYWdlKHN0eWxlLCB4IC0gc3R5bGUud2lkdGggLyAyLCB5IC0gc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoc3R5bGUpIHtcblx0XHQvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3RyaWFuZ2xlJzpcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGVkZ2VMZW5ndGggPSAzICogcmFkaXVzIC8gTWF0aC5zcXJ0KDMpO1xuXHRcdFx0aGVpZ2h0ID0gZWRnZUxlbmd0aCAqIE1hdGguc3FydCgzKSAvIDI7XG5cdFx0XHRjdHgubW92ZVRvKHggLSBlZGdlTGVuZ3RoIC8gMiwgeSArIGhlaWdodCAvIDMpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgZWRnZUxlbmd0aCAvIDIsIHkgKyBoZWlnaHQgLyAzKTtcblx0XHRcdGN0eC5saW5lVG8oeCwgeSAtIDIgKiBoZWlnaHQgLyAzKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Jzpcblx0XHRcdHNpemUgPSAxIC8gTWF0aC5TUVJUMiAqIHJhZGl1cztcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5maWxsUmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG5cdFx0XHRjdHguc3Ryb2tlUmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Um91bmRlZCc6XG5cdFx0XHR2YXIgb2Zmc2V0ID0gcmFkaXVzIC8gTWF0aC5TUVJUMjtcblx0XHRcdHZhciBsZWZ0WCA9IHggLSBvZmZzZXQ7XG5cdFx0XHR2YXIgdG9wWSA9IHkgLSBvZmZzZXQ7XG5cdFx0XHR2YXIgc2lkZVNpemUgPSBNYXRoLlNRUlQyICogcmFkaXVzO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0dGhpcy5yb3VuZGVkUmVjdChjdHgsIGxlZnRYLCB0b3BZLCBzaWRlU2l6ZSwgc2lkZVNpemUsIHJhZGl1cyAvIDIpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3JlY3RSb3QnOlxuXHRcdFx0c2l6ZSA9IDEgLyBNYXRoLlNRUlQyICogcmFkaXVzO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4IC0gc2l6ZSwgeSk7XG5cdFx0XHRjdHgubGluZVRvKHgsIHkgKyBzaXplKTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHNpemUsIHkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4LCB5IC0gc2l6ZSk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY3Jvc3MnOlxuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRcdGN0eC5saW5lVG8oeCwgeSAtIHJhZGl1cyk7XG5cdFx0XHRjdHgubW92ZVRvKHggLSByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5KTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Nyb3NzUm90Jzpcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdHhPZmZzZXQgPSBNYXRoLmNvcyhNYXRoLlBJIC8gNCkgKiByYWRpdXM7XG5cdFx0XHR5T2Zmc2V0ID0gTWF0aC5zaW4oTWF0aC5QSSAvIDQpICogcmFkaXVzO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuXHRcdFx0Y3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSArIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnc3Rhcic6XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHgsIHkgKyByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4LCB5IC0gcmFkaXVzKTtcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHJhZGl1cywgeSk7XG5cdFx0XHRjdHgubGluZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKE1hdGguUEkgLyA0KSAqIHJhZGl1cztcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihNYXRoLlBJIC8gNCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdsaW5lJzpcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeCAtIHJhZGl1cywgeSk7XG5cdFx0XHRjdHgubGluZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZGFzaCc6XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKHgsIHkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5KTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdGN0eC5zdHJva2UoKTtcblx0fSxcblxuXHRjbGlwQXJlYTogZnVuY3Rpb24oY3R4LCBhcmVhKSB7XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0fSxcblxuXHR1bmNsaXBBcmVhOiBmdW5jdGlvbihjdHgpIHtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG5cdFx0aWYgKHRhcmdldC5zdGVwcGVkTGluZSkge1xuXHRcdFx0aWYgKCh0YXJnZXQuc3RlcHBlZExpbmUgPT09ICdhZnRlcicgJiYgIWZsaXApIHx8ICh0YXJnZXQuc3RlcHBlZExpbmUgIT09ICdhZnRlcicgJiYgZmxpcCkpIHtcblx0XHRcdFx0Y3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcblx0XHRcdH1cblx0XHRcdGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRhcmdldC50ZW5zaW9uKSB7XG5cdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LmJlemllckN1cnZlVG8oXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNYIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFgsXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNZIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFksXG5cdFx0XHRmbGlwID8gdGFyZ2V0LmNvbnRyb2xQb2ludE5leHRYIDogdGFyZ2V0LmNvbnRyb2xQb2ludFByZXZpb3VzWCxcblx0XHRcdGZsaXAgPyB0YXJnZXQuY29udHJvbFBvaW50TmV4dFkgOiB0YXJnZXQuY29udHJvbFBvaW50UHJldmlvdXNZLFxuXHRcdFx0dGFyZ2V0LngsXG5cdFx0XHR0YXJnZXQueSk7XG5cdH1cbn07XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYW52YXMuY2xlYXIgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jbGVhclxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5jbGVhciA9IGV4cG9ydHMuY2xlYXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5yb3VuZGVkUmVjdCBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24oY3R4KSB7XG5cdGN0eC5iZWdpblBhdGgoKTtcblx0ZXhwb3J0cy5yb3VuZGVkUmVjdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuXHRjdHguY2xvc2VQYXRoKCk7XG59O1xuXG59LHtcIi4vaGVscGVycy5jb3JlXCI6MzZ9XSwzNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi9cbnZhciBoZWxwZXJzID0ge1xuXHQvKipcblx0ICogQW4gZW1wdHkgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIGZvciBvcHRpb25hbCBjYWxsYmFjay5cblx0ICovXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB1bmlxdWUgaWQsIHNlcXVlbnRpYWxseSBnZW5lcmF0ZWQgZnJvbSBhIGdsb2JhbCB2YXJpYWJsZS5cblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHR1aWQ6IChmdW5jdGlvbigpIHtcblx0XHR2YXIgaWQgPSAwO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBpZCsrO1xuXHRcdH07XG5cdH0oKSksXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIG5laXRoZXIgbnVsbCBub3IgdW5kZWZpbmVkLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNOdWxsT3JVbmRlZjogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5ID8gQXJyYXkuaXNBcnJheSA6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNPYmplY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0dmFsdWVPckRlZmF1bHQ6IGZ1bmN0aW9uKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGF0IHRoZSBnaXZlbiBgaW5kZXhgIGluIGFycmF5IGlmIGRlZmluZWQsIGVsc2UgcmV0dXJucyBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHBhcmFtIHtBcnJheX0gdmFsdWUgLSBUaGUgYXJyYXkgdG8gbG9va3VwIGZvciB2YWx1ZSBhdCBgaW5kZXhgLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW4gYHZhbHVlYCB0byBsb29rdXAgZm9yIHZhbHVlLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlW2luZGV4XWAgaXMgdW5kZWZpbmVkLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHZhbHVlQXRJbmRleE9yRGVmYXVsdDogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gaGVscGVycy52YWx1ZU9yRGVmYXVsdChoZWxwZXJzLmlzQXJyYXkodmFsdWUpID8gdmFsdWVbaW5kZXhdIDogdmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcblx0ICogdmFsdWUgcmV0dXJuZWQgYnkgYGZuYC4gSWYgYGZuYCBpcyBub3QgYSBmdW5jdGlvbiwgdGhpcyBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG5cdCAqIEBwYXJhbSB7QXJyYXl8dW5kZWZpbmVkfG51bGx9IGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjYWxsYmFjazogZnVuY3Rpb24oZm4sIGFyZ3MsIHRoaXNBcmcpIHtcblx0XHRpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGUoU0IpIGZvciBwZXJmb3JtYW5jZSBzYWtlLCB0aGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gbG9vcGFibGUgdHlwZVxuXHQgKiBpcyB1bmtub3duIG9yIGluIG5vbmUgaW50ZW5zaXZlIGNvZGUgKG5vdCBjYWxsZWQgb2Z0ZW4gYW5kIHNtYWxsIGxvb3BhYmxlKS4gRWxzZVxuXHQgKiBpdCdzIHByZWZlcmFibGUgdG8gdXNlIGEgcmVndWxhciBmb3IoKSBsb29wIGFuZCBzYXZlIGV4dHJhIGZ1bmN0aW9uIGNhbGxzLlxuXHQgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbG9vcGFibGUgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGl0ZXJhdGVkLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbdGhpc0FyZ10gLSBUaGUgdmFsdWUgb2YgYHRoaXNgIHByb3ZpZGVkIGZvciB0aGUgY2FsbCB0byBgZm5gLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZXZlcnNlXSAtIElmIHRydWUsIGl0ZXJhdGVzIGJhY2t3YXJkIG9uIHRoZSBsb29wYWJsZS5cblx0ICovXG5cdGVhY2g6IGZ1bmN0aW9uKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuXHRcdHZhciBpLCBsZW4sIGtleXM7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsb29wYWJsZSkpIHtcblx0XHRcdGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0Zm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzT2JqZWN0KGxvb3BhYmxlKSkge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcblx0XHRcdGxlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDg1Mzk3NFxuXHQgKiBAcGFyYW0ge0FycmF5fSBhMCAtIFRoZSBhcnJheSB0byBjb21wYXJlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqL1xuXHRhcnJheUVxdWFsczogZnVuY3Rpb24oYTAsIGExKSB7XG5cdFx0dmFyIGksIGlsZW4sIHYwLCB2MTtcblxuXHRcdGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0djAgPSBhMFtpXTtcblx0XHRcdHYxID0gYTFbaV07XG5cblx0XHRcdGlmICh2MCBpbnN0YW5jZW9mIEFycmF5ICYmIHYxIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0aWYgKCFoZWxwZXJzLmFycmF5RXF1YWxzKHYwLCB2MSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodjAgIT09IHYxKSB7XG5cdFx0XHRcdC8vIE5PVEU6IHR3byBkaWZmZXJlbnQgb2JqZWN0IGluc3RhbmNlcyB3aWxsIG5ldmVyIGJlIGVxdWFsOiB7eDoyMH0gIT0ge3g6MjB9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG5cdCAqIEBwYXJhbSB7Kn0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdGNsb25lOiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHRpZiAoaGVscGVycy5pc0FycmF5KHNvdXJjZSkpIHtcblx0XHRcdHJldHVybiBzb3VyY2UubWFwKGhlbHBlcnMuY2xvbmUpO1xuXHRcdH1cblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHNvdXJjZSkpIHtcblx0XHRcdHZhciB0YXJnZXQgPSB7fTtcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0XHRcdHZhciBrbGVuID0ga2V5cy5sZW5ndGg7XG5cdFx0XHR2YXIgayA9IDA7XG5cblx0XHRcdGZvciAoOyBrIDwga2xlbjsgKytrKSB7XG5cdFx0XHRcdHRhcmdldFtrZXlzW2tdXSA9IGhlbHBlcnMuY2xvbmUoc291cmNlW2tleXNba11dKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gc291cmNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBUaGUgZGVmYXVsdCBtZXJnZXIgd2hlbiBDaGFydC5oZWxwZXJzLm1lcmdlIGlzIGNhbGxlZCB3aXRob3V0IG1lcmdlciBvcHRpb24uXG5cdCAqIE5vdGUoU0IpOiB0aGlzIG1ldGhvZCBpcyBhbHNvIHVzZWQgYnkgY29uZmlnTWVyZ2UgYW5kIHNjYWxlTWVyZ2UgYXMgZmFsbGJhY2suXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfbWVyZ2VyOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0dmFyIHR2YWwgPSB0YXJnZXRba2V5XTtcblx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodHZhbCkgJiYgaGVscGVycy5pc09iamVjdChzdmFsKSkge1xuXHRcdFx0aGVscGVycy5tZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBoZWxwZXJzLmNsb25lKHN2YWwpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X21lcmdlcklmOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlKSB7XG5cdFx0dmFyIHR2YWwgPSB0YXJnZXRba2V5XTtcblx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodHZhbCkgJiYgaGVscGVycy5pc09iamVjdChzdmFsKSkge1xuXHRcdFx0aGVscGVycy5tZXJnZUlmKHR2YWwsIHN2YWwpO1xuXHRcdH0gZWxzZSBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMuY2xvbmUoc3ZhbCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZWN1cnNpdmVseSBkZWVwIGNvcGllcyBgc291cmNlYCBwcm9wZXJ0aWVzIGludG8gYHRhcmdldGAgd2l0aCB0aGUgZ2l2ZW4gYG9wdGlvbnNgLlxuXHQgKiBJTVBPUlRBTlQ6IGB0YXJnZXRgIGlzIG5vdCBjbG9uZWQgYW5kIHdpbGwgYmUgdXBkYXRlZCB3aXRoIGBzb3VyY2VgIHByb3BlcnRpZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCBpbiB3aGljaCBhbGwgc291cmNlcyBhcmUgbWVyZ2VkIGludG8uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fEFycmF5KE9iamVjdCl9IHNvdXJjZSAtIE9iamVjdChzKSB0byBtZXJnZSBpbnRvIGB0YXJnZXRgLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gTWVyZ2luZyBvcHRpb25zOlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5tZXJnZXJdIC0gVGhlIG1lcmdlIG1ldGhvZCAoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGB0YXJnZXRgIG9iamVjdC5cblx0ICovXG5cdG1lcmdlOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBzb3VyY2VzID0gaGVscGVycy5pc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcblx0XHR2YXIgaWxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuXHRcdHZhciBtZXJnZSwgaSwga2V5cywga2xlbiwgaztcblxuXHRcdGlmICghaGVscGVycy5pc09iamVjdCh0YXJnZXQpKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG1lcmdlID0gb3B0aW9ucy5tZXJnZXIgfHwgaGVscGVycy5fbWVyZ2VyO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghaGVscGVycy5pc09iamVjdChzb3VyY2UpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0XHRcdGZvciAoayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsraykge1xuXHRcdFx0XHRtZXJnZShrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fSxcblxuXHQvKipcblx0ICogUmVjdXJzaXZlbHkgZGVlcCBjb3BpZXMgYHNvdXJjZWAgcHJvcGVydGllcyBpbnRvIGB0YXJnZXRgICpvbmx5KiBpZiBub3QgZGVmaW5lZCBpbiB0YXJnZXQuXG5cdCAqIElNUE9SVEFOVDogYHRhcmdldGAgaXMgbm90IGNsb25lZCBhbmQgd2lsbCBiZSB1cGRhdGVkIHdpdGggYHNvdXJjZWAgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtPYmplY3R8QXJyYXkoT2JqZWN0KX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBgdGFyZ2V0YCBvYmplY3QuXG5cdCAqL1xuXHRtZXJnZUlmOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBoZWxwZXJzLl9tZXJnZXJJZn0pO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhlbHBlcnM7XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYWxsYmFjayBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuY2FsbENhbGxiYWNrXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmNhbGxDYWxsYmFjayA9IGhlbHBlcnMuY2FsbGJhY2s7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBpbnN0ZWFkLlxuICogQXJyYXkucHJvdG90eXBlLmluZGV4T2YgY29tcGF0aWJpbGl0eTogQ2hyb21lLCBPcGVyYSwgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmluZGV4T2ZcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuaW5kZXhPZiA9IGZ1bmN0aW9uKGFycmF5LCBpdGVtLCBmcm9tSW5kZXgpIHtcblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJyYXksIGl0ZW0sIGZyb21JbmRleCk7XG59O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy52YWx1ZU9yRGVmYXVsdCBpbnN0ZWFkLlxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMuZ2V0VmFsdWVPckRlZmF1bHRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuZ2V0VmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0O1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmdldFZhbHVlQXRJbmRleE9yRGVmYXVsdFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblxufSx7fV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycy5jb3JlJyk7XG5cbi8qKlxuICogRWFzaW5nIGZ1bmN0aW9ucyBhZGFwdGVkIGZyb20gUm9iZXJ0IFBlbm5lcidzIGVhc2luZyBlcXVhdGlvbnMuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nRWZmZWN0c1xuICogQHNlZSBodHRwOi8vd3d3LnJvYmVydHBlbm5lci5jb20vZWFzaW5nL1xuICovXG52YXIgZWZmZWN0cyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQ7XG5cdH0sXG5cblx0ZWFzZUluUXVhZDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0UXVhZDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAtdCAqICh0IC0gMik7XG5cdH0sXG5cblx0ZWFzZUluT3V0UXVhZDogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gLTAuNSAqICgoLS10KSAqICh0IC0gMikgLSAxKTtcblx0fSxcblxuXHRlYXNlSW5DdWJpYzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0ICogdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dEN1YmljOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID0gdCAtIDEpICogdCAqIHQgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEN1YmljOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQgKiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5RdWFydDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiB0ICogdCAqIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRRdWFydDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAtKCh0ID0gdCAtIDEpICogdCAqIHQgKiB0IC0gMSk7XG5cdH0sXG5cblx0ZWFzZUluT3V0UXVhcnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpO1xuXHR9LFxuXG5cdGVhc2VJblF1aW50OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0ICogdCAqIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRRdWludDogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9IHQgLSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dFF1aW50OiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMik7XG5cdH0sXG5cblx0ZWFzZUluU2luZTogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAtTWF0aC5jb3ModCAqIChNYXRoLlBJIC8gMikpICsgMTtcblx0fSxcblxuXHRlYXNlT3V0U2luZTogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiBNYXRoLnNpbih0ICogKE1hdGguUEkgLyAyKSk7XG5cdH0sXG5cblx0ZWFzZUluT3V0U2luZTogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAtMC41ICogKE1hdGguY29zKE1hdGguUEkgKiB0KSAtIDEpO1xuXHR9LFxuXG5cdGVhc2VJbkV4cG86IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPT09IDApID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSk7XG5cdH0sXG5cblx0ZWFzZU91dEV4cG86IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPT09IDEpID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0RXhwbzogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKHQgPT09IDEpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAtLXQpICsgMik7XG5cdH0sXG5cblx0ZWFzZUluQ2lyYzogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0ID49IDEpIHtcblx0XHRcdHJldHVybiB0O1xuXHRcdH1cblx0XHRyZXR1cm4gLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuXHR9LFxuXG5cdGVhc2VPdXRDaXJjOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydCgxIC0gKHQgPSB0IC0gMSkgKiB0KTtcblx0fSxcblxuXHRlYXNlSW5PdXRDaXJjOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpO1xuXHR9LFxuXG5cdGVhc2VJbkVsYXN0aWM6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0dmFyIHAgPSAwO1xuXHRcdHZhciBhID0gMTtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICh0ID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCFwKSB7XG5cdFx0XHRwID0gMC4zO1xuXHRcdH1cblx0XHRpZiAoYSA8IDEpIHtcblx0XHRcdGEgPSAxO1xuXHRcdFx0cyA9IHAgLyA0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oMSAvIGEpO1xuXHRcdH1cblx0XHRyZXR1cm4gLShhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKTtcblx0fSxcblxuXHRlYXNlT3V0RWxhc3RpYzogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHR2YXIgcCA9IDA7XG5cdFx0dmFyIGEgPSAxO1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKHQgPT09IDEpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoIXApIHtcblx0XHRcdHAgPSAwLjM7XG5cdFx0fVxuXHRcdGlmIChhIDwgMSkge1xuXHRcdFx0YSA9IDE7XG5cdFx0XHRzID0gcCAvIDQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0fVxuXHRcdHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRFbGFzdGljOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHZhciBwID0gMDtcblx0XHR2YXIgYSA9IDE7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAoKHQgLz0gMC41KSA9PT0gMikge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICghcCkge1xuXHRcdFx0cCA9IDAuNDU7XG5cdFx0fVxuXHRcdGlmIChhIDwgMSkge1xuXHRcdFx0YSA9IDE7XG5cdFx0XHRzID0gcCAvIDQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0fVxuXHRcdGlmICh0IDwgMSkge1xuXHRcdFx0cmV0dXJuIC0wLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSk7XG5cdFx0fVxuXHRcdHJldHVybiBhICogTWF0aC5wb3coMiwgLTEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgLSBzKSAqICgyICogTWF0aC5QSSkgLyBwKSAqIDAuNSArIDE7XG5cdH0sXG5cdGVhc2VJbkJhY2s6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0cmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG5cdH0sXG5cblx0ZWFzZU91dEJhY2s6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0cmV0dXJuICh0ID0gdCAtIDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRCYWNrOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCArIHMpICsgMik7XG5cdH0sXG5cblx0ZWFzZUluQm91bmNlOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIDEgLSBlZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpO1xuXHR9LFxuXG5cdGVhc2VPdXRCb3VuY2U6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA8ICgxIC8gMi43NSkpIHtcblx0XHRcdHJldHVybiA3LjU2MjUgKiB0ICogdDtcblx0XHR9XG5cdFx0aWYgKHQgPCAoMiAvIDIuNzUpKSB7XG5cdFx0XHRyZXR1cm4gNy41NjI1ICogKHQgLT0gKDEuNSAvIDIuNzUpKSAqIHQgKyAwLjc1O1xuXHRcdH1cblx0XHRpZiAodCA8ICgyLjUgLyAyLjc1KSkge1xuXHRcdFx0cmV0dXJuIDcuNTYyNSAqICh0IC09ICgyLjI1IC8gMi43NSkpICogdCArIDAuOTM3NTtcblx0XHR9XG5cdFx0cmV0dXJuIDcuNTYyNSAqICh0IC09ICgyLjYyNSAvIDIuNzUpKSAqIHQgKyAwLjk4NDM3NTtcblx0fSxcblxuXHRlYXNlSW5PdXRCb3VuY2U6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAodCA8IDAuNSkge1xuXHRcdFx0cmV0dXJuIGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNTtcblx0XHR9XG5cdFx0cmV0dXJuIGVmZmVjdHMuZWFzZU91dEJvdW5jZSh0ICogMiAtIDEpICogMC41ICsgMC41O1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZWZmZWN0czogZWZmZWN0c1xufTtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmVhc2luZy5lZmZlY3RzIGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5lYXNpbmdFZmZlY3RzXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmVhc2luZ0VmZmVjdHMgPSBlZmZlY3RzO1xuXG59LHtcIi4vaGVscGVycy5jb3JlXCI6MzZ9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmNvcmUnKTtcblxuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5vcHRpb25zXG4gKiBAbmFtZXNwYWNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIGxpbmUgaGVpZ2h0IGB2YWx1ZWAgaW4gcGl4ZWxzIGZvciBhIHNwZWNpZmljIGZvbnQgYHNpemVgLlxuXHQgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHZhbHVlIC0gVGhlIGxpbmVIZWlnaHQgdG8gcGFyc2UgKGVnLiAxLjYsICcxNHB4JywgJzc1JScsICcxLjZlbScpLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIFRoZSBmb250IHNpemUgKGluIHBpeGVscykgdXNlZCB0byByZXNvbHZlIHJlbGF0aXZlIGB2YWx1ZWAuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBlZmZlY3RpdmUgbGluZSBoZWlnaHQgaW4gcGl4ZWxzIChzaXplICogMS4yIGlmIHZhbHVlIGlzIGludmFsaWQpLlxuXHQgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9saW5lLWhlaWdodFxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvTGluZUhlaWdodDogZnVuY3Rpb24odmFsdWUsIHNpemUpIHtcblx0XHR2YXIgbWF0Y2hlcyA9ICgnJyArIHZhbHVlKS5tYXRjaCgvXihub3JtYWx8KFxcZCsoPzpcXC5cXGQrKT8pKHB4fGVtfCUpPykkLyk7XG5cdFx0aWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG5cdFx0XHRyZXR1cm4gc2l6ZSAqIDEuMjtcblx0XHR9XG5cblx0XHR2YWx1ZSA9ICttYXRjaGVzWzJdO1xuXG5cdFx0c3dpdGNoIChtYXRjaGVzWzNdKSB7XG5cdFx0Y2FzZSAncHgnOlxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGNhc2UgJyUnOlxuXHRcdFx0dmFsdWUgLz0gMTAwO1xuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdHJldHVybiBzaXplICogdmFsdWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgcGFkZGluZyBvYmplY3Qgd2l0aCBwcmUtY29tcHV0ZWQgd2lkdGgvaGVpZ2h0LlxuXHQgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IHZhbHVlIC0gSWYgYSBudW1iZXIsIHNldCB0aGUgdmFsdWUgdG8gYWxsIFRSQkwgY29tcG9uZW50LFxuXHQgKiAgZWxzZSwgaWYgYW5kIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcGFkZGluZyB2YWx1ZXMgKHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgd2lkdGgsIGhlaWdodClcblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHR0b1BhZGRpbmc6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dmFyIHQsIHIsIGIsIGw7XG5cblx0XHRpZiAoaGVscGVycy5pc09iamVjdCh2YWx1ZSkpIHtcblx0XHRcdHQgPSArdmFsdWUudG9wIHx8IDA7XG5cdFx0XHRyID0gK3ZhbHVlLnJpZ2h0IHx8IDA7XG5cdFx0XHRiID0gK3ZhbHVlLmJvdHRvbSB8fCAwO1xuXHRcdFx0bCA9ICt2YWx1ZS5sZWZ0IHx8IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgPSByID0gYiA9IGwgPSArdmFsdWUgfHwgMDtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiB0LFxuXHRcdFx0cmlnaHQ6IHIsXG5cdFx0XHRib3R0b206IGIsXG5cdFx0XHRsZWZ0OiBsLFxuXHRcdFx0aGVpZ2h0OiB0ICsgYixcblx0XHRcdHdpZHRoOiBsICsgclxuXHRcdH07XG5cdH0sXG5cblx0LyoqXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gYGlucHV0c2Agc2VxdWVudGlhbGx5IGFuZCByZXR1cm5zIHRoZSBmaXJzdCBkZWZpbmVkIHZhbHVlLlxuXHQgKiBAcGFyYW0ge0FycmF5W119IGlucHV0cyAtIEFuIGFycmF5IG9mIHZhbHVlcywgZmFsbGluZyBiYWNrIHRvIHRoZSBsYXN0IHZhbHVlLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdIC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYSBmdW5jdGlvbiwgdGhlIHZhbHVlXG5cdCAqIGlzIGNhbGxlZCB3aXRoIGBjb250ZXh0YCBhcyBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIHJlc3VsdCBiZWNvbWVzIHRoZSBuZXcgaW5wdXQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbaW5kZXhdIC0gSWYgZGVmaW5lZCBhbmQgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYW4gYXJyYXksIHRoZSB2YWx1ZVxuXHQgKiBhdCBgaW5kZXhgIGJlY29tZSB0aGUgbmV3IGlucHV0LlxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHJlc29sdmU6IGZ1bmN0aW9uKGlucHV0cywgY29udGV4dCwgaW5kZXgpIHtcblx0XHR2YXIgaSwgaWxlbiwgdmFsdWU7XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gaW5wdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0dmFsdWUgPSBpbnB1dHNbaV07XG5cdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWUoY29udGV4dCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBoZWxwZXJzLmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbaW5kZXhdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxufSx7XCIuL2hlbHBlcnMuY29yZVwiOjM2fV0sMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaGVscGVycy5jb3JlJyk7XG5tb2R1bGUuZXhwb3J0cy5lYXNpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMuZWFzaW5nJyk7XG5tb2R1bGUuZXhwb3J0cy5jYW52YXMgPSByZXF1aXJlKCcuL2hlbHBlcnMuY2FudmFzJyk7XG5tb2R1bGUuZXhwb3J0cy5vcHRpb25zID0gcmVxdWlyZSgnLi9oZWxwZXJzLm9wdGlvbnMnKTtcblxufSx7XCIuL2hlbHBlcnMuY2FudmFzXCI6MzUsXCIuL2hlbHBlcnMuY29yZVwiOjM2LFwiLi9oZWxwZXJzLmVhc2luZ1wiOjM3LFwiLi9oZWxwZXJzLm9wdGlvbnNcIjozOH1dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qKlxuICogUGxhdGZvcm0gZmFsbGJhY2sgaW1wbGVtZW50YXRpb24gKG1pbmltYWwpLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9wdWxsLzQ1OTEjaXNzdWVjb21tZW50LTMxOTU3NTkzOVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRhY3F1aXJlQ29udGV4dDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG5cdFx0XHQvLyBTdXBwb3J0IGZvciBhbnkgb2JqZWN0IGFzc29jaWF0ZWQgdG8gYSBjYW52YXMgKGluY2x1ZGluZyBhIGNvbnRleHQyZClcblx0XHRcdGl0ZW0gPSBpdGVtLmNhbnZhcztcblx0XHR9XG5cblx0XHRyZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcblx0fVxufTtcblxufSx7fV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBDaGFydC5QbGF0Zm9ybSBpbXBsZW1lbnRhdGlvbiBmb3IgdGFyZ2V0aW5nIGEgd2ViIGJyb3dzZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG52YXIgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xudmFyIENTU19QUkVGSVggPSAnY2hhcnRqcy0nO1xudmFyIENTU19SRU5ERVJfTU9OSVRPUiA9IENTU19QUkVGSVggKyAncmVuZGVyLW1vbml0b3InO1xudmFyIENTU19SRU5ERVJfQU5JTUFUSU9OID0gQ1NTX1BSRUZJWCArICdyZW5kZXItYW5pbWF0aW9uJztcbnZhciBBTklNQVRJT05fU1RBUlRfRVZFTlRTID0gWydhbmltYXRpb25zdGFydCcsICd3ZWJraXRBbmltYXRpb25TdGFydCddO1xuXG4vKipcbiAqIERPTSBldmVudCB0eXBlcyAtPiBDaGFydC5qcyBldmVudCB0eXBlcy5cbiAqIE5vdGU6IG9ubHkgZXZlbnRzIHdpdGggZGlmZmVyZW50IHR5cGVzIGFyZSBtYXBwZWQuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50c1xuICovXG52YXIgRVZFTlRfVFlQRVMgPSB7XG5cdHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuXHR0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuXHR0b3VjaGVuZDogJ21vdXNldXAnLFxuXHRwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcblx0cG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuXHRwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG5cdHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuXHRwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG5cdHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5cbi8qKlxuICogVGhlIFwidXNlZFwiIHNpemUgaXMgdGhlIGZpbmFsIHZhbHVlIG9mIGEgZGltZW5zaW9uIHByb3BlcnR5IGFmdGVyIGFsbCBjYWxjdWxhdGlvbnMgaGF2ZVxuICogYmVlbiBwZXJmb3JtZWQuIFRoaXMgbWV0aG9kIHVzZXMgdGhlIGNvbXB1dGVkIHN0eWxlIG9mIGBlbGVtZW50YCBidXQgcmV0dXJucyB1bmRlZmluZWRcbiAqIGlmIHRoZSBjb21wdXRlZCBzdHlsZSBpcyBub3QgZXhwcmVzc2VkIGluIHBpeGVscy4gVGhhdCBjYW4gaGFwcGVuIGluIHNvbWUgY2FzZXMgd2hlcmVcbiAqIGBlbGVtZW50YCBoYXMgYSBzaXplIHJlbGF0aXZlIHRvIGl0cyBwYXJlbnQgYW5kIHRoaXMgbGFzdCBvbmUgaXMgbm90IHlldCBkaXNwbGF5ZWQsXG4gKiBmb3IgZXhhbXBsZSBiZWNhdXNlIG9mIGBkaXNwbGF5OiBub25lYCBvbiBhIHBhcmVudCBub2RlLlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvdXNlZF92YWx1ZVxuICogQHJldHVybnMge051bWJlcn0gU2l6ZSBpbiBwaXhlbHMgb3IgdW5kZWZpbmVkIGlmIHVua25vd24uXG4gKi9cbmZ1bmN0aW9uIHJlYWRVc2VkU2l6ZShlbGVtZW50LCBwcm9wZXJ0eSkge1xuXHR2YXIgdmFsdWUgPSBoZWxwZXJzLmdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcblx0dmFyIG1hdGNoZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtcblx0cmV0dXJuIG1hdGNoZXMgPyBOdW1iZXIobWF0Y2hlc1sxXSkgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGNhbnZhcyBzdHlsZSBhbmQgcmVuZGVyIHNpemUgd2l0aG91dCBtb2RpZnlpbmcgdGhlIGNhbnZhcyBkaXNwbGF5IHNpemUsXG4gKiBzaW5jZSByZXNwb25zaXZlbmVzcyBpcyBoYW5kbGVkIGJ5IHRoZSBjb250cm9sbGVyLnJlc2l6ZSgpIG1ldGhvZC4gVGhlIGNvbmZpZyBpcyB1c2VkXG4gKiB0byBkZXRlcm1pbmUgdGhlIGFzcGVjdCByYXRpbyB0byBhcHBseSBpbiBjYXNlIG5vIGV4cGxpY2l0IGhlaWdodCBoYXMgYmVlbiBzcGVjaWZpZWQuXG4gKi9cbmZ1bmN0aW9uIGluaXRDYW52YXMoY2FudmFzLCBjb25maWcpIHtcblx0dmFyIHN0eWxlID0gY2FudmFzLnN0eWxlO1xuXG5cdC8vIE5PVEUoU0IpIGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgIT09IGNhbnZhcy53aWR0aDogaW4gdGhlIGZpcnN0IGNhc2UgaXRcblx0Ly8gcmV0dXJucyBudWxsIG9yICcnIGlmIG5vIGV4cGxpY2l0IHZhbHVlIGhhcyBiZWVuIHNldCB0byB0aGUgY2FudmFzIGF0dHJpYnV0ZS5cblx0dmFyIHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuXHR2YXIgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuXG5cdC8vIENoYXJ0LmpzIG1vZGlmaWVzIHNvbWUgY2FudmFzIHZhbHVlcyB0aGF0IHdlIHdhbnQgdG8gcmVzdG9yZSBvbiBkZXN0cm95XG5cdGNhbnZhc1tFWFBBTkRPX0tFWV0gPSB7XG5cdFx0aW5pdGlhbDoge1xuXHRcdFx0aGVpZ2h0OiByZW5kZXJIZWlnaHQsXG5cdFx0XHR3aWR0aDogcmVuZGVyV2lkdGgsXG5cdFx0XHRzdHlsZToge1xuXHRcdFx0XHRkaXNwbGF5OiBzdHlsZS5kaXNwbGF5LFxuXHRcdFx0XHRoZWlnaHQ6IHN0eWxlLmhlaWdodCxcblx0XHRcdFx0d2lkdGg6IHN0eWxlLndpZHRoXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEZvcmNlIGNhbnZhcyB0byBkaXNwbGF5IGFzIGJsb2NrIHRvIGF2b2lkIGV4dHJhIHNwYWNlIGNhdXNlZCBieSBpbmxpbmVcblx0Ly8gZWxlbWVudHMsIHdoaWNoIHdvdWxkIGludGVyZmVyZSB3aXRoIHRoZSByZXNwb25zaXZlIHJlc2l6ZSBwcm9jZXNzLlxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjUzOFxuXHRzdHlsZS5kaXNwbGF5ID0gc3R5bGUuZGlzcGxheSB8fCAnYmxvY2snO1xuXG5cdGlmIChyZW5kZXJXaWR0aCA9PT0gbnVsbCB8fCByZW5kZXJXaWR0aCA9PT0gJycpIHtcblx0XHR2YXIgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG5cdFx0aWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHJlbmRlckhlaWdodCA9PT0gbnVsbCB8fCByZW5kZXJIZWlnaHQgPT09ICcnKSB7XG5cdFx0aWYgKGNhbnZhcy5zdHlsZS5oZWlnaHQgPT09ICcnKSB7XG5cdFx0XHQvLyBJZiBubyBleHBsaWNpdCByZW5kZXIgaGVpZ2h0IGFuZCBzdHlsZSBoZWlnaHQsIGxldCdzIGFwcGx5IHRoZSBhc3BlY3QgcmF0aW8sXG5cdFx0XHQvLyB3aGljaCBvbmUgY2FuIGJlIHNwZWNpZmllZCBieSB0aGUgdXNlciBidXQgYWxzbyBieSBjaGFydHMgYXMgZGVmYXVsdCBvcHRpb25cblx0XHRcdC8vIChpLmUuIG9wdGlvbnMuYXNwZWN0UmF0aW8pLiBJZiBub3Qgc3BlY2lmaWVkLCB1c2UgY2FudmFzIGFzcGVjdCByYXRpbyBvZiAyLlxuXHRcdFx0Y2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCAvIChjb25maWcub3B0aW9ucy5hc3BlY3RSYXRpbyB8fCAyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG5cdFx0XHRpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Y2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNhbnZhcztcbn1cblxuLyoqXG4gKiBEZXRlY3RzIHN1cHBvcnQgZm9yIG9wdGlvbnMgb2JqZWN0IGFyZ3VtZW50IGluIGFkZEV2ZW50TGlzdGVuZXIuXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNTYWZlbHlfZGV0ZWN0aW5nX29wdGlvbl9zdXBwb3J0XG4gKiBAcHJpdmF0ZVxuICovXG52YXIgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbigpIHtcblx0dmFyIHN1cHBvcnRzID0gZmFsc2U7XG5cdHRyeSB7XG5cdFx0dmFyIG9wdGlvbnMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3VwcG9ydHMgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlJywgbnVsbCwgb3B0aW9ucyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG5cdH1cblx0cmV0dXJuIHN1cHBvcnRzO1xufSgpKTtcblxuLy8gRGVmYXVsdCBwYXNzaXZlIHRvIHRydWUgYXMgZXhwZWN0ZWQgYnkgQ2hyb21lIGZvciAndG91Y2hzdGFydCcgYW5kICd0b3VjaGVuZCcgZXZlbnRzLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQyODdcbnZhciBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7cGFzc2l2ZTogdHJ1ZX0gOiBmYWxzZTtcblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuXHRub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuXHRub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnQodHlwZSwgY2hhcnQsIHgsIHksIG5hdGl2ZUV2ZW50KSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogdHlwZSxcblx0XHRjaGFydDogY2hhcnQsXG5cdFx0bmF0aXZlOiBuYXRpdmVFdmVudCB8fCBudWxsLFxuXHRcdHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuXHRcdHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsLFxuXHR9O1xufVxuXG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG5cdHZhciB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcblx0dmFyIHBvcyA9IGhlbHBlcnMuZ2V0UmVsYXRpdmVQb3NpdGlvbihldmVudCwgY2hhcnQpO1xuXHRyZXR1cm4gY3JlYXRlRXZlbnQodHlwZSwgY2hhcnQsIHBvcy54LCBwb3MueSwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcpIHtcblx0dmFyIHRpY2tpbmcgPSBmYWxzZTtcblx0dmFyIGFyZ3MgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0dGhpc0FyZyA9IHRoaXNBcmcgfHwgdGhpcztcblxuXHRcdGlmICghdGlja2luZykge1xuXHRcdFx0dGlja2luZyA9IHRydWU7XG5cdFx0XHRoZWxwZXJzLnJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aWNraW5nID0gZmFsc2U7XG5cdFx0XHRcdGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vbWFyY2ovY3NzLWVsZW1lbnQtcXVlcmllc1xuZnVuY3Rpb24gY3JlYXRlUmVzaXplcihoYW5kbGVyKSB7XG5cdHZhciByZXNpemVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdHZhciBjbHMgPSBDU1NfUFJFRklYICsgJ3NpemUtbW9uaXRvcic7XG5cdHZhciBtYXhTaXplID0gMTAwMDAwMDtcblx0dmFyIHN0eWxlID1cblx0XHQncG9zaXRpb246YWJzb2x1dGU7JyArXG5cdFx0J2xlZnQ6MDsnICtcblx0XHQndG9wOjA7JyArXG5cdFx0J3JpZ2h0OjA7JyArXG5cdFx0J2JvdHRvbTowOycgK1xuXHRcdCdvdmVyZmxvdzpoaWRkZW47JyArXG5cdFx0J3BvaW50ZXItZXZlbnRzOm5vbmU7JyArXG5cdFx0J3Zpc2liaWxpdHk6aGlkZGVuOycgK1xuXHRcdCd6LWluZGV4Oi0xOyc7XG5cblx0cmVzaXplci5zdHlsZS5jc3NUZXh0ID0gc3R5bGU7XG5cdHJlc2l6ZXIuY2xhc3NOYW1lID0gY2xzO1xuXHRyZXNpemVyLmlubmVySFRNTCA9XG5cdFx0JzxkaXYgY2xhc3M9XCInICsgY2xzICsgJy1leHBhbmRcIiBzdHlsZT1cIicgKyBzdHlsZSArICdcIj4nICtcblx0XHRcdCc8ZGl2IHN0eWxlPVwiJyArXG5cdFx0XHRcdCdwb3NpdGlvbjphYnNvbHV0ZTsnICtcblx0XHRcdFx0J3dpZHRoOicgKyBtYXhTaXplICsgJ3B4OycgK1xuXHRcdFx0XHQnaGVpZ2h0OicgKyBtYXhTaXplICsgJ3B4OycgK1xuXHRcdFx0XHQnbGVmdDowOycgK1xuXHRcdFx0XHQndG9wOjBcIj4nICtcblx0XHRcdCc8L2Rpdj4nICtcblx0XHQnPC9kaXY+JyArXG5cdFx0JzxkaXYgY2xhc3M9XCInICsgY2xzICsgJy1zaHJpbmtcIiBzdHlsZT1cIicgKyBzdHlsZSArICdcIj4nICtcblx0XHRcdCc8ZGl2IHN0eWxlPVwiJyArXG5cdFx0XHRcdCdwb3NpdGlvbjphYnNvbHV0ZTsnICtcblx0XHRcdFx0J3dpZHRoOjIwMCU7JyArXG5cdFx0XHRcdCdoZWlnaHQ6MjAwJTsnICtcblx0XHRcdFx0J2xlZnQ6MDsgJyArXG5cdFx0XHRcdCd0b3A6MFwiPicgK1xuXHRcdFx0JzwvZGl2PicgK1xuXHRcdCc8L2Rpdj4nO1xuXG5cdHZhciBleHBhbmQgPSByZXNpemVyLmNoaWxkTm9kZXNbMF07XG5cdHZhciBzaHJpbmsgPSByZXNpemVyLmNoaWxkTm9kZXNbMV07XG5cblx0cmVzaXplci5fcmVzZXQgPSBmdW5jdGlvbigpIHtcblx0XHRleHBhbmQuc2Nyb2xsTGVmdCA9IG1heFNpemU7XG5cdFx0ZXhwYW5kLnNjcm9sbFRvcCA9IG1heFNpemU7XG5cdFx0c2hyaW5rLnNjcm9sbExlZnQgPSBtYXhTaXplO1xuXHRcdHNocmluay5zY3JvbGxUb3AgPSBtYXhTaXplO1xuXHR9O1xuXHR2YXIgb25TY3JvbGwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdGhhbmRsZXIoKTtcblx0fTtcblxuXHRhZGRFdmVudExpc3RlbmVyKGV4cGFuZCwgJ3Njcm9sbCcsIG9uU2Nyb2xsLmJpbmQoZXhwYW5kLCAnZXhwYW5kJykpO1xuXHRhZGRFdmVudExpc3RlbmVyKHNocmluaywgJ3Njcm9sbCcsIG9uU2Nyb2xsLmJpbmQoc2hyaW5rLCAnc2hyaW5rJykpO1xuXG5cdHJldHVybiByZXNpemVyO1xufVxuXG4vLyBodHRwczovL2Rhdmlkd2Fsc2gubmFtZS9kZXRlY3Qtbm9kZS1pbnNlcnRpb25cbmZ1bmN0aW9uIHdhdGNoRm9yUmVuZGVyKG5vZGUsIGhhbmRsZXIpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCAobm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cdHZhciBwcm94eSA9IGV4cGFuZG8ucmVuZGVyUHJveHkgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUuYW5pbWF0aW9uTmFtZSA9PT0gQ1NTX1JFTkRFUl9BTklNQVRJT04pIHtcblx0XHRcdGhhbmRsZXIoKTtcblx0XHR9XG5cdH07XG5cblx0aGVscGVycy5lYWNoKEFOSU1BVElPTl9TVEFSVF9FVkVOVFMsIGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRhZGRFdmVudExpc3RlbmVyKG5vZGUsIHR5cGUsIHByb3h5KTtcblx0fSk7XG5cblx0bm9kZS5jbGFzc0xpc3QuYWRkKENTU19SRU5ERVJfTU9OSVRPUik7XG59XG5cbmZ1bmN0aW9uIHVud2F0Y2hGb3JSZW5kZXIobm9kZSkge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IHt9O1xuXHR2YXIgcHJveHkgPSBleHBhbmRvLnJlbmRlclByb3h5O1xuXG5cdGlmIChwcm94eSkge1xuXHRcdGhlbHBlcnMuZWFjaChBTklNQVRJT05fU1RBUlRfRVZFTlRTLCBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRyZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIHR5cGUsIHByb3h5KTtcblx0XHR9KTtcblxuXHRcdGRlbGV0ZSBleHBhbmRvLnJlbmRlclByb3h5O1xuXHR9XG5cblx0bm9kZS5jbGFzc0xpc3QucmVtb3ZlKENTU19SRU5ERVJfTU9OSVRPUik7XG59XG5cbmZ1bmN0aW9uIGFkZFJlc2l6ZUxpc3RlbmVyKG5vZGUsIGxpc3RlbmVyLCBjaGFydCkge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IChub2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblxuXHQvLyBMZXQncyBrZWVwIHRyYWNrIG9mIHRoaXMgYWRkZWQgcmVzaXplciBhbmQgdGh1cyBhdm9pZCBET00gcXVlcnkgd2hlbiByZW1vdmluZyBpdC5cblx0dmFyIHJlc2l6ZXIgPSBleHBhbmRvLnJlc2l6ZXIgPSBjcmVhdGVSZXNpemVyKHRocm90dGxlZChmdW5jdGlvbigpIHtcblx0XHRpZiAoZXhwYW5kby5yZXNpemVyKSB7XG5cdFx0XHRyZXR1cm4gbGlzdGVuZXIoY3JlYXRlRXZlbnQoJ3Jlc2l6ZScsIGNoYXJ0KSk7XG5cdFx0fVxuXHR9KSk7XG5cblx0Ly8gVGhlIHJlc2l6ZXIgbmVlZHMgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIG5vZGUgcGFyZW50LCBzbyB3ZSBmaXJzdCBuZWVkIHRvIGJlXG5cdC8vIHN1cmUgdGhhdCBgbm9kZWAgaXMgYXR0YWNoZWQgdG8gdGhlIERPTSBiZWZvcmUgaW5qZWN0aW5nIHRoZSByZXNpemVyIGVsZW1lbnQuXG5cdHdhdGNoRm9yUmVuZGVyKG5vZGUsIGZ1bmN0aW9uKCkge1xuXHRcdGlmIChleHBhbmRvLnJlc2l6ZXIpIHtcblx0XHRcdHZhciBjb250YWluZXIgPSBub2RlLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoY29udGFpbmVyICYmIGNvbnRhaW5lciAhPT0gcmVzaXplci5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdGNvbnRhaW5lci5pbnNlcnRCZWZvcmUocmVzaXplciwgY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgY29udGFpbmVyIHNpemUgbWlnaHQgaGF2ZSBjaGFuZ2VkLCBsZXQncyByZXNldCB0aGUgcmVzaXplciBzdGF0ZS5cblx0XHRcdHJlc2l6ZXIuX3Jlc2V0KCk7XG5cdFx0fVxuXHR9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUmVzaXplTGlzdGVuZXIobm9kZSkge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IHt9O1xuXHR2YXIgcmVzaXplciA9IGV4cGFuZG8ucmVzaXplcjtcblxuXHRkZWxldGUgZXhwYW5kby5yZXNpemVyO1xuXHR1bndhdGNoRm9yUmVuZGVyKG5vZGUpO1xuXG5cdGlmIChyZXNpemVyICYmIHJlc2l6ZXIucGFyZW50Tm9kZSkge1xuXHRcdHJlc2l6ZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZXNpemVyKTtcblx0fVxufVxuXG5mdW5jdGlvbiBpbmplY3RDU1MocGxhdGZvcm0sIGNzcykge1xuXHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8zOTIyMTM5XG5cdHZhciBzdHlsZSA9IHBsYXRmb3JtLl9zdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuXHRpZiAoIXBsYXRmb3JtLl9zdHlsZSkge1xuXHRcdHBsYXRmb3JtLl9zdHlsZSA9IHN0eWxlO1xuXHRcdGNzcyA9ICcvKiBDaGFydC5qcyAqL1xcbicgKyBjc3M7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RleHQvY3NzJyk7XG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH1cblxuXHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBUaGlzIHByb3BlcnR5IGhvbGRzIHdoZXRoZXIgdGhpcyBwbGF0Zm9ybSBpcyBlbmFibGVkIGZvciB0aGUgY3VycmVudCBlbnZpcm9ubWVudC5cblx0ICogQ3VycmVudGx5IHVzZWQgYnkgcGxhdGZvcm0uanMgdG8gc2VsZWN0IHRoZSBwcm9wZXIgaW1wbGVtZW50YXRpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfZW5hYmxlZDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyxcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR2YXIga2V5ZnJhbWVzID0gJ2Zyb217b3BhY2l0eTowLjk5fXRve29wYWNpdHk6MX0nO1xuXG5cdFx0aW5qZWN0Q1NTKHRoaXMsXG5cdFx0XHQvLyBET00gcmVuZGVyaW5nIGRldGVjdGlvblxuXHRcdFx0Ly8gaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvZGV0ZWN0LW5vZGUtaW5zZXJ0aW9uXG5cdFx0XHQnQC13ZWJraXQta2V5ZnJhbWVzICcgKyBDU1NfUkVOREVSX0FOSU1BVElPTiArICd7JyArIGtleWZyYW1lcyArICd9JyArXG5cdFx0XHQnQGtleWZyYW1lcyAnICsgQ1NTX1JFTkRFUl9BTklNQVRJT04gKyAneycgKyBrZXlmcmFtZXMgKyAnfScgK1xuXHRcdFx0Jy4nICsgQ1NTX1JFTkRFUl9NT05JVE9SICsgJ3snICtcblx0XHRcdFx0Jy13ZWJraXQtYW5pbWF0aW9uOicgKyBDU1NfUkVOREVSX0FOSU1BVElPTiArICcgMC4wMDFzOycgK1xuXHRcdFx0XHQnYW5pbWF0aW9uOicgKyBDU1NfUkVOREVSX0FOSU1BVElPTiArICcgMC4wMDFzOycgK1xuXHRcdFx0J30nXG5cdFx0KTtcblx0fSxcblxuXHRhY3F1aXJlQ29udGV4dDogZnVuY3Rpb24oaXRlbSwgY29uZmlnKSB7XG5cdFx0aWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuXHRcdFx0aXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuXHRcdH0gZWxzZSBpZiAoaXRlbS5sZW5ndGgpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFycmF5IGJhc2VkIHF1ZXJpZXMgKHN1Y2ggYXMgalF1ZXJ5KVxuXHRcdFx0aXRlbSA9IGl0ZW1bMF07XG5cdFx0fVxuXG5cdFx0aWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcblx0XHRcdC8vIFN1cHBvcnQgZm9yIGFueSBvYmplY3QgYXNzb2NpYXRlZCB0byBhIGNhbnZhcyAoaW5jbHVkaW5nIGEgY29udGV4dDJkKVxuXHRcdFx0aXRlbSA9IGl0ZW0uY2FudmFzO1xuXHRcdH1cblxuXHRcdC8vIFRvIHByZXZlbnQgY2FudmFzIGZpbmdlcnByaW50aW5nLCBzb21lIGFkZC1vbnMgdW5kZWZpbmUgdGhlIGdldENvbnRleHRcblx0XHQvLyBtZXRob2QsIGZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20va2thcHNuZXIvQ2FudmFzQmxvY2tlclxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yODA3XG5cdFx0dmFyIGNvbnRleHQgPSBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJyk7XG5cblx0XHQvLyBgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudC9DYW52YXNSZW5kZXJpbmdDb250ZXh0MkRgIGZhaWxzIHdoZW4gdGhlIGl0ZW0gaXNcblx0XHQvLyBpbnNpZGUgYW4gaWZyYW1lIG9yIHdoZW4gcnVubmluZyBpbiBhIHByb3RlY3RlZCBlbnZpcm9ubWVudC4gV2UgY291bGQgZ3Vlc3MgdGhlXG5cdFx0Ly8gdHlwZXMgZnJvbSB0aGVpciB0b1N0cmluZygpIHZhbHVlIGJ1dCBsZXQncyBrZWVwIHRoaW5ncyBmbGV4aWJsZSBhbmQgYXNzdW1lIGl0J3Ncblx0XHQvLyBhIHN1ZmZpY2llbnQgY29uZGl0aW9uIGlmIHRoZSBpdGVtIGhhcyBhIGNvbnRleHQyRCB3aGljaCBoYXMgaXRlbSBhcyBgY2FudmFzYC5cblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMzg4N1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80MTAyXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQxNTJcblx0XHRpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gaXRlbSkge1xuXHRcdFx0aW5pdENhbnZhcyhpdGVtLCBjb25maWcpO1xuXHRcdFx0cmV0dXJuIGNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG5cblx0cmVsZWFzZUNvbnRleHQ6IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHR2YXIgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG5cdFx0aWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG5cdFx0WydoZWlnaHQnLCAnd2lkdGgnXS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcblx0XHRcdHZhciB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG5cdFx0XHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKHZhbHVlKSkge1xuXHRcdFx0XHRjYW52YXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2FudmFzLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzLmVhY2goaW5pdGlhbC5zdHlsZSB8fCB7fSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuXHRcdFx0Y2FudmFzLnN0eWxlW2tleV0gPSB2YWx1ZTtcblx0XHR9KTtcblxuXHRcdC8vIFRoZSBjYW52YXMgcmVuZGVyIHNpemUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWQgKGFuZCB0aHVzIHRoZSBzdGF0ZSBzdGFjayBkaXNjYXJkZWQpLFxuXHRcdC8vIHdlIGNhbid0IHVzZSBzYXZlKCkgYW5kIHJlc3RvcmUoKSB0byByZXN0b3JlIHRoZSBpbml0aWFsIHN0YXRlLiBTbyBtYWtlIHN1cmUgdGhhdCBhdFxuXHRcdC8vIGxlYXN0IHRoZSBjYW52YXMgY29udGV4dCBpcyByZXNldCB0byB0aGUgZGVmYXVsdCBzdGF0ZSBieSBzZXR0aW5nIHRoZSBjYW52YXMgd2lkdGguXG5cdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMTEvV0QtaHRtbDUtMjAxMTA1MjUvdGhlLWNhbnZhcy1lbGVtZW50Lmh0bWxcblx0XHRjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG5cblx0XHRkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcblx0fSxcblxuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdGlmICh0eXBlID09PSAncmVzaXplJykge1xuXHRcdFx0Ly8gTm90ZTogdGhlIHJlc2l6ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cblx0XHRcdGFkZFJlc2l6ZUxpc3RlbmVyKGNhbnZhcywgbGlzdGVuZXIsIGNoYXJ0KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZXhwYW5kbyA9IGxpc3RlbmVyW0VYUEFORE9fS0VZXSB8fCAobGlzdGVuZXJbRVhQQU5ET19LRVldID0ge30pO1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IChleHBhbmRvLnByb3hpZXMgPSB7fSk7XG5cdFx0dmFyIHByb3h5ID0gcHJveGllc1tjaGFydC5pZCArICdfJyArIHR5cGVdID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdGxpc3RlbmVyKGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpKTtcblx0XHR9O1xuXG5cdFx0YWRkRXZlbnRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcblx0fSxcblxuXHRyZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcblx0XHR2YXIgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuXHRcdGlmICh0eXBlID09PSAncmVzaXplJykge1xuXHRcdFx0Ly8gTm90ZTogdGhlIHJlc2l6ZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG9uIGFsbCBicm93c2Vycy5cblx0XHRcdHJlbW92ZVJlc2l6ZUxpc3RlbmVyKGNhbnZhcywgbGlzdGVuZXIpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBleHBhbmRvID0gbGlzdGVuZXJbRVhQQU5ET19LRVldIHx8IHt9O1xuXHRcdHZhciBwcm94aWVzID0gZXhwYW5kby5wcm94aWVzIHx8IHt9O1xuXHRcdHZhciBwcm94eSA9IHByb3hpZXNbY2hhcnQuaWQgKyAnXycgKyB0eXBlXTtcblx0XHRpZiAoIXByb3h5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcblx0fVxufTtcblxuLy8gREVQUkVDQVRJT05TXG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBFdmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyIGluc3RlYWQuXG4gKiBFdmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyIGNvbXBhdGliaWxpdHk6IENocm9tZSwgT3BlcmEgNywgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXJcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmFkZEV2ZW50XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmFkZEV2ZW50ID0gYWRkRXZlbnRMaXN0ZW5lcjtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIEV2ZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIgaW5zdGVhZC5cbiAqIEV2ZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIgY29tcGF0aWJpbGl0eTogQ2hyb21lLCBPcGVyYSA3LCBTYWZhcmksIEZGMS41KywgSUU5K1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvcmVtb3ZlRXZlbnRMaXN0ZW5lclxuICogQGZ1bmN0aW9uIENoYXJ0LmhlbHBlcnMucmVtb3ZlRXZlbnRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMucmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudExpc3RlbmVyO1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgYmFzaWMgPSByZXF1aXJlKCcuL3BsYXRmb3JtLmJhc2ljJyk7XG52YXIgZG9tID0gcmVxdWlyZSgnLi9wbGF0Zm9ybS5kb20nKTtcblxuLy8gQFRPRE8gTWFrZSBwb3NzaWJsZSB0byBzZWxlY3QgYW5vdGhlciBwbGF0Zm9ybSBhdCBidWlsZCB0aW1lLlxudmFyIGltcGxlbWVudGF0aW9uID0gZG9tLl9lbmFibGVkID8gZG9tIDogYmFzaWM7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5wbGF0Zm9ybVxuICogQHNlZSBodHRwczovL2NoYXJ0anMuZ2l0Ym9va3MuaW8vcHJvcG9zYWxzL2NvbnRlbnQvUGxhdGZvcm0uaHRtbFxuICogQHNpbmNlIDIuNC4wXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gaGVscGVycy5leHRlbmQoe1xuXHQvKipcblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBDYWxsZWQgYXQgY2hhcnQgY29uc3RydWN0aW9uIHRpbWUsIHJldHVybnMgYSBjb250ZXh0MmQgaW5zdGFuY2UgaW1wbGVtZW50aW5nXG5cdCAqIHRoZSBbVzNDIENhbnZhcyAyRCBDb250ZXh0IEFQSSBzdGFuZGFyZF17QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSLzJkY29udGV4dC99LlxuXHQgKiBAcGFyYW0geyp9IGl0ZW0gLSBUaGUgbmF0aXZlIGl0ZW0gZnJvbSB3aGljaCB0byBhY3F1aXJlIGNvbnRleHQgKHBsYXRmb3JtIHNwZWNpZmljKVxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBjaGFydCBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQyZCBpbnN0YW5jZVxuXHQgKi9cblx0YWNxdWlyZUNvbnRleHQ6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIENhbGxlZCBhdCBjaGFydCBkZXN0cnVjdGlvbiB0aW1lLCByZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFzc29jaWF0ZWQgdG8gdGhlIGNvbnRleHRcblx0ICogcHJldmlvdXNseSByZXR1cm5lZCBieSB0aGUgYWNxdWlyZUNvbnRleHQoKSBtZXRob2QuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IC0gVGhlIGNvbnRleHQyZCBpbnN0YW5jZVxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgbWV0aG9kIHN1Y2NlZWRlZCwgZWxzZSBmYWxzZVxuXHQgKi9cblx0cmVsZWFzZUNvbnRleHQ6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyB0aGUgc3BlY2lmaWVkIGxpc3RlbmVyIG9uIHRoZSBnaXZlbiBjaGFydC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBDaGFydCBmcm9tIHdoaWNoIHRvIGxpc3RlbiBmb3IgZXZlbnRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBUaGUgKHtAbGluayBJRXZlbnR9KSB0eXBlIHRvIGxpc3RlbiBmb3Jcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBSZWNlaXZlcyBhIG5vdGlmaWNhdGlvbiAoYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50c1xuXHQgKiB0aGUge0BsaW5rIElFdmVudH0gaW50ZXJmYWNlKSB3aGVuIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBvY2N1cnMuXG5cdCAqL1xuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIgcHJldmlvdXNseSByZWdpc3RlcmVkIHdpdGggYWRkRXZlbnRMaXN0ZW5lci5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLUNoYXJ0IGZyb20gd2hpY2ggdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIFRoZSAoe0BsaW5rIElFdmVudH0pIHR5cGUgdG8gcmVtb3ZlXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqL1xuXHRyZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHt9XG5cbn0sIGltcGxlbWVudGF0aW9uKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIElQbGF0Zm9ybVxuICogQWxsb3dzIGFic3RyYWN0aW5nIHBsYXRmb3JtIGRlcGVuZGVuY2llcyBhd2F5IGZyb20gdGhlIGNoYXJ0XG4gKiBAYm9ycm93cyBDaGFydC5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dCBhcyBhY3F1aXJlQ29udGV4dFxuICogQGJvcnJvd3MgQ2hhcnQucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQgYXMgcmVsZWFzZUNvbnRleHRcbiAqIEBib3Jyb3dzIENoYXJ0LnBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIgYXMgYWRkRXZlbnRMaXN0ZW5lclxuICogQGJvcnJvd3MgQ2hhcnQucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lciBhcyByZW1vdmVFdmVudExpc3RlbmVyXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElFdmVudFxuICogQHByb3Age1N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlIG5hbWUsIHBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gKiAnY29udGV4dG1lbnUnLCAnbW91c2VlbnRlcicsICdtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnLCAnbW91c2VvdXQnLFxuICogJ2NsaWNrJywgJ2RibGNsaWNrJywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnIGFuZCAncmVzaXplJ1xuICogQHByb3Ageyp9IG5hdGl2ZSAtIFRoZSBvcmlnaW5hbCBuYXRpdmUgZXZlbnQgKG51bGwgZm9yIGVtdWxhdGVkIGV2ZW50cywgZS5nLiAncmVzaXplJylcbiAqIEBwcm9wIHtOdW1iZXJ9IHggLSBUaGUgbW91c2UgeCBwb3NpdGlvbiwgcmVsYXRpdmUgdG8gdGhlIGNhbnZhcyAobnVsbCBmb3IgaW5jb21wYXRpYmxlIGV2ZW50cylcbiAqIEBwcm9wIHtOdW1iZXJ9IHkgLSBUaGUgbW91c2UgeSBwb3NpdGlvbiwgcmVsYXRpdmUgdG8gdGhlIGNhbnZhcyAobnVsbCBmb3IgaW5jb21wYXRpYmxlIGV2ZW50cylcbiAqL1xuXG59LHtcIi4uL2hlbHBlcnMvaW5kZXhcIjozOSxcIi4vcGxhdGZvcm0uYmFzaWNcIjo0MCxcIi4vcGxhdGZvcm0uZG9tXCI6NDF9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIFBsdWdpbiBiYXNlZCBvbiBkaXNjdXNzaW9uIGZyb20gdGhlIGZvbGxvd2luZyBDaGFydC5qcyBpc3N1ZXM6XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yMzgwI2lzc3VlY29tbWVudC0yNzk5NjE1NjlcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI0NDAjaXNzdWVjb21tZW50LTI1NjQ2MTg5N1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgZWxlbWVudHMgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9pbmRleCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cGx1Z2luczoge1xuXHRcdGZpbGxlcjoge1xuXHRcdFx0cHJvcGFnYXRlOiB0cnVlXG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblxuXHR2YXIgbWFwcGVycyA9IHtcblx0XHRkYXRhc2V0OiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHRcdHZhciBpbmRleCA9IHNvdXJjZS5maWxsO1xuXHRcdFx0dmFyIGNoYXJ0ID0gc291cmNlLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG5cdFx0XHR2YXIgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG5cdFx0XHR2YXIgcG9pbnRzID0gKHZpc2libGUgJiYgbWV0YS5kYXRhc2V0Ll9jaGlsZHJlbikgfHwgW107XG5cdFx0XHR2YXIgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aCB8fCAwO1xuXG5cdFx0XHRyZXR1cm4gIWxlbmd0aCA/IG51bGwgOiBmdW5jdGlvbihwb2ludCwgaSkge1xuXHRcdFx0XHRyZXR1cm4gKGkgPCBsZW5ndGggJiYgcG9pbnRzW2ldLl92aWV3KSB8fCBudWxsO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0Ym91bmRhcnk6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdFx0dmFyIGJvdW5kYXJ5ID0gc291cmNlLmJvdW5kYXJ5O1xuXHRcdFx0dmFyIHggPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnggOiBudWxsO1xuXHRcdFx0dmFyIHkgPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnkgOiBudWxsO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24ocG9pbnQpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR4OiB4ID09PSBudWxsID8gcG9pbnQueCA6IHgsXG5cdFx0XHRcdFx0eTogeSA9PT0gbnVsbCA/IHBvaW50LnkgOiB5LFxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblx0XHR9XG5cdH07XG5cblx0Ly8gQHRvZG8gaWYgKGZpbGxbMF0gPT09ICcjJylcblx0ZnVuY3Rpb24gZGVjb2RlRmlsbChlbCwgaW5kZXgsIGNvdW50KSB7XG5cdFx0dmFyIG1vZGVsID0gZWwuX21vZGVsIHx8IHt9O1xuXHRcdHZhciBmaWxsID0gbW9kZWwuZmlsbDtcblx0XHR2YXIgdGFyZ2V0O1xuXG5cdFx0aWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZmlsbCA9ICEhbW9kZWwuYmFja2dyb3VuZENvbG9yO1xuXHRcdH1cblxuXHRcdGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKGZpbGwgPT09IHRydWUpIHtcblx0XHRcdHJldHVybiAnb3JpZ2luJztcblx0XHR9XG5cblx0XHR0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwsIDEwKTtcblx0XHRpZiAoaXNGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuXHRcdFx0aWYgKGZpbGxbMF0gPT09ICctJyB8fCBmaWxsWzBdID09PSAnKycpIHtcblx0XHRcdFx0dGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0YXJnZXQgPT09IGluZGV4IHx8IHRhcmdldCA8IDAgfHwgdGFyZ2V0ID49IGNvdW50KSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cblx0XHRzd2l0Y2ggKGZpbGwpIHtcblx0XHQvLyBjb21wYXRpYmlsaXR5XG5cdFx0Y2FzZSAnYm90dG9tJzpcblx0XHRcdHJldHVybiAnc3RhcnQnO1xuXHRcdGNhc2UgJ3RvcCc6XG5cdFx0XHRyZXR1cm4gJ2VuZCc7XG5cdFx0Y2FzZSAnemVybyc6XG5cdFx0XHRyZXR1cm4gJ29yaWdpbic7XG5cdFx0Ly8gc3VwcG9ydGVkIGJvdW5kYXJpZXNcblx0XHRjYXNlICdvcmlnaW4nOlxuXHRcdGNhc2UgJ3N0YXJ0Jzpcblx0XHRjYXNlICdlbmQnOlxuXHRcdFx0cmV0dXJuIGZpbGw7XG5cdFx0Ly8gaW52YWxpZCBmaWxsIHZhbHVlc1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuXHRcdHZhciBtb2RlbCA9IHNvdXJjZS5lbC5fbW9kZWwgfHwge307XG5cdFx0dmFyIHNjYWxlID0gc291cmNlLmVsLl9zY2FsZSB8fCB7fTtcblx0XHR2YXIgZmlsbCA9IHNvdXJjZS5maWxsO1xuXHRcdHZhciB0YXJnZXQgPSBudWxsO1xuXHRcdHZhciBob3Jpem9udGFsO1xuXG5cdFx0aWYgKGlzRmluaXRlKGZpbGwpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHQvLyBCYWNrd2FyZCBjb21wYXRpYmlsaXR5OiB1bnRpbCB2Mywgd2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IGJvdW5kYXJ5IHZhbHVlcyBzZXQgb25cblx0XHQvLyB0aGUgbW9kZWwgKHNjYWxlVG9wLCBzY2FsZUJvdHRvbSBhbmQgc2NhbGVaZXJvKSBiZWNhdXNlIHNvbWUgZXh0ZXJuYWwgcGx1Z2lucyBhbmRcblx0XHQvLyBjb250cm9sbGVycyBtaWdodCBzdGlsbCB1c2UgaXQgKGUuZy4gdGhlIFNtaXRoIGNoYXJ0KS5cblxuXHRcdGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG5cdFx0XHR0YXJnZXQgPSBtb2RlbC5zY2FsZUJvdHRvbSA9PT0gdW5kZWZpbmVkID8gc2NhbGUuYm90dG9tIDogbW9kZWwuc2NhbGVCb3R0b207XG5cdFx0fSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuXHRcdFx0dGFyZ2V0ID0gbW9kZWwuc2NhbGVUb3AgPT09IHVuZGVmaW5lZCA/IHNjYWxlLnRvcCA6IG1vZGVsLnNjYWxlVG9wO1xuXHRcdH0gZWxzZSBpZiAobW9kZWwuc2NhbGVaZXJvICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlWmVybztcblx0XHR9IGVsc2UgaWYgKHNjYWxlLmdldEJhc2VQb3NpdGlvbikge1xuXHRcdFx0dGFyZ2V0ID0gc2NhbGUuZ2V0QmFzZVBvc2l0aW9uKCk7XG5cdFx0fSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcblx0XHRcdHRhcmdldCA9IHNjYWxlLmdldEJhc2VQaXhlbCgpO1xuXHRcdH1cblxuXHRcdGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT09IG51bGwpIHtcblx0XHRcdGlmICh0YXJnZXQueCAhPT0gdW5kZWZpbmVkICYmIHRhcmdldC55ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHRhcmdldCkpIHtcblx0XHRcdFx0aG9yaXpvbnRhbCA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHg6IGhvcml6b250YWwgPyB0YXJnZXQgOiBudWxsLFxuXHRcdFx0XHRcdHk6IGhvcml6b250YWwgPyBudWxsIDogdGFyZ2V0XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGluZGV4LCBwcm9wYWdhdGUpIHtcblx0XHR2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG5cdFx0dmFyIGZpbGwgPSBzb3VyY2UuZmlsbDtcblx0XHR2YXIgdmlzaXRlZCA9IFtpbmRleF07XG5cdFx0dmFyIHRhcmdldDtcblxuXHRcdGlmICghcHJvcGFnYXRlKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR3aGlsZSAoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSkge1xuXHRcdFx0aWYgKCFpc0Zpbml0ZShmaWxsKSkge1xuXHRcdFx0XHRyZXR1cm4gZmlsbDtcblx0XHRcdH1cblxuXHRcdFx0dGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcblx0XHRcdGlmICghdGFyZ2V0KSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRhcmdldC52aXNpYmxlKSB7XG5cdFx0XHRcdHJldHVybiBmaWxsO1xuXHRcdFx0fVxuXG5cdFx0XHR2aXNpdGVkLnB1c2goZmlsbCk7XG5cdFx0XHRmaWxsID0gdGFyZ2V0LmZpbGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlTWFwcGVyKHNvdXJjZSkge1xuXHRcdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdFx0dmFyIHR5cGUgPSAnZGF0YXNldCc7XG5cblx0XHRpZiAoZmlsbCA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGlmICghaXNGaW5pdGUoZmlsbCkpIHtcblx0XHRcdHR5cGUgPSAnYm91bmRhcnknO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXBwZXJzW3R5cGVdKHNvdXJjZSk7XG5cdH1cblxuXHRmdW5jdGlvbiBpc0RyYXdhYmxlKHBvaW50KSB7XG5cdFx0cmV0dXJuIHBvaW50ICYmICFwb2ludC5za2lwO1xuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd0FyZWEoY3R4LCBjdXJ2ZTAsIGN1cnZlMSwgbGVuMCwgbGVuMSkge1xuXHRcdHZhciBpO1xuXG5cdFx0aWYgKCFsZW4wIHx8ICFsZW4xKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gYnVpbGRpbmcgZmlyc3QgYXJlYSBjdXJ2ZSAobm9ybWFsKVxuXHRcdGN0eC5tb3ZlVG8oY3VydmUwWzBdLngsIGN1cnZlMFswXS55KTtcblx0XHRmb3IgKGkgPSAxOyBpIDwgbGVuMDsgKytpKSB7XG5cdFx0XHRoZWxwZXJzLmNhbnZhcy5saW5lVG8oY3R4LCBjdXJ2ZTBbaSAtIDFdLCBjdXJ2ZTBbaV0pO1xuXHRcdH1cblxuXHRcdC8vIGpvaW5pbmcgdGhlIHR3byBhcmVhIGN1cnZlc1xuXHRcdGN0eC5saW5lVG8oY3VydmUxW2xlbjEgLSAxXS54LCBjdXJ2ZTFbbGVuMSAtIDFdLnkpO1xuXG5cdFx0Ly8gYnVpbGRpbmcgb3Bwb3NpdGUgYXJlYSBjdXJ2ZSAocmV2ZXJzZSlcblx0XHRmb3IgKGkgPSBsZW4xIC0gMTsgaSA+IDA7IC0taSkge1xuXHRcdFx0aGVscGVycy5jYW52YXMubGluZVRvKGN0eCwgY3VydmUxW2ldLCBjdXJ2ZTFbaSAtIDFdLCB0cnVlKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkb0ZpbGwoY3R4LCBwb2ludHMsIG1hcHBlciwgdmlldywgY29sb3IsIGxvb3ApIHtcblx0XHR2YXIgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuXHRcdHZhciBzcGFuID0gdmlldy5zcGFuR2Fwcztcblx0XHR2YXIgY3VydmUwID0gW107XG5cdFx0dmFyIGN1cnZlMSA9IFtdO1xuXHRcdHZhciBsZW4wID0gMDtcblx0XHR2YXIgbGVuMSA9IDA7XG5cdFx0dmFyIGksIGlsZW4sIGluZGV4LCBwMCwgcDEsIGQwLCBkMTtcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSAoY291bnQgKyAhIWxvb3ApOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRpbmRleCA9IGkgJSBjb3VudDtcblx0XHRcdHAwID0gcG9pbnRzW2luZGV4XS5fdmlldztcblx0XHRcdHAxID0gbWFwcGVyKHAwLCBpbmRleCwgdmlldyk7XG5cdFx0XHRkMCA9IGlzRHJhd2FibGUocDApO1xuXHRcdFx0ZDEgPSBpc0RyYXdhYmxlKHAxKTtcblxuXHRcdFx0aWYgKGQwICYmIGQxKSB7XG5cdFx0XHRcdGxlbjAgPSBjdXJ2ZTAucHVzaChwMCk7XG5cdFx0XHRcdGxlbjEgPSBjdXJ2ZTEucHVzaChwMSk7XG5cdFx0XHR9IGVsc2UgaWYgKGxlbjAgJiYgbGVuMSkge1xuXHRcdFx0XHRpZiAoIXNwYW4pIHtcblx0XHRcdFx0XHRkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKTtcblx0XHRcdFx0XHRsZW4wID0gbGVuMSA9IDA7XG5cdFx0XHRcdFx0Y3VydmUwID0gW107XG5cdFx0XHRcdFx0Y3VydmUxID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKGQwKSB7XG5cdFx0XHRcdFx0XHRjdXJ2ZTAucHVzaChwMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChkMSkge1xuXHRcdFx0XHRcdFx0Y3VydmUxLnB1c2gocDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpO1xuXG5cdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcblx0XHRjdHguZmlsbCgpO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpZDogJ2ZpbGxlcicsXG5cblx0XHRhZnRlckRhdGFzZXRzVXBkYXRlOiBmdW5jdGlvbihjaGFydCwgb3B0aW9ucykge1xuXHRcdFx0dmFyIGNvdW50ID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDtcblx0XHRcdHZhciBwcm9wYWdhdGUgPSBvcHRpb25zLnByb3BhZ2F0ZTtcblx0XHRcdHZhciBzb3VyY2VzID0gW107XG5cdFx0XHR2YXIgbWV0YSwgaSwgZWwsIHNvdXJjZTtcblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHRlbCA9IG1ldGEuZGF0YXNldDtcblx0XHRcdFx0c291cmNlID0gbnVsbDtcblxuXHRcdFx0XHRpZiAoZWwgJiYgZWwuX21vZGVsICYmIGVsIGluc3RhbmNlb2YgZWxlbWVudHMuTGluZSkge1xuXHRcdFx0XHRcdHNvdXJjZSA9IHtcblx0XHRcdFx0XHRcdHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG5cdFx0XHRcdFx0XHRmaWxsOiBkZWNvZGVGaWxsKGVsLCBpLCBjb3VudCksXG5cdFx0XHRcdFx0XHRjaGFydDogY2hhcnQsXG5cdFx0XHRcdFx0XHRlbDogZWxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWV0YS4kZmlsbGVyID0gc291cmNlO1xuXHRcdFx0XHRzb3VyY2VzLnB1c2goc291cmNlKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcblx0XHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdFx0aWYgKCFzb3VyY2UpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNvdXJjZS5maWxsID0gcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpLCBwcm9wYWdhdGUpO1xuXHRcdFx0XHRzb3VyY2UuYm91bmRhcnkgPSBjb21wdXRlQm91bmRhcnkoc291cmNlKTtcblx0XHRcdFx0c291cmNlLm1hcHBlciA9IGNyZWF0ZU1hcHBlcihzb3VyY2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmVEYXRhc2V0RHJhdzogZnVuY3Rpb24oY2hhcnQsIGFyZ3MpIHtcblx0XHRcdHZhciBtZXRhID0gYXJncy5tZXRhLiRmaWxsZXI7XG5cdFx0XHRpZiAoIW1ldGEpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY3R4ID0gY2hhcnQuY3R4O1xuXHRcdFx0dmFyIGVsID0gbWV0YS5lbDtcblx0XHRcdHZhciB2aWV3ID0gZWwuX3ZpZXc7XG5cdFx0XHR2YXIgcG9pbnRzID0gZWwuX2NoaWxkcmVuIHx8IFtdO1xuXHRcdFx0dmFyIG1hcHBlciA9IG1ldGEubWFwcGVyO1xuXHRcdFx0dmFyIGNvbG9yID0gdmlldy5iYWNrZ3JvdW5kQ29sb3IgfHwgZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcjtcblxuXHRcdFx0aWYgKG1hcHBlciAmJiBjb2xvciAmJiBwb2ludHMubGVuZ3RoKSB7XG5cdFx0XHRcdGhlbHBlcnMuY2FudmFzLmNsaXBBcmVhKGN0eCwgY2hhcnQuY2hhcnRBcmVhKTtcblx0XHRcdFx0ZG9GaWxsKGN0eCwgcG9pbnRzLCBtYXBwZXIsIHZpZXcsIGNvbG9yLCBlbC5fbG9vcCk7XG5cdFx0XHRcdGhlbHBlcnMuY2FudmFzLnVuY2xpcEFyZWEoY3R4KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS5kZWZhdWx0c1wiOjE5LFwiLi4vZWxlbWVudHMvaW5kZXhcIjozNCxcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHRsZWdlbmQ6IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdHBvc2l0aW9uOiAndG9wJyxcblx0XHRmdWxsV2lkdGg6IHRydWUsXG5cdFx0cmV2ZXJzZTogZmFsc2UsXG5cdFx0d2VpZ2h0OiAxMDAwLFxuXG5cdFx0Ly8gYSBjYWxsYmFjayB0aGF0IHdpbGwgaGFuZGxlXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG5cdFx0XHR2YXIgY2kgPSB0aGlzLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBjaS5nZXREYXRhc2V0TWV0YShpbmRleCk7XG5cblx0XHRcdC8vIFNlZSBjb250cm9sbGVyLmlzRGF0YXNldFZpc2libGUgY29tbWVudFxuXHRcdFx0bWV0YS5oaWRkZW4gPSBtZXRhLmhpZGRlbiA9PT0gbnVsbCA/ICFjaS5kYXRhLmRhdGFzZXRzW2luZGV4XS5oaWRkZW4gOiBudWxsO1xuXG5cdFx0XHQvLyBXZSBoaWQgYSBkYXRhc2V0IC4uLiByZXJlbmRlciB0aGUgY2hhcnRcblx0XHRcdGNpLnVwZGF0ZSgpO1xuXHRcdH0sXG5cblx0XHRvbkhvdmVyOiBudWxsLFxuXG5cdFx0bGFiZWxzOiB7XG5cdFx0XHRib3hXaWR0aDogNDAsXG5cdFx0XHRwYWRkaW5nOiAxMCxcblx0XHRcdC8vIEdlbmVyYXRlcyBsYWJlbHMgc2hvd24gaW4gdGhlIGxlZ2VuZFxuXHRcdFx0Ly8gVmFsaWQgcHJvcGVydGllcyB0byByZXR1cm46XG5cdFx0XHQvLyB0ZXh0IDogdGV4dCB0byBkaXNwbGF5XG5cdFx0XHQvLyBmaWxsU3R5bGUgOiBmaWxsIG9mIGNvbG91cmVkIGJveFxuXHRcdFx0Ly8gc3Ryb2tlU3R5bGU6IHN0cm9rZSBvZiBjb2xvdXJlZCBib3hcblx0XHRcdC8vIGhpZGRlbiA6IGlmIHRoaXMgbGVnZW5kIGl0ZW0gcmVmZXJzIHRvIGEgaGlkZGVuIGl0ZW1cblx0XHRcdC8vIGxpbmVDYXAgOiBjYXAgc3R5bGUgZm9yIGxpbmVcblx0XHRcdC8vIGxpbmVEYXNoXG5cdFx0XHQvLyBsaW5lRGFzaE9mZnNldCA6XG5cdFx0XHQvLyBsaW5lSm9pbiA6XG5cdFx0XHQvLyBsaW5lV2lkdGggOlxuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdFx0cmV0dXJuIGhlbHBlcnMuaXNBcnJheShkYXRhLmRhdGFzZXRzKSA/IGRhdGEuZGF0YXNldHMubWFwKGZ1bmN0aW9uKGRhdGFzZXQsIGkpIHtcblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0dGV4dDogZGF0YXNldC5sYWJlbCxcblx0XHRcdFx0XHRcdGZpbGxTdHlsZTogKCFoZWxwZXJzLmlzQXJyYXkoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IpID8gZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgOiBkYXRhc2V0LmJhY2tncm91bmRDb2xvclswXSksXG5cdFx0XHRcdFx0XHRoaWRkZW46ICFjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuXHRcdFx0XHRcdFx0bGluZUNhcDogZGF0YXNldC5ib3JkZXJDYXBTdHlsZSxcblx0XHRcdFx0XHRcdGxpbmVEYXNoOiBkYXRhc2V0LmJvcmRlckRhc2gsXG5cdFx0XHRcdFx0XHRsaW5lRGFzaE9mZnNldDogZGF0YXNldC5ib3JkZXJEYXNoT2Zmc2V0LFxuXHRcdFx0XHRcdFx0bGluZUpvaW46IGRhdGFzZXQuYm9yZGVySm9pblN0eWxlLFxuXHRcdFx0XHRcdFx0bGluZVdpZHRoOiBkYXRhc2V0LmJvcmRlcldpZHRoLFxuXHRcdFx0XHRcdFx0c3Ryb2tlU3R5bGU6IGRhdGFzZXQuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdFx0XHRwb2ludFN0eWxlOiBkYXRhc2V0LnBvaW50U3R5bGUsXG5cblx0XHRcdFx0XHRcdC8vIEJlbG93IGlzIGV4dHJhIGRhdGEgdXNlZCBmb3IgdG9nZ2xpbmcgdGhlIGRhdGFzZXRzXG5cdFx0XHRcdFx0XHRkYXRhc2V0SW5kZXg6IGlcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9LCB0aGlzKSA6IFtdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRsZWdlbmRDYWxsYmFjazogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHR2YXIgdGV4dCA9IFtdO1xuXHRcdHRleHQucHVzaCgnPHVsIGNsYXNzPVwiJyArIGNoYXJ0LmlkICsgJy1sZWdlbmRcIj4nKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJ0LmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRleHQucHVzaCgnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICsgY2hhcnQuZGF0YS5kYXRhc2V0c1tpXS5iYWNrZ3JvdW5kQ29sb3IgKyAnXCI+PC9zcGFuPicpO1xuXHRcdFx0aWYgKGNoYXJ0LmRhdGEuZGF0YXNldHNbaV0ubGFiZWwpIHtcblx0XHRcdFx0dGV4dC5wdXNoKGNoYXJ0LmRhdGEuZGF0YXNldHNbaV0ubGFiZWwpO1xuXHRcdFx0fVxuXHRcdFx0dGV4dC5wdXNoKCc8L2xpPicpO1xuXHRcdH1cblx0XHR0ZXh0LnB1c2goJzwvdWw+Jyk7XG5cdFx0cmV0dXJuIHRleHQuam9pbignJyk7XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0dmFyIGxheW91dCA9IENoYXJ0LmxheW91dFNlcnZpY2U7XG5cdHZhciBub29wID0gaGVscGVycy5ub29wO1xuXG5cdC8qKlxuXHQgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBib3ggd2lkdGggYmFzZWQgb24gdGhlIHVzZVBvaW50U3R5bGUgb3B0aW9uXG5cdCAqIEBwYXJhbSBsYWJlbG9wdHMge09iamVjdH0gdGhlIGxhYmVsIG9wdGlvbnMgb24gdGhlIGxlZ2VuZFxuXHQgKiBAcGFyYW0gZm9udFNpemUge051bWJlcn0gdGhlIGxhYmVsIGZvbnQgc2l6ZVxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IHdpZHRoIG9mIHRoZSBjb2xvciBib3ggYXJlYVxuXHQgKi9cblx0ZnVuY3Rpb24gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSkge1xuXHRcdHJldHVybiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSA/XG5cdFx0XHRmb250U2l6ZSAqIE1hdGguU1FSVDIgOlxuXHRcdFx0bGFiZWxPcHRzLmJveFdpZHRoO1xuXHR9XG5cblx0Q2hhcnQuTGVnZW5kID0gRWxlbWVudC5leHRlbmQoe1xuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHRoZWxwZXJzLmV4dGVuZCh0aGlzLCBjb25maWcpO1xuXG5cdFx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHRcdHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcblxuXHRcdFx0Ly8gQXJlIHdlIGluIGRvdWdobnV0IG1vZGUgd2hpY2ggaGFzIGEgZGlmZmVyZW50IGRhdGEgdHlwZVxuXHRcdFx0dGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcblx0XHR9LFxuXG5cdFx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3ljbGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblx0XHQvLyBBbnkgZnVuY3Rpb24gZGVmaW5lZCBoZXJlIGlzIGluaGVyaXRlZCBieSBhbGwgbGVnZW5kIHR5cGVzLlxuXHRcdC8vIEFueSBmdW5jdGlvbiBjYW4gYmUgZXh0ZW5kZWQgYnkgdGhlIGxlZ2VuZCB0eXBlXG5cblx0XHRiZWZvcmVVcGRhdGU6IG5vb3AsXG5cdFx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdFx0bWUuYmVmb3JlVXBkYXRlKCk7XG5cblx0XHRcdC8vIEFic29yYiB0aGUgbWFzdGVyIG1lYXN1cmVtZW50c1xuXHRcdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRcdG1lLm1heEhlaWdodCA9IG1heEhlaWdodDtcblx0XHRcdG1lLm1hcmdpbnMgPSBtYXJnaW5zO1xuXG5cdFx0XHQvLyBEaW1lbnNpb25zXG5cdFx0XHRtZS5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG5cdFx0XHRtZS5zZXREaW1lbnNpb25zKCk7XG5cdFx0XHRtZS5hZnRlclNldERpbWVuc2lvbnMoKTtcblx0XHRcdC8vIExhYmVsc1xuXHRcdFx0bWUuYmVmb3JlQnVpbGRMYWJlbHMoKTtcblx0XHRcdG1lLmJ1aWxkTGFiZWxzKCk7XG5cdFx0XHRtZS5hZnRlckJ1aWxkTGFiZWxzKCk7XG5cblx0XHRcdC8vIEZpdFxuXHRcdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0XHRtZS5maXQoKTtcblx0XHRcdG1lLmFmdGVyRml0KCk7XG5cdFx0XHQvL1xuXHRcdFx0bWUuYWZ0ZXJVcGRhdGUoKTtcblxuXHRcdFx0cmV0dXJuIG1lLm1pblNpemU7XG5cdFx0fSxcblx0XHRhZnRlclVwZGF0ZTogbm9vcCxcblxuXHRcdC8vXG5cblx0XHRiZWZvcmVTZXREaW1lbnNpb25zOiBub29wLFxuXHRcdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdC8vIFNldCB0aGUgdW5jb25zdHJhaW5lZCBkaW1lbnNpb24gYmVmb3JlIGxhYmVsIHJvdGF0aW9uXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRcdG1lLndpZHRoID0gbWUubWF4V2lkdGg7XG5cdFx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0XHRtZS5yaWdodCA9IG1lLndpZHRoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0XHRtZS50b3AgPSAwO1xuXHRcdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc2V0IHBhZGRpbmdcblx0XHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRcdG1lLnBhZGRpbmdUb3AgPSAwO1xuXHRcdFx0bWUucGFkZGluZ1JpZ2h0ID0gMDtcblx0XHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXG5cdFx0XHQvLyBSZXNldCBtaW5TaXplXG5cdFx0XHRtZS5taW5TaXplID0ge1xuXHRcdFx0XHR3aWR0aDogMCxcblx0XHRcdFx0aGVpZ2h0OiAwXG5cdFx0XHR9O1xuXHRcdH0sXG5cdFx0YWZ0ZXJTZXREaW1lbnNpb25zOiBub29wLFxuXG5cdFx0Ly9cblxuXHRcdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wLFxuXHRcdGJ1aWxkTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbGFiZWxPcHRzID0gbWUub3B0aW9ucy5sYWJlbHMgfHwge307XG5cdFx0XHR2YXIgbGVnZW5kSXRlbXMgPSBoZWxwZXJzLmNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW21lLmNoYXJ0XSwgbWUpIHx8IFtdO1xuXG5cdFx0XHRpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuXHRcdFx0XHRsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgbWUuY2hhcnQuZGF0YSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobWUub3B0aW9ucy5yZXZlcnNlKSB7XG5cdFx0XHRcdGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcblx0XHRcdH1cblxuXHRcdFx0bWUubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcblx0XHR9LFxuXHRcdGFmdGVyQnVpbGRMYWJlbHM6IG5vb3AsXG5cblx0XHQvL1xuXG5cdFx0YmVmb3JlRml0OiBub29wLFxuXHRcdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdFx0dmFyIGRpc3BsYXkgPSBvcHRzLmRpc3BsYXk7XG5cblx0XHRcdHZhciBjdHggPSBtZS5jdHg7XG5cblx0XHRcdHZhciBnbG9iYWxEZWZhdWx0ID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblx0XHRcdHZhciBmb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udFNpemUpO1xuXHRcdFx0dmFyIGZvbnRTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250U3R5bGUsIGdsb2JhbERlZmF1bHQuZGVmYXVsdEZvbnRTdHlsZSk7XG5cdFx0XHR2YXIgZm9udEZhbWlseSA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRGb250RmFtaWx5KTtcblx0XHRcdHZhciBsYWJlbEZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSk7XG5cblx0XHRcdC8vIFJlc2V0IGhpdCBib3hlc1xuXHRcdFx0dmFyIGhpdGJveGVzID0gbWUubGVnZW5kSGl0Qm94ZXMgPSBbXTtcblxuXHRcdFx0dmFyIG1pblNpemUgPSBtZS5taW5TaXplO1xuXHRcdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdG1pblNpemUud2lkdGggPSBtZS5tYXhXaWR0aDsgLy8gZmlsbCBhbGwgdGhlIHdpZHRoXG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gZGlzcGxheSA/IDEwIDogMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1pblNpemUud2lkdGggPSBkaXNwbGF5ID8gMTAgOiAwO1xuXHRcdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbmNyZWFzZSBzaXplcyBoZXJlXG5cdFx0XHRpZiAoZGlzcGxheSkge1xuXHRcdFx0XHRjdHguZm9udCA9IGxhYmVsRm9udDtcblxuXHRcdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdFx0Ly8gTGFiZWxzXG5cblx0XHRcdFx0XHQvLyBXaWR0aCBvZiBlYWNoIGxpbmUgb2YgbGVnZW5kIGJveGVzLiBMYWJlbHMgd3JhcCBvbnRvIG11bHRpcGxlIGxpbmVzIHdoZW4gdGhlcmUgYXJlIHRvbyBtYW55IHRvIGZpdCBvbiBvbmVcblx0XHRcdFx0XHR2YXIgbGluZVdpZHRocyA9IG1lLmxpbmVXaWR0aHMgPSBbMF07XG5cdFx0XHRcdFx0dmFyIHRvdGFsSGVpZ2h0ID0gbWUubGVnZW5kSXRlbXMubGVuZ3RoID8gZm9udFNpemUgKyAobGFiZWxPcHRzLnBhZGRpbmcpIDogMDtcblxuXHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuXG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgYm94V2lkdGggPSBnZXRCb3hXaWR0aChsYWJlbE9wdHMsIGZvbnRTaXplKTtcblx0XHRcdFx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblxuXHRcdFx0XHRcdFx0aWYgKGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArIHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmcgPj0gbWUud2lkdGgpIHtcblx0XHRcdFx0XHRcdFx0dG90YWxIZWlnaHQgKz0gZm9udFNpemUgKyAobGFiZWxPcHRzLnBhZGRpbmcpO1xuXHRcdFx0XHRcdFx0XHRsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoXSA9IG1lLmxlZnQ7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIFN0b3JlIHRoZSBoaXRib3ggd2lkdGggYW5kIGhlaWdodCBoZXJlLiBGaW5hbCBwb3NpdGlvbiB3aWxsIGJlIHVwZGF0ZWQgaW4gYGRyYXdgXG5cdFx0XHRcdFx0XHRoaXRib3hlc1tpXSA9IHtcblx0XHRcdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHRcdFx0dG9wOiAwLFxuXHRcdFx0XHRcdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRcdFx0XHRcdGhlaWdodDogZm9udFNpemVcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArPSB3aWR0aCArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0bWluU2l6ZS5oZWlnaHQgKz0gdG90YWxIZWlnaHQ7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgdlBhZGRpbmcgPSBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHR2YXIgY29sdW1uV2lkdGhzID0gbWUuY29sdW1uV2lkdGhzID0gW107XG5cdFx0XHRcdFx0dmFyIHRvdGFsV2lkdGggPSBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHR2YXIgY3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdFx0XHR2YXIgY3VycmVudENvbEhlaWdodCA9IDA7XG5cdFx0XHRcdFx0dmFyIGl0ZW1IZWlnaHQgPSBmb250U2l6ZSArIHZQYWRkaW5nO1xuXG5cdFx0XHRcdFx0aGVscGVycy5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdFx0XHR2YXIgYm94V2lkdGggPSBnZXRCb3hXaWR0aChsYWJlbE9wdHMsIGZvbnRTaXplKTtcblx0XHRcdFx0XHRcdHZhciBpdGVtV2lkdGggPSBib3hXaWR0aCArIChmb250U2l6ZSAvIDIpICsgY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cblx0XHRcdFx0XHRcdC8vIElmIHRvbyB0YWxsLCBnbyB0byBuZXcgY29sdW1uXG5cdFx0XHRcdFx0XHRpZiAoY3VycmVudENvbEhlaWdodCArIGl0ZW1IZWlnaHQgPiBtaW5TaXplLmhlaWdodCkge1xuXHRcdFx0XHRcdFx0XHR0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRcdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpOyAvLyBwcmV2aW91cyBjb2x1bW4gd2lkdGhcblxuXHRcdFx0XHRcdFx0XHRjdXJyZW50Q29sV2lkdGggPSAwO1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50Q29sSGVpZ2h0ID0gMDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gR2V0IG1heCB3aWR0aFxuXHRcdFx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuXHRcdFx0XHRcdFx0Y3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0O1xuXG5cdFx0XHRcdFx0XHQvLyBTdG9yZSB0aGUgaGl0Ym94IHdpZHRoIGFuZCBoZWlnaHQgaGVyZS4gRmluYWwgcG9zaXRpb24gd2lsbCBiZSB1cGRhdGVkIGluIGBkcmF3YFxuXHRcdFx0XHRcdFx0aGl0Ym94ZXNbaV0gPSB7XG5cdFx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdFx0d2lkdGg6IGl0ZW1XaWR0aCxcblx0XHRcdFx0XHRcdFx0aGVpZ2h0OiBmb250U2l6ZVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoO1xuXHRcdFx0XHRcdGNvbHVtbldpZHRocy5wdXNoKGN1cnJlbnRDb2xXaWR0aCk7XG5cdFx0XHRcdFx0bWluU2l6ZS53aWR0aCArPSB0b3RhbFdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRcdG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0O1xuXHRcdH0sXG5cdFx0YWZ0ZXJGaXQ6IG5vb3AsXG5cblx0XHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRcdGlzSG9yaXpvbnRhbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWxseSBkcmF3IHRoZSBsZWdlbmQgb24gdGhlIGNhbnZhc1xuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciBsYWJlbE9wdHMgPSBvcHRzLmxhYmVscztcblx0XHRcdHZhciBnbG9iYWxEZWZhdWx0ID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdFx0dmFyIGxpbmVEZWZhdWx0ID0gZ2xvYmFsRGVmYXVsdC5lbGVtZW50cy5saW5lO1xuXHRcdFx0dmFyIGxlZ2VuZFdpZHRoID0gbWUud2lkdGg7XG5cdFx0XHR2YXIgbGluZVdpZHRocyA9IG1lLmxpbmVXaWR0aHM7XG5cblx0XHRcdGlmIChvcHRzLmRpc3BsYXkpIHtcblx0XHRcdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblx0XHRcdFx0dmFyIGZvbnRDb2xvciA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250Q29sb3IsIGdsb2JhbERlZmF1bHQuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0XHRcdHZhciBmb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udFNpemUpO1xuXHRcdFx0XHR2YXIgZm9udFN0eWxlID0gdmFsdWVPckRlZmF1bHQobGFiZWxPcHRzLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdFx0dmFyIGZvbnRGYW1pbHkgPSB2YWx1ZU9yRGVmYXVsdChsYWJlbE9wdHMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udEZhbWlseSk7XG5cdFx0XHRcdHZhciBsYWJlbEZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSk7XG5cdFx0XHRcdHZhciBjdXJzb3I7XG5cblx0XHRcdFx0Ly8gQ2FudmFzIHNldHVwXG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDAuNTtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gZm9udENvbG9yOyAvLyBmb3Igc3RyaWtldGhyb3VnaCBlZmZlY3Rcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0XHRcdGN0eC5mb250ID0gbGFiZWxGb250O1xuXG5cdFx0XHRcdHZhciBib3hXaWR0aCA9IGdldEJveFdpZHRoKGxhYmVsT3B0cywgZm9udFNpemUpO1xuXHRcdFx0XHR2YXIgaGl0Ym94ZXMgPSBtZS5sZWdlbmRIaXRCb3hlcztcblxuXHRcdFx0XHQvLyBjdXJyZW50IHBvc2l0aW9uXG5cdFx0XHRcdHZhciBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0XHRcdGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFNldCB0aGUgY3R4IGZvciB0aGUgYm94XG5cdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblxuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Q29sb3IpO1xuXHRcdFx0XHRcdGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCBsaW5lRGVmYXVsdC5ib3JkZXJDYXBTdHlsZSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgbGluZURlZmF1bHQuYm9yZGVyRGFzaE9mZnNldCk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lSm9pbiwgbGluZURlZmF1bHQuYm9yZGVySm9pblN0eWxlKTtcblx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIGxpbmVEZWZhdWx0LmJvcmRlcldpZHRoKTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRDb2xvcik7XG5cdFx0XHRcdFx0dmFyIGlzTGluZVdpZHRoWmVybyA9ICh2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVXaWR0aCwgbGluZURlZmF1bHQuYm9yZGVyV2lkdGgpID09PSAwKTtcblxuXHRcdFx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0XHRcdC8vIElFIDkgYW5kIDEwIGRvIG5vdCBzdXBwb3J0IGxpbmUgZGFzaFxuXHRcdFx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIGxpbmVEZWZhdWx0LmJvcmRlckRhc2gpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAob3B0cy5sYWJlbHMgJiYgb3B0cy5sYWJlbHMudXNlUG9pbnRTdHlsZSkge1xuXHRcdFx0XHRcdFx0Ly8gUmVjYWxjdWxhdGUgeCBhbmQgeSBmb3IgZHJhd1BvaW50KCkgYmVjYXVzZSBpdHMgZXhwZWN0aW5nXG5cdFx0XHRcdFx0XHQvLyB4IGFuZCB5IHRvIGJlIGNlbnRlciBvZiBmaWd1cmUgKGluc3RlYWQgb2YgdG9wIGxlZnQpXG5cdFx0XHRcdFx0XHR2YXIgcmFkaXVzID0gZm9udFNpemUgKiBNYXRoLlNRUlQyIC8gMjtcblx0XHRcdFx0XHRcdHZhciBvZmZTZXQgPSByYWRpdXMgLyBNYXRoLlNRUlQyO1xuXHRcdFx0XHRcdFx0dmFyIGNlbnRlclggPSB4ICsgb2ZmU2V0O1xuXHRcdFx0XHRcdFx0dmFyIGNlbnRlclkgPSB5ICsgb2ZmU2V0O1xuXG5cdFx0XHRcdFx0XHQvLyBEcmF3IHBvaW50U3R5bGUgYXMgbGVnZW5kIHN5bWJvbFxuXHRcdFx0XHRcdFx0aGVscGVycy5jYW52YXMuZHJhd1BvaW50KGN0eCwgbGVnZW5kSXRlbS5wb2ludFN0eWxlLCByYWRpdXMsIGNlbnRlclgsIGNlbnRlclkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBEcmF3IGJveCBhcyBsZWdlbmQgc3ltYm9sXG5cdFx0XHRcdFx0XHRpZiAoIWlzTGluZVdpZHRoWmVybykge1xuXHRcdFx0XHRcdFx0XHRjdHguc3Ryb2tlUmVjdCh4LCB5LCBib3hXaWR0aCwgZm9udFNpemUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHgsIHksIGJveFdpZHRoLCBmb250U2l6ZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0dmFyIGZpbGxUZXh0ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSwgdGV4dFdpZHRoKSB7XG5cdFx0XHRcdFx0dmFyIGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcblx0XHRcdFx0XHR2YXIgeExlZnQgPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHg7XG5cdFx0XHRcdFx0dmFyIHlNaWRkbGUgPSB5ICsgaGFsZkZvbnRTaXplO1xuXG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxlZ2VuZEl0ZW0udGV4dCwgeExlZnQsIHlNaWRkbGUpO1xuXG5cdFx0XHRcdFx0aWYgKGxlZ2VuZEl0ZW0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHQvLyBTdHJpa2V0aHJvdWdoIHRoZSB0ZXh0IGlmIGhpZGRlblxuXHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHhMZWZ0LCB5TWlkZGxlKTtcblx0XHRcdFx0XHRcdGN0eC5saW5lVG8oeExlZnQgKyB0ZXh0V2lkdGgsIHlNaWRkbGUpO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBIb3Jpem9udGFsXG5cdFx0XHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdGN1cnNvciA9IHtcblx0XHRcdFx0XHRcdHg6IG1lLmxlZnQgKyAoKGxlZ2VuZFdpZHRoIC0gbGluZVdpZHRoc1swXSkgLyAyKSxcblx0XHRcdFx0XHRcdHk6IG1lLnRvcCArIGxhYmVsT3B0cy5wYWRkaW5nLFxuXHRcdFx0XHRcdFx0bGluZTogMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3Vyc29yID0ge1xuXHRcdFx0XHRcdFx0eDogbWUubGVmdCArIGxhYmVsT3B0cy5wYWRkaW5nLFxuXHRcdFx0XHRcdFx0eTogbWUudG9wICsgbGFiZWxPcHRzLnBhZGRpbmcsXG5cdFx0XHRcdFx0XHRsaW5lOiAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBpdGVtSGVpZ2h0ID0gZm9udFNpemUgKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0aGVscGVycy5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdFx0dmFyIHRleHRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuXHRcdFx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyB0ZXh0V2lkdGg7XG5cdFx0XHRcdFx0dmFyIHggPSBjdXJzb3IueDtcblx0XHRcdFx0XHR2YXIgeSA9IGN1cnNvci55O1xuXG5cdFx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdFx0aWYgKHggKyB3aWR0aCA+PSBsZWdlbmRXaWR0aCkge1xuXHRcdFx0XHRcdFx0XHR5ID0gY3Vyc29yLnkgKz0gaXRlbUhlaWdodDtcblx0XHRcdFx0XHRcdFx0Y3Vyc29yLmxpbmUrKztcblx0XHRcdFx0XHRcdFx0eCA9IGN1cnNvci54ID0gbWUubGVmdCArICgobGVnZW5kV2lkdGggLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSkgLyAyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHkgKyBpdGVtSGVpZ2h0ID4gbWUuYm90dG9tKSB7XG5cdFx0XHRcdFx0XHR4ID0gY3Vyc29yLnggPSB4ICsgbWUuY29sdW1uV2lkdGhzW2N1cnNvci5saW5lXSArIGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHRcdFx0eSA9IGN1cnNvci55ID0gbWUudG9wICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdFx0XHRjdXJzb3IubGluZSsrO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRyYXdMZWdlbmRCb3goeCwgeSwgbGVnZW5kSXRlbSk7XG5cblx0XHRcdFx0XHRoaXRib3hlc1tpXS5sZWZ0ID0geDtcblx0XHRcdFx0XHRoaXRib3hlc1tpXS50b3AgPSB5O1xuXG5cdFx0XHRcdFx0Ly8gRmlsbCB0aGUgYWN0dWFsIGxhYmVsXG5cdFx0XHRcdFx0ZmlsbFRleHQoeCwgeSwgbGVnZW5kSXRlbSwgdGV4dFdpZHRoKTtcblxuXHRcdFx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0XHRcdGN1cnNvci54ICs9IHdpZHRoICsgKGxhYmVsT3B0cy5wYWRkaW5nKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y3Vyc29yLnkgKz0gaXRlbUhlaWdodDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEhhbmRsZSBhbiBldmVudFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGhhbmRsZVxuXHRcdCAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgYSBjaGFuZ2Ugb2NjdXJlZFxuXHRcdCAqL1xuXHRcdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIHR5cGUgPSBlLnR5cGUgPT09ICdtb3VzZXVwJyA/ICdjbGljaycgOiBlLnR5cGU7XG5cdFx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcblx0XHRcdFx0aWYgKCFvcHRzLm9uSG92ZXIpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRpZiAoIW9wdHMub25DbGljaykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDaGFydCBldmVudCBhbHJlYWR5IGhhcyByZWxhdGl2ZSBwb3NpdGlvbiBpbiBpdFxuXHRcdFx0dmFyIHggPSBlLng7XG5cdFx0XHR2YXIgeSA9IGUueTtcblxuXHRcdFx0aWYgKHggPj0gbWUubGVmdCAmJiB4IDw9IG1lLnJpZ2h0ICYmIHkgPj0gbWUudG9wICYmIHkgPD0gbWUuYm90dG9tKSB7XG5cdFx0XHRcdC8vIFNlZSBpZiB3ZSBhcmUgdG91Y2hpbmcgb25lIG9mIHRoZSBkYXRhc2V0IGJveGVzXG5cdFx0XHRcdHZhciBsaCA9IG1lLmxlZ2VuZEhpdEJveGVzO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0dmFyIGhpdEJveCA9IGxoW2ldO1xuXG5cdFx0XHRcdFx0aWYgKHggPj0gaGl0Qm94LmxlZnQgJiYgeCA8PSBoaXRCb3gubGVmdCArIGhpdEJveC53aWR0aCAmJiB5ID49IGhpdEJveC50b3AgJiYgeSA8PSBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkge1xuXHRcdFx0XHRcdFx0Ly8gVG91Y2hpbmcgYW4gZWxlbWVudFxuXHRcdFx0XHRcdFx0aWYgKHR5cGUgPT09ICdjbGljaycpIHtcblx0XHRcdFx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRvcHRzLm9uQ2xpY2suY2FsbChtZSwgZS5uYXRpdmUsIG1lLmxlZ2VuZEl0ZW1zW2ldKTtcblx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAnbW91c2Vtb3ZlJykge1xuXHRcdFx0XHRcdFx0XHQvLyB1c2UgZS5uYXRpdmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdFx0XHRcdG9wdHMub25Ib3Zlci5jYWxsKG1lLCBlLm5hdGl2ZSwgbWUubGVnZW5kSXRlbXNbaV0pO1xuXHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gY3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKSB7XG5cdFx0dmFyIGxlZ2VuZCA9IG5ldyBDaGFydC5MZWdlbmQoe1xuXHRcdFx0Y3R4OiBjaGFydC5jdHgsXG5cdFx0XHRvcHRpb25zOiBsZWdlbmRPcHRzLFxuXHRcdFx0Y2hhcnQ6IGNoYXJ0XG5cdFx0fSk7XG5cblx0XHRsYXlvdXQuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIGxlZ2VuZE9wdHMpO1xuXHRcdGxheW91dC5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG5cdFx0Y2hhcnQubGVnZW5kID0gbGVnZW5kO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRpZDogJ2xlZ2VuZCcsXG5cblx0XHRiZWZvcmVJbml0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblxuXHRcdFx0aWYgKGxlZ2VuZE9wdHMpIHtcblx0XHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0dmFyIGxlZ2VuZE9wdHMgPSBjaGFydC5vcHRpb25zLmxlZ2VuZDtcblx0XHRcdHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG5cblx0XHRcdGlmIChsZWdlbmRPcHRzKSB7XG5cdFx0XHRcdGhlbHBlcnMubWVyZ2VJZihsZWdlbmRPcHRzLCBkZWZhdWx0cy5nbG9iYWwubGVnZW5kKTtcblxuXHRcdFx0XHRpZiAobGVnZW5kKSB7XG5cdFx0XHRcdFx0bGF5b3V0LmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBsZWdlbmRPcHRzKTtcblx0XHRcdFx0XHRsZWdlbmQub3B0aW9ucyA9IGxlZ2VuZE9wdHM7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChsZWdlbmQpIHtcblx0XHRcdFx0bGF5b3V0LnJlbW92ZUJveChjaGFydCwgbGVnZW5kKTtcblx0XHRcdFx0ZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YWZ0ZXJFdmVudDogZnVuY3Rpb24oY2hhcnQsIGUpIHtcblx0XHRcdHZhciBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG5cdFx0XHRpZiAobGVnZW5kKSB7XG5cdFx0XHRcdGxlZ2VuZC5oYW5kbGVFdmVudChlKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS5kZWZhdWx0c1wiOjE5LFwiLi4vY29yZS9jb3JlLmVsZW1lbnRcIjoyMCxcIi4uL2hlbHBlcnMvaW5kZXhcIjozOX1dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnZ2xvYmFsJywge1xuXHR0aXRsZToge1xuXHRcdGRpc3BsYXk6IGZhbHNlLFxuXHRcdGZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZ1bGxXaWR0aDogdHJ1ZSxcblx0XHRsaW5lSGVpZ2h0OiAxLjIsXG5cdFx0cGFkZGluZzogMTAsXG5cdFx0cG9zaXRpb246ICd0b3AnLFxuXHRcdHRleHQ6ICcnLFxuXHRcdHdlaWdodDogMjAwMCAgICAgICAgIC8vIGJ5IGRlZmF1bHQgZ3JlYXRlciB0aGFuIGxlZ2VuZCAoMTAwMCkgdG8gYmUgYWJvdmVcblx0fVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgbGF5b3V0ID0gQ2hhcnQubGF5b3V0U2VydmljZTtcblx0dmFyIG5vb3AgPSBoZWxwZXJzLm5vb3A7XG5cblx0Q2hhcnQuVGl0bGUgPSBFbGVtZW50LmV4dGVuZCh7XG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0aGVscGVycy5leHRlbmQobWUsIGNvbmZpZyk7XG5cblx0XHRcdC8vIENvbnRhaW5zIGhpdCBib3hlcyBmb3IgZWFjaCBkYXRhc2V0IChpbiBkYXRhc2V0IG9yZGVyKVxuXHRcdFx0bWUubGVnZW5kSGl0Qm94ZXMgPSBbXTtcblx0XHR9LFxuXG5cdFx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3ljbGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblxuXHRcdGJlZm9yZVVwZGF0ZTogbm9vcCxcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdC8vIFVwZGF0ZSBMaWZlY3ljbGUgLSBQcm9iYWJseSBkb24ndCB3YW50IHRvIGV2ZXIgZXh0ZW5kIG9yIG92ZXJ3cml0ZSB0aGlzIGZ1bmN0aW9uIDspXG5cdFx0XHRtZS5iZWZvcmVVcGRhdGUoKTtcblxuXHRcdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0XHRtZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdFx0bWUubWF4SGVpZ2h0ID0gbWF4SGVpZ2h0O1xuXHRcdFx0bWUubWFyZ2lucyA9IG1hcmdpbnM7XG5cblx0XHRcdC8vIERpbWVuc2lvbnNcblx0XHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXHRcdFx0Ly8gTGFiZWxzXG5cdFx0XHRtZS5iZWZvcmVCdWlsZExhYmVscygpO1xuXHRcdFx0bWUuYnVpbGRMYWJlbHMoKTtcblx0XHRcdG1lLmFmdGVyQnVpbGRMYWJlbHMoKTtcblxuXHRcdFx0Ly8gRml0XG5cdFx0XHRtZS5iZWZvcmVGaXQoKTtcblx0XHRcdG1lLmZpdCgpO1xuXHRcdFx0bWUuYWZ0ZXJGaXQoKTtcblx0XHRcdC8vXG5cdFx0XHRtZS5hZnRlclVwZGF0ZSgpO1xuXG5cdFx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblxuXHRcdH0sXG5cdFx0YWZ0ZXJVcGRhdGU6IG5vb3AsXG5cblx0XHQvL1xuXG5cdFx0YmVmb3JlU2V0RGltZW5zaW9uczogbm9vcCxcblx0XHRzZXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0XHRtZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdFx0XHRtZS5sZWZ0ID0gMDtcblx0XHRcdFx0bWUucmlnaHQgPSBtZS53aWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblxuXHRcdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdFx0bWUudG9wID0gMDtcblx0XHRcdFx0bWUuYm90dG9tID0gbWUuaGVpZ2h0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNldCBwYWRkaW5nXG5cdFx0XHRtZS5wYWRkaW5nTGVmdCA9IDA7XG5cdFx0XHRtZS5wYWRkaW5nVG9wID0gMDtcblx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IDA7XG5cdFx0XHRtZS5wYWRkaW5nQm90dG9tID0gMDtcblxuXHRcdFx0Ly8gUmVzZXQgbWluU2l6ZVxuXHRcdFx0bWUubWluU2l6ZSA9IHtcblx0XHRcdFx0d2lkdGg6IDAsXG5cdFx0XHRcdGhlaWdodDogMFxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGFmdGVyU2V0RGltZW5zaW9uczogbm9vcCxcblxuXHRcdC8vXG5cblx0XHRiZWZvcmVCdWlsZExhYmVsczogbm9vcCxcblx0XHRidWlsZExhYmVsczogbm9vcCxcblx0XHRhZnRlckJ1aWxkTGFiZWxzOiBub29wLFxuXG5cdFx0Ly9cblxuXHRcdGJlZm9yZUZpdDogbm9vcCxcblx0XHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgZGlzcGxheSA9IG9wdHMuZGlzcGxheTtcblx0XHRcdHZhciBmb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udFNpemUsIGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpO1xuXHRcdFx0dmFyIG1pblNpemUgPSBtZS5taW5TaXplO1xuXHRcdFx0dmFyIGxpbmVDb3VudCA9IGhlbHBlcnMuaXNBcnJheShvcHRzLnRleHQpID8gb3B0cy50ZXh0Lmxlbmd0aCA6IDE7XG5cdFx0XHR2YXIgbGluZUhlaWdodCA9IGhlbHBlcnMub3B0aW9ucy50b0xpbmVIZWlnaHQob3B0cy5saW5lSGVpZ2h0LCBmb250U2l6ZSk7XG5cdFx0XHR2YXIgdGV4dFNpemUgPSBkaXNwbGF5ID8gKGxpbmVDb3VudCAqIGxpbmVIZWlnaHQpICsgKG9wdHMucGFkZGluZyAqIDIpIDogMDtcblxuXHRcdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdG1pblNpemUud2lkdGggPSBtZS5tYXhXaWR0aDsgLy8gZmlsbCBhbGwgdGhlIHdpZHRoXG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gdGV4dFNpemU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtaW5TaXplLndpZHRoID0gdGV4dFNpemU7XG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0OyAvLyBmaWxsIGFsbCB0aGUgaGVpZ2h0XG5cdFx0XHR9XG5cblx0XHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRcdG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0O1xuXG5cdFx0fSxcblx0XHRhZnRlckZpdDogbm9vcCxcblxuXHRcdC8vIFNoYXJlZCBNZXRob2RzXG5cdFx0aXNIb3Jpem9udGFsOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0XHRyZXR1cm4gcG9zID09PSAndG9wJyB8fCBwb3MgPT09ICdib3R0b20nO1xuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWxseSBkcmF3IHRoZSB0aXRsZSBibG9jayBvbiB0aGUgY2FudmFzXG5cdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBkZWZhdWx0cy5nbG9iYWw7XG5cblx0XHRcdGlmIChvcHRzLmRpc3BsYXkpIHtcblx0XHRcdFx0dmFyIGZvbnRTaXplID0gdmFsdWVPckRlZmF1bHQob3B0cy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKTtcblx0XHRcdFx0dmFyIGZvbnRTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdFx0dmFyIGZvbnRGYW1pbHkgPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KTtcblx0XHRcdFx0dmFyIHRpdGxlRm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhmb250U2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KTtcblx0XHRcdFx0dmFyIGxpbmVIZWlnaHQgPSBoZWxwZXJzLm9wdGlvbnMudG9MaW5lSGVpZ2h0KG9wdHMubGluZUhlaWdodCwgZm9udFNpemUpO1xuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyBvcHRzLnBhZGRpbmc7XG5cdFx0XHRcdHZhciByb3RhdGlvbiA9IDA7XG5cdFx0XHRcdHZhciB0b3AgPSBtZS50b3A7XG5cdFx0XHRcdHZhciBsZWZ0ID0gbWUubGVmdDtcblx0XHRcdFx0dmFyIGJvdHRvbSA9IG1lLmJvdHRvbTtcblx0XHRcdFx0dmFyIHJpZ2h0ID0gbWUucmlnaHQ7XG5cdFx0XHRcdHZhciBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0XHRcdGN0eC5mb250ID0gdGl0bGVGb250O1xuXG5cdFx0XHRcdC8vIEhvcml6b250YWxcblx0XHRcdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdFx0dGl0bGVYID0gbGVmdCArICgocmlnaHQgLSBsZWZ0KSAvIDIpOyAvLyBtaWRwb2ludCBvZiB0aGUgd2lkdGhcblx0XHRcdFx0XHR0aXRsZVkgPSB0b3AgKyBvZmZzZXQ7XG5cdFx0XHRcdFx0bWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGl0bGVYID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2xlZnQnID8gbGVmdCArIG9mZnNldCA6IHJpZ2h0IC0gb2Zmc2V0O1xuXHRcdFx0XHRcdHRpdGxlWSA9IHRvcCArICgoYm90dG9tIC0gdG9wKSAvIDIpO1xuXHRcdFx0XHRcdG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuXHRcdFx0XHRcdHJvdGF0aW9uID0gTWF0aC5QSSAqIChvcHRzLnBvc2l0aW9uID09PSAnbGVmdCcgPyAtMC41IDogMC41KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdGN0eC50cmFuc2xhdGUodGl0bGVYLCB0aXRsZVkpO1xuXHRcdFx0XHRjdHgucm90YXRlKHJvdGF0aW9uKTtcblx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cblx0XHRcdFx0dmFyIHRleHQgPSBvcHRzLnRleHQ7XG5cdFx0XHRcdGlmIChoZWxwZXJzLmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdFx0XHR2YXIgeSA9IDA7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0XHRjdHguZmlsbFRleHQodGV4dFtpXSwgMCwgeSwgbWF4V2lkdGgpO1xuXHRcdFx0XHRcdFx0eSArPSBsaW5lSGVpZ2h0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdHguZmlsbFRleHQodGV4dCwgMCwgMCwgbWF4V2lkdGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGZ1bmN0aW9uIGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cykge1xuXHRcdHZhciB0aXRsZSA9IG5ldyBDaGFydC5UaXRsZSh7XG5cdFx0XHRjdHg6IGNoYXJ0LmN0eCxcblx0XHRcdG9wdGlvbnM6IHRpdGxlT3B0cyxcblx0XHRcdGNoYXJ0OiBjaGFydFxuXHRcdH0pO1xuXG5cdFx0bGF5b3V0LmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIHRpdGxlT3B0cyk7XG5cdFx0bGF5b3V0LmFkZEJveChjaGFydCwgdGl0bGUpO1xuXHRcdGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0aWQ6ICd0aXRsZScsXG5cblx0XHRiZWZvcmVJbml0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cblx0XHRcdGlmICh0aXRsZU9wdHMpIHtcblx0XHRcdFx0Y3JlYXRlTmV3VGl0bGVCbG9ja0FuZEF0dGFjaChjaGFydCwgdGl0bGVPcHRzKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cdFx0XHR2YXIgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG5cblx0XHRcdGlmICh0aXRsZU9wdHMpIHtcblx0XHRcdFx0aGVscGVycy5tZXJnZUlmKHRpdGxlT3B0cywgZGVmYXVsdHMuZ2xvYmFsLnRpdGxlKTtcblxuXHRcdFx0XHRpZiAodGl0bGVCbG9jaykge1xuXHRcdFx0XHRcdGxheW91dC5jb25maWd1cmUoY2hhcnQsIHRpdGxlQmxvY2ssIHRpdGxlT3B0cyk7XG5cdFx0XHRcdFx0dGl0bGVCbG9jay5vcHRpb25zID0gdGl0bGVPcHRzO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGl0bGVCbG9jaykge1xuXHRcdFx0XHRDaGFydC5sYXlvdXRTZXJ2aWNlLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG5cdFx0XHRcdGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9jb3JlL2NvcmUuZWxlbWVudFwiOjIwLFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sNDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Ly8gRGVmYXVsdCBjb25maWcgZm9yIGEgY2F0ZWdvcnkgc2NhbGVcblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0cG9zaXRpb246ICdib3R0b20nXG5cdH07XG5cblx0dmFyIERhdGFzZXRTY2FsZSA9IENoYXJ0LlNjYWxlLmV4dGVuZCh7XG5cdFx0LyoqXG5cdFx0KiBJbnRlcm5hbCBmdW5jdGlvbiB0byBnZXQgdGhlIGNvcnJlY3QgbGFiZWxzLiBJZiBkYXRhLnhMYWJlbHMgb3IgZGF0YS55TGFiZWxzIGFyZSBkZWZpbmVkLCB1c2UgdGhvc2Vcblx0XHQqIGVsc2UgZmFsbCBiYWNrIHRvIGRhdGEubGFiZWxzXG5cdFx0KiBAcHJpdmF0ZVxuXHRcdCovXG5cdFx0Z2V0TGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzO1xuXHRcdH0sXG5cblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbGFiZWxzID0gbWUuZ2V0TGFiZWxzKCk7XG5cdFx0XHRtZS5taW5JbmRleCA9IDA7XG5cdFx0XHRtZS5tYXhJbmRleCA9IGxhYmVscy5sZW5ndGggLSAxO1xuXHRcdFx0dmFyIGZpbmRJbmRleDtcblxuXHRcdFx0aWYgKG1lLm9wdGlvbnMudGlja3MubWluICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gdXNlciBzcGVjaWZpZWQgbWluIHZhbHVlXG5cdFx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1lLm9wdGlvbnMudGlja3MubWluKTtcblx0XHRcdFx0bWUubWluSW5kZXggPSBmaW5kSW5kZXggIT09IC0xID8gZmluZEluZGV4IDogbWUubWluSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZS5vcHRpb25zLnRpY2tzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIHVzZXIgc3BlY2lmaWVkIG1heCB2YWx1ZVxuXHRcdFx0XHRmaW5kSW5kZXggPSBsYWJlbHMuaW5kZXhPZihtZS5vcHRpb25zLnRpY2tzLm1heCk7XG5cdFx0XHRcdG1lLm1heEluZGV4ID0gZmluZEluZGV4ICE9PSAtMSA/IGZpbmRJbmRleCA6IG1lLm1heEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBsYWJlbHNbbWUubWluSW5kZXhdO1xuXHRcdFx0bWUubWF4ID0gbGFiZWxzW21lLm1heEluZGV4XTtcblx0XHR9LFxuXG5cdFx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGxhYmVscyA9IG1lLmdldExhYmVscygpO1xuXHRcdFx0Ly8gSWYgd2UgYXJlIHZpZXdpbmcgc29tZSBzdWJzZXQgb2YgbGFiZWxzLCBzbGljZSB0aGUgb3JpZ2luYWwgYXJyYXlcblx0XHRcdG1lLnRpY2tzID0gKG1lLm1pbkluZGV4ID09PSAwICYmIG1lLm1heEluZGV4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWUubWluSW5kZXgsIG1lLm1heEluZGV4ICsgMSk7XG5cdFx0fSxcblxuXHRcdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgZGF0YSA9IG1lLmNoYXJ0LmRhdGE7XG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cblx0XHRcdGlmIChkYXRhLnlMYWJlbHMgJiYgIWlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRyZXR1cm4gbWUuZ2V0UmlnaHRWYWx1ZShkYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1lLnRpY2tzW2luZGV4IC0gbWUubWluSW5kZXhdO1xuXHRcdH0sXG5cblx0XHQvLyBVc2VkIHRvIGdldCBkYXRhIHZhbHVlIGxvY2F0aW9ucy4gIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0XHQvLyAxIGlzIGFkZGVkIGJlY2F1c2Ugd2UgbmVlZCB0aGUgbGVuZ3RoIGJ1dCB3ZSBoYXZlIHRoZSBpbmRleGVzXG5cdFx0XHR2YXIgb2Zmc2V0QW10ID0gTWF0aC5tYXgoKG1lLm1heEluZGV4ICsgMSAtIG1lLm1pbkluZGV4IC0gKG9mZnNldCA/IDAgOiAxKSksIDEpO1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGRhdGEgb2JqZWN0LCB0aGVuIGluZGV4IGlzIHRoZSBpbmRleCBpbiB0aGUgZGF0YSBhcnJheSxcblx0XHRcdC8vIG5vdCB0aGUgaW5kZXggb2YgdGhlIHNjYWxlLiBXZSBuZWVkIHRvIGNoYW5nZSB0aGF0LlxuXHRcdFx0dmFyIHZhbHVlQ2F0ZWdvcnk7XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YWx1ZUNhdGVnb3J5ID0gbWUuaXNIb3Jpem9udGFsKCkgPyB2YWx1ZS54IDogdmFsdWUueTtcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZUNhdGVnb3J5ICE9PSB1bmRlZmluZWQgfHwgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgaXNOYU4oaW5kZXgpKSkge1xuXHRcdFx0XHR2YXIgbGFiZWxzID0gbWUuZ2V0TGFiZWxzKCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVDYXRlZ29yeSB8fCB2YWx1ZTtcblx0XHRcdFx0dmFyIGlkeCA9IGxhYmVscy5pbmRleE9mKHZhbHVlKTtcblx0XHRcdFx0aW5kZXggPSBpZHggIT09IC0xID8gaWR4IDogaW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHR2YXIgdmFsdWVXaWR0aCA9IG1lLndpZHRoIC8gb2Zmc2V0QW10O1xuXHRcdFx0XHR2YXIgd2lkdGhPZmZzZXQgPSAodmFsdWVXaWR0aCAqIChpbmRleCAtIG1lLm1pbkluZGV4KSk7XG5cblx0XHRcdFx0aWYgKG9mZnNldCkge1xuXHRcdFx0XHRcdHdpZHRoT2Zmc2V0ICs9ICh2YWx1ZVdpZHRoIC8gMik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWUubGVmdCArIE1hdGgucm91bmQod2lkdGhPZmZzZXQpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHZhbHVlSGVpZ2h0ID0gbWUuaGVpZ2h0IC8gb2Zmc2V0QW10O1xuXHRcdFx0dmFyIGhlaWdodE9mZnNldCA9ICh2YWx1ZUhlaWdodCAqIChpbmRleCAtIG1lLm1pbkluZGV4KSk7XG5cblx0XHRcdGlmIChvZmZzZXQpIHtcblx0XHRcdFx0aGVpZ2h0T2Zmc2V0ICs9ICh2YWx1ZUhlaWdodCAvIDIpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWUudG9wICsgTWF0aC5yb3VuZChoZWlnaHRPZmZzZXQpO1xuXHRcdH0sXG5cdFx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnRpY2tzW2luZGV4XSwgaW5kZXggKyB0aGlzLm1pbkluZGV4LCBudWxsKTtcblx0XHR9LFxuXHRcdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9mZnNldCA9IG1lLm9wdGlvbnMub2Zmc2V0O1xuXHRcdFx0dmFyIHZhbHVlO1xuXHRcdFx0dmFyIG9mZnNldEFtdCA9IE1hdGgubWF4KChtZS5fdGlja3MubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSksIDEpO1xuXHRcdFx0dmFyIGhvcnogPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdHZhciB2YWx1ZURpbWVuc2lvbiA9IChob3J6ID8gbWUud2lkdGggOiBtZS5oZWlnaHQpIC8gb2Zmc2V0QW10O1xuXG5cdFx0XHRwaXhlbCAtPSBob3J6ID8gbWUubGVmdCA6IG1lLnRvcDtcblxuXHRcdFx0aWYgKG9mZnNldCkge1xuXHRcdFx0XHRwaXhlbCAtPSAodmFsdWVEaW1lbnNpb24gLyAyKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHBpeGVsIDw9IDApIHtcblx0XHRcdFx0dmFsdWUgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSBNYXRoLnJvdW5kKHBpeGVsIC8gdmFsdWVEaW1lbnNpb24pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgKyBtZS5taW5JbmRleDtcblx0XHR9LFxuXHRcdGdldEJhc2VQaXhlbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ib3R0b207XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5zY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoJ2NhdGVnb3J5JywgRGF0YXNldFNjYWxlLCBkZWZhdWx0Q29uZmlnKTtcblxufTtcblxufSx7fV0sNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnRpY2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdHRpY2tzOiB7XG5cdFx0XHRjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0XHR9XG5cdH07XG5cblx0dmFyIExpbmVhclNjYWxlID0gQ2hhcnQuTGluZWFyU2NhbGVCYXNlLmV4dGVuZCh7XG5cblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdHZhciBkYXRhc2V0cyA9IGRhdGEuZGF0YXNldHM7XG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHR2YXIgREVGQVVMVF9NSU4gPSAwO1xuXHRcdFx0dmFyIERFRkFVTFRfTUFYID0gMTtcblxuXHRcdFx0ZnVuY3Rpb24gSURNYXRjaGVzKG1ldGEpIHtcblx0XHRcdFx0cmV0dXJuIGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaXJzdCBDYWxjdWxhdGUgdGhlIHJhbmdlXG5cdFx0XHRtZS5taW4gPSBudWxsO1xuXHRcdFx0bWUubWF4ID0gbnVsbDtcblxuXHRcdFx0dmFyIGhhc1N0YWNrcyA9IG9wdHMuc3RhY2tlZDtcblx0XHRcdGlmIChoYXNTdGFja3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGlmIChoYXNTdGFja3MpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkgJiZcblx0XHRcdFx0XHRcdG1ldGEuc3RhY2sgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aGFzU3RhY2tzID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cy5zdGFja2VkIHx8IGhhc1N0YWNrcykge1xuXHRcdFx0XHR2YXIgdmFsdWVzUGVyU3RhY2sgPSB7fTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHR2YXIga2V5ID0gW1xuXHRcdFx0XHRcdFx0bWV0YS50eXBlLFxuXHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhIHNlcGFyYXRlIHN0YWNrIGZvciBzdGFjaz11bmRlZmluZWQgZGF0YXNldHMgd2hlbiB0aGUgb3B0cy5zdGFja2VkIGlzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdFx0KChvcHRzLnN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQpID8gZGF0YXNldEluZGV4IDogJycpLFxuXHRcdFx0XHRcdFx0bWV0YS5zdGFja1xuXHRcdFx0XHRcdF0uam9pbignLicpO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlc1BlclN0YWNrW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dmFsdWVzUGVyU3RhY2tba2V5XSA9IHtcblx0XHRcdFx0XHRcdFx0cG9zaXRpdmVWYWx1ZXM6IFtdLFxuXHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlczogW11cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgdGhlc2UgcGVyIHR5cGVcblx0XHRcdFx0XHR2YXIgcG9zaXRpdmVWYWx1ZXMgPSB2YWx1ZXNQZXJTdGFja1trZXldLnBvc2l0aXZlVmFsdWVzO1xuXHRcdFx0XHRcdHZhciBuZWdhdGl2ZVZhbHVlcyA9IHZhbHVlc1BlclN0YWNrW2tleV0ubmVnYXRpdmVWYWx1ZXM7XG5cblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSwgZnVuY3Rpb24ocmF3VmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHBvc2l0aXZlVmFsdWVzW2luZGV4XSA9IHBvc2l0aXZlVmFsdWVzW2luZGV4XSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlc1tpbmRleF0gPSBuZWdhdGl2ZVZhbHVlc1tpbmRleF0gfHwgMDtcblxuXHRcdFx0XHRcdFx0XHRpZiAob3B0cy5yZWxhdGl2ZVBvaW50cykge1xuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aXZlVmFsdWVzW2luZGV4XSA9IDEwMDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlc1tpbmRleF0gKz0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpdmVWYWx1ZXNbaW5kZXhdICs9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh2YWx1ZXNQZXJTdGFjaywgZnVuY3Rpb24odmFsdWVzRm9yVHlwZSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSB2YWx1ZXNGb3JUeXBlLnBvc2l0aXZlVmFsdWVzLmNvbmNhdCh2YWx1ZXNGb3JUeXBlLm5lZ2F0aXZlVmFsdWVzKTtcblx0XHRcdFx0XHR2YXIgbWluVmFsID0gaGVscGVycy5taW4odmFsdWVzKTtcblx0XHRcdFx0XHR2YXIgbWF4VmFsID0gaGVscGVycy5tYXgodmFsdWVzKTtcblx0XHRcdFx0XHRtZS5taW4gPSBtZS5taW4gPT09IG51bGwgPyBtaW5WYWwgOiBNYXRoLm1pbihtZS5taW4sIG1pblZhbCk7XG5cdFx0XHRcdFx0bWUubWF4ID0gbWUubWF4ID09PSBudWxsID8gbWF4VmFsIDogTWF0aC5tYXgobWUubWF4LCBtYXhWYWwpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkpIHtcblx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZSkgfHwgbWV0YS5kYXRhW2luZGV4XS5oaWRkZW4pIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWUubWluID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPCBtZS5taW4pIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5taW4gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChtZS5tYXggPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5tYXggPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA+IG1lLm1heCkge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1heCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBpc0Zpbml0ZShtZS5taW4pICYmICFpc05hTihtZS5taW4pID8gbWUubWluIDogREVGQVVMVF9NSU47XG5cdFx0XHRtZS5tYXggPSBpc0Zpbml0ZShtZS5tYXgpICYmICFpc05hTihtZS5tYXgpID8gbWUubWF4IDogREVGQVVMVF9NQVg7XG5cblx0XHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heCwgdGlja3MuYmVnaW5BdFplcm9cblx0XHRcdHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHRcdH0sXG5cdFx0Z2V0VGlja0xpbWl0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtYXhUaWNrcztcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0bWF4VGlja3MgPSBNYXRoLm1pbih0aWNrT3B0cy5tYXhUaWNrc0xpbWl0ID8gdGlja09wdHMubWF4VGlja3NMaW1pdCA6IDExLCBNYXRoLmNlaWwobWUud2lkdGggLyA1MCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVGhlIGZhY3RvciBvZiAyIHVzZWQgdG8gc2NhbGUgdGhlIGZvbnQgc2l6ZSBoYXMgYmVlbiBleHBlcmltZW50YWxseSBkZXRlcm1pbmVkLlxuXHRcdFx0XHR2YXIgdGlja0ZvbnRTaXplID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250U2l6ZSwgZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRcdG1heFRpY2tzID0gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCA/IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgOiAxMSwgTWF0aC5jZWlsKG1lLmhlaWdodCAvICgyICogdGlja0ZvbnRTaXplKSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF4VGlja3M7XG5cdFx0fSxcblx0XHQvLyBDYWxsZWQgYWZ0ZXIgdGhlIHRpY2tzIGFyZSBidWlsdC4gV2UgbmVlZFxuXHRcdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0Ly8gV2UgYXJlIGluIGEgdmVydGljYWwgb3JpZW50YXRpb24uIFRoZSB0b3AgdmFsdWUgaXMgdGhlIGhpZ2hlc3QuIFNvIHJldmVyc2UgdGhlIGFycmF5XG5cdFx0XHRcdHRoaXMudGlja3MucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdH0sXG5cdFx0Ly8gVXRpbHNcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0Ly8gVGhpcyBtdXN0IGJlIGNhbGxlZCBhZnRlciBmaXQgaGFzIGJlZW4gcnVuIHNvIHRoYXRcblx0XHRcdC8vIHRoaXMubGVmdCwgdGhpcy50b3AsIHRoaXMucmlnaHQsIGFuZCB0aGlzLmJvdHRvbSBoYXZlIGJlZW4gZGVmaW5lZFxuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBzdGFydCA9IG1lLnN0YXJ0O1xuXG5cdFx0XHR2YXIgcmlnaHRWYWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdHZhciBwaXhlbDtcblx0XHRcdHZhciByYW5nZSA9IG1lLmVuZCAtIHN0YXJ0O1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0cGl4ZWwgPSBtZS5sZWZ0ICsgKG1lLndpZHRoIC8gcmFuZ2UgKiAocmlnaHRWYWx1ZSAtIHN0YXJ0KSk7XG5cdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKHBpeGVsKTtcblx0XHRcdH1cblxuXHRcdFx0cGl4ZWwgPSBtZS5ib3R0b20gLSAobWUuaGVpZ2h0IC8gcmFuZ2UgKiAocmlnaHRWYWx1ZSAtIHN0YXJ0KSk7XG5cdFx0XHRyZXR1cm4gTWF0aC5yb3VuZChwaXhlbCk7XG5cdFx0fSxcblx0XHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdHZhciBpbm5lckRpbWVuc2lvbiA9IGlzSG9yaXpvbnRhbCA/IG1lLndpZHRoIDogbWUuaGVpZ2h0O1xuXHRcdFx0dmFyIG9mZnNldCA9IChpc0hvcml6b250YWwgPyBwaXhlbCAtIG1lLmxlZnQgOiBtZS5ib3R0b20gLSBwaXhlbCkgLyBpbm5lckRpbWVuc2lvbjtcblx0XHRcdHJldHVybiBtZS5zdGFydCArICgobWUuZW5kIC0gbWUuc3RhcnQpICogb2Zmc2V0KTtcblx0XHR9LFxuXHRcdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy50aWNrc0FzTnVtYmVyc1tpbmRleF0pO1xuXHRcdH1cblx0fSk7XG5cdENoYXJ0LnNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZSgnbGluZWFyJywgTGluZWFyU2NhbGUsIGRlZmF1bHRDb25maWcpO1xuXG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS5kZWZhdWx0c1wiOjE5LFwiLi4vY29yZS9jb3JlLnRpY2tzXCI6MjgsXCIuLi9oZWxwZXJzL2luZGV4XCI6Mzl9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnRpY2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgbm9vcCA9IGhlbHBlcnMubm9vcDtcblxuXHRDaGFydC5MaW5lYXJTY2FsZUJhc2UgPSBDaGFydC5TY2FsZS5leHRlbmQoe1xuXHRcdGdldFJpZ2h0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gK3ZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIENoYXJ0LlNjYWxlLnByb3RvdHlwZS5nZXRSaWdodFZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuXHRcdH0sXG5cblx0XHRoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0XHQvLyBJZiB3ZSBhcmUgZm9yY2luZyBpdCB0byBiZWdpbiBhdCAwLCBidXQgMCB3aWxsIGFscmVhZHkgYmUgcmVuZGVyZWQgb24gdGhlIGNoYXJ0LFxuXHRcdFx0Ly8gZG8gbm90aGluZyBzaW5jZSB0aGF0IHdvdWxkIG1ha2UgdGhlIGNoYXJ0IHdlaXJkLiBJZiB0aGUgdXNlciByZWFsbHkgd2FudHMgYSB3ZWlyZCBjaGFydFxuXHRcdFx0Ly8gYXhpcywgdGhleSBjYW4gbWFudWFsbHkgb3ZlcnJpZGUgaXRcblx0XHRcdGlmICh0aWNrT3B0cy5iZWdpbkF0WmVybykge1xuXHRcdFx0XHR2YXIgbWluU2lnbiA9IGhlbHBlcnMuc2lnbihtZS5taW4pO1xuXHRcdFx0XHR2YXIgbWF4U2lnbiA9IGhlbHBlcnMuc2lnbihtZS5tYXgpO1xuXG5cdFx0XHRcdGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuXHRcdFx0XHRcdC8vIG1vdmUgdGhlIHRvcCB1cCB0byAwXG5cdFx0XHRcdFx0bWUubWF4ID0gMDtcblx0XHRcdFx0fSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuXHRcdFx0XHRcdC8vIG1vdmUgdGhlIGJvdHRvbSBkb3duIHRvIDBcblx0XHRcdFx0XHRtZS5taW4gPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZXRNaW4gPSB0aWNrT3B0cy5taW4gIT09IHVuZGVmaW5lZCB8fCB0aWNrT3B0cy5zdWdnZXN0ZWRNaW4gIT09IHVuZGVmaW5lZDtcblx0XHRcdHZhciBzZXRNYXggPSB0aWNrT3B0cy5tYXggIT09IHVuZGVmaW5lZCB8fCB0aWNrT3B0cy5zdWdnZXN0ZWRNYXggIT09IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKHRpY2tPcHRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG1lLm1pbiA9IHRpY2tPcHRzLm1pbjtcblx0XHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWluICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKG1lLm1pbiA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdG1lLm1pbiA9IHRpY2tPcHRzLnN1Z2dlc3RlZE1pbjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIHRpY2tPcHRzLnN1Z2dlc3RlZE1pbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG1lLm1heCA9IHRpY2tPcHRzLm1heDtcblx0XHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWF4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdG1lLm1heCA9IHRpY2tPcHRzLnN1Z2dlc3RlZE1heDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtZS5tYXggPSBNYXRoLm1heChtZS5tYXgsIHRpY2tPcHRzLnN1Z2dlc3RlZE1heCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNldE1pbiAhPT0gc2V0TWF4KSB7XG5cdFx0XHRcdC8vIFdlIHNldCB0aGUgbWluIG9yIHRoZSBtYXggYnV0IG5vdCBib3RoLlxuXHRcdFx0XHQvLyBTbyBlbnN1cmUgdGhhdCBvdXIgcmFuZ2UgaXMgZ29vZFxuXHRcdFx0XHQvLyBJbnZlcnRlZCBvciAwIGxlbmd0aCByYW5nZSBjYW4gaGFwcGVuIHdoZW5cblx0XHRcdFx0Ly8gdGlja3MubWluIGlzIHNldCwgYW5kIG5vIGRhdGFzZXRzIGFyZSB2aXNpYmxlXG5cdFx0XHRcdGlmIChtZS5taW4gPj0gbWUubWF4KSB7XG5cdFx0XHRcdFx0aWYgKHNldE1pbikge1xuXHRcdFx0XHRcdFx0bWUubWF4ID0gbWUubWluICsgMTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bWUubWluID0gbWUubWF4IC0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG1lLm1pbiA9PT0gbWUubWF4KSB7XG5cdFx0XHRcdG1lLm1heCsrO1xuXG5cdFx0XHRcdGlmICghdGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdFx0XHRtZS5taW4tLTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0VGlja0xpbWl0OiBub29wLFxuXHRcdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogbm9vcCxcblxuXHRcdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0XHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCB0aGUgbWF4IG51bWJlciBvZiB0aWNrcyB3ZSBjYW4gc3VwcG9ydCBpdCBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZlxuXHRcdFx0Ly8gdGhlIGF4aXMgYXJlYS4gRm9yIG5vdywgd2Ugc2F5IHRoYXQgdGhlIG1pbmltdW0gdGljayBzcGFjaW5nIGluIHBpeGVscyBtdXN0IGJlIDUwXG5cdFx0XHQvLyBXZSBhbHNvIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyB0byAxMSB3aGljaCBnaXZlcyBhIG5pY2UgMTAgc3F1YXJlcyBvblxuXHRcdFx0Ly8gdGhlIGdyYXBoLiBNYWtlIHN1cmUgd2UgYWx3YXlzIGhhdmUgYXQgbGVhc3QgMiB0aWNrc1xuXHRcdFx0dmFyIG1heFRpY2tzID0gbWUuZ2V0VGlja0xpbWl0KCk7XG5cdFx0XHRtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcblxuXHRcdFx0dmFyIG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuXHRcdFx0XHRtYXhUaWNrczogbWF4VGlja3MsXG5cdFx0XHRcdG1pbjogdGlja09wdHMubWluLFxuXHRcdFx0XHRtYXg6IHRpY2tPcHRzLm1heCxcblx0XHRcdFx0c3RlcFNpemU6IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuZml4ZWRTdGVwU2l6ZSwgdGlja09wdHMuc3RlcFNpemUpXG5cdFx0XHR9O1xuXHRcdFx0dmFyIHRpY2tzID0gbWUudGlja3MgPSBUaWNrcy5nZW5lcmF0b3JzLmxpbmVhcihudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgbWUpO1xuXG5cdFx0XHRtZS5oYW5kbGVEaXJlY3Rpb25hbENoYW5nZXMoKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgd2UgbmVlZCB0byB1cGRhdGUgb3VyIG1heCBhbmQgbWluIGdpdmVuIHRoZSB0aWNrIHZhbHVlcyBzaW5jZSB3ZSBoYXZlIGV4cGFuZGVkIHRoZVxuXHRcdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0XHRtZS5tYXggPSBoZWxwZXJzLm1heCh0aWNrcyk7XG5cdFx0XHRtZS5taW4gPSBoZWxwZXJzLm1pbih0aWNrcyk7XG5cblx0XHRcdGlmICh0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblxuXHRcdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdFx0bWUuZW5kID0gbWUubWluO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRcdG1lLmVuZCA9IG1lLm1heDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHRtZS50aWNrc0FzTnVtYmVycyA9IG1lLnRpY2tzLnNsaWNlKCk7XG5cdFx0XHRtZS56ZXJvTGluZUluZGV4ID0gbWUudGlja3MuaW5kZXhPZigwKTtcblxuXHRcdFx0Q2hhcnQuU2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXHRcdH1cblx0fSk7XG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS50aWNrc1wiOjI4LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcbnZhciBUaWNrcyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS50aWNrcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0cG9zaXRpb246ICdsZWZ0JyxcblxuXHRcdC8vIGxhYmVsIHNldHRpbmdzXG5cdFx0dGlja3M6IHtcblx0XHRcdGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljXG5cdFx0fVxuXHR9O1xuXG5cdHZhciBMb2dhcml0aG1pY1NjYWxlID0gQ2hhcnQuU2NhbGUuZXh0ZW5kKHtcblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHR2YXIgZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzO1xuXHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdGZ1bmN0aW9uIElETWF0Y2hlcyhtZXRhKSB7XG5cdFx0XHRcdHJldHVybiBpc0hvcml6b250YWwgPyBtZXRhLnhBeGlzSUQgPT09IG1lLmlkIDogbWV0YS55QXhpc0lEID09PSBtZS5pZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIFJhbmdlXG5cdFx0XHRtZS5taW4gPSBudWxsO1xuXHRcdFx0bWUubWF4ID0gbnVsbDtcblx0XHRcdG1lLm1pbk5vdFplcm8gPSBudWxsO1xuXG5cdFx0XHR2YXIgaGFzU3RhY2tzID0gb3B0cy5zdGFja2VkO1xuXHRcdFx0aWYgKGhhc1N0YWNrcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRcdFx0aWYgKGhhc1N0YWNrcykge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSAmJlxuXHRcdFx0XHRcdFx0bWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRoYXNTdGFja3MgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRzLnN0YWNrZWQgfHwgaGFzU3RhY2tzKSB7XG5cdFx0XHRcdHZhciB2YWx1ZXNQZXJTdGFjayA9IHt9O1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0cywgZnVuY3Rpb24oZGF0YXNldCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXHRcdFx0XHRcdHZhciBrZXkgPSBbXG5cdFx0XHRcdFx0XHRtZXRhLnR5cGUsXG5cdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGEgc2VwYXJhdGUgc3RhY2sgZm9yIHN0YWNrPXVuZGVmaW5lZCBkYXRhc2V0cyB3aGVuIHRoZSBvcHRzLnN0YWNrZWQgaXMgdW5kZWZpbmVkXG5cdFx0XHRcdFx0XHQoKG9wdHMuc3RhY2tlZCA9PT0gdW5kZWZpbmVkICYmIG1ldGEuc3RhY2sgPT09IHVuZGVmaW5lZCkgPyBkYXRhc2V0SW5kZXggOiAnJyksXG5cdFx0XHRcdFx0XHRtZXRhLnN0YWNrXG5cdFx0XHRcdFx0XS5qb2luKCcuJyk7XG5cblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdFx0aWYgKHZhbHVlc1BlclN0YWNrW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZXNQZXJTdGFja1trZXldID0gW107XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWVzID0gdmFsdWVzUGVyU3RhY2tba2V5XTtcblx0XHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gK21lLmdldFJpZ2h0VmFsdWUocmF3VmFsdWUpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaXNOYU4odmFsdWUpIHx8IG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dmFsdWVzW2luZGV4XSA9IHZhbHVlc1tpbmRleF0gfHwgMDtcblxuXHRcdFx0XHRcdFx0XHRpZiAob3B0cy5yZWxhdGl2ZVBvaW50cykge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSAxMDA7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgbmVlZCB0byBzcGxpdCBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgc2luY2UgdGhlIGxvZyBzY2FsZSBjYW4ndCBoYW5kbGUgYSAwIGNyb3NzaW5nXG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVzW2luZGV4XSArPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2godmFsdWVzUGVyU3RhY2ssIGZ1bmN0aW9uKHZhbHVlc0ZvclR5cGUpIHtcblx0XHRcdFx0XHR2YXIgbWluVmFsID0gaGVscGVycy5taW4odmFsdWVzRm9yVHlwZSk7XG5cdFx0XHRcdFx0dmFyIG1heFZhbCA9IGhlbHBlcnMubWF4KHZhbHVlc0ZvclR5cGUpO1xuXHRcdFx0XHRcdG1lLm1pbiA9IG1lLm1pbiA9PT0gbnVsbCA/IG1pblZhbCA6IE1hdGgubWluKG1lLm1pbiwgbWluVmFsKTtcblx0XHRcdFx0XHRtZS5tYXggPSBtZS5tYXggPT09IG51bGwgPyBtYXhWYWwgOiBNYXRoLm1heChtZS5tYXgsIG1heFZhbCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSwgZnVuY3Rpb24ocmF3VmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChtZS5taW4gPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5taW4gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA8IG1lLm1pbikge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1pbiA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1heCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlID4gbWUubWF4KSB7XG5cdFx0XHRcdFx0XHRcdFx0bWUubWF4ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IDAgJiYgKG1lLm1pbk5vdFplcm8gPT09IG51bGwgfHwgdmFsdWUgPCBtZS5taW5Ob3RaZXJvKSkge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1pbk5vdFplcm8gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0bWUubWluID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMubWluLCBtZS5taW4pO1xuXHRcdFx0bWUubWF4ID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMubWF4LCBtZS5tYXgpO1xuXG5cdFx0XHRpZiAobWUubWluID09PSBtZS5tYXgpIHtcblx0XHRcdFx0aWYgKG1lLm1pbiAhPT0gMCAmJiBtZS5taW4gIT09IG51bGwpIHtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKG1lLm1pbikpIC0gMSk7XG5cdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChtZS5tYXgpKSArIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1lLm1pbiA9IDE7XG5cdFx0XHRcdFx0bWUubWF4ID0gMTA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0XHRcdHZhciBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcblx0XHRcdFx0bWluOiB0aWNrT3B0cy5taW4sXG5cdFx0XHRcdG1heDogdGlja09wdHMubWF4XG5cdFx0XHR9O1xuXHRcdFx0dmFyIHRpY2tzID0gbWUudGlja3MgPSBUaWNrcy5nZW5lcmF0b3JzLmxvZ2FyaXRobWljKGdlbmVyYXRpb25PcHRpb25zLCBtZSk7XG5cblx0XHRcdGlmICghbWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0Ly8gV2UgYXJlIGluIGEgdmVydGljYWwgb3JpZW50YXRpb24uIFRoZSB0b3AgdmFsdWUgaXMgdGhlIGhpZ2hlc3QuIFNvIHJldmVyc2UgdGhlIGFycmF5XG5cdFx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgd2UgbmVlZCB0byB1cGRhdGUgb3VyIG1heCBhbmQgbWluIGdpdmVuIHRoZSB0aWNrIHZhbHVlcyBzaW5jZSB3ZSBoYXZlIGV4cGFuZGVkIHRoZVxuXHRcdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0XHRtZS5tYXggPSBoZWxwZXJzLm1heCh0aWNrcyk7XG5cdFx0XHRtZS5taW4gPSBoZWxwZXJzLm1pbih0aWNrcyk7XG5cblx0XHRcdGlmICh0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblxuXHRcdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdFx0bWUuZW5kID0gbWUubWluO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRcdG1lLmVuZCA9IG1lLm1heDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMudGlja1ZhbHVlcyA9IHRoaXMudGlja3Muc2xpY2UoKTtcblxuXHRcdFx0Q2hhcnQuU2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwodGhpcyk7XG5cdFx0fSxcblx0XHQvLyBHZXQgdGhlIGNvcnJlY3QgdG9vbHRpcCBsYWJlbFxuXHRcdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHJldHVybiArdGhpcy5nZXRSaWdodFZhbHVlKHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0XHR9LFxuXHRcdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy50aWNrVmFsdWVzW2luZGV4XSk7XG5cdFx0fSxcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBzdGFydCA9IG1lLnN0YXJ0O1xuXHRcdFx0dmFyIG5ld1ZhbCA9ICttZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cdFx0XHR2YXIgaW5uZXJEaW1lbnNpb24sIHBpeGVsLCByYW5nZTtcblxuXHRcdFx0aWYgKG1lLmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdHJhbmdlID0gaGVscGVycy5sb2cxMChtZS5lbmQpIC0gaGVscGVycy5sb2cxMChzdGFydCk7IC8vIHRvZG86IGlmIHN0YXJ0ID09PSAwXG5cdFx0XHRcdGlmIChuZXdWYWwgPT09IDApIHtcblx0XHRcdFx0XHRwaXhlbCA9IG1lLmxlZnQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aW5uZXJEaW1lbnNpb24gPSBtZS53aWR0aDtcblx0XHRcdFx0XHRwaXhlbCA9IG1lLmxlZnQgKyAoaW5uZXJEaW1lbnNpb24gLyByYW5nZSAqIChoZWxwZXJzLmxvZzEwKG5ld1ZhbCkgLSBoZWxwZXJzLmxvZzEwKHN0YXJ0KSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBCb3R0b20gLSB0b3Agc2luY2UgcGl4ZWxzIGluY3JlYXNlIGRvd253YXJkIG9uIGEgc2NyZWVuXG5cdFx0XHRcdGlubmVyRGltZW5zaW9uID0gbWUuaGVpZ2h0O1xuXHRcdFx0XHRpZiAoc3RhcnQgPT09IDAgJiYgIXRpY2tPcHRzLnJldmVyc2UpIHtcblx0XHRcdFx0XHRyYW5nZSA9IGhlbHBlcnMubG9nMTAobWUuZW5kKSAtIGhlbHBlcnMubG9nMTAobWUubWluTm90WmVybyk7XG5cdFx0XHRcdFx0aWYgKG5ld1ZhbCA9PT0gc3RhcnQpIHtcblx0XHRcdFx0XHRcdHBpeGVsID0gbWUuYm90dG9tO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobmV3VmFsID09PSBtZS5taW5Ob3RaZXJvKSB7XG5cdFx0XHRcdFx0XHRwaXhlbCA9IG1lLmJvdHRvbSAtIGlubmVyRGltZW5zaW9uICogMC4wMjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGl4ZWwgPSBtZS5ib3R0b20gLSBpbm5lckRpbWVuc2lvbiAqIDAuMDIgLSAoaW5uZXJEaW1lbnNpb24gKiAwLjk4IC8gcmFuZ2UgKiAoaGVscGVycy5sb2cxMChuZXdWYWwpIC0gaGVscGVycy5sb2cxMChtZS5taW5Ob3RaZXJvKSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChtZS5lbmQgPT09IDAgJiYgdGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0XHRcdHJhbmdlID0gaGVscGVycy5sb2cxMChtZS5zdGFydCkgLSBoZWxwZXJzLmxvZzEwKG1lLm1pbk5vdFplcm8pO1xuXHRcdFx0XHRcdGlmIChuZXdWYWwgPT09IG1lLmVuZCkge1xuXHRcdFx0XHRcdFx0cGl4ZWwgPSBtZS50b3A7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChuZXdWYWwgPT09IG1lLm1pbk5vdFplcm8pIHtcblx0XHRcdFx0XHRcdHBpeGVsID0gbWUudG9wICsgaW5uZXJEaW1lbnNpb24gKiAwLjAyO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwaXhlbCA9IG1lLnRvcCArIGlubmVyRGltZW5zaW9uICogMC4wMiArIChpbm5lckRpbWVuc2lvbiAqIDAuOTggLyByYW5nZSAqIChoZWxwZXJzLmxvZzEwKG5ld1ZhbCkgLSBoZWxwZXJzLmxvZzEwKG1lLm1pbk5vdFplcm8pKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKG5ld1ZhbCA9PT0gMCkge1xuXHRcdFx0XHRcdHBpeGVsID0gdGlja09wdHMucmV2ZXJzZSA/IG1lLnRvcCA6IG1lLmJvdHRvbTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyYW5nZSA9IGhlbHBlcnMubG9nMTAobWUuZW5kKSAtIGhlbHBlcnMubG9nMTAoc3RhcnQpO1xuXHRcdFx0XHRcdGlubmVyRGltZW5zaW9uID0gbWUuaGVpZ2h0O1xuXHRcdFx0XHRcdHBpeGVsID0gbWUuYm90dG9tIC0gKGlubmVyRGltZW5zaW9uIC8gcmFuZ2UgKiAoaGVscGVycy5sb2cxMChuZXdWYWwpIC0gaGVscGVycy5sb2cxMChzdGFydCkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBpeGVsO1xuXHRcdH0sXG5cdFx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgcmFuZ2UgPSBoZWxwZXJzLmxvZzEwKG1lLmVuZCkgLSBoZWxwZXJzLmxvZzEwKG1lLnN0YXJ0KTtcblx0XHRcdHZhciB2YWx1ZSwgaW5uZXJEaW1lbnNpb247XG5cblx0XHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRpbm5lckRpbWVuc2lvbiA9IG1lLndpZHRoO1xuXHRcdFx0XHR2YWx1ZSA9IG1lLnN0YXJ0ICogTWF0aC5wb3coMTAsIChwaXhlbCAtIG1lLmxlZnQpICogcmFuZ2UgLyBpbm5lckRpbWVuc2lvbik7XG5cdFx0XHR9IGVsc2UgeyAvLyB0b2RvOiBpZiBzdGFydCA9PT0gMFxuXHRcdFx0XHRpbm5lckRpbWVuc2lvbiA9IG1lLmhlaWdodDtcblx0XHRcdFx0dmFsdWUgPSBNYXRoLnBvdygxMCwgKG1lLmJvdHRvbSAtIHBpeGVsKSAqIHJhbmdlIC8gaW5uZXJEaW1lbnNpb24pIC8gbWUuc3RhcnQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHR9KTtcblx0Q2hhcnQuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKCdsb2dhcml0aG1pYycsIExvZ2FyaXRobWljU2NhbGUsIGRlZmF1bHRDb25maWcpO1xuXG59O1xuXG59LHtcIi4uL2NvcmUvY29yZS50aWNrc1wiOjI4LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnRpY2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBkZWZhdWx0cy5nbG9iYWw7XG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblxuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHRvIGFuaW1hdGUgc2NhbGluZyB0aGUgY2hhcnQgZnJvbSB0aGUgY2VudHJlXG5cdFx0YW5pbWF0ZTogdHJ1ZSxcblx0XHRwb3NpdGlvbjogJ2NoYXJ0QXJlYScsXG5cblx0XHRhbmdsZUxpbmVzOiB7XG5cdFx0XHRkaXNwbGF5OiB0cnVlLFxuXHRcdFx0Y29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMSknLFxuXHRcdFx0bGluZVdpZHRoOiAxXG5cdFx0fSxcblxuXHRcdGdyaWRMaW5lczoge1xuXHRcdFx0Y2lyY3VsYXI6IGZhbHNlXG5cdFx0fSxcblxuXHRcdC8vIGxhYmVsIHNldHRpbmdzXG5cdFx0dGlja3M6IHtcblx0XHRcdC8vIEJvb2xlYW4gLSBTaG93IGEgYmFja2Ryb3AgdG8gdGhlIHNjYWxlIGxhYmVsXG5cdFx0XHRzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcblxuXHRcdFx0Ly8gU3RyaW5nIC0gVGhlIGNvbG91ciBvZiB0aGUgbGFiZWwgYmFja2Ryb3Bcblx0XHRcdGJhY2tkcm9wQ29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNzUpJyxcblxuXHRcdFx0Ly8gTnVtYmVyIC0gVGhlIGJhY2tkcm9wIHBhZGRpbmcgYWJvdmUgJiBiZWxvdyB0aGUgbGFiZWwgaW4gcGl4ZWxzXG5cdFx0XHRiYWNrZHJvcFBhZGRpbmdZOiAyLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyB0byB0aGUgc2lkZSBvZiB0aGUgbGFiZWwgaW4gcGl4ZWxzXG5cdFx0XHRiYWNrZHJvcFBhZGRpbmdYOiAyLFxuXG5cdFx0XHRjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0XHR9LFxuXG5cdFx0cG9pbnRMYWJlbHM6IHtcblx0XHRcdC8vIEJvb2xlYW4gLSBpZiB0cnVlLCBzaG93IHBvaW50IGxhYmVsc1xuXHRcdFx0ZGlzcGxheTogdHJ1ZSxcblxuXHRcdFx0Ly8gTnVtYmVyIC0gUG9pbnQgbGFiZWwgZm9udCBzaXplIGluIHBpeGVsc1xuXHRcdFx0Zm9udFNpemU6IDEwLFxuXG5cdFx0XHQvLyBGdW5jdGlvbiAtIFVzZWQgdG8gY29udmVydCBwb2ludCBsYWJlbHNcblx0XHRcdGNhbGxiYWNrOiBmdW5jdGlvbihsYWJlbCkge1xuXHRcdFx0XHRyZXR1cm4gbGFiZWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldFZhbHVlQ291bnQoc2NhbGUpIHtcblx0XHR2YXIgb3B0cyA9IHNjYWxlLm9wdGlvbnM7XG5cdFx0cmV0dXJuIG9wdHMuYW5nbGVMaW5lcy5kaXNwbGF5IHx8IG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSA/IHNjYWxlLmNoYXJ0LmRhdGEubGFiZWxzLmxlbmd0aCA6IDA7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQb2ludExhYmVsRm9udE9wdGlvbnMoc2NhbGUpIHtcblx0XHR2YXIgcG9pbnRMYWJlbE9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnBvaW50TGFiZWxzO1xuXHRcdHZhciBmb250U2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQocG9pbnRMYWJlbE9wdGlvbnMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0dmFyIGZvbnRTdHlsZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQocG9pbnRMYWJlbE9wdGlvbnMuZm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHR2YXIgZm9udEZhbWlseSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQocG9pbnRMYWJlbE9wdGlvbnMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpO1xuXHRcdHZhciBmb250ID0gaGVscGVycy5mb250U3RyaW5nKGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHNpemU6IGZvbnRTaXplLFxuXHRcdFx0c3R5bGU6IGZvbnRTdHlsZSxcblx0XHRcdGZhbWlseTogZm9udEZhbWlseSxcblx0XHRcdGZvbnQ6IGZvbnRcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnRTaXplLCBsYWJlbCkge1xuXHRcdGlmIChoZWxwZXJzLmlzQXJyYXkobGFiZWwpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR3OiBoZWxwZXJzLmxvbmdlc3RUZXh0KGN0eCwgY3R4LmZvbnQsIGxhYmVsKSxcblx0XHRcdFx0aDogKGxhYmVsLmxlbmd0aCAqIGZvbnRTaXplKSArICgobGFiZWwubGVuZ3RoIC0gMSkgKiAxLjUgKiBmb250U2l6ZSlcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHc6IGN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGgsXG5cdFx0XHRoOiBmb250U2l6ZVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvcywgc2l6ZSwgbWluLCBtYXgpIHtcblx0XHRpZiAoYW5nbGUgPT09IG1pbiB8fCBhbmdsZSA9PT0gbWF4KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzdGFydDogcG9zIC0gKHNpemUgLyAyKSxcblx0XHRcdFx0ZW5kOiBwb3MgKyAoc2l6ZSAvIDIpXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSBpZiAoYW5nbGUgPCBtaW4gfHwgYW5nbGUgPiBtYXgpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN0YXJ0OiBwb3MgLSBzaXplIC0gNSxcblx0XHRcdFx0ZW5kOiBwb3Ncblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHN0YXJ0OiBwb3MsXG5cdFx0XHRlbmQ6IHBvcyArIHNpemUgKyA1XG5cdFx0fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZml0IGEgcmFkaWFsIGxpbmVhciBzY2FsZSB3aXRoIHBvaW50IGxhYmVsc1xuXHQgKi9cblx0ZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG5cdFx0Lypcblx0XHQgKiBSaWdodCwgdGhpcyBpcyByZWFsbHkgY29uZnVzaW5nIGFuZCB0aGVyZSBpcyBhIGxvdCBvZiBtYXRocyBnb2luZyBvbiBoZXJlXG5cdFx0ICogVGhlIGdpc3Qgb2YgdGhlIHByb2JsZW0gaXMgaGVyZTogaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbm5uaWNrLzY5NmNjOWM1NWY0YjBiZWI4ZmU5XG5cdFx0ICpcblx0XHQgKiBSZWFjdGlvbjogaHR0cHM6Ly9kbC5kcm9wYm94dXNlcmNvbnRlbnQuY29tL3UvMzQ2MDEzNjMvdG9vbXVjaHNjaWVuY2UuZ2lmXG5cdFx0ICpcblx0XHQgKiBTb2x1dGlvbjpcblx0XHQgKlxuXHRcdCAqIFdlIGFzc3VtZSB0aGUgcmFkaXVzIG9mIHRoZSBwb2x5Z29uIGlzIGhhbGYgdGhlIHNpemUgb2YgdGhlIGNhbnZhcyBhdCBmaXJzdFxuXHRcdCAqIGF0IGVhY2ggaW5kZXggd2UgY2hlY2sgaWYgdGhlIHRleHQgb3ZlcmxhcHMuXG5cdFx0ICpcblx0XHQgKiBXaGVyZSBpdCBkb2VzLCB3ZSBzdG9yZSB0aGF0IGFuZ2xlIGFuZCB0aGF0IGluZGV4LlxuXHRcdCAqXG5cdFx0ICogQWZ0ZXIgZmluZGluZyB0aGUgbGFyZ2VzdCBpbmRleCBhbmQgYW5nbGUgd2UgY2FsY3VsYXRlIGhvdyBtdWNoIHdlIG5lZWQgdG8gcmVtb3ZlXG5cdFx0ICogZnJvbSB0aGUgc2hhcGUgcmFkaXVzIHRvIG1vdmUgdGhlIHBvaW50IGlud2FyZHMgYnkgdGhhdCB4LlxuXHRcdCAqXG5cdFx0ICogV2UgYXZlcmFnZSB0aGUgbGVmdCBhbmQgcmlnaHQgZGlzdGFuY2VzIHRvIGdldCB0aGUgbWF4aW11bSBzaGFwZSByYWRpdXMgdGhhdCBjYW4gZml0IGluIHRoZSBib3hcblx0XHQgKiBhbG9uZyB3aXRoIGxhYmVscy5cblx0XHQgKlxuXHRcdCAqIE9uY2Ugd2UgaGF2ZSB0aGF0LCB3ZSBjYW4gZmluZCB0aGUgY2VudHJlIHBvaW50IGZvciB0aGUgY2hhcnQsIGJ5IHRha2luZyB0aGUgeCB0ZXh0IHByb3RydXNpb25cblx0XHQgKiBvbiBlYWNoIHNpZGUsIHJlbW92aW5nIHRoYXQgZnJvbSB0aGUgc2l6ZSwgaGFsdmluZyBpdCBhbmQgYWRkaW5nIHRoZSBsZWZ0IHggcHJvdHJ1c2lvbiB3aWR0aC5cblx0XHQgKlxuXHRcdCAqIFRoaXMgd2lsbCBtZWFuIHdlIGhhdmUgYSBzaGFwZSBmaXR0ZWQgdG8gdGhlIGNhbnZhcywgYXMgbGFyZ2UgYXMgaXQgY2FuIGJlIHdpdGggdGhlIGxhYmVsc1xuXHRcdCAqIGFuZCBwb3NpdGlvbiBpdCBpbiB0aGUgbW9zdCBzcGFjZSBlZmZpY2llbnQgbWFubmVyXG5cdFx0ICpcblx0XHQgKiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My95ZWFoc2NpZW5jZS5naWZcblx0XHQgKi9cblxuXHRcdHZhciBwbEZvbnQgPSBnZXRQb2ludExhYmVsRm9udE9wdGlvbnMoc2NhbGUpO1xuXG5cdFx0Ly8gR2V0IG1heGltdW0gcmFkaXVzIG9mIHRoZSBwb2x5Z29uLiBFaXRoZXIgaGFsZiB0aGUgaGVpZ2h0IChtaW51cyB0aGUgdGV4dCB3aWR0aCkgb3IgaGFsZiB0aGUgd2lkdGguXG5cdFx0Ly8gVXNlIHRoaXMgdG8gY2FsY3VsYXRlIHRoZSBvZmZzZXQgKyBjaGFuZ2UuIC0gTWFrZSBzdXJlIEwvUiBwcm90cnVzaW9uIGlzIGF0IGxlYXN0IDAgdG8gc3RvcCBpc3N1ZXMgd2l0aCBjZW50cmUgcG9pbnRzXG5cdFx0dmFyIGxhcmdlc3RQb3NzaWJsZVJhZGl1cyA9IE1hdGgubWluKHNjYWxlLmhlaWdodCAvIDIsIHNjYWxlLndpZHRoIC8gMik7XG5cdFx0dmFyIGZ1cnRoZXN0TGltaXRzID0ge1xuXHRcdFx0cjogc2NhbGUud2lkdGgsXG5cdFx0XHRsOiAwLFxuXHRcdFx0dDogc2NhbGUuaGVpZ2h0LFxuXHRcdFx0YjogMFxuXHRcdH07XG5cdFx0dmFyIGZ1cnRoZXN0QW5nbGVzID0ge307XG5cdFx0dmFyIGksIHRleHRTaXplLCBwb2ludFBvc2l0aW9uO1xuXG5cdFx0c2NhbGUuY3R4LmZvbnQgPSBwbEZvbnQuZm9udDtcblx0XHRzY2FsZS5fcG9pbnRMYWJlbFNpemVzID0gW107XG5cblx0XHR2YXIgdmFsdWVDb3VudCA9IGdldFZhbHVlQ291bnQoc2NhbGUpO1xuXHRcdGZvciAoaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcblx0XHRcdHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIGxhcmdlc3RQb3NzaWJsZVJhZGl1cyk7XG5cdFx0XHR0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQuc2l6ZSwgc2NhbGUucG9pbnRMYWJlbHNbaV0gfHwgJycpO1xuXHRcdFx0c2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuXG5cdFx0XHQvLyBBZGQgcXVhcnRlciBjaXJjbGUgdG8gbWFrZSBkZWdyZWUgMCBtZWFuIHRvcCBvZiBjaXJjbGVcblx0XHRcdHZhciBhbmdsZVJhZGlhbnMgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKGkpO1xuXHRcdFx0dmFyIGFuZ2xlID0gaGVscGVycy50b0RlZ3JlZXMoYW5nbGVSYWRpYW5zKSAlIDM2MDtcblx0XHRcdHZhciBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG5cdFx0XHR2YXIgdkxpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi55LCB0ZXh0U2l6ZS5oLCA5MCwgMjcwKTtcblxuXHRcdFx0aWYgKGhMaW1pdHMuc3RhcnQgPCBmdXJ0aGVzdExpbWl0cy5sKSB7XG5cdFx0XHRcdGZ1cnRoZXN0TGltaXRzLmwgPSBoTGltaXRzLnN0YXJ0O1xuXHRcdFx0XHRmdXJ0aGVzdEFuZ2xlcy5sID0gYW5nbGVSYWRpYW5zO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaExpbWl0cy5lbmQgPiBmdXJ0aGVzdExpbWl0cy5yKSB7XG5cdFx0XHRcdGZ1cnRoZXN0TGltaXRzLnIgPSBoTGltaXRzLmVuZDtcblx0XHRcdFx0ZnVydGhlc3RBbmdsZXMuciA9IGFuZ2xlUmFkaWFucztcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZMaW1pdHMuc3RhcnQgPCBmdXJ0aGVzdExpbWl0cy50KSB7XG5cdFx0XHRcdGZ1cnRoZXN0TGltaXRzLnQgPSB2TGltaXRzLnN0YXJ0O1xuXHRcdFx0XHRmdXJ0aGVzdEFuZ2xlcy50ID0gYW5nbGVSYWRpYW5zO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodkxpbWl0cy5lbmQgPiBmdXJ0aGVzdExpbWl0cy5iKSB7XG5cdFx0XHRcdGZ1cnRoZXN0TGltaXRzLmIgPSB2TGltaXRzLmVuZDtcblx0XHRcdFx0ZnVydGhlc3RBbmdsZXMuYiA9IGFuZ2xlUmFkaWFucztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRzY2FsZS5zZXRSZWR1Y3Rpb25zKGxhcmdlc3RQb3NzaWJsZVJhZGl1cywgZnVydGhlc3RMaW1pdHMsIGZ1cnRoZXN0QW5nbGVzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgZnVuY3Rpb24gdG8gZml0IGEgcmFkaWFsIGxpbmVhciBzY2FsZSB3aXRoIG5vIHBvaW50IGxhYmVsc1xuXHQgKi9cblx0ZnVuY3Rpb24gZml0KHNjYWxlKSB7XG5cdFx0dmFyIGxhcmdlc3RQb3NzaWJsZVJhZGl1cyA9IE1hdGgubWluKHNjYWxlLmhlaWdodCAvIDIsIHNjYWxlLndpZHRoIC8gMik7XG5cdFx0c2NhbGUuZHJhd2luZ0FyZWEgPSBNYXRoLnJvdW5kKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyk7XG5cdFx0c2NhbGUuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuXHRcdGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG5cdFx0XHRyZXR1cm4gJ2NlbnRlcic7XG5cdFx0fSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuXHRcdFx0cmV0dXJuICdsZWZ0Jztcblx0XHR9XG5cblx0XHRyZXR1cm4gJ3JpZ2h0Jztcblx0fVxuXG5cdGZ1bmN0aW9uIGZpbGxUZXh0KGN0eCwgdGV4dCwgcG9zaXRpb24sIGZvbnRTaXplKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheSh0ZXh0KSkge1xuXHRcdFx0dmFyIHkgPSBwb3NpdGlvbi55O1xuXHRcdFx0dmFyIHNwYWNpbmcgPSAxLjUgKiBmb250U2l6ZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0ZXh0W2ldLCBwb3NpdGlvbi54LCB5KTtcblx0XHRcdFx0eSArPSBzcGFjaW5nO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHguZmlsbFRleHQodGV4dCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gYWRqdXN0UG9pbnRQb3NpdGlvbkZvckxhYmVsSGVpZ2h0KGFuZ2xlLCB0ZXh0U2l6ZSwgcG9zaXRpb24pIHtcblx0XHRpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcblx0XHRcdHBvc2l0aW9uLnkgLT0gKHRleHRTaXplLmggLyAyKTtcblx0XHR9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcblx0XHRcdHBvc2l0aW9uLnkgLT0gdGV4dFNpemUuaDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUpIHtcblx0XHR2YXIgY3R4ID0gc2NhbGUuY3R4O1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0dmFyIG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuXHRcdHZhciBhbmdsZUxpbmVPcHRzID0gb3B0cy5hbmdsZUxpbmVzO1xuXHRcdHZhciBwb2ludExhYmVsT3B0cyA9IG9wdHMucG9pbnRMYWJlbHM7XG5cblx0XHRjdHgubGluZVdpZHRoID0gYW5nbGVMaW5lT3B0cy5saW5lV2lkdGg7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gYW5nbGVMaW5lT3B0cy5jb2xvcjtcblxuXHRcdHZhciBvdXRlckRpc3RhbmNlID0gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4KTtcblxuXHRcdC8vIFBvaW50IExhYmVsIEZvbnRcblx0XHR2YXIgcGxGb250ID0gZ2V0UG9pbnRMYWJlbEZvbnRPcHRpb25zKHNjYWxlKTtcblxuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblxuXHRcdGZvciAodmFyIGkgPSBnZXRWYWx1ZUNvdW50KHNjYWxlKSAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRpZiAoYW5nbGVMaW5lT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdHZhciBvdXRlclBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlKTtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIpO1xuXHRcdFx0XHRjdHgubGluZVRvKG91dGVyUG9zaXRpb24ueCwgb3V0ZXJQb3NpdGlvbi55KTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwb2ludExhYmVsT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdC8vIEV4dHJhIDNweCBvdXQgZm9yIHNvbWUgbGFiZWwgc3BhY2luZ1xuXHRcdFx0XHR2YXIgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgNSk7XG5cblx0XHRcdFx0Ly8gS2VlcCB0aGlzIGluIGxvb3Agc2luY2Ugd2UgbWF5IHN1cHBvcnQgYXJyYXkgcHJvcGVydGllcyBoZXJlXG5cdFx0XHRcdHZhciBwb2ludExhYmVsRm9udENvbG9yID0gdmFsdWVPckRlZmF1bHQocG9pbnRMYWJlbE9wdHMuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHRcdFx0Y3R4LmZvbnQgPSBwbEZvbnQuZm9udDtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHBvaW50TGFiZWxGb250Q29sb3I7XG5cblx0XHRcdFx0dmFyIGFuZ2xlUmFkaWFucyA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSk7XG5cdFx0XHRcdHZhciBhbmdsZSA9IGhlbHBlcnMudG9EZWdyZWVzKGFuZ2xlUmFkaWFucyk7XG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSk7XG5cdFx0XHRcdGFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodChhbmdsZSwgc2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uKTtcblx0XHRcdFx0ZmlsbFRleHQoY3R4LCBzY2FsZS5wb2ludExhYmVsc1tpXSB8fCAnJywgcG9pbnRMYWJlbFBvc2l0aW9uLCBwbEZvbnQuc2l6ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBpbmRleCkge1xuXHRcdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVPcHRzLmNvbG9yLCBpbmRleCAtIDEpO1xuXHRcdGN0eC5saW5lV2lkdGggPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZU9wdHMubGluZVdpZHRoLCBpbmRleCAtIDEpO1xuXG5cdFx0aWYgKHNjYWxlLm9wdGlvbnMuZ3JpZExpbmVzLmNpcmN1bGFyKSB7XG5cdFx0XHQvLyBEcmF3IGNpcmN1bGFyIGFyY3MgYmV0d2VlbiB0aGUgcG9pbnRzXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBEcmF3IHN0cmFpZ2h0IGxpbmVzIGNvbm5lY3RpbmcgZWFjaCBpbmRleFxuXHRcdFx0dmFyIHZhbHVlQ291bnQgPSBnZXRWYWx1ZUNvdW50KHNjYWxlKTtcblxuXHRcdFx0aWYgKHZhbHVlQ291bnQgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHR2YXIgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcblx0XHRcdGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuXHRcdFx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuXHRcdFx0XHRjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIG51bWJlck9yWmVybyhwYXJhbSkge1xuXHRcdHJldHVybiBoZWxwZXJzLmlzTnVtYmVyKHBhcmFtKSA/IHBhcmFtIDogMDtcblx0fVxuXG5cdHZhciBMaW5lYXJSYWRpYWxTY2FsZSA9IENoYXJ0LkxpbmVhclNjYWxlQmFzZS5leHRlbmQoe1xuXHRcdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cdFx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblx0XHRcdG1lLnhDZW50ZXIgPSBNYXRoLnJvdW5kKG1lLndpZHRoIC8gMik7XG5cdFx0XHRtZS55Q2VudGVyID0gTWF0aC5yb3VuZChtZS5oZWlnaHQgLyAyKTtcblxuXHRcdFx0dmFyIG1pblNpemUgPSBoZWxwZXJzLm1pbihbbWUuaGVpZ2h0LCBtZS53aWR0aF0pO1xuXHRcdFx0dmFyIHRpY2tGb250U2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRtZS5kcmF3aW5nQXJlYSA9IG9wdHMuZGlzcGxheSA/IChtaW5TaXplIC8gMikgLSAodGlja0ZvbnRTaXplIC8gMiArIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1kpIDogKG1pblNpemUgLyAyKTtcblx0XHR9LFxuXHRcdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRcdHZhciBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChjaGFydC5kYXRhLmRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblxuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gK21lLmdldFJpZ2h0VmFsdWUocmF3VmFsdWUpO1xuXHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKHZhbHVlLCBtaW4pO1xuXHRcdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgodmFsdWUsIG1heCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZS5taW4gPSAobWluID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPyAwIDogbWluKTtcblx0XHRcdG1lLm1heCA9IChtYXggPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA/IDAgOiBtYXgpO1xuXG5cdFx0XHQvLyBDb21tb24gYmFzZSBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgdGlja3MubWluLCB0aWNrcy5tYXgsIHRpY2tzLmJlZ2luQXRaZXJvXG5cdFx0XHRtZS5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdFx0fSxcblx0XHRnZXRUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuXHRcdFx0dmFyIHRpY2tGb250U2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRyZXR1cm4gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCA/IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgOiAxMSwgTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyAoMS41ICogdGlja0ZvbnRTaXplKSkpO1xuXHRcdH0sXG5cdFx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0Q2hhcnQuTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKG1lKTtcblxuXHRcdFx0Ly8gUG9pbnQgbGFiZWxzXG5cdFx0XHRtZS5wb2ludExhYmVscyA9IG1lLmNoYXJ0LmRhdGEubGFiZWxzLm1hcChtZS5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBtZSk7XG5cdFx0fSxcblx0XHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRyZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0fSxcblx0XHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG5cdFx0XHRcdGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpdCh0aGlzKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8qKlxuXHRcdCAqIFNldCByYWRpdXMgcmVkdWN0aW9ucyBhbmQgZGV0ZXJtaW5lIG5ldyByYWRpdXMgYW5kIGNlbnRlciBwb2ludFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0c2V0UmVkdWN0aW9uczogZnVuY3Rpb24obGFyZ2VzdFBvc3NpYmxlUmFkaXVzLCBmdXJ0aGVzdExpbWl0cywgZnVydGhlc3RBbmdsZXMpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uTGVmdCA9IGZ1cnRoZXN0TGltaXRzLmwgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5sKTtcblx0XHRcdHZhciByYWRpdXNSZWR1Y3Rpb25SaWdodCA9IE1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLnIgLSBtZS53aWR0aCwgMCkgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5yKTtcblx0XHRcdHZhciByYWRpdXNSZWR1Y3Rpb25Ub3AgPSAtZnVydGhlc3RMaW1pdHMudCAvIE1hdGguY29zKGZ1cnRoZXN0QW5nbGVzLnQpO1xuXHRcdFx0dmFyIHJhZGl1c1JlZHVjdGlvbkJvdHRvbSA9IC1NYXRoLm1heChmdXJ0aGVzdExpbWl0cy5iIC0gbWUuaGVpZ2h0LCAwKSAvIE1hdGguY29zKGZ1cnRoZXN0QW5nbGVzLmIpO1xuXG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvbkxlZnQpO1xuXHRcdFx0cmFkaXVzUmVkdWN0aW9uUmlnaHQgPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uUmlnaHQpO1xuXHRcdFx0cmFkaXVzUmVkdWN0aW9uVG9wID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvblRvcCk7XG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25Cb3R0b20gPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblxuXHRcdFx0bWUuZHJhd2luZ0FyZWEgPSBNYXRoLm1pbihcblx0XHRcdFx0TWF0aC5yb3VuZChsYXJnZXN0UG9zc2libGVSYWRpdXMgLSAocmFkaXVzUmVkdWN0aW9uTGVmdCArIHJhZGl1c1JlZHVjdGlvblJpZ2h0KSAvIDIpLFxuXHRcdFx0XHRNYXRoLnJvdW5kKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25Ub3AgKyByYWRpdXNSZWR1Y3Rpb25Cb3R0b20pIC8gMikpO1xuXHRcdFx0bWUuc2V0Q2VudGVyUG9pbnQocmFkaXVzUmVkdWN0aW9uTGVmdCwgcmFkaXVzUmVkdWN0aW9uUmlnaHQsIHJhZGl1c1JlZHVjdGlvblRvcCwgcmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblx0XHR9LFxuXHRcdHNldENlbnRlclBvaW50OiBmdW5jdGlvbihsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtYXhSaWdodCA9IG1lLndpZHRoIC0gcmlnaHRNb3ZlbWVudCAtIG1lLmRyYXdpbmdBcmVhO1xuXHRcdFx0dmFyIG1heExlZnQgPSBsZWZ0TW92ZW1lbnQgKyBtZS5kcmF3aW5nQXJlYTtcblx0XHRcdHZhciBtYXhUb3AgPSB0b3BNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdFx0dmFyIG1heEJvdHRvbSA9IG1lLmhlaWdodCAtIGJvdHRvbU1vdmVtZW50IC0gbWUuZHJhd2luZ0FyZWE7XG5cblx0XHRcdG1lLnhDZW50ZXIgPSBNYXRoLnJvdW5kKCgobWF4TGVmdCArIG1heFJpZ2h0KSAvIDIpICsgbWUubGVmdCk7XG5cdFx0XHRtZS55Q2VudGVyID0gTWF0aC5yb3VuZCgoKG1heFRvcCArIG1heEJvdHRvbSkgLyAyKSArIG1lLnRvcCk7XG5cdFx0fSxcblxuXHRcdGdldEluZGV4QW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHR2YXIgYW5nbGVNdWx0aXBsaWVyID0gKE1hdGguUEkgKiAyKSAvIGdldFZhbHVlQ291bnQodGhpcyk7XG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IHRoaXMuY2hhcnQub3B0aW9ucyAmJiB0aGlzLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZSA/XG5cdFx0XHRcdHRoaXMuY2hhcnQub3B0aW9ucy5zdGFydEFuZ2xlIDpcblx0XHRcdFx0MDtcblxuXHRcdFx0dmFyIHN0YXJ0QW5nbGVSYWRpYW5zID0gc3RhcnRBbmdsZSAqIE1hdGguUEkgKiAyIC8gMzYwO1xuXG5cdFx0XHQvLyBTdGFydCBmcm9tIHRoZSB0b3AgaW5zdGVhZCBvZiByaWdodCwgc28gcmVtb3ZlIGEgcXVhcnRlciBvZiB0aGUgY2lyY2xlXG5cdFx0XHRyZXR1cm4gaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyBzdGFydEFuZ2xlUmFkaWFucztcblx0XHR9LFxuXHRcdGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiAwOyAvLyBudWxsIGFsd2F5cyBpbiBjZW50ZXJcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBpbnRvIGFjY291bnQgaGFsZiBmb250IHNpemUgKyB0aGUgeVBhZGRpbmcgb2YgdGhlIHRvcCB2YWx1ZVxuXHRcdFx0dmFyIHNjYWxpbmdGYWN0b3IgPSBtZS5kcmF3aW5nQXJlYSAvIChtZS5tYXggLSBtZS5taW4pO1xuXHRcdFx0aWYgKG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZSkge1xuXHRcdFx0XHRyZXR1cm4gKG1lLm1heCAtIHZhbHVlKSAqIHNjYWxpbmdGYWN0b3I7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHZhbHVlIC0gbWUubWluKSAqIHNjYWxpbmdGYWN0b3I7XG5cdFx0fSxcblx0XHRnZXRQb2ludFBvc2l0aW9uOiBmdW5jdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRoaXNBbmdsZSA9IG1lLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gKE1hdGguUEkgLyAyKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IE1hdGgucm91bmQoTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyBtZS54Q2VudGVyLFxuXHRcdFx0XHR5OiBNYXRoLnJvdW5kKE1hdGguc2luKHRoaXNBbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIpICsgbWUueUNlbnRlclxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZTogZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG5cdFx0fSxcblxuXHRcdGdldEJhc2VQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHRcdHZhciBtYXggPSBtZS5tYXg7XG5cblx0XHRcdHJldHVybiBtZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCxcblx0XHRcdFx0bWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdFx0bWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcblx0XHRcdFx0bWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcblx0XHRcdFx0MCk7XG5cdFx0fSxcblxuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciBncmlkTGluZU9wdHMgPSBvcHRzLmdyaWRMaW5lcztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cdFx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0O1xuXG5cdFx0XHRpZiAob3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0XHRcdHZhciBzdGFydEFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKDApO1xuXG5cdFx0XHRcdC8vIFRpY2sgRm9udFxuXHRcdFx0XHR2YXIgdGlja0ZvbnRTaXplID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRcdHZhciB0aWNrRm9udFN0eWxlID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdFx0dmFyIHRpY2tGb250RmFtaWx5ID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpO1xuXHRcdFx0XHR2YXIgdGlja0xhYmVsRm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyh0aWNrRm9udFNpemUsIHRpY2tGb250U3R5bGUsIHRpY2tGb250RmFtaWx5KTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2gobWUudGlja3MsIGZ1bmN0aW9uKGxhYmVsLCBpbmRleCkge1xuXHRcdFx0XHRcdC8vIERvbid0IGRyYXcgYSBjZW50cmUgdmFsdWUgKGlmIGl0IGlzIG1pbmltdW0pXG5cdFx0XHRcdFx0aWYgKGluZGV4ID4gMCB8fCB0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRcdFx0XHR2YXIgeUNlbnRlck9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG1lLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cblx0XHRcdFx0XHRcdC8vIERyYXcgY2lyY3VsYXIgbGluZXMgYXJvdW5kIHRoZSBzY2FsZVxuXHRcdFx0XHRcdFx0aWYgKGdyaWRMaW5lT3B0cy5kaXNwbGF5ICYmIGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGRyYXdSYWRpdXNMaW5lKG1lLCBncmlkTGluZU9wdHMsIHlDZW50ZXJPZmZzZXQsIGluZGV4KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHRpY2tPcHRzLmRpc3BsYXkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRpY2tGb250Q29sb3IgPSB2YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250Q29sb3IsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdFx0XHRcdFx0XHRjdHguZm9udCA9IHRpY2tMYWJlbEZvbnQ7XG5cblx0XHRcdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0XHRcdFx0Y3R4LnRyYW5zbGF0ZShtZS54Q2VudGVyLCBtZS55Q2VudGVyKTtcblx0XHRcdFx0XHRcdFx0Y3R4LnJvdGF0ZShzdGFydEFuZ2xlKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAodGlja09wdHMuc2hvd0xhYmVsQmFja2Ryb3ApIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgbGFiZWxXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRpY2tPcHRzLmJhY2tkcm9wQ29sb3I7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KFxuXHRcdFx0XHRcdFx0XHRcdFx0LWxhYmVsV2lkdGggLyAyIC0gdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCxcblx0XHRcdFx0XHRcdFx0XHRcdC15Q2VudGVyT2Zmc2V0IC0gdGlja0ZvbnRTaXplIC8gMiAtIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1ksXG5cdFx0XHRcdFx0XHRcdFx0XHRsYWJlbFdpZHRoICsgdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCAqIDIsXG5cdFx0XHRcdFx0XHRcdFx0XHR0aWNrRm9udFNpemUgKyB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZICogMlxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRpY2tGb250Q29sb3I7XG5cdFx0XHRcdFx0XHRcdGN0eC5maWxsVGV4dChsYWJlbCwgMCwgLXlDZW50ZXJPZmZzZXQpO1xuXHRcdFx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKG9wdHMuYW5nbGVMaW5lcy5kaXNwbGF5IHx8IG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuXHRcdFx0XHRcdGRyYXdQb2ludExhYmVscyhtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRDaGFydC5zY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoJ3JhZGlhbExpbmVhcicsIExpbmVhclJhZGlhbFNjYWxlLCBkZWZhdWx0Q29uZmlnKTtcblxufTtcblxufSx7XCIuLi9jb3JlL2NvcmUuZGVmYXVsdHNcIjoxOSxcIi4uL2NvcmUvY29yZS50aWNrc1wiOjI4LFwiLi4vaGVscGVycy9pbmRleFwiOjM5fV0sNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLyogZ2xvYmFsIHdpbmRvdzogZmFsc2UgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xubW9tZW50ID0gdHlwZW9mIG1vbWVudCA9PT0gJ2Z1bmN0aW9uJyA/IG1vbWVudCA6IHdpbmRvdy5tb21lbnQ7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbi8vIEludGVnZXIgY29uc3RhbnRzIGFyZSBmcm9tIHRoZSBFUzYgc3BlYy5cbnZhciBNSU5fSU5URUdFUiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIHx8IC05MDA3MTk5MjU0NzQwOTkxO1xudmFyIE1BWF9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgOTAwNzE5OTI1NDc0MDk5MTtcblxudmFyIElOVEVSVkFMUyA9IHtcblx0bWlsbGlzZWNvbmQ6IHtcblx0XHRtYWpvcjogdHJ1ZSxcblx0XHRzaXplOiAxLFxuXHRcdHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDIwLCA1MCwgMTAwLCAyNTAsIDUwMF1cblx0fSxcblx0c2Vjb25kOiB7XG5cdFx0bWFqb3I6IHRydWUsXG5cdFx0c2l6ZTogMTAwMCxcblx0XHRzdGVwczogWzEsIDIsIDUsIDEwLCAzMF1cblx0fSxcblx0bWludXRlOiB7XG5cdFx0bWFqb3I6IHRydWUsXG5cdFx0c2l6ZTogNjAwMDAsXG5cdFx0c3RlcHM6IFsxLCAyLCA1LCAxMCwgMzBdXG5cdH0sXG5cdGhvdXI6IHtcblx0XHRtYWpvcjogdHJ1ZSxcblx0XHRzaXplOiAzNjAwMDAwLFxuXHRcdHN0ZXBzOiBbMSwgMiwgMywgNiwgMTJdXG5cdH0sXG5cdGRheToge1xuXHRcdG1ham9yOiB0cnVlLFxuXHRcdHNpemU6IDg2NDAwMDAwLFxuXHRcdHN0ZXBzOiBbMSwgMiwgNV1cblx0fSxcblx0d2Vlazoge1xuXHRcdG1ham9yOiBmYWxzZSxcblx0XHRzaXplOiA2MDQ4MDAwMDAsXG5cdFx0c3RlcHM6IFsxLCAyLCAzLCA0XVxuXHR9LFxuXHRtb250aDoge1xuXHRcdG1ham9yOiB0cnVlLFxuXHRcdHNpemU6IDIuNjI4ZTksXG5cdFx0c3RlcHM6IFsxLCAyLCAzXVxuXHR9LFxuXHRxdWFydGVyOiB7XG5cdFx0bWFqb3I6IGZhbHNlLFxuXHRcdHNpemU6IDcuODg0ZTksXG5cdFx0c3RlcHM6IFsxLCAyLCAzLCA0XVxuXHR9LFxuXHR5ZWFyOiB7XG5cdFx0bWFqb3I6IHRydWUsXG5cdFx0c2l6ZTogMy4xNTRlMTBcblx0fVxufTtcblxudmFyIFVOSVRTID0gT2JqZWN0LmtleXMoSU5URVJWQUxTKTtcblxuZnVuY3Rpb24gc29ydGVyKGEsIGIpIHtcblx0cmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBhcnJheVVuaXF1ZShpdGVtcykge1xuXHR2YXIgaGFzaCA9IHt9O1xuXHR2YXIgb3V0ID0gW107XG5cdHZhciBpLCBpbGVuLCBpdGVtO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0aWYgKCFoYXNoW2l0ZW1dKSB7XG5cdFx0XHRoYXNoW2l0ZW1dID0gdHJ1ZTtcblx0XHRcdG91dC5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvdXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiB7dGltZSwgcG9zfSBvYmplY3RzIHVzZWQgdG8gaW50ZXJwb2xhdGUgYSBzcGVjaWZpYyBgdGltZWAgb3IgcG9zaXRpb25cbiAqIChgcG9zYCkgb24gdGhlIHNjYWxlLCBieSBzZWFyY2hpbmcgZW50cmllcyBiZWZvcmUgYW5kIGFmdGVyIHRoZSByZXF1ZXN0ZWQgdmFsdWUuIGBwb3NgIGlzXG4gKiBhIGRlY2ltYWwgYmV0d2VlbiAwIGFuZCAxOiAwIGJlaW5nIHRoZSBzdGFydCBvZiB0aGUgc2NhbGUgKGxlZnQgb3IgdG9wKSBhbmQgMSB0aGUgb3RoZXJcbiAqIGV4dHJlbWl0eSAobGVmdCArIHdpZHRoIG9yIHRvcCArIGhlaWdodCkuIE5vdGUgdGhhdCBpdCB3b3VsZCBiZSBtb3JlIG9wdGltaXplZCB0byBkaXJlY3RseVxuICogc3RvcmUgcHJlLWNvbXB1dGVkIHBpeGVscywgYnV0IHRoZSBzY2FsZSBkaW1lbnNpb25zIGFyZSBub3QgZ3VhcmFudGVlZCBhdCB0aGUgdGltZSB3ZSBuZWVkXG4gKiB0byBjcmVhdGUgdGhlIGxvb2t1cCB0YWJsZS4gVGhlIHRhYmxlIEFMV0FZUyBjb250YWlucyBhdCBsZWFzdCB0d28gaXRlbXM6IG1pbiBhbmQgbWF4LlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyW119IHRpbWVzdGFtcHMgLSB0aW1lc3RhbXBzIHNvcnRlZCBmcm9tIGxvd2VzdCB0byBoaWdoZXN0LlxuICogQHBhcmFtIHtTdHJpbmd9IGRpc3RyaWJ1dGlvbiAtIElmICdsaW5lYXInLCB0aW1lc3RhbXBzIHdpbGwgYmUgc3ByZWFkIGxpbmVhcmx5IGFsb25nIHRoZSBtaW5cbiAqIGFuZCBtYXggcmFuZ2UsIHNvIGJhc2ljYWxseSwgdGhlIHRhYmxlIHdpbGwgY29udGFpbnMgb25seSB0d28gaXRlbXM6IHttaW4sIDB9IGFuZCB7bWF4LCAxfS5cbiAqIElmICdzZXJpZXMnLCB0aW1lc3RhbXBzIHdpbGwgYmUgcG9zaXRpb25lZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuIEluIHRoaXNcbiAqIGNhc2UsIG9ubHkgdGltZXN0YW1wcyB0aGF0IGJyZWFrIHRoZSB0aW1lIGxpbmVhcml0eSBhcmUgcmVnaXN0ZXJlZCwgbWVhbmluZyB0aGF0IGluIHRoZVxuICogYmVzdCBjYXNlLCBhbGwgdGltZXN0YW1wcyBhcmUgbGluZWFyLCB0aGUgdGFibGUgY29udGFpbnMgb25seSBtaW4gYW5kIG1heC5cbiAqL1xuZnVuY3Rpb24gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzLCBtaW4sIG1heCwgZGlzdHJpYnV0aW9uKSB7XG5cdGlmIChkaXN0cmlidXRpb24gPT09ICdsaW5lYXInIHx8ICF0aW1lc3RhbXBzLmxlbmd0aCkge1xuXHRcdHJldHVybiBbXG5cdFx0XHR7dGltZTogbWluLCBwb3M6IDB9LFxuXHRcdFx0e3RpbWU6IG1heCwgcG9zOiAxfVxuXHRcdF07XG5cdH1cblxuXHR2YXIgdGFibGUgPSBbXTtcblx0dmFyIGl0ZW1zID0gW21pbl07XG5cdHZhciBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuXHRcdGlmIChjdXJyID4gbWluICYmIGN1cnIgPCBtYXgpIHtcblx0XHRcdGl0ZW1zLnB1c2goY3Vycik7XG5cdFx0fVxuXHR9XG5cblx0aXRlbXMucHVzaChtYXgpO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRuZXh0ID0gaXRlbXNbaSArIDFdO1xuXHRcdHByZXYgPSBpdGVtc1tpIC0gMV07XG5cdFx0Y3VyciA9IGl0ZW1zW2ldO1xuXG5cdFx0Ly8gb25seSBhZGQgcG9pbnRzIHRoYXQgYnJlYWtzIHRoZSBzY2FsZSBsaW5lYXJpdHlcblx0XHRpZiAocHJldiA9PT0gdW5kZWZpbmVkIHx8IG5leHQgPT09IHVuZGVmaW5lZCB8fCBNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuXHRcdFx0dGFibGUucHVzaCh7dGltZTogY3VyciwgcG9zOiBpIC8gKGlsZW4gLSAxKX0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0YWJsZTtcbn1cblxuLy8gQHNlZSBhZGFwdGVkIGZyb20gaHR0cDovL3d3dy5hbnVqZ2FraGFyLmNvbS8yMDE0LzAzLzAxL2JpbmFyeS1zZWFyY2gtaW4tamF2YXNjcmlwdC9cbmZ1bmN0aW9uIGxvb2t1cCh0YWJsZSwga2V5LCB2YWx1ZSkge1xuXHR2YXIgbG8gPSAwO1xuXHR2YXIgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuXHR2YXIgbWlkLCBpMCwgaTE7XG5cblx0d2hpbGUgKGxvID49IDAgJiYgbG8gPD0gaGkpIHtcblx0XHRtaWQgPSAobG8gKyBoaSkgPj4gMTtcblx0XHRpMCA9IHRhYmxlW21pZCAtIDFdIHx8IG51bGw7XG5cdFx0aTEgPSB0YWJsZVttaWRdO1xuXG5cdFx0aWYgKCFpMCkge1xuXHRcdFx0Ly8gZ2l2ZW4gdmFsdWUgaXMgb3V0c2lkZSB0YWJsZSAoYmVmb3JlIGZpcnN0IGl0ZW0pXG5cdFx0XHRyZXR1cm4ge2xvOiBudWxsLCBoaTogaTF9O1xuXHRcdH0gZWxzZSBpZiAoaTFba2V5XSA8IHZhbHVlKSB7XG5cdFx0XHRsbyA9IG1pZCArIDE7XG5cdFx0fSBlbHNlIGlmIChpMFtrZXldID4gdmFsdWUpIHtcblx0XHRcdGhpID0gbWlkIC0gMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHtsbzogaTAsIGhpOiBpMX07XG5cdFx0fVxuXHR9XG5cblx0Ly8gZ2l2ZW4gdmFsdWUgaXMgb3V0c2lkZSB0YWJsZSAoYWZ0ZXIgbGFzdCBpdGVtKVxuXHRyZXR1cm4ge2xvOiBpMSwgaGk6IG51bGx9O1xufVxuXG4vKipcbiAqIExpbmVhcmx5IGludGVycG9sYXRlcyB0aGUgZ2l2ZW4gc291cmNlIGB2YWx1ZWAgdXNpbmcgdGhlIHRhYmxlIGl0ZW1zIGBza2V5YCB2YWx1ZXMgYW5kXG4gKiByZXR1cm5zIHRoZSBhc3NvY2lhdGVkIGB0a2V5YCB2YWx1ZS4gRm9yIGV4YW1wbGUsIGludGVycG9sYXRlKHRhYmxlLCAndGltZScsIDQyLCAncG9zJylcbiAqIHJldHVybnMgdGhlIHBvc2l0aW9uIGZvciBhIHRpbWVzdGFtcCBlcXVhbCB0byA0Mi4gSWYgdmFsdWUgaXMgb3V0IG9mIGJvdW5kcywgdmFsdWVzIGF0XG4gKiBpbmRleCBbMCwgMV0gb3IgW24gLSAxLCBuXSBhcmUgdXNlZCBmb3IgdGhlIGludGVycG9sYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRlKHRhYmxlLCBza2V5LCBzdmFsLCB0a2V5KSB7XG5cdHZhciByYW5nZSA9IGxvb2t1cCh0YWJsZSwgc2tleSwgc3ZhbCk7XG5cblx0Ly8gTm90ZTogdGhlIGxvb2t1cCB0YWJsZSBBTFdBWVMgY29udGFpbnMgYXQgbGVhc3QgMiBpdGVtcyAobWluIGFuZCBtYXgpXG5cdHZhciBwcmV2ID0gIXJhbmdlLmxvID8gdGFibGVbMF0gOiAhcmFuZ2UuaGkgPyB0YWJsZVt0YWJsZS5sZW5ndGggLSAyXSA6IHJhbmdlLmxvO1xuXHR2YXIgbmV4dCA9ICFyYW5nZS5sbyA/IHRhYmxlWzFdIDogIXJhbmdlLmhpID8gdGFibGVbdGFibGUubGVuZ3RoIC0gMV0gOiByYW5nZS5oaTtcblxuXHR2YXIgc3BhbiA9IG5leHRbc2tleV0gLSBwcmV2W3NrZXldO1xuXHR2YXIgcmF0aW8gPSBzcGFuID8gKHN2YWwgLSBwcmV2W3NrZXldKSAvIHNwYW4gOiAwO1xuXHR2YXIgb2Zmc2V0ID0gKG5leHRbdGtleV0gLSBwcmV2W3RrZXldKSAqIHJhdGlvO1xuXG5cdHJldHVybiBwcmV2W3RrZXldICsgb2Zmc2V0O1xufVxuXG4vKipcbiAqIENvbnZlcnQgdGhlIGdpdmVuIHZhbHVlIHRvIGEgbW9tZW50IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gdGltZSBvcHRpb25zLlxuICogQHNlZSBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL1xuICovXG5mdW5jdGlvbiBtb21lbnRpZnkodmFsdWUsIG9wdGlvbnMpIHtcblx0dmFyIHBhcnNlciA9IG9wdGlvbnMucGFyc2VyO1xuXHR2YXIgZm9ybWF0ID0gb3B0aW9ucy5wYXJzZXIgfHwgb3B0aW9ucy5mb3JtYXQ7XG5cblx0aWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gcGFyc2VyKHZhbHVlKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIG1vbWVudCh2YWx1ZSwgZm9ybWF0KTtcblx0fVxuXG5cdGlmICghKHZhbHVlIGluc3RhbmNlb2YgbW9tZW50KSkge1xuXHRcdHZhbHVlID0gbW9tZW50KHZhbHVlKTtcblx0fVxuXG5cdGlmICh2YWx1ZS5pc1ZhbGlkKCkpIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblxuXHQvLyBMYWJlbHMgYXJlIGluIGFuIGluY29tcGF0aWJsZSBtb21lbnQgZm9ybWF0IGFuZCBubyBgcGFyc2VyYCBoYXMgYmVlbiBwcm92aWRlZC5cblx0Ly8gVGhlIHVzZXIgbWlnaHQgc3RpbGwgdXNlIHRoZSBkZXByZWNhdGVkIGBmb3JtYXRgIG9wdGlvbiB0byBjb252ZXJ0IGhpcyBpbnB1dHMuXG5cdGlmICh0eXBlb2YgZm9ybWF0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZvcm1hdCh2YWx1ZSk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0LCBzY2FsZSkge1xuXHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKGlucHV0KSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0dmFyIG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zLnRpbWU7XG5cdHZhciB2YWx1ZSA9IG1vbWVudGlmeShzY2FsZS5nZXRSaWdodFZhbHVlKGlucHV0KSwgb3B0aW9ucyk7XG5cdGlmICghdmFsdWUuaXNWYWxpZCgpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5yb3VuZCkge1xuXHRcdHZhbHVlLnN0YXJ0T2Yob3B0aW9ucy5yb3VuZCk7XG5cdH1cblxuXHRyZXR1cm4gdmFsdWUudmFsdWVPZigpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG51bWJlciBvZiB1bml0IHRvIHNraXAgdG8gYmUgYWJsZSB0byBkaXNwbGF5IHVwIHRvIGBjYXBhY2l0eWAgbnVtYmVyIG9mIHRpY2tzXG4gKiBpbiBgdW5pdGAgZm9yIHRoZSBnaXZlbiBgbWluYCAvIGBtYXhgIHJhbmdlIGFuZCByZXNwZWN0aW5nIHRoZSBpbnRlcnZhbCBzdGVwcyBjb25zdHJhaW50cy5cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lU3RlcFNpemUobWluLCBtYXgsIHVuaXQsIGNhcGFjaXR5KSB7XG5cdHZhciByYW5nZSA9IG1heCAtIG1pbjtcblx0dmFyIGludGVydmFsID0gSU5URVJWQUxTW3VuaXRdO1xuXHR2YXIgbWlsbGlzZWNvbmRzID0gaW50ZXJ2YWwuc2l6ZTtcblx0dmFyIHN0ZXBzID0gaW50ZXJ2YWwuc3RlcHM7XG5cdHZhciBpLCBpbGVuLCBmYWN0b3I7XG5cblx0aWYgKCFzdGVwcykge1xuXHRcdHJldHVybiBNYXRoLmNlaWwocmFuZ2UgLyAoKGNhcGFjaXR5IHx8IDEpICogbWlsbGlzZWNvbmRzKSk7XG5cdH1cblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gc3RlcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0ZmFjdG9yID0gc3RlcHNbaV07XG5cdFx0aWYgKE1hdGguY2VpbChyYW5nZSAvIChtaWxsaXNlY29uZHMgKiBmYWN0b3IpKSA8PSBjYXBhY2l0eSkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZhY3Rvcjtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdChtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcblx0dmFyIGlsZW4gPSBVTklUUy5sZW5ndGg7XG5cdHZhciBpLCBpbnRlcnZhbCwgZmFjdG9yO1xuXG5cdGZvciAoaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKSB7XG5cdFx0aW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuXHRcdGZhY3RvciA9IGludGVydmFsLnN0ZXBzID8gaW50ZXJ2YWwuc3RlcHNbaW50ZXJ2YWwuc3RlcHMubGVuZ3RoIC0gMV0gOiBNQVhfSU5URUdFUjtcblxuXHRcdGlmIChNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoZmFjdG9yICogaW50ZXJ2YWwuc2l6ZSkpIDw9IGNhcGFjaXR5KSB7XG5cdFx0XHRyZXR1cm4gVU5JVFNbaV07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFVOSVRTW2lsZW4gLSAxXTtcbn1cblxuZnVuY3Rpb24gZGV0ZXJtaW5lTWFqb3JVbml0KHVuaXQpIHtcblx0Zm9yICh2YXIgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0aWYgKElOVEVSVkFMU1tVTklUU1tpXV0ubWFqb3IpIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXhpbXVtIG9mIGBjYXBhY2l0eWAgdGltZXN0YW1wcyBiZXR3ZWVuIG1pbiBhbmQgbWF4LCByb3VuZGVkIHRvIHRoZVxuICogYG1pbm9yYCB1bml0LCBhbGlnbmVkIG9uIHRoZSBgbWFqb3JgIHVuaXQgYW5kIHVzaW5nIHRoZSBnaXZlbiBzY2FsZSB0aW1lIGBvcHRpb25zYC5cbiAqIEltcG9ydGFudDogdGhpcyBtZXRob2QgY2FuIHJldHVybiB0aWNrcyBvdXRzaWRlIHRoZSBtaW4gYW5kIG1heCByYW5nZSwgaXQncyB0aGVcbiAqIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjYWxsaW5nIGNvZGUgdG8gY2xhbXAgdmFsdWVzIGlmIG5lZWRlZC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUobWluLCBtYXgsIG1pbm9yLCBtYWpvciwgY2FwYWNpdHksIG9wdGlvbnMpIHtcblx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHR2YXIgc3RlcFNpemUgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHRpbWVPcHRzLnN0ZXBTaXplLCB0aW1lT3B0cy51bml0U3RlcFNpemUpO1xuXHR2YXIgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG5cdHZhciBtYWpvclRpY2tzRW5hYmxlZCA9IG9wdGlvbnMudGlja3MubWFqb3IuZW5hYmxlZDtcblx0dmFyIGludGVydmFsID0gSU5URVJWQUxTW21pbm9yXTtcblx0dmFyIGZpcnN0ID0gbW9tZW50KG1pbik7XG5cdHZhciBsYXN0ID0gbW9tZW50KG1heCk7XG5cdHZhciB0aWNrcyA9IFtdO1xuXHR2YXIgdGltZTtcblxuXHRpZiAoIXN0ZXBTaXplKSB7XG5cdFx0c3RlcFNpemUgPSBkZXRlcm1pbmVTdGVwU2l6ZShtaW4sIG1heCwgbWlub3IsIGNhcGFjaXR5KTtcblx0fVxuXG5cdC8vIEZvciAnd2VlaycgdW5pdCwgaGFuZGxlIHRoZSBmaXJzdCBkYXkgb2Ygd2VlayBvcHRpb25cblx0aWYgKHdlZWtkYXkpIHtcblx0XHRmaXJzdCA9IGZpcnN0Lmlzb1dlZWtkYXkod2Vla2RheSk7XG5cdFx0bGFzdCA9IGxhc3QuaXNvV2Vla2RheSh3ZWVrZGF5KTtcblx0fVxuXG5cdC8vIEFsaWduIGZpcnN0L2xhc3QgdGlja3Mgb24gdW5pdFxuXHRmaXJzdCA9IGZpcnN0LnN0YXJ0T2Yod2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuXHRsYXN0ID0gbGFzdC5zdGFydE9mKHdlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgbGFzdCB0aWNrIGluY2x1ZGUgbWF4XG5cdGlmIChsYXN0IDwgbWF4KSB7XG5cdFx0bGFzdC5hZGQoMSwgbWlub3IpO1xuXHR9XG5cblx0dGltZSA9IG1vbWVudChmaXJzdCk7XG5cblx0aWYgKG1ham9yVGlja3NFbmFibGVkICYmIG1ham9yICYmICF3ZWVrZGF5ICYmICF0aW1lT3B0cy5yb3VuZCkge1xuXHRcdC8vIEFsaWduIHRoZSBmaXJzdCB0aWNrIG9uIHRoZSBwcmV2aW91cyBgbWlub3JgIHVuaXQgYWxpZ25lZCBvbiB0aGUgYG1ham9yYCB1bml0OlxuXHRcdC8vIHdlIGZpcnN0IGFsaWduZWQgdGltZSBvbiB0aGUgcHJldmlvdXMgYG1ham9yYCB1bml0IHRoZW4gYWRkIHRoZSBudW1iZXIgb2YgZnVsbFxuXHRcdC8vIHN0ZXBTaXplIHRoZXJlIGlzIGJldHdlZW4gZmlyc3QgYW5kIHRoZSBwcmV2aW91cyBtYWpvciB0aW1lLlxuXHRcdHRpbWUuc3RhcnRPZihtYWpvcik7XG5cdFx0dGltZS5hZGQofn4oKGZpcnN0IC0gdGltZSkgLyAoaW50ZXJ2YWwuc2l6ZSAqIHN0ZXBTaXplKSkgKiBzdGVwU2l6ZSwgbWlub3IpO1xuXHR9XG5cblx0Zm9yICg7IHRpbWUgPCBsYXN0OyB0aW1lLmFkZChzdGVwU2l6ZSwgbWlub3IpKSB7XG5cdFx0dGlja3MucHVzaCgrdGltZSk7XG5cdH1cblxuXHR0aWNrcy5wdXNoKCt0aW1lKTtcblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcmlnaHQgYW5kIGxlZnQgb2Zmc2V0cyBmcm9tIGVkZ2VzIGluIHRoZSBmb3JtIG9mIHtsZWZ0LCByaWdodH0uXG4gKiBPZmZzZXRzIGFyZSBhZGRlZCB3aGVuIHRoZSBgb2Zmc2V0YCBvcHRpb24gaXMgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZU9mZnNldHModGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucykge1xuXHR2YXIgbGVmdCA9IDA7XG5cdHZhciByaWdodCA9IDA7XG5cdHZhciB1cHBlciwgbG93ZXI7XG5cblx0aWYgKG9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuXHRcdGlmICghb3B0aW9ucy50aW1lLm1pbikge1xuXHRcdFx0dXBwZXIgPSB0aWNrcy5sZW5ndGggPiAxID8gdGlja3NbMV0gOiBtYXg7XG5cdFx0XHRsb3dlciA9IHRpY2tzWzBdO1xuXHRcdFx0bGVmdCA9IChcblx0XHRcdFx0aW50ZXJwb2xhdGUodGFibGUsICd0aW1lJywgdXBwZXIsICdwb3MnKSAtXG5cdFx0XHRcdGludGVycG9sYXRlKHRhYmxlLCAndGltZScsIGxvd2VyLCAncG9zJylcblx0XHRcdCkgLyAyO1xuXHRcdH1cblx0XHRpZiAoIW9wdGlvbnMudGltZS5tYXgpIHtcblx0XHRcdHVwcGVyID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV07XG5cdFx0XHRsb3dlciA9IHRpY2tzLmxlbmd0aCA+IDEgPyB0aWNrc1t0aWNrcy5sZW5ndGggLSAyXSA6IG1pbjtcblx0XHRcdHJpZ2h0ID0gKFxuXHRcdFx0XHRpbnRlcnBvbGF0ZSh0YWJsZSwgJ3RpbWUnLCB1cHBlciwgJ3BvcycpIC1cblx0XHRcdFx0aW50ZXJwb2xhdGUodGFibGUsICd0aW1lJywgbG93ZXIsICdwb3MnKVxuXHRcdFx0KSAvIDI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHtsZWZ0OiBsZWZ0LCByaWdodDogcmlnaHR9O1xufVxuXG5mdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHZhbHVlcywgbWFqb3JVbml0KSB7XG5cdHZhciB0aWNrcyA9IFtdO1xuXHR2YXIgaSwgaWxlbiwgdmFsdWUsIG1ham9yO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZXNbaV07XG5cdFx0bWFqb3IgPSBtYWpvclVuaXQgPyB2YWx1ZSA9PT0gK21vbWVudCh2YWx1ZSkuc3RhcnRPZihtYWpvclVuaXQpIDogZmFsc2U7XG5cblx0XHR0aWNrcy5wdXNoKHtcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdG1ham9yOiBtYWpvclxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHRpY2tzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0cG9zaXRpb246ICdib3R0b20nLFxuXG5cdFx0LyoqXG5cdFx0ICogRGF0YSBkaXN0cmlidXRpb24gYWxvbmcgdGhlIHNjYWxlOlxuXHRcdCAqIC0gJ2xpbmVhcic6IGRhdGEgYXJlIHNwcmVhZCBhY2NvcmRpbmcgdG8gdGhlaXIgdGltZSAoZGlzdGFuY2VzIGNhbiB2YXJ5KSxcblx0XHQgKiAtICdzZXJpZXMnOiBkYXRhIGFyZSBzcHJlYWQgYXQgdGhlIHNhbWUgZGlzdGFuY2UgZnJvbSBlYWNoIG90aGVyLlxuXHRcdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTA3XG5cdFx0ICogQHNpbmNlIDIuNy4wXG5cdFx0ICovXG5cdFx0ZGlzdHJpYnV0aW9uOiAnbGluZWFyJyxcblxuXHRcdC8qKlxuXHRcdCAqIFNjYWxlIGJvdW5kYXJ5IHN0cmF0ZWd5IChieXBhc3NlZCBieSBtaW4vbWF4IHRpbWUgb3B0aW9ucylcblx0XHQgKiAtIGBkYXRhYDogbWFrZSBzdXJlIGRhdGEgYXJlIGZ1bGx5IHZpc2libGUsIHRpY2tzIG91dHNpZGUgYXJlIHJlbW92ZWRcblx0XHQgKiAtIGB0aWNrc2A6IG1ha2Ugc3VyZSB0aWNrcyBhcmUgZnVsbHkgdmlzaWJsZSwgZGF0YSBvdXRzaWRlIGFyZSB0cnVuY2F0ZWRcblx0XHQgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvNDU1NlxuXHRcdCAqIEBzaW5jZSAyLjcuMFxuXHRcdCAqL1xuXHRcdGJvdW5kczogJ2RhdGEnLFxuXG5cdFx0dGltZToge1xuXHRcdFx0cGFyc2VyOiBmYWxzZSwgLy8gZmFsc2UgPT0gYSBwYXR0ZXJuIHN0cmluZyBmcm9tIGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL3BhcnNpbmcvc3RyaW5nLWZvcm1hdC8gb3IgYSBjdXN0b20gY2FsbGJhY2sgdGhhdCBjb252ZXJ0cyBpdHMgYXJndW1lbnQgdG8gYSBtb21lbnRcblx0XHRcdGZvcm1hdDogZmFsc2UsIC8vIERFUFJFQ0FURUQgZmFsc2UgPT0gZGF0ZSBvYmplY3RzLCBtb21lbnQgb2JqZWN0LCBjYWxsYmFjayBvciBhIHBhdHRlcm4gc3RyaW5nIGZyb20gaHR0cDovL21vbWVudGpzLmNvbS9kb2NzLyMvcGFyc2luZy9zdHJpbmctZm9ybWF0L1xuXHRcdFx0dW5pdDogZmFsc2UsIC8vIGZhbHNlID09IGF1dG9tYXRpYyBvciBvdmVycmlkZSB3aXRoIHdlZWssIG1vbnRoLCB5ZWFyLCBldGMuXG5cdFx0XHRyb3VuZDogZmFsc2UsIC8vIG5vbmUsIG9yIG92ZXJyaWRlIHdpdGggd2VlaywgbW9udGgsIHllYXIsIGV0Yy5cblx0XHRcdGRpc3BsYXlGb3JtYXQ6IGZhbHNlLCAvLyBERVBSRUNBVEVEXG5cdFx0XHRpc29XZWVrZGF5OiBmYWxzZSwgLy8gb3ZlcnJpZGUgd2VlayBzdGFydCBkYXkgLSBzZWUgaHR0cDovL21vbWVudGpzLmNvbS9kb2NzLyMvZ2V0LXNldC9pc28td2Vla2RheS9cblx0XHRcdG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG5cblx0XHRcdC8vIGRlZmF1bHRzIHRvIHVuaXQncyBjb3JyZXNwb25kaW5nIHVuaXRGb3JtYXQgYmVsb3cgb3Igb3ZlcnJpZGUgdXNpbmcgcGF0dGVybiBzdHJpbmcgZnJvbSBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9kaXNwbGF5aW5nL2Zvcm1hdC9cblx0XHRcdGRpc3BsYXlGb3JtYXRzOiB7XG5cdFx0XHRcdG1pbGxpc2Vjb25kOiAnaDptbTpzcy5TU1MgYScsIC8vIDExOjIwOjAxLjEyMyBBTSxcblx0XHRcdFx0c2Vjb25kOiAnaDptbTpzcyBhJywgLy8gMTE6MjA6MDEgQU1cblx0XHRcdFx0bWludXRlOiAnaDptbSBhJywgLy8gMTE6MjAgQU1cblx0XHRcdFx0aG91cjogJ2hBJywgLy8gNVBNXG5cdFx0XHRcdGRheTogJ01NTSBEJywgLy8gU2VwIDRcblx0XHRcdFx0d2VlazogJ2xsJywgLy8gV2VlayA0Niwgb3IgbWF5YmUgXCJbV11XVyAtIFlZWVlcIiA/XG5cdFx0XHRcdG1vbnRoOiAnTU1NIFlZWVknLCAvLyBTZXB0IDIwMTVcblx0XHRcdFx0cXVhcnRlcjogJ1tRXVEgLSBZWVlZJywgLy8gUTNcblx0XHRcdFx0eWVhcjogJ1lZWVknIC8vIDIwMTVcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR0aWNrczoge1xuXHRcdFx0YXV0b1NraXA6IGZhbHNlLFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFRpY2tzIGdlbmVyYXRpb24gaW5wdXQgdmFsdWVzOlxuXHRcdFx0ICogLSAnYXV0byc6IGdlbmVyYXRlcyBcIm9wdGltYWxcIiB0aWNrcyBiYXNlZCBvbiBzY2FsZSBzaXplIGFuZCB0aW1lIG9wdGlvbnMuXG5cdFx0XHQgKiAtICdkYXRhJzogZ2VuZXJhdGVzIHRpY2tzIGZyb20gZGF0YSAoaW5jbHVkaW5nIGxhYmVscyBmcm9tIGRhdGEge3R8eHx5fSBvYmplY3RzKS5cblx0XHRcdCAqIC0gJ2xhYmVscyc6IGdlbmVyYXRlcyB0aWNrcyBmcm9tIHVzZXIgZ2l2ZW4gYGRhdGEubGFiZWxzYCB2YWx1ZXMgT05MWS5cblx0XHRcdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTA3XG5cdFx0XHQgKiBAc2luY2UgMi43LjBcblx0XHRcdCAqL1xuXHRcdFx0c291cmNlOiAnYXV0bycsXG5cblx0XHRcdG1ham9yOiB7XG5cdFx0XHRcdGVuYWJsZWQ6IGZhbHNlXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBUaW1lU2NhbGUgPSBDaGFydC5TY2FsZS5leHRlbmQoe1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCFtb21lbnQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDaGFydC5qcyAtIE1vbWVudC5qcyBjb3VsZCBub3QgYmUgZm91bmQhIFlvdSBtdXN0IGluY2x1ZGUgaXQgYmVmb3JlIENoYXJ0LmpzIHRvIHVzZSB0aGUgdGltZSBzY2FsZS4gRG93bmxvYWQgYXQgaHR0cHM6Ly9tb21lbnRqcy5jb20nKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tZXJnZVRpY2tzT3B0aW9ucygpO1xuXG5cdFx0XHRDaGFydC5TY2FsZS5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblxuXHRcdFx0Ly8gREVQUkVDQVRJT05TOiBvdXRwdXQgYSBtZXNzYWdlIG9ubHkgb25lIHRpbWUgcGVyIHVwZGF0ZVxuXHRcdFx0aWYgKG9wdGlvbnMudGltZSAmJiBvcHRpb25zLnRpbWUuZm9ybWF0KSB7XG5cdFx0XHRcdGNvbnNvbGUud2Fybignb3B0aW9ucy50aW1lLmZvcm1hdCBpcyBkZXByZWNhdGVkIGFuZCByZXBsYWNlZCBieSBvcHRpb25zLnRpbWUucGFyc2VyLicpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gQ2hhcnQuU2NhbGUucHJvdG90eXBlLnVwZGF0ZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQWxsb3dzIGRhdGEgdG8gYmUgcmVmZXJlbmNlZCB2aWEgJ3QnIGF0dHJpYnV0ZVxuXHRcdCAqL1xuXHRcdGdldFJpZ2h0VmFsdWU6IGZ1bmN0aW9uKHJhd1ZhbHVlKSB7XG5cdFx0XHRpZiAocmF3VmFsdWUgJiYgcmF3VmFsdWUudCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJhd1ZhbHVlID0gcmF3VmFsdWUudDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBDaGFydC5TY2FsZS5wcm90b3R5cGUuZ2V0UmlnaHRWYWx1ZS5jYWxsKHRoaXMsIHJhd1ZhbHVlKTtcblx0XHR9LFxuXG5cdFx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgdGltZU9wdHMgPSBtZS5vcHRpb25zLnRpbWU7XG5cdFx0XHR2YXIgbWluID0gcGFyc2UodGltZU9wdHMubWluLCBtZSkgfHwgTUFYX0lOVEVHRVI7XG5cdFx0XHR2YXIgbWF4ID0gcGFyc2UodGltZU9wdHMubWF4LCBtZSkgfHwgTUlOX0lOVEVHRVI7XG5cdFx0XHR2YXIgdGltZXN0YW1wcyA9IFtdO1xuXHRcdFx0dmFyIGRhdGFzZXRzID0gW107XG5cdFx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0XHR2YXIgaSwgaiwgaWxlbiwgamxlbiwgZGF0YSwgdGltZXN0YW1wO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGxhYmVscyB0byB0aW1lc3RhbXBzXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGxhYmVscy5wdXNoKHBhcnNlKGNoYXJ0LmRhdGEubGFiZWxzW2ldLCBtZSkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IGRhdGEgdG8gdGltZXN0YW1wc1xuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0XHRkYXRhID0gY2hhcnQuZGF0YS5kYXRhc2V0c1tpXS5kYXRhO1xuXG5cdFx0XHRcdFx0Ly8gTGV0J3MgY29uc2lkZXIgdGhhdCBhbGwgZGF0YSBoYXZlIHRoZSBzYW1lIGZvcm1hdC5cblx0XHRcdFx0XHRpZiAoaGVscGVycy5pc09iamVjdChkYXRhWzBdKSkge1xuXHRcdFx0XHRcdFx0ZGF0YXNldHNbaV0gPSBbXTtcblxuXHRcdFx0XHRcdFx0Zm9yIChqID0gMCwgamxlbiA9IGRhdGEubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG5cdFx0XHRcdFx0XHRcdHRpbWVzdGFtcCA9IHBhcnNlKGRhdGFbal0sIG1lKTtcblx0XHRcdFx0XHRcdFx0dGltZXN0YW1wcy5wdXNoKHRpbWVzdGFtcCk7XG5cdFx0XHRcdFx0XHRcdGRhdGFzZXRzW2ldW2pdID0gdGltZXN0YW1wO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aW1lc3RhbXBzLnB1c2guYXBwbHkodGltZXN0YW1wcywgbGFiZWxzKTtcblx0XHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gbGFiZWxzLnNsaWNlKDApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhc2V0c1tpXSA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChsYWJlbHMubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIFNvcnQgbGFiZWxzICoqYWZ0ZXIqKiBkYXRhIGhhdmUgYmVlbiBjb252ZXJ0ZWRcblx0XHRcdFx0bGFiZWxzID0gYXJyYXlVbmlxdWUobGFiZWxzKS5zb3J0KHNvcnRlcik7XG5cdFx0XHRcdG1pbiA9IE1hdGgubWluKG1pbiwgbGFiZWxzWzBdKTtcblx0XHRcdFx0bWF4ID0gTWF0aC5tYXgobWF4LCBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG5cdFx0XHRcdHRpbWVzdGFtcHMgPSBhcnJheVVuaXF1ZSh0aW1lc3RhbXBzKS5zb3J0KHNvcnRlcik7XG5cdFx0XHRcdG1pbiA9IE1hdGgubWluKG1pbiwgdGltZXN0YW1wc1swXSk7XG5cdFx0XHRcdG1heCA9IE1hdGgubWF4KG1heCwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW4gY2FzZSB0aGVyZSBpcyBubyB2YWxpZCBtaW4vbWF4LCBsZXQncyB1c2UgdG9kYXkgbGltaXRzXG5cdFx0XHRtaW4gPSBtaW4gPT09IE1BWF9JTlRFR0VSID8gK21vbWVudCgpLnN0YXJ0T2YoJ2RheScpIDogbWluO1xuXHRcdFx0bWF4ID0gbWF4ID09PSBNSU5fSU5URUdFUiA/ICttb21lbnQoKS5lbmRPZignZGF5JykgKyAxIDogbWF4O1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBtYXggaXMgc3RyaWN0bHkgaGlnaGVyIHRoYW4gbWluIChyZXF1aXJlZCBieSB0aGUgbG9va3VwIHRhYmxlKVxuXHRcdFx0bWUubWluID0gTWF0aC5taW4obWluLCBtYXgpO1xuXHRcdFx0bWUubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcblxuXHRcdFx0Ly8gUFJJVkFURVxuXHRcdFx0bWUuX2hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdG1lLl90YWJsZSA9IFtdO1xuXHRcdFx0bWUuX3RpbWVzdGFtcHMgPSB7XG5cdFx0XHRcdGRhdGE6IHRpbWVzdGFtcHMsXG5cdFx0XHRcdGRhdGFzZXRzOiBkYXRhc2V0cyxcblx0XHRcdFx0bGFiZWxzOiBsYWJlbHNcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtaW4gPSBtZS5taW47XG5cdFx0XHR2YXIgbWF4ID0gbWUubWF4O1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuXHRcdFx0dmFyIGZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcblx0XHRcdHZhciBjYXBhY2l0eSA9IG1lLmdldExhYmVsQ2FwYWNpdHkobWluKTtcblx0XHRcdHZhciB1bml0ID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0KHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCBjYXBhY2l0eSk7XG5cdFx0XHR2YXIgbWFqb3JVbml0ID0gZGV0ZXJtaW5lTWFqb3JVbml0KHVuaXQpO1xuXHRcdFx0dmFyIHRpbWVzdGFtcHMgPSBbXTtcblx0XHRcdHZhciB0aWNrcyA9IFtdO1xuXHRcdFx0dmFyIGksIGlsZW4sIHRpbWVzdGFtcDtcblxuXHRcdFx0c3dpdGNoIChvcHRpb25zLnRpY2tzLnNvdXJjZSkge1xuXHRcdFx0Y2FzZSAnZGF0YSc6XG5cdFx0XHRcdHRpbWVzdGFtcHMgPSBtZS5fdGltZXN0YW1wcy5kYXRhO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2xhYmVscyc6XG5cdFx0XHRcdHRpbWVzdGFtcHMgPSBtZS5fdGltZXN0YW1wcy5sYWJlbHM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnYXV0byc6XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aW1lc3RhbXBzID0gZ2VuZXJhdGUobWluLCBtYXgsIHVuaXQsIG1ham9yVW5pdCwgY2FwYWNpdHksIG9wdGlvbnMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRcdFx0bWluID0gdGltZXN0YW1wc1swXTtcblx0XHRcdFx0bWF4ID0gdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBFbmZvcmNlIGxpbWl0cyB3aXRoIHVzZXIgbWluL21heCBvcHRpb25zXG5cdFx0XHRtaW4gPSBwYXJzZSh0aW1lT3B0cy5taW4sIG1lKSB8fCBtaW47XG5cdFx0XHRtYXggPSBwYXJzZSh0aW1lT3B0cy5tYXgsIG1lKSB8fCBtYXg7XG5cblx0XHRcdC8vIFJlbW92ZSB0aWNrcyBvdXRzaWRlIHRoZSBtaW4vbWF4IHJhbmdlXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0dGltZXN0YW1wID0gdGltZXN0YW1wc1tpXTtcblx0XHRcdFx0aWYgKHRpbWVzdGFtcCA+PSBtaW4gJiYgdGltZXN0YW1wIDw9IG1heCkge1xuXHRcdFx0XHRcdHRpY2tzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBtaW47XG5cdFx0XHRtZS5tYXggPSBtYXg7XG5cblx0XHRcdC8vIFBSSVZBVEVcblx0XHRcdG1lLl91bml0ID0gdW5pdDtcblx0XHRcdG1lLl9tYWpvclVuaXQgPSBtYWpvclVuaXQ7XG5cdFx0XHRtZS5fbWlub3JGb3JtYXQgPSBmb3JtYXRzW3VuaXRdO1xuXHRcdFx0bWUuX21ham9yRm9ybWF0ID0gZm9ybWF0c1ttYWpvclVuaXRdO1xuXHRcdFx0bWUuX3RhYmxlID0gYnVpbGRMb29rdXBUYWJsZShtZS5fdGltZXN0YW1wcy5kYXRhLCBtaW4sIG1heCwgb3B0aW9ucy5kaXN0cmlidXRpb24pO1xuXHRcdFx0bWUuX29mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyhtZS5fdGFibGUsIHRpY2tzLCBtaW4sIG1heCwgb3B0aW9ucyk7XG5cblx0XHRcdHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKHRpY2tzLCBtYWpvclVuaXQpO1xuXHRcdH0sXG5cblx0XHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGRhdGEgPSBtZS5jaGFydC5kYXRhO1xuXHRcdFx0dmFyIHRpbWVPcHRzID0gbWUub3B0aW9ucy50aW1lO1xuXHRcdFx0dmFyIGxhYmVsID0gZGF0YS5sYWJlbHMgJiYgaW5kZXggPCBkYXRhLmxhYmVscy5sZW5ndGggPyBkYXRhLmxhYmVsc1tpbmRleF0gOiAnJztcblx0XHRcdHZhciB2YWx1ZSA9IGRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XTtcblxuXHRcdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0XHRcdGxhYmVsID0gbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGltZU9wdHMudG9vbHRpcEZvcm1hdCkge1xuXHRcdFx0XHRsYWJlbCA9IG1vbWVudGlmeShsYWJlbCwgdGltZU9wdHMpLmZvcm1hdCh0aW1lT3B0cy50b29sdGlwRm9ybWF0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGxhYmVsO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBGdW5jdGlvbiB0byBmb3JtYXQgYW4gaW5kaXZpZHVhbCB0aWNrIG1hcmtcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRpY2tGb3JtYXRGdW5jdGlvbjogZnVuY3Rpb24odGljaywgaW5kZXgsIHRpY2tzKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIHRpbWUgPSB0aWNrLnZhbHVlT2YoKTtcblx0XHRcdHZhciBtYWpvclVuaXQgPSBtZS5fbWFqb3JVbml0O1xuXHRcdFx0dmFyIG1ham9yRm9ybWF0ID0gbWUuX21ham9yRm9ybWF0O1xuXHRcdFx0dmFyIG1ham9yVGltZSA9IHRpY2suY2xvbmUoKS5zdGFydE9mKG1lLl9tYWpvclVuaXQpLnZhbHVlT2YoKTtcblx0XHRcdHZhciBtYWpvclRpY2tPcHRzID0gb3B0aW9ucy50aWNrcy5tYWpvcjtcblx0XHRcdHZhciBtYWpvciA9IG1ham9yVGlja09wdHMuZW5hYmxlZCAmJiBtYWpvclVuaXQgJiYgbWFqb3JGb3JtYXQgJiYgdGltZSA9PT0gbWFqb3JUaW1lO1xuXHRcdFx0dmFyIGxhYmVsID0gdGljay5mb3JtYXQobWFqb3IgPyBtYWpvckZvcm1hdCA6IG1lLl9taW5vckZvcm1hdCk7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBtYWpvciA/IG1ham9yVGlja09wdHMgOiBvcHRpb25zLnRpY2tzLm1pbm9yO1xuXHRcdFx0dmFyIGZvcm1hdHRlciA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuY2FsbGJhY2ssIHRpY2tPcHRzLnVzZXJDYWxsYmFjayk7XG5cblx0XHRcdHJldHVybiBmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIobGFiZWwsIGluZGV4LCB0aWNrcykgOiBsYWJlbDtcblx0XHR9LFxuXG5cdFx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRsYWJlbHMucHVzaCh0aGlzLnRpY2tGb3JtYXRGdW5jdGlvbihtb21lbnQodGlja3NbaV0udmFsdWUpLCBpLCB0aWNrcykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGFiZWxzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFBpeGVsRm9yT2Zmc2V0OiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHNpemUgPSBtZS5faG9yaXpvbnRhbCA/IG1lLndpZHRoIDogbWUuaGVpZ2h0O1xuXHRcdFx0dmFyIHN0YXJ0ID0gbWUuX2hvcml6b250YWwgPyBtZS5sZWZ0IDogbWUudG9wO1xuXHRcdFx0dmFyIHBvcyA9IGludGVycG9sYXRlKG1lLl90YWJsZSwgJ3RpbWUnLCB0aW1lLCAncG9zJyk7XG5cblx0XHRcdHJldHVybiBzdGFydCArIHNpemUgKiAobWUuX29mZnNldHMubGVmdCArIHBvcykgLyAobWUuX29mZnNldHMubGVmdCArIDEgKyBtZS5fb2Zmc2V0cy5yaWdodCk7XG5cdFx0fSxcblxuXHRcdGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRpbWUgPSBudWxsO1xuXG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBkYXRhc2V0SW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aW1lID0gbWUuX3RpbWVzdGFtcHMuZGF0YXNldHNbZGF0YXNldEluZGV4XVtpbmRleF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aW1lID09PSBudWxsKSB7XG5cdFx0XHRcdHRpbWUgPSBwYXJzZSh2YWx1ZSwgbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGltZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JPZmZzZXQodGltZSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciB0aWNrcyA9IHRoaXMuZ2V0VGlja3MoKTtcblx0XHRcdHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGlja3MubGVuZ3RoID9cblx0XHRcdFx0dGhpcy5nZXRQaXhlbEZvck9mZnNldCh0aWNrc1tpbmRleF0udmFsdWUpIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9LFxuXG5cdFx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgc2l6ZSA9IG1lLl9ob3Jpem9udGFsID8gbWUud2lkdGggOiBtZS5oZWlnaHQ7XG5cdFx0XHR2YXIgc3RhcnQgPSBtZS5faG9yaXpvbnRhbCA/IG1lLmxlZnQgOiBtZS50b3A7XG5cdFx0XHR2YXIgcG9zID0gKHNpemUgPyAocGl4ZWwgLSBzdGFydCkgLyBzaXplIDogMCkgKiAobWUuX29mZnNldHMubGVmdCArIDEgKyBtZS5fb2Zmc2V0cy5sZWZ0KSAtIG1lLl9vZmZzZXRzLnJpZ2h0O1xuXHRcdFx0dmFyIHRpbWUgPSBpbnRlcnBvbGF0ZShtZS5fdGFibGUsICdwb3MnLCBwb3MsICd0aW1lJyk7XG5cblx0XHRcdHJldHVybiBtb21lbnQodGltZSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENydWRlIGFwcHJveGltYXRpb24gb2Ygd2hhdCB0aGUgbGFiZWwgd2lkdGggbWlnaHQgYmVcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldExhYmVsV2lkdGg6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRpY2tzT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0XHR2YXIgdGlja0xhYmVsV2lkdGggPSBtZS5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdFx0dmFyIGFuZ2xlID0gaGVscGVycy50b1JhZGlhbnModGlja3NPcHRzLm1heFJvdGF0aW9uKTtcblx0XHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdHZhciBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdHZhciB0aWNrRm9udFNpemUgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHRpY2tzT3B0cy5mb250U2l6ZSwgZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSk7XG5cblx0XHRcdHJldHVybiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldExhYmVsQ2FwYWNpdHk6IGZ1bmN0aW9uKGV4YW1wbGVUaW1lKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRtZS5fbWlub3JGb3JtYXQgPSBtZS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XHQvLyBQaWNrIHRoZSBsb25nZXN0IGZvcm1hdCBmb3IgZ3Vlc3RpbWF0aW9uXG5cblx0XHRcdHZhciBleGFtcGxlTGFiZWwgPSBtZS50aWNrRm9ybWF0RnVuY3Rpb24obW9tZW50KGV4YW1wbGVUaW1lKSwgMCwgW10pO1xuXHRcdFx0dmFyIHRpY2tMYWJlbFdpZHRoID0gbWUuZ2V0TGFiZWxXaWR0aChleGFtcGxlTGFiZWwpO1xuXHRcdFx0dmFyIGlubmVyV2lkdGggPSBtZS5pc0hvcml6b250YWwoKSA/IG1lLndpZHRoIDogbWUuaGVpZ2h0O1xuXG5cdFx0XHRyZXR1cm4gTWF0aC5mbG9vcihpbm5lcldpZHRoIC8gdGlja0xhYmVsV2lkdGgpO1xuXHRcdH1cblx0fSk7XG5cblx0Q2hhcnQuc2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKCd0aW1lJywgVGltZVNjYWxlLCBkZWZhdWx0Q29uZmlnKTtcbn07XG5cbn0se1wiLi4vY29yZS9jb3JlLmRlZmF1bHRzXCI6MTksXCIuLi9oZWxwZXJzL2luZGV4XCI6MzksXCJtb21lbnRcIjo1OH1dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIE1JVCBsaWNlbnNlICovXG52YXIgY29sb3JOYW1lcyA9IHJlcXVpcmUoJ2NvbG9yLW5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICBnZXRSZ2JhOiBnZXRSZ2JhLFxuICAgZ2V0SHNsYTogZ2V0SHNsYSxcbiAgIGdldFJnYjogZ2V0UmdiLFxuICAgZ2V0SHNsOiBnZXRIc2wsXG4gICBnZXRId2I6IGdldEh3YixcbiAgIGdldEFscGhhOiBnZXRBbHBoYSxcblxuICAgaGV4U3RyaW5nOiBoZXhTdHJpbmcsXG4gICByZ2JTdHJpbmc6IHJnYlN0cmluZyxcbiAgIHJnYmFTdHJpbmc6IHJnYmFTdHJpbmcsXG4gICBwZXJjZW50U3RyaW5nOiBwZXJjZW50U3RyaW5nLFxuICAgcGVyY2VudGFTdHJpbmc6IHBlcmNlbnRhU3RyaW5nLFxuICAgaHNsU3RyaW5nOiBoc2xTdHJpbmcsXG4gICBoc2xhU3RyaW5nOiBoc2xhU3RyaW5nLFxuICAgaHdiU3RyaW5nOiBod2JTdHJpbmcsXG4gICBrZXl3b3JkOiBrZXl3b3JkXG59XG5cbmZ1bmN0aW9uIGdldFJnYmEoc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGFiYnIgPSAgL14jKFthLWZBLUYwLTldezN9KSQvaSxcbiAgICAgICBoZXggPSAgL14jKFthLWZBLUYwLTldezZ9KSQvaSxcbiAgICAgICByZ2JhID0gL15yZ2JhP1xcKFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKixcXHMqKFsrLV0/XFxkKylcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpJC9pLFxuICAgICAgIHBlciA9IC9ecmdiYT9cXChcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyosXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvaSxcbiAgICAgICBrZXl3b3JkID0gLyhcXHcrKS87XG5cbiAgIHZhciByZ2IgPSBbMCwgMCwgMF0sXG4gICAgICAgYSA9IDEsXG4gICAgICAgbWF0Y2ggPSBzdHJpbmcubWF0Y2goYWJicik7XG4gICBpZiAobWF0Y2gpIHtcbiAgICAgIG1hdGNoID0gbWF0Y2hbMV07XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gcGFyc2VJbnQobWF0Y2hbaV0gKyBtYXRjaFtpXSwgMTYpO1xuICAgICAgfVxuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2goaGV4KSkge1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaC5zbGljZShpICogMiwgaSAqIDIgKyAyKSwgMTYpO1xuICAgICAgfVxuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocmdiYSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpICsgMV0pO1xuICAgICAgfVxuICAgICAgYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChtYXRjaFtpICsgMV0pICogMi41NSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChrZXl3b3JkKSkge1xuICAgICAgaWYgKG1hdGNoWzFdID09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cbiAgICAgIHJnYiA9IGNvbG9yTmFtZXNbbWF0Y2hbMV1dO1xuICAgICAgaWYgKCFyZ2IpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgIH1cblxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJnYltpXSA9IHNjYWxlKHJnYltpXSwgMCwgMjU1KTtcbiAgIH1cbiAgIGlmICghYSAmJiBhICE9IDApIHtcbiAgICAgIGEgPSAxO1xuICAgfVxuICAgZWxzZSB7XG4gICAgICBhID0gc2NhbGUoYSwgMCwgMSk7XG4gICB9XG4gICByZ2JbM10gPSBhO1xuICAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHNsYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHNsID0gL15oc2xhP1xcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvO1xuICAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGhzbCk7XG4gICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgICAgdmFyIGggPSBzY2FsZShwYXJzZUludChtYXRjaFsxXSksIDAsIDM2MCksXG4gICAgICAgICAgcyA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pLCAwLCAxMDApLFxuICAgICAgICAgIGwgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICBhID0gc2NhbGUoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcbiAgICAgIHJldHVybiBbaCwgcywgbCwgYV07XG4gICB9XG59XG5cbmZ1bmN0aW9uIGdldEh3YihzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHdiID0gL15od2JcXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLztcbiAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChod2IpO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICAgICB2YXIgaCA9IHNjYWxlKHBhcnNlSW50KG1hdGNoWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICB3ID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCksXG4gICAgICAgICAgYiA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApLFxuICAgICAgICAgIGEgPSBzY2FsZShpc05hTihhbHBoYSkgPyAxIDogYWxwaGEsIDAsIDEpO1xuICAgICAgcmV0dXJuIFtoLCB3LCBiLCBhXTtcbiAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmdiKHN0cmluZykge1xuICAgdmFyIHJnYmEgPSBnZXRSZ2JhKHN0cmluZyk7XG4gICByZXR1cm4gcmdiYSAmJiByZ2JhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRIc2woc3RyaW5nKSB7XG4gIHZhciBoc2xhID0gZ2V0SHNsYShzdHJpbmcpO1xuICByZXR1cm4gaHNsYSAmJiBoc2xhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRBbHBoYShzdHJpbmcpIHtcbiAgIHZhciB2YWxzID0gZ2V0UmdiYShzdHJpbmcpO1xuICAgaWYgKHZhbHMpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxuICAgZWxzZSBpZiAodmFscyA9IGdldEhzbGEoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG4gICBlbHNlIGlmICh2YWxzID0gZ2V0SHdiKHN0cmluZykpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxufVxuXG4vLyBnZW5lcmF0b3JzXG5mdW5jdGlvbiBoZXhTdHJpbmcocmdiKSB7XG4gICByZXR1cm4gXCIjXCIgKyBoZXhEb3VibGUocmdiWzBdKSArIGhleERvdWJsZShyZ2JbMV0pXG4gICAgICAgICAgICAgICsgaGV4RG91YmxlKHJnYlsyXSk7XG59XG5cbmZ1bmN0aW9uIHJnYlN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAocmdiYVszXSAmJiByZ2JhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKTtcbiAgIH1cbiAgIHJldHVybiBcInJnYihcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAocmdiYVszXSAhPT0gdW5kZWZpbmVkID8gcmdiYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwicmdiYShcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXVxuICAgICAgICAgICArIFwiLCBcIiArIGFscGhhICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKHJnYmFbM10gJiYgcmdiYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpO1xuICAgfVxuICAgdmFyIHIgPSBNYXRoLnJvdW5kKHJnYmFbMF0vMjU1ICogMTAwKSxcbiAgICAgICBnID0gTWF0aC5yb3VuZChyZ2JhWzFdLzI1NSAqIDEwMCksXG4gICAgICAgYiA9IE1hdGgucm91bmQocmdiYVsyXS8yNTUgKiAxMDApO1xuXG4gICByZXR1cm4gXCJyZ2IoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSlcIjtcbn1cblxuZnVuY3Rpb24gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdLzI1NSAqIDEwMCksXG4gICAgICAgZyA9IE1hdGgucm91bmQocmdiYVsxXS8yNTUgKiAxMDApLFxuICAgICAgIGIgPSBNYXRoLnJvdW5kKHJnYmFbMl0vMjU1ICogMTAwKTtcbiAgIHJldHVybiBcInJnYmEoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSwgXCIgKyAoYWxwaGEgfHwgcmdiYVszXSB8fCAxKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xTdHJpbmcoaHNsYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKGhzbGFbM10gJiYgaHNsYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gaHNsYVN0cmluZyhoc2xhLCBhbHBoYSk7XG4gICB9XG4gICByZXR1cm4gXCJoc2woXCIgKyBoc2xhWzBdICsgXCIsIFwiICsgaHNsYVsxXSArIFwiJSwgXCIgKyBoc2xhWzJdICsgXCIlKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xhU3RyaW5nKGhzbGEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHNsYVszXSAhPT0gdW5kZWZpbmVkID8gaHNsYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHNsYShcIiArIGhzbGFbMF0gKyBcIiwgXCIgKyBoc2xhWzFdICsgXCIlLCBcIiArIGhzbGFbMl0gKyBcIiUsIFwiXG4gICAgICAgICAgICsgYWxwaGEgKyBcIilcIjtcbn1cblxuLy8gaHdiIGlzIGEgYml0IGRpZmZlcmVudCB0aGFuIHJnYihhKSAmIGhzbChhKSBzaW5jZSB0aGVyZSBpcyBubyBhbHBoYSBzcGVjaWZpYyBzeW50YXhcbi8vIChod2IgaGF2ZSBhbHBoYSBvcHRpb25hbCAmIDEgaXMgZGVmYXVsdCB2YWx1ZSlcbmZ1bmN0aW9uIGh3YlN0cmluZyhod2IsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHdiWzNdICE9PSB1bmRlZmluZWQgPyBod2JbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcImh3YihcIiArIGh3YlswXSArIFwiLCBcIiArIGh3YlsxXSArIFwiJSwgXCIgKyBod2JbMl0gKyBcIiVcIlxuICAgICAgICAgICArIChhbHBoYSAhPT0gdW5kZWZpbmVkICYmIGFscGhhICE9PSAxID8gXCIsIFwiICsgYWxwaGEgOiBcIlwiKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkKHJnYikge1xuICByZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIHNjYWxlKG51bSwgbWluLCBtYXgpIHtcbiAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyBcIjBcIiArIHN0ciA6IHN0cjtcbn1cblxuXG4vL2NyZWF0ZSBhIGxpc3Qgb2YgcmV2ZXJzZSBjb2xvciBuYW1lc1xudmFyIHJldmVyc2VOYW1lcyA9IHt9O1xuZm9yICh2YXIgbmFtZSBpbiBjb2xvck5hbWVzKSB7XG4gICByZXZlcnNlTmFtZXNbY29sb3JOYW1lc1tuYW1lXV0gPSBuYW1lO1xufVxuXG59LHtcImNvbG9yLW5hbWVcIjo1Nn1dLDUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIE1JVCBsaWNlbnNlICovXG52YXIgY29udmVydCA9IHJlcXVpcmUoJ2NvbG9yLWNvbnZlcnQnKTtcbnZhciBzdHJpbmcgPSByZXF1aXJlKCdjaGFydGpzLWNvbG9yLXN0cmluZycpO1xuXG52YXIgQ29sb3IgPSBmdW5jdGlvbiAob2JqKSB7XG5cdGlmIChvYmogaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdHJldHVybiBvYmo7XG5cdH1cblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIENvbG9yKSkge1xuXHRcdHJldHVybiBuZXcgQ29sb3Iob2JqKTtcblx0fVxuXG5cdHRoaXMudmFsaWQgPSBmYWxzZTtcblx0dGhpcy52YWx1ZXMgPSB7XG5cdFx0cmdiOiBbMCwgMCwgMF0sXG5cdFx0aHNsOiBbMCwgMCwgMF0sXG5cdFx0aHN2OiBbMCwgMCwgMF0sXG5cdFx0aHdiOiBbMCwgMCwgMF0sXG5cdFx0Y215azogWzAsIDAsIDAsIDBdLFxuXHRcdGFscGhhOiAxXG5cdH07XG5cblx0Ly8gcGFyc2UgQ29sb3IoKSBhcmd1bWVudFxuXHR2YXIgdmFscztcblx0aWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG5cdFx0dmFscyA9IHN0cmluZy5nZXRSZ2JhKG9iaik7XG5cdFx0aWYgKHZhbHMpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMgPSBzdHJpbmcuZ2V0SHNsYShvYmopKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzID0gc3RyaW5nLmdldEh3YihvYmopKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG5cdFx0dmFscyA9IG9iajtcblx0XHRpZiAodmFscy5yICE9PSB1bmRlZmluZWQgfHwgdmFscy5yZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy5sICE9PSB1bmRlZmluZWQgfHwgdmFscy5saWdodG5lc3MgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscy52ICE9PSB1bmRlZmluZWQgfHwgdmFscy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHN2JywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLncgIT09IHVuZGVmaW5lZCB8fCB2YWxzLndoaXRlbmVzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLmMgIT09IHVuZGVmaW5lZCB8fCB2YWxzLmN5YW4gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ2NteWsnLCB2YWxzKTtcblx0XHR9XG5cdH1cbn07XG5cbkNvbG9yLnByb3RvdHlwZSA9IHtcblx0aXNWYWxpZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbGlkO1xuXHR9LFxuXHRyZ2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgncmdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0aHNsOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2hzbCcsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGhzdjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdoc3YnLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRod2I6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHdiJywgYXJndW1lbnRzKTtcblx0fSxcblx0Y215azogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdjbXlrJywgYXJndW1lbnRzKTtcblx0fSxcblxuXHRyZ2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5yZ2I7XG5cdH0sXG5cdGhzbEFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmhzbDtcblx0fSxcblx0aHN2QXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaHN2O1xuXHR9LFxuXHRod2JBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRpZiAodmFsdWVzLmFscGhhICE9PSAxKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWVzLmh3Yi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsdWVzLmh3Yjtcblx0fSxcblx0Y215a0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLmNteWs7XG5cdH0sXG5cdHJnYmFBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRyZXR1cm4gdmFsdWVzLnJnYi5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHR9LFxuXHRoc2xhQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdFx0cmV0dXJuIHZhbHVlcy5oc2wuY29uY2F0KFt2YWx1ZXMuYWxwaGFdKTtcblx0fSxcblx0YWxwaGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJldHVybiB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgdmFsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZWQ6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAwLCB2YWwpO1xuXHR9LFxuXHRncmVlbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ3JnYicsIDEsIHZhbCk7XG5cdH0sXG5cdGJsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdyZ2InLCAyLCB2YWwpO1xuXHR9LFxuXHRodWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRpZiAodmFsKSB7XG5cdFx0XHR2YWwgJT0gMzYwO1xuXHRcdFx0dmFsID0gdmFsIDwgMCA/IDM2MCArIHZhbCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHNsJywgMCwgdmFsKTtcblx0fSxcblx0c2F0dXJhdGlvbjogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDEsIHZhbCk7XG5cdH0sXG5cdGxpZ2h0bmVzczogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzbCcsIDIsIHZhbCk7XG5cdH0sXG5cdHNhdHVyYXRpb252OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHN2JywgMSwgdmFsKTtcblx0fSxcblx0d2hpdGVuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMSwgdmFsKTtcblx0fSxcblx0YmxhY2tuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHdiJywgMiwgdmFsKTtcblx0fSxcblx0dmFsdWU6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc3YnLCAyLCB2YWwpO1xuXHR9LFxuXHRjeWFuOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDAsIHZhbCk7XG5cdH0sXG5cdG1hZ2VudGE6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMSwgdmFsKTtcblx0fSxcblx0eWVsbG93OiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDIsIHZhbCk7XG5cdH0sXG5cdGJsYWNrOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnY215aycsIDMsIHZhbCk7XG5cdH0sXG5cblx0aGV4U3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5oZXhTdHJpbmcodGhpcy52YWx1ZXMucmdiKTtcblx0fSxcblx0cmdiU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZ2JTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdHJnYmFTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJnYmFTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdHBlcmNlbnRTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnBlcmNlbnRTdHJpbmcodGhpcy52YWx1ZXMucmdiLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGhzbFN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcuaHNsU3RyaW5nKHRoaXMudmFsdWVzLmhzbCwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRoc2xhU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5oc2xhU3RyaW5nKHRoaXMudmFsdWVzLmhzbCwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRod2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmh3YlN0cmluZyh0aGlzLnZhbHVlcy5od2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0a2V5d29yZDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcua2V5d29yZCh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblxuXHRyZ2JOdW1iZXI6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdHJldHVybiAocmdiWzBdIDw8IDE2KSB8IChyZ2JbMV0gPDwgOCkgfCByZ2JbMl07XG5cdH0sXG5cblx0bHVtaW5vc2l0eTogZnVuY3Rpb24gKCkge1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jcmVsYXRpdmVsdW1pbmFuY2VkZWZcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdHZhciBsdW0gPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGNoYW4gPSByZ2JbaV0gLyAyNTU7XG5cdFx0XHRsdW1baV0gPSAoY2hhbiA8PSAwLjAzOTI4KSA/IGNoYW4gLyAxMi45MiA6IE1hdGgucG93KCgoY2hhbiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuMjEyNiAqIGx1bVswXSArIDAuNzE1MiAqIGx1bVsxXSArIDAuMDcyMiAqIGx1bVsyXTtcblx0fSxcblxuXHRjb250cmFzdDogZnVuY3Rpb24gKGNvbG9yMikge1xuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1dDQUcyMC8jY29udHJhc3QtcmF0aW9kZWZcblx0XHR2YXIgbHVtMSA9IHRoaXMubHVtaW5vc2l0eSgpO1xuXHRcdHZhciBsdW0yID0gY29sb3IyLmx1bWlub3NpdHkoKTtcblx0XHRpZiAobHVtMSA+IGx1bTIpIHtcblx0XHRcdHJldHVybiAobHVtMSArIDAuMDUpIC8gKGx1bTIgKyAwLjA1KTtcblx0XHR9XG5cdFx0cmV0dXJuIChsdW0yICsgMC4wNSkgLyAobHVtMSArIDAuMDUpO1xuXHR9LFxuXG5cdGxldmVsOiBmdW5jdGlvbiAoY29sb3IyKSB7XG5cdFx0dmFyIGNvbnRyYXN0UmF0aW8gPSB0aGlzLmNvbnRyYXN0KGNvbG9yMik7XG5cdFx0aWYgKGNvbnRyYXN0UmF0aW8gPj0gNy4xKSB7XG5cdFx0XHRyZXR1cm4gJ0FBQSc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChjb250cmFzdFJhdGlvID49IDQuNSkgPyAnQUEnIDogJyc7XG5cdH0sXG5cblx0ZGFyazogZnVuY3Rpb24gKCkge1xuXHRcdC8vIFlJUSBlcXVhdGlvbiBmcm9tIGh0dHA6Ly8yNHdheXMub3JnLzIwMTAvY2FsY3VsYXRpbmctY29sb3ItY29udHJhc3Rcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdHZhciB5aXEgPSAocmdiWzBdICogMjk5ICsgcmdiWzFdICogNTg3ICsgcmdiWzJdICogMTE0KSAvIDEwMDA7XG5cdFx0cmV0dXJuIHlpcSA8IDEyODtcblx0fSxcblxuXHRsaWdodDogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiAhdGhpcy5kYXJrKCk7XG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0XHRyZ2JbaV0gPSAyNTUgLSB0aGlzLnZhbHVlcy5yZ2JbaV07XG5cdFx0fVxuXHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCByZ2IpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGxpZ2h0ZW46IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0aHNsWzJdICs9IGhzbFsyXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGRhcmtlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMl0gLT0gaHNsWzJdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0c2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0aHNsWzFdICs9IGhzbFsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGRlc2F0dXJhdGU6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0aHNsWzFdIC09IGhzbFsxXSAqIHJhdGlvO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdoaXRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMudmFsdWVzLmh3Yjtcblx0XHRod2JbMV0gKz0gaHdiWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2h3YicsIGh3Yik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0YmxhY2tlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGh3YiA9IHRoaXMudmFsdWVzLmh3Yjtcblx0XHRod2JbMl0gKz0gaHdiWzJdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2h3YicsIGh3Yik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Z3JleXNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHJnYiA9IHRoaXMudmFsdWVzLnJnYjtcblx0XHQvLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0dyYXlzY2FsZSNDb252ZXJ0aW5nX2NvbG9yX3RvX2dyYXlzY2FsZVxuXHRcdHZhciB2YWwgPSByZ2JbMF0gKiAwLjMgKyByZ2JbMV0gKiAwLjU5ICsgcmdiWzJdICogMC4xMTtcblx0XHR0aGlzLnNldFZhbHVlcygncmdiJywgW3ZhbCwgdmFsLCB2YWxdKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbGVhcmVyOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgYWxwaGEgPSB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR0aGlzLnNldFZhbHVlcygnYWxwaGEnLCBhbHBoYSAtIChhbHBoYSAqIHJhdGlvKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0b3BhcXVlcjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGFscGhhID0gdGhpcy52YWx1ZXMuYWxwaGE7XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2FscGhhJywgYWxwaGEgKyAoYWxwaGEgKiByYXRpbykpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJvdGF0ZTogZnVuY3Rpb24gKGRlZ3JlZXMpIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdHZhciBodWUgPSAoaHNsWzBdICsgZGVncmVlcykgJSAzNjA7XG5cdFx0aHNsWzBdID0gaHVlIDwgMCA/IDM2MCArIGh1ZSA6IGh1ZTtcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHQvKipcblx0ICogUG9ydGVkIGZyb20gc2FzcyBpbXBsZW1lbnRhdGlvbiBpbiBDXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9zYXNzL2xpYnNhc3MvYmxvYi8wZTZiNGEyODUwMDkyMzU2YWEzZWNlMDdjNmIyNDlmMDIyMWNhY2VkL2Z1bmN0aW9ucy5jcHAjTDIwOVxuXHQgKi9cblx0bWl4OiBmdW5jdGlvbiAobWl4aW5Db2xvciwgd2VpZ2h0KSB7XG5cdFx0dmFyIGNvbG9yMSA9IHRoaXM7XG5cdFx0dmFyIGNvbG9yMiA9IG1peGluQ29sb3I7XG5cdFx0dmFyIHAgPSB3ZWlnaHQgPT09IHVuZGVmaW5lZCA/IDAuNSA6IHdlaWdodDtcblxuXHRcdHZhciB3ID0gMiAqIHAgLSAxO1xuXHRcdHZhciBhID0gY29sb3IxLmFscGhhKCkgLSBjb2xvcjIuYWxwaGEoKTtcblxuXHRcdHZhciB3MSA9ICgoKHcgKiBhID09PSAtMSkgPyB3IDogKHcgKyBhKSAvICgxICsgdyAqIGEpKSArIDEpIC8gMi4wO1xuXHRcdHZhciB3MiA9IDEgLSB3MTtcblxuXHRcdHJldHVybiB0aGlzXG5cdFx0XHQucmdiKFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5yZWQoKSArIHcyICogY29sb3IyLnJlZCgpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ncmVlbigpICsgdzIgKiBjb2xvcjIuZ3JlZW4oKSxcblx0XHRcdFx0dzEgKiBjb2xvcjEuYmx1ZSgpICsgdzIgKiBjb2xvcjIuYmx1ZSgpXG5cdFx0XHQpXG5cdFx0XHQuYWxwaGEoY29sb3IxLmFscGhhKCkgKiBwICsgY29sb3IyLmFscGhhKCkgKiAoMSAtIHApKTtcblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5yZ2IoKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXHRcdC8vIE5PVEUoU0IpOiB1c2luZyBub2RlLWNsb25lIGNyZWF0ZXMgYSBkZXBlbmRlbmN5IHRvIEJ1ZmZlciB3aGVuIHVzaW5nIGJyb3dzZXJpZnksXG5cdFx0Ly8gbWFraW5nIHRoZSBmaW5hbCBidWlsZCB3YXkgdG8gYmlnIHRvIGVtYmVkIGluIENoYXJ0LmpzLiBTbyBsZXQncyBkbyBpdCBtYW51YWxseSxcblx0XHQvLyBhc3N1bWluZyB0aGF0IHZhbHVlcyB0byBjbG9uZSBhcmUgMSBkaW1lbnNpb24gYXJyYXlzIGNvbnRhaW5pbmcgb25seSBudW1iZXJzLFxuXHRcdC8vIGV4Y2VwdCAnYWxwaGEnIHdoaWNoIGlzIGEgbnVtYmVyLlxuXHRcdHZhciByZXN1bHQgPSBuZXcgQ29sb3IoKTtcblx0XHR2YXIgc291cmNlID0gdGhpcy52YWx1ZXM7XG5cdFx0dmFyIHRhcmdldCA9IHJlc3VsdC52YWx1ZXM7XG5cdFx0dmFyIHZhbHVlLCB0eXBlO1xuXG5cdFx0Zm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcblx0XHRcdGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0dmFsdWUgPSBzb3VyY2VbcHJvcF07XG5cdFx0XHRcdHR5cGUgPSAoe30pLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXHRcdFx0XHRpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuXHRcdFx0XHRcdHRhcmdldFtwcm9wXSA9IHZhbHVlLnNsaWNlKDApO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG5cdFx0XHRcdFx0dGFyZ2V0W3Byb3BdID0gdmFsdWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcigndW5leHBlY3RlZCBjb2xvciB2YWx1ZTonLCB2YWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc3BhY2VzID0ge1xuXHRyZ2I6IFsncmVkJywgJ2dyZWVuJywgJ2JsdWUnXSxcblx0aHNsOiBbJ2h1ZScsICdzYXR1cmF0aW9uJywgJ2xpZ2h0bmVzcyddLFxuXHRoc3Y6IFsnaHVlJywgJ3NhdHVyYXRpb24nLCAndmFsdWUnXSxcblx0aHdiOiBbJ2h1ZScsICd3aGl0ZW5lc3MnLCAnYmxhY2tuZXNzJ10sXG5cdGNteWs6IFsnY3lhbicsICdtYWdlbnRhJywgJ3llbGxvdycsICdibGFjayddXG59O1xuXG5Db2xvci5wcm90b3R5cGUubWF4ZXMgPSB7XG5cdHJnYjogWzI1NSwgMjU1LCAyNTVdLFxuXHRoc2w6IFszNjAsIDEwMCwgMTAwXSxcblx0aHN2OiBbMzYwLCAxMDAsIDEwMF0sXG5cdGh3YjogWzM2MCwgMTAwLCAxMDBdLFxuXHRjbXlrOiBbMTAwLCAxMDAsIDEwMCwgMTAwXVxufTtcblxuQ29sb3IucHJvdG90eXBlLmdldFZhbHVlcyA9IGZ1bmN0aW9uIChzcGFjZSkge1xuXHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXM7XG5cdHZhciB2YWxzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdHZhbHNbc3BhY2UuY2hhckF0KGkpXSA9IHZhbHVlc1tzcGFjZV1baV07XG5cdH1cblxuXHRpZiAodmFsdWVzLmFscGhhICE9PSAxKSB7XG5cdFx0dmFscy5hID0gdmFsdWVzLmFscGhhO1xuXHR9XG5cblx0Ly8ge3I6IDI1NSwgZzogMjU1LCBiOiAyNTUsIGE6IDAuNH1cblx0cmV0dXJuIHZhbHM7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0VmFsdWVzID0gZnVuY3Rpb24gKHNwYWNlLCB2YWxzKSB7XG5cdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0dmFyIHNwYWNlcyA9IHRoaXMuc3BhY2VzO1xuXHR2YXIgbWF4ZXMgPSB0aGlzLm1heGVzO1xuXHR2YXIgYWxwaGEgPSAxO1xuXHR2YXIgaTtcblxuXHR0aGlzLnZhbGlkID0gdHJ1ZTtcblxuXHRpZiAoc3BhY2UgPT09ICdhbHBoYScpIHtcblx0XHRhbHBoYSA9IHZhbHM7XG5cdH0gZWxzZSBpZiAodmFscy5sZW5ndGgpIHtcblx0XHQvLyBbMTAsIDEwLCAxMF1cblx0XHR2YWx1ZXNbc3BhY2VdID0gdmFscy5zbGljZSgwLCBzcGFjZS5sZW5ndGgpO1xuXHRcdGFscGhhID0gdmFsc1tzcGFjZS5sZW5ndGhdO1xuXHR9IGVsc2UgaWYgKHZhbHNbc3BhY2UuY2hhckF0KDApXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8ge3I6IDEwLCBnOiAxMCwgYjogMTB9XG5cdFx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YWx1ZXNbc3BhY2VdW2ldID0gdmFsc1tzcGFjZS5jaGFyQXQoaSldO1xuXHRcdH1cblxuXHRcdGFscGhhID0gdmFscy5hO1xuXHR9IGVsc2UgaWYgKHZhbHNbc3BhY2VzW3NwYWNlXVswXV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIHtyZWQ6IDEwLCBncmVlbjogMTAsIGJsdWU6IDEwfVxuXHRcdHZhciBjaGFucyA9IHNwYWNlc1tzcGFjZV07XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhbHVlc1tzcGFjZV1baV0gPSB2YWxzW2NoYW5zW2ldXTtcblx0XHR9XG5cblx0XHRhbHBoYSA9IHZhbHMuYWxwaGE7XG5cdH1cblxuXHR2YWx1ZXMuYWxwaGEgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAoYWxwaGEgPT09IHVuZGVmaW5lZCA/IHZhbHVlcy5hbHBoYSA6IGFscGhhKSkpO1xuXG5cdGlmIChzcGFjZSA9PT0gJ2FscGhhJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBjYXBwZWQ7XG5cblx0Ly8gY2FwIHZhbHVlcyBvZiB0aGUgc3BhY2UgcHJpb3IgY29udmVydGluZyBhbGwgdmFsdWVzXG5cdGZvciAoaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdGNhcHBlZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1heGVzW3NwYWNlXVtpXSwgdmFsdWVzW3NwYWNlXVtpXSkpO1xuXHRcdHZhbHVlc1tzcGFjZV1baV0gPSBNYXRoLnJvdW5kKGNhcHBlZCk7XG5cdH1cblxuXHQvLyBjb252ZXJ0IHRvIGFsbCB0aGUgb3RoZXIgY29sb3Igc3BhY2VzXG5cdGZvciAodmFyIHNuYW1lIGluIHNwYWNlcykge1xuXHRcdGlmIChzbmFtZSAhPT0gc3BhY2UpIHtcblx0XHRcdHZhbHVlc1tzbmFtZV0gPSBjb252ZXJ0W3NwYWNlXVtzbmFtZV0odmFsdWVzW3NwYWNlXSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0U3BhY2UgPSBmdW5jdGlvbiAoc3BhY2UsIGFyZ3MpIHtcblx0dmFyIHZhbHMgPSBhcmdzWzBdO1xuXG5cdGlmICh2YWxzID09PSB1bmRlZmluZWQpIHtcblx0XHQvLyBjb2xvci5yZ2IoKVxuXHRcdHJldHVybiB0aGlzLmdldFZhbHVlcyhzcGFjZSk7XG5cdH1cblxuXHQvLyBjb2xvci5yZ2IoMTAsIDEwLCAxMClcblx0aWYgKHR5cGVvZiB2YWxzID09PSAnbnVtYmVyJykge1xuXHRcdHZhbHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKTtcblx0fVxuXG5cdHRoaXMuc2V0VmFsdWVzKHNwYWNlLCB2YWxzKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG5Db2xvci5wcm90b3R5cGUuc2V0Q2hhbm5lbCA9IGZ1bmN0aW9uIChzcGFjZSwgaW5kZXgsIHZhbCkge1xuXHR2YXIgc3ZhbHVlcyA9IHRoaXMudmFsdWVzW3NwYWNlXTtcblx0aWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gY29sb3IucmVkKClcblx0XHRyZXR1cm4gc3ZhbHVlc1tpbmRleF07XG5cdH0gZWxzZSBpZiAodmFsID09PSBzdmFsdWVzW2luZGV4XSkge1xuXHRcdC8vIGNvbG9yLnJlZChjb2xvci5yZWQoKSlcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8vIGNvbG9yLnJlZCgxMDApXG5cdHN2YWx1ZXNbaW5kZXhdID0gdmFsO1xuXHR0aGlzLnNldFZhbHVlcyhzcGFjZSwgc3ZhbHVlcyk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkNvbG9yID0gQ29sb3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29sb3I7XG5cbn0se1wiY2hhcnRqcy1jb2xvci1zdHJpbmdcIjo1MixcImNvbG9yLWNvbnZlcnRcIjo1NX1dLDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIE1JVCBsaWNlbnNlICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZ2IyaHNsOiByZ2IyaHNsLFxuICByZ2IyaHN2OiByZ2IyaHN2LFxuICByZ2IyaHdiOiByZ2IyaHdiLFxuICByZ2IyY215azogcmdiMmNteWssXG4gIHJnYjJrZXl3b3JkOiByZ2Iya2V5d29yZCxcbiAgcmdiMnh5ejogcmdiMnh5eixcbiAgcmdiMmxhYjogcmdiMmxhYixcbiAgcmdiMmxjaDogcmdiMmxjaCxcblxuICBoc2wycmdiOiBoc2wycmdiLFxuICBoc2wyaHN2OiBoc2wyaHN2LFxuICBoc2wyaHdiOiBoc2wyaHdiLFxuICBoc2wyY215azogaHNsMmNteWssXG4gIGhzbDJrZXl3b3JkOiBoc2wya2V5d29yZCxcblxuICBoc3YycmdiOiBoc3YycmdiLFxuICBoc3YyaHNsOiBoc3YyaHNsLFxuICBoc3YyaHdiOiBoc3YyaHdiLFxuICBoc3YyY215azogaHN2MmNteWssXG4gIGhzdjJrZXl3b3JkOiBoc3Yya2V5d29yZCxcblxuICBod2IycmdiOiBod2IycmdiLFxuICBod2IyaHNsOiBod2IyaHNsLFxuICBod2IyaHN2OiBod2IyaHN2LFxuICBod2IyY215azogaHdiMmNteWssXG4gIGh3YjJrZXl3b3JkOiBod2Iya2V5d29yZCxcblxuICBjbXlrMnJnYjogY215azJyZ2IsXG4gIGNteWsyaHNsOiBjbXlrMmhzbCxcbiAgY215azJoc3Y6IGNteWsyaHN2LFxuICBjbXlrMmh3YjogY215azJod2IsXG4gIGNteWsya2V5d29yZDogY215azJrZXl3b3JkLFxuXG4gIGtleXdvcmQycmdiOiBrZXl3b3JkMnJnYixcbiAga2V5d29yZDJoc2w6IGtleXdvcmQyaHNsLFxuICBrZXl3b3JkMmhzdjoga2V5d29yZDJoc3YsXG4gIGtleXdvcmQyaHdiOiBrZXl3b3JkMmh3YixcbiAga2V5d29yZDJjbXlrOiBrZXl3b3JkMmNteWssXG4gIGtleXdvcmQybGFiOiBrZXl3b3JkMmxhYixcbiAga2V5d29yZDJ4eXo6IGtleXdvcmQyeHl6LFxuXG4gIHh5ejJyZ2I6IHh5ejJyZ2IsXG4gIHh5ejJsYWI6IHh5ejJsYWIsXG4gIHh5ejJsY2g6IHh5ejJsY2gsXG5cbiAgbGFiMnh5ejogbGFiMnh5eixcbiAgbGFiMnJnYjogbGFiMnJnYixcbiAgbGFiMmxjaDogbGFiMmxjaCxcblxuICBsY2gybGFiOiBsY2gybGFiLFxuICBsY2gyeHl6OiBsY2gyeHl6LFxuICBsY2gycmdiOiBsY2gycmdiXG59XG5cblxuZnVuY3Rpb24gcmdiMmhzbChyZ2IpIHtcbiAgdmFyIHIgPSByZ2JbMF0vMjU1LFxuICAgICAgZyA9IHJnYlsxXS8yNTUsXG4gICAgICBiID0gcmdiWzJdLzI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBkZWx0YSA9IG1heCAtIG1pbixcbiAgICAgIGgsIHMsIGw7XG5cbiAgaWYgKG1heCA9PSBtaW4pXG4gICAgaCA9IDA7XG4gIGVsc2UgaWYgKHIgPT0gbWF4KVxuICAgIGggPSAoZyAtIGIpIC8gZGVsdGE7XG4gIGVsc2UgaWYgKGcgPT0gbWF4KVxuICAgIGggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xuICBlbHNlIGlmIChiID09IG1heClcbiAgICBoID0gNCArIChyIC0gZykvIGRlbHRhO1xuXG4gIGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cbiAgaWYgKGggPCAwKVxuICAgIGggKz0gMzYwO1xuXG4gIGwgPSAobWluICsgbWF4KSAvIDI7XG5cbiAgaWYgKG1heCA9PSBtaW4pXG4gICAgcyA9IDA7XG4gIGVsc2UgaWYgKGwgPD0gMC41KVxuICAgIHMgPSBkZWx0YSAvIChtYXggKyBtaW4pO1xuICBlbHNlXG4gICAgcyA9IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xuXG4gIHJldHVybiBbaCwgcyAqIDEwMCwgbCAqIDEwMF07XG59XG5cbmZ1bmN0aW9uIHJnYjJoc3YocmdiKSB7XG4gIHZhciByID0gcmdiWzBdLFxuICAgICAgZyA9IHJnYlsxXSxcbiAgICAgIGIgPSByZ2JbMl0sXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgZGVsdGEgPSBtYXggLSBtaW4sXG4gICAgICBoLCBzLCB2O1xuXG4gIGlmIChtYXggPT0gMClcbiAgICBzID0gMDtcbiAgZWxzZVxuICAgIHMgPSAoZGVsdGEvbWF4ICogMTAwMCkvMTA7XG5cbiAgaWYgKG1heCA9PSBtaW4pXG4gICAgaCA9IDA7XG4gIGVsc2UgaWYgKHIgPT0gbWF4KVxuICAgIGggPSAoZyAtIGIpIC8gZGVsdGE7XG4gIGVsc2UgaWYgKGcgPT0gbWF4KVxuICAgIGggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xuICBlbHNlIGlmIChiID09IG1heClcbiAgICBoID0gNCArIChyIC0gZykgLyBkZWx0YTtcblxuICBoID0gTWF0aC5taW4oaCAqIDYwLCAzNjApO1xuXG4gIGlmIChoIDwgMClcbiAgICBoICs9IDM2MDtcblxuICB2ID0gKChtYXggLyAyNTUpICogMTAwMCkgLyAxMDtcblxuICByZXR1cm4gW2gsIHMsIHZdO1xufVxuXG5mdW5jdGlvbiByZ2IyaHdiKHJnYikge1xuICB2YXIgciA9IHJnYlswXSxcbiAgICAgIGcgPSByZ2JbMV0sXG4gICAgICBiID0gcmdiWzJdLFxuICAgICAgaCA9IHJnYjJoc2wocmdiKVswXSxcbiAgICAgIHcgPSAxLzI1NSAqIE1hdGgubWluKHIsIE1hdGgubWluKGcsIGIpKSxcbiAgICAgIGIgPSAxIC0gMS8yNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG5cbiAgcmV0dXJuIFtoLCB3ICogMTAwLCBiICogMTAwXTtcbn1cblxuZnVuY3Rpb24gcmdiMmNteWsocmdiKSB7XG4gIHZhciByID0gcmdiWzBdIC8gMjU1LFxuICAgICAgZyA9IHJnYlsxXSAvIDI1NSxcbiAgICAgIGIgPSByZ2JbMl0gLyAyNTUsXG4gICAgICBjLCBtLCB5LCBrO1xuXG4gIGsgPSBNYXRoLm1pbigxIC0gciwgMSAtIGcsIDEgLSBiKTtcbiAgYyA9ICgxIC0gciAtIGspIC8gKDEgLSBrKSB8fCAwO1xuICBtID0gKDEgLSBnIC0gaykgLyAoMSAtIGspIHx8IDA7XG4gIHkgPSAoMSAtIGIgLSBrKSAvICgxIC0gaykgfHwgMDtcbiAgcmV0dXJuIFtjICogMTAwLCBtICogMTAwLCB5ICogMTAwLCBrICogMTAwXTtcbn1cblxuZnVuY3Rpb24gcmdiMmtleXdvcmQocmdiKSB7XG4gIHJldHVybiByZXZlcnNlS2V5d29yZHNbSlNPTi5zdHJpbmdpZnkocmdiKV07XG59XG5cbmZ1bmN0aW9uIHJnYjJ4eXoocmdiKSB7XG4gIHZhciByID0gcmdiWzBdIC8gMjU1LFxuICAgICAgZyA9IHJnYlsxXSAvIDI1NSxcbiAgICAgIGIgPSByZ2JbMl0gLyAyNTU7XG5cbiAgLy8gYXNzdW1lIHNSR0JcbiAgciA9IHIgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChyICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKHIgLyAxMi45Mik7XG4gIGcgPSBnID4gMC4wNDA0NSA/IE1hdGgucG93KCgoZyArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChnIC8gMTIuOTIpO1xuICBiID0gYiA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKGIgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAoYiAvIDEyLjkyKTtcblxuICB2YXIgeCA9IChyICogMC40MTI0KSArIChnICogMC4zNTc2KSArIChiICogMC4xODA1KTtcbiAgdmFyIHkgPSAociAqIDAuMjEyNikgKyAoZyAqIDAuNzE1MikgKyAoYiAqIDAuMDcyMik7XG4gIHZhciB6ID0gKHIgKiAwLjAxOTMpICsgKGcgKiAwLjExOTIpICsgKGIgKiAwLjk1MDUpO1xuXG4gIHJldHVybiBbeCAqIDEwMCwgeSAqMTAwLCB6ICogMTAwXTtcbn1cblxuZnVuY3Rpb24gcmdiMmxhYihyZ2IpIHtcbiAgdmFyIHh5eiA9IHJnYjJ4eXoocmdiKSxcbiAgICAgICAgeCA9IHh5elswXSxcbiAgICAgICAgeSA9IHh5elsxXSxcbiAgICAgICAgeiA9IHh5elsyXSxcbiAgICAgICAgbCwgYSwgYjtcblxuICB4IC89IDk1LjA0NztcbiAgeSAvPSAxMDA7XG4gIHogLz0gMTA4Ljg4MztcblxuICB4ID0geCA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeCwgMS8zKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcbiAgeSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEvMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG4gIHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxLzMpIDogKDcuNzg3ICogeikgKyAoMTYgLyAxMTYpO1xuXG4gIGwgPSAoMTE2ICogeSkgLSAxNjtcbiAgYSA9IDUwMCAqICh4IC0geSk7XG4gIGIgPSAyMDAgKiAoeSAtIHopO1xuXG4gIHJldHVybiBbbCwgYSwgYl07XG59XG5cbmZ1bmN0aW9uIHJnYjJsY2goYXJncykge1xuICByZXR1cm4gbGFiMmxjaChyZ2IybGFiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gaHNsMnJnYihoc2wpIHtcbiAgdmFyIGggPSBoc2xbMF0gLyAzNjAsXG4gICAgICBzID0gaHNsWzFdIC8gMTAwLFxuICAgICAgbCA9IGhzbFsyXSAvIDEwMCxcbiAgICAgIHQxLCB0MiwgdDMsIHJnYiwgdmFsO1xuXG4gIGlmIChzID09IDApIHtcbiAgICB2YWwgPSBsICogMjU1O1xuICAgIHJldHVybiBbdmFsLCB2YWwsIHZhbF07XG4gIH1cblxuICBpZiAobCA8IDAuNSlcbiAgICB0MiA9IGwgKiAoMSArIHMpO1xuICBlbHNlXG4gICAgdDIgPSBsICsgcyAtIGwgKiBzO1xuICB0MSA9IDIgKiBsIC0gdDI7XG5cbiAgcmdiID0gWzAsIDAsIDBdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHQzID0gaCArIDEgLyAzICogLSAoaSAtIDEpO1xuICAgIHQzIDwgMCAmJiB0MysrO1xuICAgIHQzID4gMSAmJiB0My0tO1xuXG4gICAgaWYgKDYgKiB0MyA8IDEpXG4gICAgICB2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0MztcbiAgICBlbHNlIGlmICgyICogdDMgPCAxKVxuICAgICAgdmFsID0gdDI7XG4gICAgZWxzZSBpZiAoMyAqIHQzIDwgMilcbiAgICAgIHZhbCA9IHQxICsgKHQyIC0gdDEpICogKDIgLyAzIC0gdDMpICogNjtcbiAgICBlbHNlXG4gICAgICB2YWwgPSB0MTtcblxuICAgIHJnYltpXSA9IHZhbCAqIDI1NTtcbiAgfVxuXG4gIHJldHVybiByZ2I7XG59XG5cbmZ1bmN0aW9uIGhzbDJoc3YoaHNsKSB7XG4gIHZhciBoID0gaHNsWzBdLFxuICAgICAgcyA9IGhzbFsxXSAvIDEwMCxcbiAgICAgIGwgPSBoc2xbMl0gLyAxMDAsXG4gICAgICBzdiwgdjtcblxuICBpZihsID09PSAwKSB7XG4gICAgICAvLyBubyBuZWVkIHRvIGRvIGNhbGMgb24gYmxhY2tcbiAgICAgIC8vIGFsc28gYXZvaWRzIGRpdmlkZSBieSAwIGVycm9yXG4gICAgICByZXR1cm4gWzAsIDAsIDBdO1xuICB9XG5cbiAgbCAqPSAyO1xuICBzICo9IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuICB2ID0gKGwgKyBzKSAvIDI7XG4gIHN2ID0gKDIgKiBzKSAvIChsICsgcyk7XG4gIHJldHVybiBbaCwgc3YgKiAxMDAsIHYgKiAxMDBdO1xufVxuXG5mdW5jdGlvbiBoc2wyaHdiKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJod2IoaHNsMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGhzbDJjbXlrKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJjbXlrKGhzbDJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBoc2wya2V5d29yZChhcmdzKSB7XG4gIHJldHVybiByZ2Iya2V5d29yZChoc2wycmdiKGFyZ3MpKTtcbn1cblxuXG5mdW5jdGlvbiBoc3YycmdiKGhzdikge1xuICB2YXIgaCA9IGhzdlswXSAvIDYwLFxuICAgICAgcyA9IGhzdlsxXSAvIDEwMCxcbiAgICAgIHYgPSBoc3ZbMl0gLyAxMDAsXG4gICAgICBoaSA9IE1hdGguZmxvb3IoaCkgJSA2O1xuXG4gIHZhciBmID0gaCAtIE1hdGguZmxvb3IoaCksXG4gICAgICBwID0gMjU1ICogdiAqICgxIC0gcyksXG4gICAgICBxID0gMjU1ICogdiAqICgxIC0gKHMgKiBmKSksXG4gICAgICB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSksXG4gICAgICB2ID0gMjU1ICogdjtcblxuICBzd2l0Y2goaGkpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gW3YsIHQsIHBdO1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBbcSwgdiwgcF07XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIFtwLCB2LCB0XTtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gW3AsIHEsIHZdO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBbdCwgcCwgdl07XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIFt2LCBwLCBxXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoc3YyaHNsKGhzdikge1xuICB2YXIgaCA9IGhzdlswXSxcbiAgICAgIHMgPSBoc3ZbMV0gLyAxMDAsXG4gICAgICB2ID0gaHN2WzJdIC8gMTAwLFxuICAgICAgc2wsIGw7XG5cbiAgbCA9ICgyIC0gcykgKiB2O1xuICBzbCA9IHMgKiB2O1xuICBzbCAvPSAobCA8PSAxKSA/IGwgOiAyIC0gbDtcbiAgc2wgPSBzbCB8fCAwO1xuICBsIC89IDI7XG4gIHJldHVybiBbaCwgc2wgKiAxMDAsIGwgKiAxMDBdO1xufVxuXG5mdW5jdGlvbiBoc3YyaHdiKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJod2IoaHN2MnJnYihhcmdzKSlcbn1cblxuZnVuY3Rpb24gaHN2MmNteWsoYXJncykge1xuICByZXR1cm4gcmdiMmNteWsoaHN2MnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGhzdjJrZXl3b3JkKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJrZXl3b3JkKGhzdjJyZ2IoYXJncykpO1xufVxuXG4vLyBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtY29sb3IvI2h3Yi10by1yZ2JcbmZ1bmN0aW9uIGh3YjJyZ2IoaHdiKSB7XG4gIHZhciBoID0gaHdiWzBdIC8gMzYwLFxuICAgICAgd2ggPSBod2JbMV0gLyAxMDAsXG4gICAgICBibCA9IGh3YlsyXSAvIDEwMCxcbiAgICAgIHJhdGlvID0gd2ggKyBibCxcbiAgICAgIGksIHYsIGYsIG47XG5cbiAgLy8gd2ggKyBibCBjYW50IGJlID4gMVxuICBpZiAocmF0aW8gPiAxKSB7XG4gICAgd2ggLz0gcmF0aW87XG4gICAgYmwgLz0gcmF0aW87XG4gIH1cblxuICBpID0gTWF0aC5mbG9vcig2ICogaCk7XG4gIHYgPSAxIC0gYmw7XG4gIGYgPSA2ICogaCAtIGk7XG4gIGlmICgoaSAmIDB4MDEpICE9IDApIHtcbiAgICBmID0gMSAtIGY7XG4gIH1cbiAgbiA9IHdoICsgZiAqICh2IC0gd2gpOyAgLy8gbGluZWFyIGludGVycG9sYXRpb25cblxuICBzd2l0Y2ggKGkpIHtcbiAgICBkZWZhdWx0OlxuICAgIGNhc2UgNjpcbiAgICBjYXNlIDA6IHIgPSB2OyBnID0gbjsgYiA9IHdoOyBicmVhaztcbiAgICBjYXNlIDE6IHIgPSBuOyBnID0gdjsgYiA9IHdoOyBicmVhaztcbiAgICBjYXNlIDI6IHIgPSB3aDsgZyA9IHY7IGIgPSBuOyBicmVhaztcbiAgICBjYXNlIDM6IHIgPSB3aDsgZyA9IG47IGIgPSB2OyBicmVhaztcbiAgICBjYXNlIDQ6IHIgPSBuOyBnID0gd2g7IGIgPSB2OyBicmVhaztcbiAgICBjYXNlIDU6IHIgPSB2OyBnID0gd2g7IGIgPSBuOyBicmVhaztcbiAgfVxuXG4gIHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59XG5cbmZ1bmN0aW9uIGh3YjJoc2woYXJncykge1xuICByZXR1cm4gcmdiMmhzbChod2IycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gaHdiMmhzdihhcmdzKSB7XG4gIHJldHVybiByZ2IyaHN2KGh3YjJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBod2IyY215ayhhcmdzKSB7XG4gIHJldHVybiByZ2IyY215ayhod2IycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gaHdiMmtleXdvcmQoYXJncykge1xuICByZXR1cm4gcmdiMmtleXdvcmQoaHdiMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGNteWsycmdiKGNteWspIHtcbiAgdmFyIGMgPSBjbXlrWzBdIC8gMTAwLFxuICAgICAgbSA9IGNteWtbMV0gLyAxMDAsXG4gICAgICB5ID0gY215a1syXSAvIDEwMCxcbiAgICAgIGsgPSBjbXlrWzNdIC8gMTAwLFxuICAgICAgciwgZywgYjtcblxuICByID0gMSAtIE1hdGgubWluKDEsIGMgKiAoMSAtIGspICsgayk7XG4gIGcgPSAxIC0gTWF0aC5taW4oMSwgbSAqICgxIC0gaykgKyBrKTtcbiAgYiA9IDEgLSBNYXRoLm1pbigxLCB5ICogKDEgLSBrKSArIGspO1xuICByZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufVxuXG5mdW5jdGlvbiBjbXlrMmhzbChhcmdzKSB7XG4gIHJldHVybiByZ2IyaHNsKGNteWsycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gY215azJoc3YoYXJncykge1xuICByZXR1cm4gcmdiMmhzdihjbXlrMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGNteWsyaHdiKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJod2IoY215azJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBjbXlrMmtleXdvcmQoYXJncykge1xuICByZXR1cm4gcmdiMmtleXdvcmQoY215azJyZ2IoYXJncykpO1xufVxuXG5cbmZ1bmN0aW9uIHh5ejJyZ2IoeHl6KSB7XG4gIHZhciB4ID0geHl6WzBdIC8gMTAwLFxuICAgICAgeSA9IHh5elsxXSAvIDEwMCxcbiAgICAgIHogPSB4eXpbMl0gLyAxMDAsXG4gICAgICByLCBnLCBiO1xuXG4gIHIgPSAoeCAqIDMuMjQwNikgKyAoeSAqIC0xLjUzNzIpICsgKHogKiAtMC40OTg2KTtcbiAgZyA9ICh4ICogLTAuOTY4OSkgKyAoeSAqIDEuODc1OCkgKyAoeiAqIDAuMDQxNSk7XG4gIGIgPSAoeCAqIDAuMDU1NykgKyAoeSAqIC0wLjIwNDApICsgKHogKiAxLjA1NzApO1xuXG4gIC8vIGFzc3VtZSBzUkdCXG4gIHIgPSByID4gMC4wMDMxMzA4ID8gKCgxLjA1NSAqIE1hdGgucG93KHIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG4gICAgOiByID0gKHIgKiAxMi45Mik7XG5cbiAgZyA9IGcgPiAwLjAwMzEzMDggPyAoKDEuMDU1ICogTWF0aC5wb3coZywgMS4wIC8gMi40KSkgLSAwLjA1NSlcbiAgICA6IGcgPSAoZyAqIDEyLjkyKTtcblxuICBiID0gYiA+IDAuMDAzMTMwOCA/ICgoMS4wNTUgKiBNYXRoLnBvdyhiLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuICAgIDogYiA9IChiICogMTIuOTIpO1xuXG4gIHIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCByKSwgMSk7XG4gIGcgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBnKSwgMSk7XG4gIGIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBiKSwgMSk7XG5cbiAgcmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn1cblxuZnVuY3Rpb24geHl6MmxhYih4eXopIHtcbiAgdmFyIHggPSB4eXpbMF0sXG4gICAgICB5ID0geHl6WzFdLFxuICAgICAgeiA9IHh5elsyXSxcbiAgICAgIGwsIGEsIGI7XG5cbiAgeCAvPSA5NS4wNDc7XG4gIHkgLz0gMTAwO1xuICB6IC89IDEwOC44ODM7XG5cbiAgeCA9IHggPiAwLjAwODg1NiA/IE1hdGgucG93KHgsIDEvMykgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG4gIHkgPSB5ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh5LCAxLzMpIDogKDcuNzg3ICogeSkgKyAoMTYgLyAxMTYpO1xuICB6ID0geiA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeiwgMS8zKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuICBsID0gKDExNiAqIHkpIC0gMTY7XG4gIGEgPSA1MDAgKiAoeCAtIHkpO1xuICBiID0gMjAwICogKHkgLSB6KTtcblxuICByZXR1cm4gW2wsIGEsIGJdO1xufVxuXG5mdW5jdGlvbiB4eXoybGNoKGFyZ3MpIHtcbiAgcmV0dXJuIGxhYjJsY2goeHl6MmxhYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoobGFiKSB7XG4gIHZhciBsID0gbGFiWzBdLFxuICAgICAgYSA9IGxhYlsxXSxcbiAgICAgIGIgPSBsYWJbMl0sXG4gICAgICB4LCB5LCB6LCB5MjtcblxuICBpZiAobCA8PSA4KSB7XG4gICAgeSA9IChsICogMTAwKSAvIDkwMy4zO1xuICAgIHkyID0gKDcuNzg3ICogKHkgLyAxMDApKSArICgxNiAvIDExNik7XG4gIH0gZWxzZSB7XG4gICAgeSA9IDEwMCAqIE1hdGgucG93KChsICsgMTYpIC8gMTE2LCAzKTtcbiAgICB5MiA9IE1hdGgucG93KHkgLyAxMDAsIDEvMyk7XG4gIH1cblxuICB4ID0geCAvIDk1LjA0NyA8PSAwLjAwODg1NiA/IHggPSAoOTUuMDQ3ICogKChhIC8gNTAwKSArIHkyIC0gKDE2IC8gMTE2KSkpIC8gNy43ODcgOiA5NS4wNDcgKiBNYXRoLnBvdygoYSAvIDUwMCkgKyB5MiwgMyk7XG5cbiAgeiA9IHogLyAxMDguODgzIDw9IDAuMDA4ODU5ID8geiA9ICgxMDguODgzICogKHkyIC0gKGIgLyAyMDApIC0gKDE2IC8gMTE2KSkpIC8gNy43ODcgOiAxMDguODgzICogTWF0aC5wb3coeTIgLSAoYiAvIDIwMCksIDMpO1xuXG4gIHJldHVybiBbeCwgeSwgel07XG59XG5cbmZ1bmN0aW9uIGxhYjJsY2gobGFiKSB7XG4gIHZhciBsID0gbGFiWzBdLFxuICAgICAgYSA9IGxhYlsxXSxcbiAgICAgIGIgPSBsYWJbMl0sXG4gICAgICBociwgaCwgYztcblxuICBociA9IE1hdGguYXRhbjIoYiwgYSk7XG4gIGggPSBociAqIDM2MCAvIDIgLyBNYXRoLlBJO1xuICBpZiAoaCA8IDApIHtcbiAgICBoICs9IDM2MDtcbiAgfVxuICBjID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuICByZXR1cm4gW2wsIGMsIGhdO1xufVxuXG5mdW5jdGlvbiBsYWIycmdiKGFyZ3MpIHtcbiAgcmV0dXJuIHh5ejJyZ2IobGFiMnh5eihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGxjaDJsYWIobGNoKSB7XG4gIHZhciBsID0gbGNoWzBdLFxuICAgICAgYyA9IGxjaFsxXSxcbiAgICAgIGggPSBsY2hbMl0sXG4gICAgICBhLCBiLCBocjtcblxuICBociA9IGggLyAzNjAgKiAyICogTWF0aC5QSTtcbiAgYSA9IGMgKiBNYXRoLmNvcyhocik7XG4gIGIgPSBjICogTWF0aC5zaW4oaHIpO1xuICByZXR1cm4gW2wsIGEsIGJdO1xufVxuXG5mdW5jdGlvbiBsY2gyeHl6KGFyZ3MpIHtcbiAgcmV0dXJuIGxhYjJ4eXoobGNoMmxhYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGxjaDJyZ2IoYXJncykge1xuICByZXR1cm4gbGFiMnJnYihsY2gybGFiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZDJyZ2Ioa2V5d29yZCkge1xuICByZXR1cm4gY3NzS2V5d29yZHNba2V5d29yZF07XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQyaHNsKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJoc2woa2V5d29yZDJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkMmhzdihhcmdzKSB7XG4gIHJldHVybiByZ2IyaHN2KGtleXdvcmQycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZDJod2IoYXJncykge1xuICByZXR1cm4gcmdiMmh3YihrZXl3b3JkMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQyY215ayhhcmdzKSB7XG4gIHJldHVybiByZ2IyY215ayhrZXl3b3JkMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQybGFiKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJsYWIoa2V5d29yZDJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkMnh5eihhcmdzKSB7XG4gIHJldHVybiByZ2IyeHl6KGtleXdvcmQycmdiKGFyZ3MpKTtcbn1cblxudmFyIGNzc0tleXdvcmRzID0ge1xuICBhbGljZWJsdWU6ICBbMjQwLDI0OCwyNTVdLFxuICBhbnRpcXVld2hpdGU6IFsyNTAsMjM1LDIxNV0sXG4gIGFxdWE6IFswLDI1NSwyNTVdLFxuICBhcXVhbWFyaW5lOiBbMTI3LDI1NSwyMTJdLFxuICBhenVyZTogIFsyNDAsMjU1LDI1NV0sXG4gIGJlaWdlOiAgWzI0NSwyNDUsMjIwXSxcbiAgYmlzcXVlOiBbMjU1LDIyOCwxOTZdLFxuICBibGFjazogIFswLDAsMF0sXG4gIGJsYW5jaGVkYWxtb25kOiBbMjU1LDIzNSwyMDVdLFxuICBibHVlOiBbMCwwLDI1NV0sXG4gIGJsdWV2aW9sZXQ6IFsxMzgsNDMsMjI2XSxcbiAgYnJvd246ICBbMTY1LDQyLDQyXSxcbiAgYnVybHl3b29kOiAgWzIyMiwxODQsMTM1XSxcbiAgY2FkZXRibHVlOiAgWzk1LDE1OCwxNjBdLFxuICBjaGFydHJldXNlOiBbMTI3LDI1NSwwXSxcbiAgY2hvY29sYXRlOiAgWzIxMCwxMDUsMzBdLFxuICBjb3JhbDogIFsyNTUsMTI3LDgwXSxcbiAgY29ybmZsb3dlcmJsdWU6IFsxMDAsMTQ5LDIzN10sXG4gIGNvcm5zaWxrOiBbMjU1LDI0OCwyMjBdLFxuICBjcmltc29uOiAgWzIyMCwyMCw2MF0sXG4gIGN5YW46IFswLDI1NSwyNTVdLFxuICBkYXJrYmx1ZTogWzAsMCwxMzldLFxuICBkYXJrY3lhbjogWzAsMTM5LDEzOV0sXG4gIGRhcmtnb2xkZW5yb2Q6ICBbMTg0LDEzNCwxMV0sXG4gIGRhcmtncmF5OiBbMTY5LDE2OSwxNjldLFxuICBkYXJrZ3JlZW46ICBbMCwxMDAsMF0sXG4gIGRhcmtncmV5OiBbMTY5LDE2OSwxNjldLFxuICBkYXJra2hha2k6ICBbMTg5LDE4MywxMDddLFxuICBkYXJrbWFnZW50YTogIFsxMzksMCwxMzldLFxuICBkYXJrb2xpdmVncmVlbjogWzg1LDEwNyw0N10sXG4gIGRhcmtvcmFuZ2U6IFsyNTUsMTQwLDBdLFxuICBkYXJrb3JjaGlkOiBbMTUzLDUwLDIwNF0sXG4gIGRhcmtyZWQ6ICBbMTM5LDAsMF0sXG4gIGRhcmtzYWxtb246IFsyMzMsMTUwLDEyMl0sXG4gIGRhcmtzZWFncmVlbjogWzE0MywxODgsMTQzXSxcbiAgZGFya3NsYXRlYmx1ZTogIFs3Miw2MSwxMzldLFxuICBkYXJrc2xhdGVncmF5OiAgWzQ3LDc5LDc5XSxcbiAgZGFya3NsYXRlZ3JleTogIFs0Nyw3OSw3OV0sXG4gIGRhcmt0dXJxdW9pc2U6ICBbMCwyMDYsMjA5XSxcbiAgZGFya3Zpb2xldDogWzE0OCwwLDIxMV0sXG4gIGRlZXBwaW5rOiBbMjU1LDIwLDE0N10sXG4gIGRlZXBza3libHVlOiAgWzAsMTkxLDI1NV0sXG4gIGRpbWdyYXk6ICBbMTA1LDEwNSwxMDVdLFxuICBkaW1ncmV5OiAgWzEwNSwxMDUsMTA1XSxcbiAgZG9kZ2VyYmx1ZTogWzMwLDE0NCwyNTVdLFxuICBmaXJlYnJpY2s6ICBbMTc4LDM0LDM0XSxcbiAgZmxvcmFsd2hpdGU6ICBbMjU1LDI1MCwyNDBdLFxuICBmb3Jlc3RncmVlbjogIFszNCwxMzksMzRdLFxuICBmdWNoc2lhOiAgWzI1NSwwLDI1NV0sXG4gIGdhaW5zYm9ybzogIFsyMjAsMjIwLDIyMF0sXG4gIGdob3N0d2hpdGU6IFsyNDgsMjQ4LDI1NV0sXG4gIGdvbGQ6IFsyNTUsMjE1LDBdLFxuICBnb2xkZW5yb2Q6ICBbMjE4LDE2NSwzMl0sXG4gIGdyYXk6IFsxMjgsMTI4LDEyOF0sXG4gIGdyZWVuOiAgWzAsMTI4LDBdLFxuICBncmVlbnllbGxvdzogIFsxNzMsMjU1LDQ3XSxcbiAgZ3JleTogWzEyOCwxMjgsMTI4XSxcbiAgaG9uZXlkZXc6IFsyNDAsMjU1LDI0MF0sXG4gIGhvdHBpbms6ICBbMjU1LDEwNSwxODBdLFxuICBpbmRpYW5yZWQ6ICBbMjA1LDkyLDkyXSxcbiAgaW5kaWdvOiBbNzUsMCwxMzBdLFxuICBpdm9yeTogIFsyNTUsMjU1LDI0MF0sXG4gIGtoYWtpOiAgWzI0MCwyMzAsMTQwXSxcbiAgbGF2ZW5kZXI6IFsyMzAsMjMwLDI1MF0sXG4gIGxhdmVuZGVyYmx1c2g6ICBbMjU1LDI0MCwyNDVdLFxuICBsYXduZ3JlZW46ICBbMTI0LDI1MiwwXSxcbiAgbGVtb25jaGlmZm9uOiBbMjU1LDI1MCwyMDVdLFxuICBsaWdodGJsdWU6ICBbMTczLDIxNiwyMzBdLFxuICBsaWdodGNvcmFsOiBbMjQwLDEyOCwxMjhdLFxuICBsaWdodGN5YW46ICBbMjI0LDI1NSwyNTVdLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogWzI1MCwyNTAsMjEwXSxcbiAgbGlnaHRncmF5OiAgWzIxMSwyMTEsMjExXSxcbiAgbGlnaHRncmVlbjogWzE0NCwyMzgsMTQ0XSxcbiAgbGlnaHRncmV5OiAgWzIxMSwyMTEsMjExXSxcbiAgbGlnaHRwaW5rOiAgWzI1NSwxODIsMTkzXSxcbiAgbGlnaHRzYWxtb246ICBbMjU1LDE2MCwxMjJdLFxuICBsaWdodHNlYWdyZWVuOiAgWzMyLDE3OCwxNzBdLFxuICBsaWdodHNreWJsdWU6IFsxMzUsMjA2LDI1MF0sXG4gIGxpZ2h0c2xhdGVncmF5OiBbMTE5LDEzNiwxNTNdLFxuICBsaWdodHNsYXRlZ3JleTogWzExOSwxMzYsMTUzXSxcbiAgbGlnaHRzdGVlbGJsdWU6IFsxNzYsMTk2LDIyMl0sXG4gIGxpZ2h0eWVsbG93OiAgWzI1NSwyNTUsMjI0XSxcbiAgbGltZTogWzAsMjU1LDBdLFxuICBsaW1lZ3JlZW46ICBbNTAsMjA1LDUwXSxcbiAgbGluZW46ICBbMjUwLDI0MCwyMzBdLFxuICBtYWdlbnRhOiAgWzI1NSwwLDI1NV0sXG4gIG1hcm9vbjogWzEyOCwwLDBdLFxuICBtZWRpdW1hcXVhbWFyaW5lOiBbMTAyLDIwNSwxNzBdLFxuICBtZWRpdW1ibHVlOiBbMCwwLDIwNV0sXG4gIG1lZGl1bW9yY2hpZDogWzE4Niw4NSwyMTFdLFxuICBtZWRpdW1wdXJwbGU6IFsxNDcsMTEyLDIxOV0sXG4gIG1lZGl1bXNlYWdyZWVuOiBbNjAsMTc5LDExM10sXG4gIG1lZGl1bXNsYXRlYmx1ZTogIFsxMjMsMTA0LDIzOF0sXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAgWzAsMjUwLDE1NF0sXG4gIG1lZGl1bXR1cnF1b2lzZTogIFs3MiwyMDksMjA0XSxcbiAgbWVkaXVtdmlvbGV0cmVkOiAgWzE5OSwyMSwxMzNdLFxuICBtaWRuaWdodGJsdWU6IFsyNSwyNSwxMTJdLFxuICBtaW50Y3JlYW06ICBbMjQ1LDI1NSwyNTBdLFxuICBtaXN0eXJvc2U6ICBbMjU1LDIyOCwyMjVdLFxuICBtb2NjYXNpbjogWzI1NSwyMjgsMTgxXSxcbiAgbmF2YWpvd2hpdGU6ICBbMjU1LDIyMiwxNzNdLFxuICBuYXZ5OiBbMCwwLDEyOF0sXG4gIG9sZGxhY2U6ICBbMjUzLDI0NSwyMzBdLFxuICBvbGl2ZTogIFsxMjgsMTI4LDBdLFxuICBvbGl2ZWRyYWI6ICBbMTA3LDE0MiwzNV0sXG4gIG9yYW5nZTogWzI1NSwxNjUsMF0sXG4gIG9yYW5nZXJlZDogIFsyNTUsNjksMF0sXG4gIG9yY2hpZDogWzIxOCwxMTIsMjE0XSxcbiAgcGFsZWdvbGRlbnJvZDogIFsyMzgsMjMyLDE3MF0sXG4gIHBhbGVncmVlbjogIFsxNTIsMjUxLDE1Ml0sXG4gIHBhbGV0dXJxdW9pc2U6ICBbMTc1LDIzOCwyMzhdLFxuICBwYWxldmlvbGV0cmVkOiAgWzIxOSwxMTIsMTQ3XSxcbiAgcGFwYXlhd2hpcDogWzI1NSwyMzksMjEzXSxcbiAgcGVhY2hwdWZmOiAgWzI1NSwyMTgsMTg1XSxcbiAgcGVydTogWzIwNSwxMzMsNjNdLFxuICBwaW5rOiBbMjU1LDE5MiwyMDNdLFxuICBwbHVtOiBbMjIxLDE2MCwyMjFdLFxuICBwb3dkZXJibHVlOiBbMTc2LDIyNCwyMzBdLFxuICBwdXJwbGU6IFsxMjgsMCwxMjhdLFxuICByZWJlY2NhcHVycGxlOiBbMTAyLCA1MSwgMTUzXSxcbiAgcmVkOiAgWzI1NSwwLDBdLFxuICByb3N5YnJvd246ICBbMTg4LDE0MywxNDNdLFxuICByb3lhbGJsdWU6ICBbNjUsMTA1LDIyNV0sXG4gIHNhZGRsZWJyb3duOiAgWzEzOSw2OSwxOV0sXG4gIHNhbG1vbjogWzI1MCwxMjgsMTE0XSxcbiAgc2FuZHlicm93bjogWzI0NCwxNjQsOTZdLFxuICBzZWFncmVlbjogWzQ2LDEzOSw4N10sXG4gIHNlYXNoZWxsOiBbMjU1LDI0NSwyMzhdLFxuICBzaWVubmE6IFsxNjAsODIsNDVdLFxuICBzaWx2ZXI6IFsxOTIsMTkyLDE5Ml0sXG4gIHNreWJsdWU6ICBbMTM1LDIwNiwyMzVdLFxuICBzbGF0ZWJsdWU6ICBbMTA2LDkwLDIwNV0sXG4gIHNsYXRlZ3JheTogIFsxMTIsMTI4LDE0NF0sXG4gIHNsYXRlZ3JleTogIFsxMTIsMTI4LDE0NF0sXG4gIHNub3c6IFsyNTUsMjUwLDI1MF0sXG4gIHNwcmluZ2dyZWVuOiAgWzAsMjU1LDEyN10sXG4gIHN0ZWVsYmx1ZTogIFs3MCwxMzAsMTgwXSxcbiAgdGFuOiAgWzIxMCwxODAsMTQwXSxcbiAgdGVhbDogWzAsMTI4LDEyOF0sXG4gIHRoaXN0bGU6ICBbMjE2LDE5MSwyMTZdLFxuICB0b21hdG86IFsyNTUsOTksNzFdLFxuICB0dXJxdW9pc2U6ICBbNjQsMjI0LDIwOF0sXG4gIHZpb2xldDogWzIzOCwxMzAsMjM4XSxcbiAgd2hlYXQ6ICBbMjQ1LDIyMiwxNzldLFxuICB3aGl0ZTogIFsyNTUsMjU1LDI1NV0sXG4gIHdoaXRlc21va2U6IFsyNDUsMjQ1LDI0NV0sXG4gIHllbGxvdzogWzI1NSwyNTUsMF0sXG4gIHllbGxvd2dyZWVuOiAgWzE1NCwyMDUsNTBdXG59O1xuXG52YXIgcmV2ZXJzZUtleXdvcmRzID0ge307XG5mb3IgKHZhciBrZXkgaW4gY3NzS2V5d29yZHMpIHtcbiAgcmV2ZXJzZUtleXdvcmRzW0pTT04uc3RyaW5naWZ5KGNzc0tleXdvcmRzW2tleV0pXSA9IGtleTtcbn1cblxufSx7fV0sNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5cbnZhciBjb252ZXJ0ID0gZnVuY3Rpb24oKSB7XG4gICByZXR1cm4gbmV3IENvbnZlcnRlcigpO1xufVxuXG5mb3IgKHZhciBmdW5jIGluIGNvbnZlcnNpb25zKSB7XG4gIC8vIGV4cG9ydCBSYXcgdmVyc2lvbnNcbiAgY29udmVydFtmdW5jICsgXCJSYXdcIl0gPSAgKGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBhY2NlcHQgYXJyYXkgb3IgcGxhaW4gYXJnc1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09IFwibnVtYmVyXCIpXG4gICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY29udmVyc2lvbnNbZnVuY10oYXJnKTtcbiAgICB9XG4gIH0pKGZ1bmMpO1xuXG4gIHZhciBwYWlyID0gLyhcXHcrKTIoXFx3KykvLmV4ZWMoZnVuYyksXG4gICAgICBmcm9tID0gcGFpclsxXSxcbiAgICAgIHRvID0gcGFpclsyXTtcblxuICAvLyBleHBvcnQgcmdiMmhzbCBhbmQgW1wicmdiXCJdW1wiaHNsXCJdXG4gIGNvbnZlcnRbZnJvbV0gPSBjb252ZXJ0W2Zyb21dIHx8IHt9O1xuXG4gIGNvbnZlcnRbZnJvbV1bdG9dID0gY29udmVydFtmdW5jXSA9IChmdW5jdGlvbihmdW5jKSB7IFxuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09IFwibnVtYmVyXCIpXG4gICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBcbiAgICAgIHZhciB2YWwgPSBjb252ZXJzaW9uc1tmdW5jXShhcmcpO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT0gXCJzdHJpbmdcIiB8fCB2YWwgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHZhbDsgLy8ga2V5d29yZFxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgdmFsW2ldID0gTWF0aC5yb3VuZCh2YWxbaV0pO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH0pKGZ1bmMpO1xufVxuXG5cbi8qIENvbnZlcnRlciBkb2VzIGxhenkgY29udmVyc2lvbiBhbmQgY2FjaGluZyAqL1xudmFyIENvbnZlcnRlciA9IGZ1bmN0aW9uKCkge1xuICAgdGhpcy5jb252cyA9IHt9O1xufTtcblxuLyogRWl0aGVyIGdldCB0aGUgdmFsdWVzIGZvciBhIHNwYWNlIG9yXG4gIHNldCB0aGUgdmFsdWVzIGZvciBhIHNwYWNlLCBkZXBlbmRpbmcgb24gYXJncyAqL1xuQ29udmVydGVyLnByb3RvdHlwZS5yb3V0ZVNwYWNlID0gZnVuY3Rpb24oc3BhY2UsIGFyZ3MpIHtcbiAgIHZhciB2YWx1ZXMgPSBhcmdzWzBdO1xuICAgaWYgKHZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBjb2xvci5yZ2IoKVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVzKHNwYWNlKTtcbiAgIH1cbiAgIC8vIGNvbG9yLnJnYigxMCwgMTAsIDEwKVxuICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT0gXCJudW1iZXJcIikge1xuICAgICAgdmFsdWVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7ICAgICAgICBcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKHNwYWNlLCB2YWx1ZXMpO1xufTtcbiAgXG4vKiBTZXQgdGhlIHZhbHVlcyBmb3IgYSBzcGFjZSwgaW52YWxpZGF0aW5nIGNhY2hlICovXG5Db252ZXJ0ZXIucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uKHNwYWNlLCB2YWx1ZXMpIHtcbiAgIHRoaXMuc3BhY2UgPSBzcGFjZTtcbiAgIHRoaXMuY29udnMgPSB7fTtcbiAgIHRoaXMuY29udnNbc3BhY2VdID0gdmFsdWVzO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKiBHZXQgdGhlIHZhbHVlcyBmb3IgYSBzcGFjZS4gSWYgdGhlcmUncyBhbHJlYWR5XG4gIGEgY29udmVyc2lvbiBmb3IgdGhlIHNwYWNlLCBmZXRjaCBpdCwgb3RoZXJ3aXNlXG4gIGNvbXB1dGUgaXQgKi9cbkNvbnZlcnRlci5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24oc3BhY2UpIHtcbiAgIHZhciB2YWxzID0gdGhpcy5jb252c1tzcGFjZV07XG4gICBpZiAoIXZhbHMpIHtcbiAgICAgIHZhciBmc3BhY2UgPSB0aGlzLnNwYWNlLFxuICAgICAgICAgIGZyb20gPSB0aGlzLmNvbnZzW2ZzcGFjZV07XG4gICAgICB2YWxzID0gY29udmVydFtmc3BhY2VdW3NwYWNlXShmcm9tKTtcblxuICAgICAgdGhpcy5jb252c1tzcGFjZV0gPSB2YWxzO1xuICAgfVxuICByZXR1cm4gdmFscztcbn07XG5cbltcInJnYlwiLCBcImhzbFwiLCBcImhzdlwiLCBcImNteWtcIiwgXCJrZXl3b3JkXCJdLmZvckVhY2goZnVuY3Rpb24oc3BhY2UpIHtcbiAgIENvbnZlcnRlci5wcm90b3R5cGVbc3BhY2VdID0gZnVuY3Rpb24odmFscykge1xuICAgICAgcmV0dXJuIHRoaXMucm91dGVTcGFjZShzcGFjZSwgYXJndW1lbnRzKTtcbiAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7XG59LHtcIi4vY29udmVyc2lvbnNcIjo1NH1dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0J1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0XCJhbGljZWJsdWVcIjogWzI0MCwgMjQ4LCAyNTVdLFxyXG5cdFwiYW50aXF1ZXdoaXRlXCI6IFsyNTAsIDIzNSwgMjE1XSxcclxuXHRcImFxdWFcIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImFxdWFtYXJpbmVcIjogWzEyNywgMjU1LCAyMTJdLFxyXG5cdFwiYXp1cmVcIjogWzI0MCwgMjU1LCAyNTVdLFxyXG5cdFwiYmVpZ2VcIjogWzI0NSwgMjQ1LCAyMjBdLFxyXG5cdFwiYmlzcXVlXCI6IFsyNTUsIDIyOCwgMTk2XSxcclxuXHRcImJsYWNrXCI6IFswLCAwLCAwXSxcclxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsyNTUsIDIzNSwgMjA1XSxcclxuXHRcImJsdWVcIjogWzAsIDAsIDI1NV0sXHJcblx0XCJibHVldmlvbGV0XCI6IFsxMzgsIDQzLCAyMjZdLFxyXG5cdFwiYnJvd25cIjogWzE2NSwgNDIsIDQyXSxcclxuXHRcImJ1cmx5d29vZFwiOiBbMjIyLCAxODQsIDEzNV0sXHJcblx0XCJjYWRldGJsdWVcIjogWzk1LCAxNTgsIDE2MF0sXHJcblx0XCJjaGFydHJldXNlXCI6IFsxMjcsIDI1NSwgMF0sXHJcblx0XCJjaG9jb2xhdGVcIjogWzIxMCwgMTA1LCAzMF0sXHJcblx0XCJjb3JhbFwiOiBbMjU1LCAxMjcsIDgwXSxcclxuXHRcImNvcm5mbG93ZXJibHVlXCI6IFsxMDAsIDE0OSwgMjM3XSxcclxuXHRcImNvcm5zaWxrXCI6IFsyNTUsIDI0OCwgMjIwXSxcclxuXHRcImNyaW1zb25cIjogWzIyMCwgMjAsIDYwXSxcclxuXHRcImN5YW5cIjogWzAsIDI1NSwgMjU1XSxcclxuXHRcImRhcmtibHVlXCI6IFswLCAwLCAxMzldLFxyXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSwgMTM5XSxcclxuXHRcImRhcmtnb2xkZW5yb2RcIjogWzE4NCwgMTM0LCAxMV0sXHJcblx0XCJkYXJrZ3JheVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCwgMF0sXHJcblx0XCJkYXJrZ3JleVwiOiBbMTY5LCAxNjksIDE2OV0sXHJcblx0XCJkYXJra2hha2lcIjogWzE4OSwgMTgzLCAxMDddLFxyXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSwgMCwgMTM5XSxcclxuXHRcImRhcmtvbGl2ZWdyZWVuXCI6IFs4NSwgMTA3LCA0N10sXHJcblx0XCJkYXJrb3JhbmdlXCI6IFsyNTUsIDE0MCwgMF0sXHJcblx0XCJkYXJrb3JjaGlkXCI6IFsxNTMsIDUwLCAyMDRdLFxyXG5cdFwiZGFya3JlZFwiOiBbMTM5LCAwLCAwXSxcclxuXHRcImRhcmtzYWxtb25cIjogWzIzMywgMTUwLCAxMjJdLFxyXG5cdFwiZGFya3NlYWdyZWVuXCI6IFsxNDMsIDE4OCwgMTQzXSxcclxuXHRcImRhcmtzbGF0ZWJsdWVcIjogWzcyLCA2MSwgMTM5XSxcclxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3NsYXRlZ3JleVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrdHVycXVvaXNlXCI6IFswLCAyMDYsIDIwOV0sXHJcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDgsIDAsIDIxMV0sXHJcblx0XCJkZWVwcGlua1wiOiBbMjU1LCAyMCwgMTQ3XSxcclxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEsIDI1NV0sXHJcblx0XCJkaW1ncmF5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRpbWdyZXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZG9kZ2VyYmx1ZVwiOiBbMzAsIDE0NCwgMjU1XSxcclxuXHRcImZpcmVicmlja1wiOiBbMTc4LCAzNCwgMzRdLFxyXG5cdFwiZmxvcmFsd2hpdGVcIjogWzI1NSwgMjUwLCAyNDBdLFxyXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0LCAxMzksIDM0XSxcclxuXHRcImZ1Y2hzaWFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcImdhaW5zYm9yb1wiOiBbMjIwLCAyMjAsIDIyMF0sXHJcblx0XCJnaG9zdHdoaXRlXCI6IFsyNDgsIDI0OCwgMjU1XSxcclxuXHRcImdvbGRcIjogWzI1NSwgMjE1LCAwXSxcclxuXHRcImdvbGRlbnJvZFwiOiBbMjE4LCAxNjUsIDMyXSxcclxuXHRcImdyYXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiZ3JlZW5cIjogWzAsIDEyOCwgMF0sXHJcblx0XCJncmVlbnllbGxvd1wiOiBbMTczLCAyNTUsIDQ3XSxcclxuXHRcImdyZXlcIjogWzEyOCwgMTI4LCAxMjhdLFxyXG5cdFwiaG9uZXlkZXdcIjogWzI0MCwgMjU1LCAyNDBdLFxyXG5cdFwiaG90cGlua1wiOiBbMjU1LCAxMDUsIDE4MF0sXHJcblx0XCJpbmRpYW5yZWRcIjogWzIwNSwgOTIsIDkyXSxcclxuXHRcImluZGlnb1wiOiBbNzUsIDAsIDEzMF0sXHJcblx0XCJpdm9yeVwiOiBbMjU1LCAyNTUsIDI0MF0sXHJcblx0XCJraGFraVwiOiBbMjQwLCAyMzAsIDE0MF0sXHJcblx0XCJsYXZlbmRlclwiOiBbMjMwLCAyMzAsIDI1MF0sXHJcblx0XCJsYXZlbmRlcmJsdXNoXCI6IFsyNTUsIDI0MCwgMjQ1XSxcclxuXHRcImxhd25ncmVlblwiOiBbMTI0LCAyNTIsIDBdLFxyXG5cdFwibGVtb25jaGlmZm9uXCI6IFsyNTUsIDI1MCwgMjA1XSxcclxuXHRcImxpZ2h0Ymx1ZVwiOiBbMTczLCAyMTYsIDIzMF0sXHJcblx0XCJsaWdodGNvcmFsXCI6IFsyNDAsIDEyOCwgMTI4XSxcclxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0LCAyNTUsIDI1NV0sXHJcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwLCAyNTAsIDIxMF0sXHJcblx0XCJsaWdodGdyYXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRncmVlblwiOiBbMTQ0LCAyMzgsIDE0NF0sXHJcblx0XCJsaWdodGdyZXlcIjogWzIxMSwgMjExLCAyMTFdLFxyXG5cdFwibGlnaHRwaW5rXCI6IFsyNTUsIDE4MiwgMTkzXSxcclxuXHRcImxpZ2h0c2FsbW9uXCI6IFsyNTUsIDE2MCwgMTIyXSxcclxuXHRcImxpZ2h0c2VhZ3JlZW5cIjogWzMyLCAxNzgsIDE3MF0sXHJcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSwgMjA2LCAyNTBdLFxyXG5cdFwibGlnaHRzbGF0ZWdyYXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzbGF0ZWdyZXlcIjogWzExOSwgMTM2LCAxNTNdLFxyXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiwgMTk2LCAyMjJdLFxyXG5cdFwibGlnaHR5ZWxsb3dcIjogWzI1NSwgMjU1LCAyMjRdLFxyXG5cdFwibGltZVwiOiBbMCwgMjU1LCAwXSxcclxuXHRcImxpbWVncmVlblwiOiBbNTAsIDIwNSwgNTBdLFxyXG5cdFwibGluZW5cIjogWzI1MCwgMjQwLCAyMzBdLFxyXG5cdFwibWFnZW50YVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwibWFyb29uXCI6IFsxMjgsIDAsIDBdLFxyXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyLCAyMDUsIDE3MF0sXHJcblx0XCJtZWRpdW1ibHVlXCI6IFswLCAwLCAyMDVdLFxyXG5cdFwibWVkaXVtb3JjaGlkXCI6IFsxODYsIDg1LCAyMTFdLFxyXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcsIDExMiwgMjE5XSxcclxuXHRcIm1lZGl1bXNlYWdyZWVuXCI6IFs2MCwgMTc5LCAxMTNdLFxyXG5cdFwibWVkaXVtc2xhdGVibHVlXCI6IFsxMjMsIDEwNCwgMjM4XSxcclxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAsIDE1NF0sXHJcblx0XCJtZWRpdW10dXJxdW9pc2VcIjogWzcyLCAyMDksIDIwNF0sXHJcblx0XCJtZWRpdW12aW9sZXRyZWRcIjogWzE5OSwgMjEsIDEzM10sXHJcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1LCAyNSwgMTEyXSxcclxuXHRcIm1pbnRjcmVhbVwiOiBbMjQ1LCAyNTUsIDI1MF0sXHJcblx0XCJtaXN0eXJvc2VcIjogWzI1NSwgMjI4LCAyMjVdLFxyXG5cdFwibW9jY2FzaW5cIjogWzI1NSwgMjI4LCAxODFdLFxyXG5cdFwibmF2YWpvd2hpdGVcIjogWzI1NSwgMjIyLCAxNzNdLFxyXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4XSxcclxuXHRcIm9sZGxhY2VcIjogWzI1MywgMjQ1LCAyMzBdLFxyXG5cdFwib2xpdmVcIjogWzEyOCwgMTI4LCAwXSxcclxuXHRcIm9saXZlZHJhYlwiOiBbMTA3LCAxNDIsIDM1XSxcclxuXHRcIm9yYW5nZVwiOiBbMjU1LCAxNjUsIDBdLFxyXG5cdFwib3JhbmdlcmVkXCI6IFsyNTUsIDY5LCAwXSxcclxuXHRcIm9yY2hpZFwiOiBbMjE4LCAxMTIsIDIxNF0sXHJcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzgsIDIzMiwgMTcwXSxcclxuXHRcInBhbGVncmVlblwiOiBbMTUyLCAyNTEsIDE1Ml0sXHJcblx0XCJwYWxldHVycXVvaXNlXCI6IFsxNzUsIDIzOCwgMjM4XSxcclxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSwgMTEyLCAxNDddLFxyXG5cdFwicGFwYXlhd2hpcFwiOiBbMjU1LCAyMzksIDIxM10sXHJcblx0XCJwZWFjaHB1ZmZcIjogWzI1NSwgMjE4LCAxODVdLFxyXG5cdFwicGVydVwiOiBbMjA1LCAxMzMsIDYzXSxcclxuXHRcInBpbmtcIjogWzI1NSwgMTkyLCAyMDNdLFxyXG5cdFwicGx1bVwiOiBbMjIxLCAxNjAsIDIyMV0sXHJcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYsIDIyNCwgMjMwXSxcclxuXHRcInB1cnBsZVwiOiBbMTI4LCAwLCAxMjhdLFxyXG5cdFwicmViZWNjYXB1cnBsZVwiOiBbMTAyLCA1MSwgMTUzXSxcclxuXHRcInJlZFwiOiBbMjU1LCAwLCAwXSxcclxuXHRcInJvc3licm93blwiOiBbMTg4LCAxNDMsIDE0M10sXHJcblx0XCJyb3lhbGJsdWVcIjogWzY1LCAxMDUsIDIyNV0sXHJcblx0XCJzYWRkbGVicm93blwiOiBbMTM5LCA2OSwgMTldLFxyXG5cdFwic2FsbW9uXCI6IFsyNTAsIDEyOCwgMTE0XSxcclxuXHRcInNhbmR5YnJvd25cIjogWzI0NCwgMTY0LCA5Nl0sXHJcblx0XCJzZWFncmVlblwiOiBbNDYsIDEzOSwgODddLFxyXG5cdFwic2Vhc2hlbGxcIjogWzI1NSwgMjQ1LCAyMzhdLFxyXG5cdFwic2llbm5hXCI6IFsxNjAsIDgyLCA0NV0sXHJcblx0XCJzaWx2ZXJcIjogWzE5MiwgMTkyLCAxOTJdLFxyXG5cdFwic2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDIzNV0sXHJcblx0XCJzbGF0ZWJsdWVcIjogWzEwNiwgOTAsIDIwNV0sXHJcblx0XCJzbGF0ZWdyYXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic2xhdGVncmV5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNub3dcIjogWzI1NSwgMjUwLCAyNTBdLFxyXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDI1NSwgMTI3XSxcclxuXHRcInN0ZWVsYmx1ZVwiOiBbNzAsIDEzMCwgMTgwXSxcclxuXHRcInRhblwiOiBbMjEwLCAxODAsIDE0MF0sXHJcblx0XCJ0ZWFsXCI6IFswLCAxMjgsIDEyOF0sXHJcblx0XCJ0aGlzdGxlXCI6IFsyMTYsIDE5MSwgMjE2XSxcclxuXHRcInRvbWF0b1wiOiBbMjU1LCA5OSwgNzFdLFxyXG5cdFwidHVycXVvaXNlXCI6IFs2NCwgMjI0LCAyMDhdLFxyXG5cdFwidmlvbGV0XCI6IFsyMzgsIDEzMCwgMjM4XSxcclxuXHRcIndoZWF0XCI6IFsyNDUsIDIyMiwgMTc5XSxcclxuXHRcIndoaXRlXCI6IFsyNTUsIDI1NSwgMjU1XSxcclxuXHRcIndoaXRlc21va2VcIjogWzI0NSwgMjQ1LCAyNDVdLFxyXG5cdFwieWVsbG93XCI6IFsyNTUsIDI1NSwgMF0sXHJcblx0XCJ5ZWxsb3dncmVlblwiOiBbMTU0LCAyMDUsIDUwXVxyXG59O1xyXG5cbn0se31dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4yLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE3LTAzLTIwVDE4OjU5WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy4yLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nLFxuXG5cdC8vIFVzZWQgYnkgalF1ZXJ5LmNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcblx0ZmNhbWVsQ2FzZSA9IGZ1bmN0aW9uKCBhbGwsIGxldHRlciApIHtcblx0XHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzRnVuY3Rpb246IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJmdW5jdGlvblwiO1xuXHR9LFxuXG5cdGlzV2luZG93OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0XHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdFx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0XHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0XHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xuXHR9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0dHlwZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlICkge1xuXHRcdERPTUV2YWwoIGNvZGUgKTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbXBsZSBzZWxlY3RvciB0aGF0IGNhbiBiZSBmaWx0ZXJlZCBkaXJlY3RseSwgcmVtb3Zpbmcgbm9uLUVsZW1lbnRzXG5cdGlmICggcmlzU2ltcGxlLnRlc3QoIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0fVxuXG5cdC8vIENvbXBsZXggc2VsZWN0b3IsIGNvbXBhcmUgdGhlIHR3byBzZXRzLCByZW1vdmluZyBub24tRWxlbWVudHNcblx0cXVhbGlmaWVyID0galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cyApO1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90ICYmIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwiaWZyYW1lXCIgKSApIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuICAgICAgICAvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCBpdC5cbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG4gICAgICAgICAgICBlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgalF1ZXJ5LnR5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIGpRdWVyeS50eXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGpRdWVyeS5jYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGpRdWVyeS5jYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGpRdWVyeS5jYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCxcblx0XHRzY2FsZSA9IDEsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIGpRdWVyeS50eXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGNvbnRhaW5zICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IHt9O1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdHZhciBldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICk7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblx0XHRcdGhhbmRsZXJzID0gKCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGpRdWVyeS5pc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBqUXVlcnkubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzMyMjlcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKVtePl0qKVxcLz4vZ2ksXG5cblx0LyogZXNsaW50LWVuYWJsZSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJzY3JpcHRUeXBlTWFza2VkID0gL150cnVlXFwvKC4qKS8sXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBcIj50Ym9keVwiLCBlbGVtIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXG5cdGlmICggbWF0Y2ggKSB7XG5cdFx0ZWxlbS50eXBlID0gbWF0Y2hbIDEgXTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHBkYXRhQ3VyLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmFjY2Vzcyggc3JjICk7XG5cdFx0cGRhdGFDdXIgPSBkYXRhUHJpdi5zZXQoIGRlc3QsIHBkYXRhT2xkICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkZWxldGUgcGRhdGFDdXIuaGFuZGxlO1xuXHRcdFx0cGRhdGFDdXIuZXZlbnRzID0ge307XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCBpc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBub2RlLm93bmVyRG9jdW1lbnQsIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJtYXJnaW4gPSAoIC9ebWFyZ2luLyApO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJib3gtc2l6aW5nOmJvcmRlci1ib3g7XCIgK1xuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcInRvcDoxJTt3aWR0aDo1MCVcIjtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCJcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSBkaXZTdHlsZS5tYXJnaW5MZWZ0ID09PSBcIjJweFwiO1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gZGl2U3R5bGUud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gXCI1MCVcIjtcblx0XHRwaXhlbE1hcmdpblJpZ2h0VmFsID0gZGl2U3R5bGUubWFyZ2luUmlnaHQgPT09IFwiNHB4XCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxNYXJnaW5SaWdodCgpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSxcblx0XHR2YWwgPSAwO1xuXG5cdC8vIElmIHdlIGFscmVhZHkgaGF2ZSB0aGUgcmlnaHQgbWVhc3VyZW1lbnQsIGF2b2lkIGF1Z21lbnRhdGlvblxuXHRpZiAoIGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0aSA9IDQ7XG5cblx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHR9IGVsc2Uge1xuXHRcdGkgPSBuYW1lID09PSBcIndpZHRoXCIgPyAxIDogMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciB2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdHJldHVybiB2YWw7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL0hlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiICkge1xuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSBdO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIFVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0XCJmbG9hdFwiOiBcImNzc0Zsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZXh0cmEgJiYgZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgJiYgYXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDEzXG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1lcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdGpRdWVyeS5wcm94eSggcmVzdWx0LnN0b3AsIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZnJhc3RydWN0dXJlLmh0bWwjc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLztcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgalF1ZXJ5LnR5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpIF0gPSBtYXRjaFsgMiBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2g7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciBkb2MsIGRvY0VsZW0sIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0d2luID0gZG9jLmRlZmF1bHRWaWV3O1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxuXHRcdH07XG5cdH0sXG5cblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIEZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB3aW5kb3cgKHBhcmVudE9mZnNldCA9IHt0b3A6MCwgbGVmdDogMH0sXG5cdFx0Ly8gYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIHRoZXJlIHdoZW4gY29tcHV0ZWQgcG9zaXRpb24gaXMgZml4ZWRcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIW5vZGVOYW1lKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJodG1sXCIgKSApIHtcblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0gb2Zmc2V0UGFyZW50Lm9mZnNldCgpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb2Zmc2V0UGFyZW50IGJvcmRlcnNcblx0XHRcdHBhcmVudE9mZnNldCA9IHtcblx0XHRcdFx0dG9wOiBwYXJlbnRPZmZzZXQudG9wICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApLFxuXHRcdFx0XHRsZWZ0OiBwYXJlbnRPZmZzZXQubGVmdCArIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudFsgMCBdLCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlIClcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCAhbm9HbG9iYWwgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcblxufSx7fV0sNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8hIG1vbWVudC5qc1xuLy8hIHZlcnNpb24gOiAyLjE4LjFcbi8vISBhdXRob3JzIDogVGltIFdvb2QsIElza3JlbiBDaGVybmV2LCBNb21lbnQuanMgY29udHJpYnV0b3JzXG4vLyEgbGljZW5zZSA6IE1JVFxuLy8hIG1vbWVudGpzLmNvbVxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGhvb2tDYWxsYmFjaztcblxuZnVuY3Rpb24gaG9va3MgKCkge1xuICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbi8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuZnVuY3Rpb24gc2V0SG9va0NhbGxiYWNrIChjYWxsYmFjaykge1xuICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoaW5wdXQpIHtcbiAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgcmV0dXJuIGlucHV0ICE9IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgdmFyIGs7XG4gICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAvLyBldmVuIGlmIGl0cyBub3Qgb3duIHByb3BlcnR5IEknZCBzdGlsbCBjYWxsIGl0IG5vbi1lbXB0eVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBiKTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICBmb3IgKHZhciBpIGluIGIpIHtcbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgYS50b1N0cmluZyA9IGIudG9TdHJpbmc7XG4gICAgfVxuXG4gICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICBhLnZhbHVlT2YgPSBiLnZhbHVlT2Y7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgIHJldHVybiB7XG4gICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgdW51c2VkSW5wdXQgICAgIDogW10sXG4gICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICBudWxsSW5wdXQgICAgICAgOiBmYWxzZSxcbiAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgIHVzZXJJbnZhbGlkYXRlZCA6IGZhbHNlLFxuICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgIG1lcmlkaWVtICAgICAgICA6IG51bGwsXG4gICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgaWYgKG0uX3BmID09IG51bGwpIHtcbiAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgfVxuICAgIHJldHVybiBtLl9wZjtcbn1cblxudmFyIHNvbWU7XG5pZiAoQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcbiAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG59IGVsc2Uge1xuICAgIHNvbWUgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbnZhciBzb21lJDEgPSBzb21lO1xuXG5mdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgIHZhciBmbGFncyA9IGdldFBhcnNpbmdGbGFncyhtKTtcbiAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZSQxLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgcmV0dXJuIGkgIT0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgZmxhZ3Mub3ZlcmZsb3cgPCAwICYmXG4gICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICFmbGFncy5pbnZhbGlkV2Vla2RheSAmJlxuICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRGb3JtYXQgJiZcbiAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgaWYgKG0uX3N0cmljdCkge1xuICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MudW51c2VkVG9rZW5zLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChPYmplY3QuaXNGcm96ZW4gPT0gbnVsbCB8fCAhT2JqZWN0LmlzRnJvemVuKG0pKSB7XG4gICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkIChmbGFncykge1xuICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgZXh0ZW5kKGdldFBhcnNpbmdGbGFncyhtKSwgZmxhZ3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLnVzZXJJbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbi8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG52YXIgbW9tZW50UHJvcGVydGllcyA9IGhvb2tzLm1vbWVudFByb3BlcnRpZXMgPSBbXTtcblxuZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzQU1vbWVudE9iamVjdCkpIHtcbiAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pKSkge1xuICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fZikpIHtcbiAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2wpKSB7XG4gICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9zdHJpY3QpKSB7XG4gICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fdHptKSkge1xuICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2lzVVRDKSkge1xuICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9vZmZzZXQpKSB7XG4gICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fcGYpKSB7XG4gICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sb2NhbGUpKSB7XG4gICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKG1vbWVudFByb3BlcnRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICB2YWwgPSBmcm9tW3Byb3BdO1xuICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG87XG59XG5cbnZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbi8vIE1vbWVudCBwcm90b3R5cGUgb2JqZWN0XG5mdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShjb25maWcuX2QgIT0gbnVsbCA/IGNvbmZpZy5fZC5nZXRUaW1lKCkgOiBOYU4pO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgfVxuICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAvLyBvYmplY3RzLlxuICAgIGlmICh1cGRhdGVJblByb2dyZXNzID09PSBmYWxzZSkge1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc01vbWVudCAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGFic0Zsb29yIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKSB8fCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgdmFyIGNvZXJjZWROdW1iZXIgPSArYXJndW1lbnRGb3JDb2VyY2lvbixcbiAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgdmFsdWUgPSBhYnNGbG9vcihjb2VyY2VkTnVtYmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbmZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKGFycmF5MS5sZW5ndGgsIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAoIWRvbnRDb252ZXJ0ICYmIHRvSW50KGFycmF5MVtpXSkgIT09IHRvSW50KGFycmF5MltpXSkpKSB7XG4gICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG59XG5cbmZ1bmN0aW9uIHdhcm4obXNnKSB7XG4gICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdEZXByZWNhdGlvbiB3YXJuaW5nOiAnICsgbXNnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtc2csIGZuKSB7XG4gICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyArPSAnXFxuWycgKyBpICsgJ10gJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LCBmbik7XG59XG5cbnZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICB9XG4gICAgaWYgKCFkZXByZWNhdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgIH1cbn1cblxuaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG5ob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgPSBudWxsO1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICB2YXIgcHJvcCwgaTtcbiAgICBmb3IgKGkgaW4gY29uZmlnKSB7XG4gICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gcHJvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAvLyBMZW5pZW50IG9yZGluYWwgcGFyc2luZyBhY2NlcHRzIGp1c3QgYSBudW1iZXIgaW4gYWRkaXRpb24gdG9cbiAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICB0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCA9IG5ldyBSZWdFeHAoXG4gICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBjaGlsZENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IHt9O1xuICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaGlsZENvbmZpZ1twcm9wXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgIWhhc093blByb3AoY2hpbGRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgcmVzW3Byb3BdID0gZXh0ZW5kKHt9LCByZXNbcHJvcF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICB9XG59XG5cbnZhciBrZXlzO1xuXG5pZiAoT2JqZWN0LmtleXMpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXM7XG59IGVsc2Uge1xuICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHZhciBpLCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbn1cblxudmFyIGtleXMkMSA9IGtleXM7XG5cbnZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgc2FtZUVsc2UgOiAnTCdcbn07XG5cbmZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3V0cHV0KSA/IG91dHB1dC5jYWxsKG1vbSwgbm93KSA6IG91dHB1dDtcbn1cblxudmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICBMVFMgIDogJ2g6bW06c3MgQScsXG4gICAgTFQgICA6ICdoOm1tIEEnLFxuICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgTEwgICA6ICdNTU1NIEQsIFlZWVknLFxuICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xufTtcblxuZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICBmb3JtYXRVcHBlciA9IHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleS50b1VwcGVyQ2FzZSgpXTtcblxuICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbn1cblxudmFyIGRlZmF1bHRJbnZhbGlkRGF0ZSA9ICdJbnZhbGlkIGRhdGUnO1xuXG5mdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xufVxuXG52YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xudmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuZnVuY3Rpb24gb3JkaW5hbCAobnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xufVxuXG52YXIgZGVmYXVsdFJlbGF0aXZlVGltZSA9IHtcbiAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgIHMgIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICBoICA6ICdhbiBob3VyJyxcbiAgICBoaCA6ICclZCBob3VycycsXG4gICAgZCAgOiAnYSBkYXknLFxuICAgIGRkIDogJyVkIGRheXMnLFxuICAgIE0gIDogJ2EgbW9udGgnLFxuICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgeSAgOiAnYSB5ZWFyJyxcbiAgICB5eSA6ICclZCB5ZWFycydcbn07XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgIHJldHVybiAoaXNGdW5jdGlvbihvdXRwdXQpKSA/XG4gICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG59XG5cbmZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZm9ybWF0KSA/IGZvcm1hdChvdXRwdXQpIDogZm9ybWF0LnJlcGxhY2UoLyVzL2ksIG91dHB1dCk7XG59XG5cbnZhciBhbGlhc2VzID0ge307XG5cbmZ1bmN0aW9uIGFkZFVuaXRBbGlhcyAodW5pdCwgc2hvcnRoYW5kKSB7XG4gICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgIG5vcm1hbGl6ZWRQcm9wLFxuICAgICAgICBwcm9wO1xuXG4gICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGlucHV0T2JqZWN0LCBwcm9wKSkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRJbnB1dFtub3JtYWxpemVkUHJvcF0gPSBpbnB1dE9iamVjdFtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG59XG5cbnZhciBwcmlvcml0aWVzID0ge307XG5cbmZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgIHZhciB1bml0cyA9IFtdO1xuICAgIGZvciAodmFyIHUgaW4gdW5pdHNPYmopIHtcbiAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICB9XG4gICAgdW5pdHMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHVuaXRzO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCBrZWVwVGltZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgdW5pdCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgbW9tLl9kWydnZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgaWYgKG1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlKTtcbiAgICB9XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cblxuZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHVuaXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJpb3JpdGl6ZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG59XG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxudmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbnZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxudmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbi8vIHRva2VuOiAgICAnTSdcbi8vIHBhZGRlZDogICBbJ01NJywgMl1cbi8vIG9yZGluYWw6ICAnTW8nXG4vLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbmZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICB9XG4gICAgaWYgKHBhZGRlZCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5cbi8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgIHZhciBpID0gNTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICB9XG5cbiAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgaSAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXQ7XG59XG5cbnZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG52YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG52YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG52YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxudmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxudmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbnZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxudmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbnZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxudmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxudmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG52YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxudmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxudmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4vLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG52YXIgbWF0Y2hXb3JkID0gL1swLTldKlsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSt8W1xcdTA2MDAtXFx1MDZGRlxcL10rKFxccyo/W1xcdTA2MDAtXFx1MDZGRl0rKXsxLDJ9L2k7XG5cblxudmFyIHJlZ2V4ZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgIH1cblxuICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xufVxuXG4vLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG5mdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG59XG5cbnZhciB0b2tlbnMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgfVxufVxuXG52YXIgWUVBUiA9IDA7XG52YXIgTU9OVEggPSAxO1xudmFyIERBVEUgPSAyO1xudmFyIEhPVVIgPSAzO1xudmFyIE1JTlVURSA9IDQ7XG52YXIgU0VDT05EID0gNTtcbnZhciBNSUxMSVNFQ09ORCA9IDY7XG52YXIgV0VFSyA9IDc7XG52YXIgV0VFS0RBWSA9IDg7XG5cbnZhciBpbmRleE9mO1xuXG5pZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG59IGVsc2Uge1xuICAgIGluZGV4T2YgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xufVxuXG52YXIgaW5kZXhPZiQxID0gaW5kZXhPZjtcblxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGggKyAxLCAwKSkuZ2V0VVRDRGF0ZSgpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbi8vIExPQ0FMRVNcblxudmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG52YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gbW9tO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG59XG5cbnZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB5ID0gdGhpcy55ZWFyKCk7XG4gICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWScsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWScsICAgNF0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgneWVhcicsIDEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbmFkZFJlZ2V4VG9rZW4oJ1lZWVlZWScsIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbmFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBpbnB1dC5sZW5ndGggPT09IDIgPyBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCkgOiB0b0ludChpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5hZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W1lFQVJdID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xufVxuXG5mdW5jdGlvbiBpc0xlYXBZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG59XG5cbi8vIEhPT0tTXG5cbmhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbn07XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG5mdW5jdGlvbiBnZXRJc0xlYXBZZWFyICgpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xLzE4MTM0OFxuICAgIHZhciBkYXRlID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgLy8gdGhlIGRhdGUgY29uc3RydWN0b3IgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwICYmIGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuXG4gICAgLy8gdGhlIERhdGUuVVRDIGZ1bmN0aW9uIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG4vLyBzdGFydC1vZi1maXJzdC13ZWVrIC0gc3RhcnQtb2YteWVhclxuZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICBmd2QgPSA3ICsgZG93IC0gZG95LFxuICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xufVxuXG4vLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtzKHllYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgZGF5T2ZZZWFyID0gMSArIDcgKiAod2VlayAtIDEpICsgbG9jYWxXZWVrZGF5ICsgd2Vla09mZnNldCxcbiAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyIC0gMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgcmVzWWVhciA9IHllYXIgKyAxO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyO1xuICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldChtb20ueWVhcigpLCBkb3csIGRveSksXG4gICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICBpZiAod2VlayA8IDEpIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICB9IGVsc2UgaWYgKHdlZWsgPiB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSkpIHtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgeWVhcjogcmVzWWVhclxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHdlZWtzSW5ZZWFyKHllYXIsIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgIHJldHVybiAoZGF5c0luWWVhcih5ZWFyKSAtIHdlZWtPZmZzZXQgKyB3ZWVrT2Zmc2V0TmV4dCkgLyA3O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd3JywgWyd3dycsIDJdLCAnd28nLCAnd2VlaycpO1xuYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrJywgJ3cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrJywgNSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCd3JywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ1dXJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWsgKG1vbSkge1xuICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWsgPSB7XG4gICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXN0IGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxufTtcblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbn1cblxuZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gdGhpcy5sb2NhbGVEYXRhKCkud2Vlayh0aGlzKTtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWsgKGlucHV0KSB7XG4gICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG5hZGRGb3JtYXRUb2tlbignZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdlJywgMCwgMCwgJ3dlZWtkYXknKTtcbmFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheScsICdkJyk7XG5hZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrZGF5JywgMTEpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignZScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNNaW5SZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1JlZ2V4KGlzU3RyaWN0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHZhciB3ZWVrZGF5ID0gY29uZmlnLl9sb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgIHdlZWsuZCA9IHdlZWtkYXk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICB9XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH1cblxuICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpICUgNyB8fCA3O1xuICAgIH1cbiAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xufVxuXG4vLyBMT0NBTEVTXG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXMgPSAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzIDpcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzWydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX3dlZWtkYXlzKSA/IHRoaXMuX3dlZWtkYXlzW20uZGF5KCldIDpcbiAgICAgICAgdGhpcy5fd2Vla2RheXNbdGhpcy5fd2Vla2RheXMuaXNGb3JtYXQudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20uZGF5KCldO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNTaG9ydCAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiA9ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgcmV0dXJuIChtKSA/IHRoaXMuX3dlZWtkYXlzTWluW20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNNaW47XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IHdlZWtkYXlOYW1lLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdCkge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YkMS5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mJDEuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZiQxLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNQYXJzZSAod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZSQxLmNhbGwodGhpcywgd2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG5cbiAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkZCcgJiYgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldERheU9mV2VlayAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICB9XG4gICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaW5wdXQgPSBwYXJzZVdlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZXRMb2NhbGVEYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuXG4gICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgIC8vIGFzIGEgZ2V0dGVyLCByZXR1cm5zIDcgaW5zdGVhZCBvZiAwICgxLTcgcmFuZ2UgaW5zdGVhZCBvZiAwLTYpXG4gICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIHRoaXMubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXkoKSB8fCA3O1xuICAgIH1cbn1cblxudmFyIGRlZmF1bHRXZWVrZGF5c1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzTWluUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzTWluUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzTWluUmVnZXg7XG4gICAgfVxufVxuXG5cbmZ1bmN0aW9uIGNvbXB1dGVXZWVrZGF5c1BhcnNlICgpIHtcbiAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgbWlucCA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICBtaW5QaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgIH1cbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgbWluUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgbWl4ZWRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5mdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmhvdXJzKCkgJSAxMiB8fCAxMjtcbn1cblxuZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpIHx8IDI0O1xufVxuXG5hZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbmFkZEZvcm1hdFRva2VuKCdoJywgWydoaCcsIDJdLCAwLCBoRm9ybWF0KTtcbmFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyBoRm9ybWF0LmFwcGx5KHRoaXMpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdIbW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG59KTtcblxuZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubWVyaWRpZW0odGhpcy5ob3VycygpLCB0aGlzLm1pbnV0ZXMoKSwgbG93ZXJjYXNlKTtcbiAgICB9KTtcbn1cblxubWVyaWRpZW0oJ2EnLCB0cnVlKTtcbm1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnaG91cicsICdoJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbi8vIFBBUlNJTkdcblxuZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG59XG5cbmFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG5hZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignSCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignSEgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG5hZGRSZWdleFRva2VuKCdobW0nLCBtYXRjaDN0bzQpO1xuYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbXNzJywgbWF0Y2g1dG82KTtcblxuYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG5hZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIga0lucHV0ID0gdG9JbnQoaW5wdXQpO1xuICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG59KTtcbmFkZFBhcnNlVG9rZW4oWydhJywgJ0EnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbn0pO1xuYWRkUGFyc2VUb2tlbignSG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbn0pO1xuXG4vLyBMT0NBTEVTXG5cbmZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgLy8gSUU4IFF1aXJrcyBNb2RlICYgSUU3IFN0YW5kYXJkcyBNb2RlIGRvIG5vdCBhbGxvdyBhY2Nlc3Npbmcgc3RyaW5ncyBsaWtlIGFycmF5c1xuICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xufVxuXG52YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbmZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnYW0nIDogJ0FNJztcbiAgICB9XG59XG5cblxuLy8gTU9NRU5UU1xuXG4vLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbi8vIHNwZWNpZmllZCB3aGljaCBob3VyIGhlIHdhbnRzLiBTbyB0cnlpbmcgdG8gbWFpbnRhaW4gdGhlIHNhbWUgaG91ciAoaW5cbi8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuLy8gdGhpcyBydWxlLlxudmFyIGdldFNldEhvdXIgPSBtYWtlR2V0U2V0KCdIb3VycycsIHRydWUpO1xuXG4vLyBtb250aHNcbi8vIHdlZWtcbi8vIHdlZWtkYXlzXG4vLyBtZXJpZGllbVxudmFyIGJhc2VDb25maWcgPSB7XG4gICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgIGludmFsaWREYXRlOiBkZWZhdWx0SW52YWxpZERhdGUsXG4gICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgcmVsYXRpdmVUaW1lOiBkZWZhdWx0UmVsYXRpdmVUaW1lLFxuXG4gICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICB3ZWVrOiBkZWZhdWx0TG9jYWxlV2VlayxcblxuICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICB3ZWVrZGF5c1Nob3J0OiBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCxcblxuICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG59O1xuXG4vLyBpbnRlcm5hbCBzdG9yYWdlIGZvciBsb2NhbGUgY29uZmlnIGZpbGVzXG52YXIgbG9jYWxlcyA9IHt9O1xudmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG52YXIgZ2xvYmFsTG9jYWxlO1xuXG5mdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xufVxuXG4vLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbi8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4vLyBzdWJzdHJpbmcgZnJvbSBtb3N0IHNwZWNpZmljIHRvIGxlYXN0LCBidXQgbW92ZSB0byB0aGUgbmV4dCBhcnJheSBpdGVtIGlmIGl0J3MgYSBtb3JlIHNwZWNpZmljIHZhcmlhbnQgdGhhbiB0aGUgY3VycmVudCByb290XG5mdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICB3aGlsZSAoaSA8IG5hbWVzLmxlbmd0aCkge1xuICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgbmV4dCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpICsgMV0pO1xuICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShzcGxpdC5zbGljZSgwLCBqKS5qb2luKCctJykpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgai0tO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgIC8vIFRPRE86IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIHJlZ2lzdGVyIGFuZCBsb2FkIGFsbCB0aGUgbG9jYWxlcyBpbiBOb2RlXG4gICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgcmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgLy8gYmVjYXVzZSBkZWZpbmVMb2NhbGUgY3VycmVudGx5IGFsc28gc2V0cyB0aGUgZ2xvYmFsIGxvY2FsZSwgd2VcbiAgICAgICAgICAgIC8vIHdhbnQgdG8gdW5kbyB0aGF0IGZvciBsYXp5IGxvYWRlZCBsb2NhbGVzXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbi8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4vLyBsb2NhbGUga2V5LlxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAvLyBNRVJHRVxuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuXG4gICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgcmV0dXJuIGtleXMkMShsb2NhbGVzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgIHZhciBvdmVyZmxvdztcbiAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgIG92ZXJmbG93ID1cbiAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgYVtIT1VSXSAgICAgICAgPCAwIHx8IGFbSE9VUl0gICAgICAgID4gMjQgfHwgKGFbSE9VUl0gPT09IDI0ICYmIChhW01JTlVURV0gIT09IDAgfHwgYVtTRUNPTkRdICE9PSAwIHx8IGFbTUlMTElTRUNPTkRdICE9PSAwKSkgPyBIT1VSIDpcbiAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgYVtNSUxMSVNFQ09ORF0gPCAwIHx8IGFbTUlMTElTRUNPTkRdID4gOTk5ID8gTUlMTElTRUNPTkQgOlxuICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IERBVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFSztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUtEQVk7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gaXNvIDg2MDEgcmVnZXhcbi8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxudmFyIGV4dGVuZGVkSXNvUmVnZXggPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG52YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbnZhciB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vO1xuXG52YXIgaXNvRGF0ZXMgPSBbXG4gICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgWydHR0dHLVtXXVdXLUUnLCAvXFxkezR9LVdcXGRcXGQtXFxkL10sXG4gICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgIFsnWVlZWS1NTScsIC9cXGR7NH0tXFxkXFxkLywgZmFsc2VdLFxuICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgLy8gWVlZWU1NIGlzIE5PVCBhbGxvd2VkIGJ5IHRoZSBzdGFuZGFyZFxuICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICBbJ1lZWVlEREQnLCAvXFxkezd9L11cbl07XG5cbi8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbnZhciBpc29UaW1lcyA9IFtcbiAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkL10sXG4gICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgWydISG1tc3MsU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICBbJ0hIJywgL1xcZFxcZC9dXG5dO1xuXG52YXIgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKChcXC0/XFxkKykvaTtcblxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgdmFyIGksIGwsXG4gICAgICAgIHN0cmluZyA9IGNvbmZpZy5faSxcbiAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgYWxsb3dUaW1lLCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpc29EYXRlc1tpXVsxXS5leGVjKG1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb1RpbWVzW2ldWzFdLmV4ZWMobWF0Y2hbM10pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xudmFyIGJhc2ljUmZjUmVnZXggPSAvXigoPzpNb258VHVlfFdlZHxUaHV8RnJpfFNhdHxTdW4pLD9cXHMpPyhcXGQ/XFxkXFxzKD86SmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpXFxzKD86XFxkXFxkKT9cXGRcXGRcXHMpKFxcZFxcZDpcXGRcXGQpKFxcOlxcZFxcZCk/KFxccyg/OlVUfEdNVHxbRUNNUF1bU0RdVHxbQS1JSy1aYS1pay16XXxbKy1dXFxkezR9KSkkLztcblxuLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKSB7XG4gICAgdmFyIHN0cmluZywgbWF0Y2gsIGRheUZvcm1hdCxcbiAgICAgICAgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG4gICAgdmFyIHRpbWV6b25lcyA9IHtcbiAgICAgICAgJyBHTVQnOiAnICswMDAwJyxcbiAgICAgICAgJyBFRFQnOiAnIC0wNDAwJyxcbiAgICAgICAgJyBFU1QnOiAnIC0wNTAwJyxcbiAgICAgICAgJyBDRFQnOiAnIC0wNTAwJyxcbiAgICAgICAgJyBDU1QnOiAnIC0wNjAwJyxcbiAgICAgICAgJyBNRFQnOiAnIC0wNjAwJyxcbiAgICAgICAgJyBNU1QnOiAnIC0wNzAwJyxcbiAgICAgICAgJyBQRFQnOiAnIC0wNzAwJyxcbiAgICAgICAgJyBQU1QnOiAnIC0wODAwJ1xuICAgIH07XG4gICAgdmFyIG1pbGl0YXJ5ID0gJ1lYV1ZVVFNSUVBPTlpBQkNERUZHSElLTE0nO1xuICAgIHZhciB0aW1lem9uZSwgdGltZXpvbmVJbmRleDtcblxuICAgIHN0cmluZyA9IGNvbmZpZy5faVxuICAgICAgICAucmVwbGFjZSgvXFwoW15cXCldKlxcKXxbXFxuXFx0XS9nLCAnICcpIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgIC5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKSAvLyBSZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIC5yZXBsYWNlKC9eXFxzfFxccyQvZywgJycpOyAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzXG4gICAgbWF0Y2ggPSBiYXNpY1JmY1JlZ2V4LmV4ZWMoc3RyaW5nKTtcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgICBkYXlGb3JtYXQgPSBtYXRjaFsxXSA/ICdkZGQnICsgKChtYXRjaFsxXS5sZW5ndGggPT09IDUpID8gJywgJyA6ICcgJykgOiAnJztcbiAgICAgICAgZGF0ZUZvcm1hdCA9ICdEIE1NTSAnICsgKChtYXRjaFsyXS5sZW5ndGggPiAxMCkgPyAnWVlZWSAnIDogJ1lZICcpO1xuICAgICAgICB0aW1lRm9ybWF0ID0gJ0hIOm1tJyArIChtYXRjaFs0XSA/ICc6c3MnIDogJycpO1xuXG4gICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgaWYgKG1hdGNoWzFdKSB7IC8vIGRheSBvZiB3ZWVrIGdpdmVuXG4gICAgICAgICAgICB2YXIgbW9tZW50RGF0ZSA9IG5ldyBEYXRlKG1hdGNoWzJdKTtcbiAgICAgICAgICAgIHZhciBtb21lbnREYXkgPSBbJ1N1bicsJ01vbicsJ1R1ZScsJ1dlZCcsJ1RodScsJ0ZyaScsJ1NhdCddW21vbWVudERhdGUuZ2V0RGF5KCldO1xuXG4gICAgICAgICAgICBpZiAobWF0Y2hbMV0uc3Vic3RyKDAsMykgIT09IG1vbWVudERheSkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChtYXRjaFs1XS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMjogLy8gbWlsaXRhcnlcbiAgICAgICAgICAgICAgICBpZiAodGltZXpvbmVJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lem9uZSA9ICcgKzAwMDAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWV6b25lSW5kZXggPSBtaWxpdGFyeS5pbmRleE9mKG1hdGNoWzVdWzFdLnRvVXBwZXJDYXNlKCkpIC0gMTI7XG4gICAgICAgICAgICAgICAgICAgIHRpbWV6b25lID0gKCh0aW1lem9uZUluZGV4IDwgMCkgPyAnIC0nIDogJyArJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKCgnJyArIHRpbWV6b25lSW5kZXgpLnJlcGxhY2UoL14tPy8sICcwJykpLm1hdGNoKC8uLiQvKVswXSArICcwMCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OiAvLyBab25lXG4gICAgICAgICAgICAgICAgdGltZXpvbmUgPSB0aW1lem9uZXNbbWF0Y2hbNV1dO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogLy8gVVQgb3IgKy8tOTk5OVxuICAgICAgICAgICAgICAgIHRpbWV6b25lID0gdGltZXpvbmVzWycgR01UJ107XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hbNV0gPSB0aW1lem9uZTtcbiAgICAgICAgY29uZmlnLl9pID0gbWF0Y2guc3BsaWNlKDEpLmpvaW4oJycpO1xuICAgICAgICB0ekZvcm1hdCA9ICcgWlonO1xuICAgICAgICBjb25maWcuX2YgPSBkYXlGb3JtYXQgKyBkYXRlRm9ybWF0ICsgdGltZUZvcm1hdCArIHR6Rm9ybWF0O1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBhc3BOZXRKc29uUmVnZXguZXhlYyhjb25maWcuX2kpO1xuXG4gICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2soY29uZmlnKTtcbn1cblxuaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgJ3ZhbHVlIHByb3ZpZGVkIGlzIG5vdCBpbiBhIHJlY29nbml6ZWQgUkZDMjgyMiBvciBJU08gZm9ybWF0LiBtb21lbnQgY29uc3RydWN0aW9uIGZhbGxzIGJhY2sgdG8ganMgRGF0ZSgpLCAnICtcbiAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgJ2h0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvanMtZGF0ZS8gZm9yIG1vcmUgaW5mby4nLFxuICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICB9XG4pO1xuXG4vLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG5mdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgaWYgKGEgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgaWYgKGIgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgLy8gaG9va3MgaXMgYWN0dWFsbHkgdGhlIGV4cG9ydGVkIG1vbWVudCBvYmplY3RcbiAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0VVRDRnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0VVRDTW9udGgoKSwgbm93VmFsdWUuZ2V0VVRDRGF0ZSgpXTtcbiAgICB9XG4gICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xufVxuXG4vLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbi8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4vLyBub3RlOiBhbGwgdmFsdWVzIHBhc3QgdGhlIHllYXIgYXJlIG9wdGlvbmFsIGFuZCB3aWxsIGRlZmF1bHQgdG8gdGhlIGxvd2VzdCBwb3NzaWJsZSB2YWx1ZS5cbi8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICB2YXIgaSwgZGF0ZSwgaW5wdXQgPSBbXSwgY3VycmVudERhdGUsIHllYXJUb1VzZTtcblxuICAgIGlmIChjb25maWcuX2QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN1cnJlbnREYXRlID0gY3VycmVudERhdGVBcnJheShjb25maWcpO1xuXG4gICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpO1xuICAgIH1cblxuICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgIGlmIChjb25maWcuX2RheU9mWWVhciAhPSBudWxsKSB7XG4gICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93RGF5T2ZZZWFyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICBjb25maWcuX2FbTU9OVEhdID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgZGF0ZS5cbiAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAvLyAqIGlmIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG9ubHkgeWVhclxuICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSBjdXJyZW50RGF0ZVtpXTtcbiAgICB9XG5cbiAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICBmb3IgKDsgaSA8IDc7IGkrKykge1xuICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgMjQ6MDA6MDAuMDAwXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICBjb25maWcuX2FbU0VDT05EXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAwO1xuICAgIH1cblxuICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZykge1xuICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgIHcgPSBjb25maWcuX3c7XG4gICAgaWYgKHcuR0cgIT0gbnVsbCB8fCB3LlcgIT0gbnVsbCB8fCB3LkUgIT0gbnVsbCkge1xuICAgICAgICBkb3cgPSAxO1xuICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgIC8vIFRPRE86IFdlIG5lZWQgdG8gdGFrZSB0aGUgY3VycmVudCBpc29XZWVrWWVhciwgYnV0IHRoYXQgZGVwZW5kcyBvblxuICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgIC8vIGNyZWF0ZSBub3cpLlxuICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgIHdlZWtkYXkgPSBkZWZhdWx0cyh3LkUsIDEpO1xuICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgIGRveSA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRveTtcblxuICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCB3ZWVrLlxuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gd2Vla2RheSAtLSBsb3cgZGF5IG51bWJlcnMgYXJlIGNvbnNpZGVyZWQgbmV4dCB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbG9jYWwgd2Vla2RheSAtLSBjb3VudGluZyBzdGFydHMgZnJvbSBiZWdpbmluZyBvZiB3ZWVrXG4gICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgaWYgKHcuZSA8IDAgfHwgdy5lID4gNikge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSBkb3c7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdlZWsgPCAxIHx8IHdlZWsgPiB3ZWVrc0luWWVhcih3ZWVrWWVhciwgZG93LCBkb3kpKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtkYXkgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgY29uZmlnLl9hW1lFQVJdID0gdGVtcC55ZWFyO1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgIH1cbn1cblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbmhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbn1cblxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICB2YXIgaXNQbTtcblxuICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxuICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICBpLFxuICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgfVxuICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgfSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgIH1cblxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgYy5faSA9IGlucHV0O1xuICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG5cbnZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxudmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5mdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICB2YXIgcmVzLCBpO1xuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgIH1cbiAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuZnVuY3Rpb24gbWluICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG59XG5cbmZ1bmN0aW9uIG1heCAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG59O1xuXG52YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICBpZiAoIShvcmRlcmluZy5pbmRleE9mKGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG59XG5cbmZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgd2Vla3MgKiA3O1xuICAgIC8vIEl0IGlzIGltcG9zc2libGUgdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICB0aGlzLl9idWJibGUoKTtcbn1cblxuZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xufVxuXG5mdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICB9XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIHRpbWV6b25lIGNodW5rZXJcbi8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG52YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbmZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAwIDpcbiAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG59XG5cbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG5mdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgdmFyIHJlcywgZGlmZjtcbiAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG4vLyBIT09LU1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4vLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbmhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBNT01FTlRTXG5cbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbi8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbi8vXG4vLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0O1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICBpZiAoYy5fYSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5mdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXihcXC0pPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4vLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuLy8gc29tZXdoYXQgbW9yZSBpbiBsaW5lIHdpdGggNC40LjMuMiAyMDA0IHNwZWMsIGJ1dCBhbGxvd3MgZGVjaW1hbCBhbnl3aGVyZVxuLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxudmFyIGlzb1JlZ2V4ID0gL14oLSk/UCg/OigtP1swLTksLl0qKVkpPyg/OigtP1swLTksLl0qKU0pPyg/OigtP1swLTksLl0qKVcpPyg/OigtP1swLTksLl0qKUQpPyg/OlQoPzooLT9bMC05LC5dKilIKT8oPzooLT9bMC05LC5dKilNKT8oPzooLT9bMC05LC5dKilTKT8pPyQvO1xuXG5mdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAvLyBtYXRjaGluZyBhZ2FpbnN0IHJlZ2V4cCBpcyBleHBlbnNpdmUsIGRvIGl0IG9uIGRlbWFuZFxuICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgIHNpZ24sXG4gICAgICAgIHJldCxcbiAgICAgICAgZGlmZlJlcztcblxuICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICBNICA6IGlucHV0Ll9tb250aHNcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICBkdXJhdGlvbiA9IHt9O1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoISEobWF0Y2ggPSBhc3BOZXRSZWdleC5leGVjKGlucHV0KSkpIHtcbiAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICB5ICA6IDAsXG4gICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBtICA6IHRvSW50KG1hdGNoW01JTlVURV0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICBtcyA6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24gLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgLS1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXM7XG4gICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICB9XG5cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG5mdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKG1vbnRocykge1xuICAgICAgICBzZXRNb250aChtb20sIGdldChtb20sICdNb250aCcpICsgbW9udGhzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICB9XG59XG5cbnZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbnZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xufVxuXG5mdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbn1cblxuZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUoZnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNcztcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgem9uZURlbHRhLFxuICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIGlmICh1bml0cyA9PT0gJ3llYXInIHx8IHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdxdWFydGVyJykge1xuICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC8gMztcbiAgICAgICAgfSBlbHNlIGlmICh1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLyAxMjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbHRhID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIG91dHB1dCA9IHVuaXRzID09PSAnc2Vjb25kJyA/IGRlbHRhIC8gMWUzIDogLy8gMTAwMFxuICAgICAgICAgICAgdW5pdHMgPT09ICdtaW51dGUnID8gZGVsdGEgLyA2ZTQgOiAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIHVuaXRzID09PSAnaG91cicgPyBkZWx0YSAvIDM2ZTUgOiAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgdW5pdHMgPT09ICdkYXknID8gKGRlbHRhIC0gem9uZURlbHRhKSAvIDg2NGU1IDogLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgdW5pdHMgPT09ICd3ZWVrJyA/IChkZWx0YSAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTUgOiAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVsdGE7XG4gICAgfVxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICB9XG5cbiAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG59XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG0gPSB0aGlzLmNsb25lKCkudXRjKCk7XG4gICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG4gICAgfVxuICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAvLyBuYXRpdmUgaW1wbGVtZW50YXRpb24gaXMgfjUweCBmYXN0ZXIsIHVzZSBpdCB3aGVuIHdlIGNhblxuICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyk7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAqXG4gKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICovXG5mdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgfVxuICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgdmFyIHpvbmUgPSAnJztcbiAgICBpZiAoIXRoaXMuaXNMb2NhbCgpKSB7XG4gICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICB6b25lID0gJ1onO1xuICAgIH1cbiAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgdmFyIGRhdGV0aW1lID0gJy1NTS1ERFtUXUhIOm1tOnNzLlNTUyc7XG4gICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgIGlucHV0U3RyaW5nID0gdGhpcy5pc1V0YygpID8gaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA6IGhvb2tzLmRlZmF1bHRGb3JtYXQ7XG4gICAgfVxuICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbmZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe3RvOiB0aGlzLCBmcm9tOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xufVxuXG5mdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7ZnJvbTogdGhpcywgdG86IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICByZXR1cm4gdGhpcy50byhjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuLy8gaW5zdGFuY2UuICBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHRoZSBsb2NhbGUgY29uZmlndXJhdGlvblxuLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbmV3TG9jYWxlRGF0YTtcblxuICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxlID0gbmV3TG9jYWxlRGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5cbnZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICdtb21lbnQoKS5sYW5nKCkgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCwgdXNlIG1vbWVudCgpLmxvY2FsZURhdGEoKSB0byBnZXQgdGhlIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb24uIFVzZSBtb21lbnQoKS5sb2NhbGUoKSB0byBjaGFuZ2UgbGFuZ3VhZ2VzLicsXG4gICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxuZnVuY3Rpb24gbG9jYWxlRGF0YSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbn1cblxuZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAvLyB0aGUgZm9sbG93aW5nIHN3aXRjaCBpbnRlbnRpb25hbGx5IG9taXRzIGJyZWFrIGtleXdvcmRzXG4gICAgLy8gdG8gdXRpbGl6ZSBmYWxsaW5nIHRocm91Z2ggdGhlIGNhc2VzLlxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICB0aGlzLm1vbnRoKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdxdWFydGVyJzpcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgdGhpcy5kYXRlKDEpO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgdGhpcy5ob3VycygwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICB0aGlzLm1pbnV0ZXMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICB0aGlzLnNlY29uZHMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICB0aGlzLm1pbGxpc2Vjb25kcygwKTtcbiAgICB9XG5cbiAgICAvLyB3ZWVrcyBhcmUgYSBzcGVjaWFsIGNhc2VcbiAgICBpZiAodW5pdHMgPT09ICd3ZWVrJykge1xuICAgICAgICB0aGlzLndlZWtkYXkoMCk7XG4gICAgfVxuICAgIGlmICh1bml0cyA9PT0gJ2lzb1dlZWsnKSB7XG4gICAgICAgIHRoaXMuaXNvV2Vla2RheSgxKTtcbiAgICB9XG5cbiAgICAvLyBxdWFydGVycyBhcmUgYWxzbyBzcGVjaWFsXG4gICAgaWYgKHVuaXRzID09PSAncXVhcnRlcicpIHtcbiAgICAgICAgdGhpcy5tb250aChNYXRoLmZsb29yKHRoaXMubW9udGgoKSAvIDMpICogMyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGVuZE9mICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vICdkYXRlJyBpcyBhbiBhbGlhcyBmb3IgJ2RheScsIHNvIGl0IHNob3VsZCBiZSBjb25zaWRlcmVkIGFzIHN1Y2guXG4gICAgaWYgKHVuaXRzID09PSAnZGF0ZScpIHtcbiAgICAgICAgdW5pdHMgPSAnZGF5JztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXRzKS5hZGQoMSwgKHVuaXRzID09PSAnaXNvV2VlaycgPyAnd2VlaycgOiB1bml0cykpLnN1YnRyYWN0KDEsICdtcycpO1xufVxuXG5mdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbn1cblxuZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbn1cblxuZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIFttLnllYXIoKSwgbS5tb250aCgpLCBtLmRhdGUoKSwgbS5ob3VyKCksIG0ubWludXRlKCksIG0uc2Vjb25kKCksIG0ubWlsbGlzZWNvbmQoKV07XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICB2YXIgbSA9IHRoaXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICBtb250aHM6IG0ubW9udGgoKSxcbiAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgIG1pbnV0ZXM6IG0ubWludXRlcygpLFxuICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAvLyBuZXcgRGF0ZShOYU4pLnRvSlNPTigpID09PSBudWxsXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQyICgpIHtcbiAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gcGFyc2luZ0ZsYWdzICgpIHtcbiAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkQXQgKCkge1xuICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG59XG5cbmZ1bmN0aW9uIGNyZWF0aW9uRGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgZm9ybWF0OiB0aGlzLl9mLFxuICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICBzdHJpY3Q6IHRoaXMuX3N0cmljdFxuICAgIH07XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xufSk7XG5cbmZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG59XG5cbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHRycsICAnaXNvV2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCd3ZWVrWWVhcicsICdnZycpO1xuYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ3dlZWtZZWFyJywgMSk7XG5hZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdHJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdnZycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG5hZGRSZWdleFRva2VuKCdHR0dHRycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5hZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW4uc3Vic3RyKDAsIDIpXSA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgIHdlZWtbdG9rZW5dID0gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXIgKGlucHV0KSB7XG4gICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgdGhpcy53ZWVrKCksXG4gICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbn1cblxuZnVuY3Rpb24gZ2V0SVNPV2Vla3NJblllYXIgKCkge1xuICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldFdlZWtzSW5ZZWFyICgpIHtcbiAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgIGlmIChpbnB1dCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdlZWtzVGFyZ2V0ID0gd2Vla3NJblllYXIoaW5wdXQsIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgZGF0ZSA9IGNyZWF0ZVVUQ0RhdGUoZGF5T2ZZZWFyRGF0YS55ZWFyLCAwLCBkYXlPZlllYXJEYXRhLmRheU9mWWVhcik7XG5cbiAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgdGhpcy5kYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdxdWFydGVyJywgJ1EnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG5hZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01PTlRIXSA9ICh0b0ludChpbnB1dCkgLSAxKSAqIDM7XG59KTtcblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXRRdWFydGVyIChpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RhdGUnLCAnRCcpO1xuXG4vLyBQUklPUk9JVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ0QnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgbG9jYWxlLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudDtcbn0pO1xuXG5hZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbmFkZFBhcnNlVG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSwgMTApO1xufSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG5hZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbmFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbn0pO1xuXG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG5hZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxudmFyIHRva2VuO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG59XG5cbnZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xucHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbnByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbnByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbnByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbnByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG5wcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xucHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbnByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbnByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xucHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xucHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbnByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xucHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xucHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG5wcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbnByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xucHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbnByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG5wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xucHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xucHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG5wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xucHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xucHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xucHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbi8vIFllYXJcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbi8vIFdlZWsgWWVhclxucHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbi8vIFF1YXJ0ZXJcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbi8vIE1vbnRoXG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuLy8gV2Vla1xucHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xucHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbi8vIERheVxucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4vLyBTZWNvbmRcbnByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbi8vIE1pbGxpc2Vjb25kXG5wcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4vLyBPZmZzZXRcbnByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xucHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG5wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xucHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbnByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xucHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbi8vIE1vbnRoXG5wcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbnByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG5wcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xucHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xucHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbi8vIERheSBvZiBXZWVrXG5wcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xucHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbnByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxucHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG5wcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5wcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xucHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG5mdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLy8gKClcbi8vICg1KVxuLy8gKGZtdCwgNSlcbi8vIChmbXQpXG4vLyAodHJ1ZSlcbi8vICh0cnVlLCA1KVxuLy8gKHRydWUsIGZtdCwgNSlcbi8vICh0cnVlLCBmbXQpXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuXG5nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH1cbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBnZXQkMiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzW3VuaXRzICsgJ3MnXSgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgIH07XG59XG5cbnZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbnZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG52YXIgbWludXRlcyAgICAgID0gbWFrZUdldHRlcignbWludXRlcycpO1xudmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG52YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xudmFyIG1vbnRocyAgICAgICA9IG1ha2VHZXR0ZXIoJ21vbnRocycpO1xudmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbmZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICByZXR1cm4gYWJzRmxvb3IodGhpcy5kYXlzKCkgLyA3KTtcbn1cblxudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbnZhciB0aHJlc2hvbGRzID0ge1xuICAgIHNzOiA0NCwgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICBtIDogNDUsICAgICAgICAgLy8gbWludXRlcyB0byBob3VyXG4gICAgaCA6IDIyLCAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgTSA6IDExICAgICAgICAgIC8vIG1vbnRocyB0byB5ZWFyXG59O1xuXG4vLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuZnVuY3Rpb24gc3Vic3RpdHV0ZVRpbWVBZ28oc3RyaW5nLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGlzRnV0dXJlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbn1cblxuZnVuY3Rpb24gcmVsYXRpdmVUaW1lJDEgKHBvc05lZ0R1cmF0aW9uLCB3aXRob3V0U3VmZml4LCBsb2NhbGUpIHtcbiAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgdmFyIG1pbnV0ZXMgID0gcm91bmQoZHVyYXRpb24uYXMoJ20nKSk7XG4gICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgdmFyIG1vbnRocyAgID0gcm91bmQoZHVyYXRpb24uYXMoJ00nKSk7XG4gICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgIHNlY29uZHMgPCB0aHJlc2hvbGRzLnMgICAmJiBbJ3NzJywgc2Vjb25kc10gfHxcbiAgICAgICAgICAgIG1pbnV0ZXMgPD0gMSAgICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgIGhvdXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2gnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggICAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIGRheXMgICAgPCB0aHJlc2hvbGRzLmQgICAmJiBbJ2RkJywgZGF5c10gICAgfHxcbiAgICAgICAgICAgIG1vbnRocyAgPD0gMSAgICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgIHllYXJzICAgPD0gMSAgICAgICAgICAgICAmJiBbJ3knXSAgICAgICAgICAgfHwgWyd5eScsIHllYXJzXTtcblxuICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgIGFbNF0gPSBsb2NhbGU7XG4gICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IHRoZSByb3VuZGluZyBmdW5jdGlvbiBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG5mdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyAocm91bmRpbmdGdW5jdGlvbikge1xuICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJvdW5kO1xuICAgIH1cbiAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJvdW5kID0gcm91bmRpbmdGdW5jdGlvbjtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG5mdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQgKHRocmVzaG9sZCwgbGltaXQpIHtcbiAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgIH1cbiAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgdGhyZXNob2xkcy5zcyA9IGxpbWl0IC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG5cbiAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgdmFyIG91dHB1dCA9IHJlbGF0aXZlVGltZSQxKHRoaXMsICF3aXRoU3VmZml4LCBsb2NhbGUpO1xuXG4gICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG59XG5cbnZhciBhYnMkMSA9IE1hdGguYWJzO1xuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzO1xuICAgIHZhciB0b3RhbCA9IHRoaXMuYXNTZWNvbmRzKCk7XG5cbiAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgLy8gYnV0IG5vdCBvdGhlciBKUyAoZ29vZy5kYXRlKVxuICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0b3RhbCA8IDAgPyAnLScgOiAnJykgK1xuICAgICAgICAnUCcgK1xuICAgICAgICAoWSA/IFkgKyAnWScgOiAnJykgK1xuICAgICAgICAoTSA/IE0gKyAnTScgOiAnJykgK1xuICAgICAgICAoRCA/IEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaCArICdIJyA6ICcnKSArXG4gICAgICAgIChtID8gbSArICdNJyA6ICcnKSArXG4gICAgICAgIChzID8gcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuZ2V0ICAgICAgICAgICAgPSBnZXQkMjtcbnByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG5wcm90byQyLnNlY29uZHMgICAgICAgID0gc2Vjb25kcztcbnByb3RvJDIubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xucHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xucHJvdG8kMi5kYXlzICAgICAgICAgICA9IGRheXM7XG5wcm90byQyLndlZWtzICAgICAgICAgID0gd2Vla3M7XG5wcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xucHJvdG8kMi55ZWFycyAgICAgICAgICA9IHllYXJzO1xucHJvdG8kMi5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xucHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLnRvU3RyaW5nICAgICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9KU09OICAgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbnByb3RvJDIubG9jYWxlRGF0YSAgICAgPSBsb2NhbGVEYXRhO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG5wcm90byQyLmxhbmcgPSBsYW5nO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1gnLCAwLCAwLCAndW5peCcpO1xuYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3gnLCBtYXRjaFNpZ25lZCk7XG5hZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHBhcnNlRmxvYXQoaW5wdXQsIDEwKSAqIDEwMDApO1xufSk7XG5hZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUodG9JbnQoaW5wdXQpKTtcbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuaG9va3MudmVyc2lvbiA9ICcyLjE4LjEnO1xuXG5zZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG5ob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbmhvb2tzLm1pbiAgICAgICAgICAgICAgICAgICA9IG1pbjtcbmhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbmhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbmhvb2tzLnV0YyAgICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVUQztcbmhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG5ob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuaG9va3MuaXNEYXRlICAgICAgICAgICAgICAgID0gaXNEYXRlO1xuaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbmhvb2tzLmR1cmF0aW9uICAgICAgICAgICAgICA9IGNyZWF0ZUR1cmF0aW9uO1xuaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG5ob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG5ob29rcy5wYXJzZVpvbmUgICAgICAgICAgICAgPSBjcmVhdGVJblpvbmU7XG5ob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG5ob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuaG9va3MubW9udGhzU2hvcnQgICAgICAgICAgID0gbGlzdE1vbnRoc1Nob3J0O1xuaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuaG9va3MudXBkYXRlTG9jYWxlICAgICAgICAgID0gdXBkYXRlTG9jYWxlO1xuaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG5ob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbmhvb2tzLm5vcm1hbGl6ZVVuaXRzICAgICAgICA9IG5vcm1hbGl6ZVVuaXRzO1xuaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbmhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbmhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbnJldHVybiBob29rcztcblxufSkpKTtcblxufSx7fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuLy8gUml2ZXRzLmpzXG4vLyB2ZXJzaW9uOiAwLjkuNlxuLy8gYXV0aG9yOiBNaWNoYWVsIFJpY2hhcmRzXG4vLyBsaWNlbnNlOiBNSVRcbihmdW5jdGlvbigpIHtcbiAgdmFyIFJpdmV0cywgYmluZE1ldGhvZCwgalF1ZXJ5LCB1bmJpbmRNZXRob2QsIF9yZWYsXG4gICAgX19iaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgICBfX3NsaWNlID0gW10uc2xpY2UsXG4gICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gICAgX19pbmRleE9mID0gW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7IGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTsgfSByZXR1cm4gLTE7IH07XG5cbiAgUml2ZXRzID0ge1xuICAgIG9wdGlvbnM6IFsncHJlZml4JywgJ3RlbXBsYXRlRGVsaW1pdGVycycsICdyb290SW50ZXJmYWNlJywgJ3ByZWxvYWREYXRhJywgJ2hhbmRsZXInLCAnZXhlY3V0ZUZ1bmN0aW9ucyddLFxuICAgIGV4dGVuc2lvbnM6IFsnYmluZGVycycsICdmb3JtYXR0ZXJzJywgJ2NvbXBvbmVudHMnLCAnYWRhcHRlcnMnXSxcbiAgICBcInB1YmxpY1wiOiB7XG4gICAgICBiaW5kZXJzOiB7fSxcbiAgICAgIGNvbXBvbmVudHM6IHt9LFxuICAgICAgZm9ybWF0dGVyczoge30sXG4gICAgICBhZGFwdGVyczoge30sXG4gICAgICBwcmVmaXg6ICdydicsXG4gICAgICB0ZW1wbGF0ZURlbGltaXRlcnM6IFsneycsICd9J10sXG4gICAgICByb290SW50ZXJmYWNlOiAnLicsXG4gICAgICBwcmVsb2FkRGF0YTogdHJ1ZSxcbiAgICAgIGV4ZWN1dGVGdW5jdGlvbnM6IGZhbHNlLFxuICAgICAgaXRlcmF0aW9uQWxpYXM6IGZ1bmN0aW9uKG1vZGVsTmFtZSkge1xuICAgICAgICByZXR1cm4gJyUnICsgbW9kZWxOYW1lICsgJyUnO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uKGNvbnRleHQsIGV2LCBiaW5kaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGwoY29udGV4dCwgZXYsIGJpbmRpbmcudmlldy5tb2RlbHMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciwga2V5LCBvcHRpb24sIHZhbHVlO1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAob3B0aW9uIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgICAgICBpZiAob3B0aW9uID09PSAnYmluZGVycycgfHwgb3B0aW9uID09PSAnY29tcG9uZW50cycgfHwgb3B0aW9uID09PSAnZm9ybWF0dGVycycgfHwgb3B0aW9uID09PSAnYWRhcHRlcnMnKSB7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gdmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgUml2ZXRzW29wdGlvbl1ba2V5XSA9IGRlc2NyaXB0b3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJpdmV0c1tcInB1YmxpY1wiXVtvcHRpb25dID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmluZDogZnVuY3Rpb24oZWwsIG1vZGVscywgb3B0aW9ucykge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgaWYgKG1vZGVscyA9PSBudWxsKSB7XG4gICAgICAgICAgbW9kZWxzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3ID0gbmV3IFJpdmV0cy5WaWV3KGVsLCBtb2RlbHMsIG9wdGlvbnMpO1xuICAgICAgICB2aWV3LmJpbmQoKTtcbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24oY29tcG9uZW50LCBlbCwgZGF0YSkge1xuICAgICAgICB2YXIgc2NvcGUsIHRlbXBsYXRlLCB2aWV3O1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCA9PSBudWxsKSB7XG4gICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQgPSBSaXZldHNbXCJwdWJsaWNcIl0uY29tcG9uZW50c1tjb21wb25lbnRdO1xuICAgICAgICB0ZW1wbGF0ZSA9IGNvbXBvbmVudC50ZW1wbGF0ZS5jYWxsKHRoaXMsIGVsKTtcbiAgICAgICAgaWYgKHRlbXBsYXRlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKHRlbXBsYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBzY29wZSA9IGNvbXBvbmVudC5pbml0aWFsaXplLmNhbGwodGhpcywgZWwsIGRhdGEpO1xuICAgICAgICB2aWV3ID0gbmV3IFJpdmV0cy5WaWV3KGVsLCBzY29wZSk7XG4gICAgICAgIHZpZXcuYmluZCgpO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaWYgKHdpbmRvd1snalF1ZXJ5J10gfHwgd2luZG93WyckJ10pIHtcbiAgICBqUXVlcnkgPSB3aW5kb3dbJ2pRdWVyeSddIHx8IHdpbmRvd1snJCddO1xuICAgIF9yZWYgPSAnb24nIGluIGpRdWVyeS5wcm90b3R5cGUgPyBbJ29uJywgJ29mZiddIDogWydiaW5kJywgJ3VuYmluZCddLCBiaW5kTWV0aG9kID0gX3JlZlswXSwgdW5iaW5kTWV0aG9kID0gX3JlZlsxXTtcbiAgICBSaXZldHMuVXRpbCA9IHtcbiAgICAgIGJpbmRFdmVudDogZnVuY3Rpb24oZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBqUXVlcnkoZWwpW2JpbmRNZXRob2RdKGV2ZW50LCBoYW5kbGVyKTtcbiAgICAgIH0sXG4gICAgICB1bmJpbmRFdmVudDogZnVuY3Rpb24oZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBqUXVlcnkoZWwpW3VuYmluZE1ldGhvZF0oZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgfSxcbiAgICAgIGdldElucHV0VmFsdWU6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciAkZWw7XG4gICAgICAgICRlbCA9IGpRdWVyeShlbCk7XG4gICAgICAgIGlmICgkZWwuYXR0cigndHlwZScpID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgcmV0dXJuICRlbC5pcygnOmNoZWNrZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGVsLnZhbCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBSaXZldHMuVXRpbCA9IHtcbiAgICAgIGJpbmRFdmVudDogKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJ2FkZEV2ZW50TGlzdGVuZXInIGluIHdpbmRvdykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlbCwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICB9KSgpLFxuICAgICAgdW5iaW5kRXZlbnQ6IChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCdyZW1vdmVFdmVudExpc3RlbmVyJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZWwsIGV2ZW50LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGVsLCBldmVudCwgaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBlbC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICB9O1xuICAgICAgfSkoKSxcbiAgICAgIGdldElucHV0VmFsdWU6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciBvLCBfaSwgX2xlbiwgX3Jlc3VsdHM7XG4gICAgICAgIGlmIChlbC50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmNoZWNrZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZWwudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZScpIHtcbiAgICAgICAgICBfcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gZWwubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgIG8gPSBlbFtfaV07XG4gICAgICAgICAgICBpZiAoby5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICBfcmVzdWx0cy5wdXNoKG8udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVsLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFJpdmV0cy5UeXBlUGFyc2VyID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIFR5cGVQYXJzZXIoKSB7fVxuXG4gICAgVHlwZVBhcnNlci50eXBlcyA9IHtcbiAgICAgIHByaW1pdGl2ZTogMCxcbiAgICAgIGtleXBhdGg6IDFcbiAgICB9O1xuXG4gICAgVHlwZVBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKC9eJy4qJyR8XlwiLipcIiQvLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IHRoaXMudHlwZXMucHJpbWl0aXZlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmcuc2xpY2UoMSwgLTEpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZyA9PT0gJ3RydWUnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlcy5wcmltaXRpdmUsXG4gICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlcy5wcmltaXRpdmUsXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZyA9PT0gJ251bGwnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlcy5wcmltaXRpdmUsXG4gICAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IHRoaXMudHlwZXMucHJpbWl0aXZlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nID09PSAnJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IHRoaXMudHlwZXMucHJpbWl0aXZlLFxuICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOYU4oTnVtYmVyKHN0cmluZykpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IHRoaXMudHlwZXMucHJpbWl0aXZlLFxuICAgICAgICAgIHZhbHVlOiBOdW1iZXIoc3RyaW5nKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0eXBlOiB0aGlzLnR5cGVzLmtleXBhdGgsXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVHlwZVBhcnNlcjtcblxuICB9KSgpO1xuXG4gIFJpdmV0cy5UZXh0VGVtcGxhdGVQYXJzZXIgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVGV4dFRlbXBsYXRlUGFyc2VyKCkge31cblxuICAgIFRleHRUZW1wbGF0ZVBhcnNlci50eXBlcyA9IHtcbiAgICAgIHRleHQ6IDAsXG4gICAgICBiaW5kaW5nOiAxXG4gICAgfTtcblxuICAgIFRleHRUZW1wbGF0ZVBhcnNlci5wYXJzZSA9IGZ1bmN0aW9uKHRlbXBsYXRlLCBkZWxpbWl0ZXJzKSB7XG4gICAgICB2YXIgaW5kZXgsIGxhc3RJbmRleCwgbGFzdFRva2VuLCBsZW5ndGgsIHN1YnN0cmluZywgdG9rZW5zLCB2YWx1ZTtcbiAgICAgIHRva2VucyA9IFtdO1xuICAgICAgbGVuZ3RoID0gdGVtcGxhdGUubGVuZ3RoO1xuICAgICAgaW5kZXggPSAwO1xuICAgICAgbGFzdEluZGV4ID0gMDtcbiAgICAgIHdoaWxlIChsYXN0SW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgaW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKGRlbGltaXRlcnNbMF0sIGxhc3RJbmRleCk7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGVzLnRleHQsXG4gICAgICAgICAgICB2YWx1ZTogdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4KVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpbmRleCA+IDAgJiYgbGFzdEluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlcy50ZXh0LFxuICAgICAgICAgICAgICB2YWx1ZTogdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4LCBpbmRleClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIGRlbGltaXRlcnNbMF0ubGVuZ3RoO1xuICAgICAgICAgIGluZGV4ID0gdGVtcGxhdGUuaW5kZXhPZihkZWxpbWl0ZXJzWzFdLCBsYXN0SW5kZXgpO1xuICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgIHN1YnN0cmluZyA9IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCAtIGRlbGltaXRlcnNbMV0ubGVuZ3RoKTtcbiAgICAgICAgICAgIGxhc3RUb2tlbiA9IHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoKGxhc3RUb2tlbiAhPSBudWxsID8gbGFzdFRva2VuLnR5cGUgOiB2b2lkIDApID09PSB0aGlzLnR5cGVzLnRleHQpIHtcbiAgICAgICAgICAgICAgbGFzdFRva2VuLnZhbHVlICs9IHN1YnN0cmluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGVzLnRleHQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHN1YnN0cmluZ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YWx1ZSA9IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpLnRyaW0oKTtcbiAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGVzLmJpbmRpbmcsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIGRlbGltaXRlcnNbMV0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH07XG5cbiAgICByZXR1cm4gVGV4dFRlbXBsYXRlUGFyc2VyO1xuXG4gIH0pKCk7XG5cbiAgUml2ZXRzLlZpZXcgPSAoZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gVmlldyhlbHMsIG1vZGVscywgb3B0aW9ucykge1xuICAgICAgdmFyIGssIG9wdGlvbiwgdiwgX2Jhc2UsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWYxLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfcmVmNTtcbiAgICAgIHRoaXMuZWxzID0gZWxzO1xuICAgICAgdGhpcy5tb2RlbHMgPSBtb2RlbHM7XG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlID0gX19iaW5kKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICAgIHRoaXMucHVibGlzaCA9IF9fYmluZCh0aGlzLnB1Ymxpc2gsIHRoaXMpO1xuICAgICAgdGhpcy5zeW5jID0gX19iaW5kKHRoaXMuc3luYywgdGhpcyk7XG4gICAgICB0aGlzLnVuYmluZCA9IF9fYmluZCh0aGlzLnVuYmluZCwgdGhpcyk7XG4gICAgICB0aGlzLmJpbmQgPSBfX2JpbmQodGhpcy5iaW5kLCB0aGlzKTtcbiAgICAgIHRoaXMuc2VsZWN0ID0gX19iaW5kKHRoaXMuc2VsZWN0LCB0aGlzKTtcbiAgICAgIHRoaXMudHJhdmVyc2UgPSBfX2JpbmQodGhpcy50cmF2ZXJzZSwgdGhpcyk7XG4gICAgICB0aGlzLmJ1aWxkID0gX19iaW5kKHRoaXMuYnVpbGQsIHRoaXMpO1xuICAgICAgdGhpcy5idWlsZEJpbmRpbmcgPSBfX2JpbmQodGhpcy5idWlsZEJpbmRpbmcsIHRoaXMpO1xuICAgICAgdGhpcy5iaW5kaW5nUmVnRXhwID0gX19iaW5kKHRoaXMuYmluZGluZ1JlZ0V4cCwgdGhpcyk7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBfX2JpbmQodGhpcy5vcHRpb25zLCB0aGlzKTtcbiAgICAgIGlmICghKHRoaXMuZWxzLmpxdWVyeSB8fCB0aGlzLmVscyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgICB0aGlzLmVscyA9IFt0aGlzLmVsc107XG4gICAgICB9XG4gICAgICBfcmVmMSA9IFJpdmV0cy5leHRlbnNpb25zO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBvcHRpb24gPSBfcmVmMVtfaV07XG4gICAgICAgIHRoaXNbb3B0aW9uXSA9IHt9O1xuICAgICAgICBpZiAob3B0aW9uc1tvcHRpb25dKSB7XG4gICAgICAgICAgX3JlZjIgPSBvcHRpb25zW29wdGlvbl07XG4gICAgICAgICAgZm9yIChrIGluIF9yZWYyKSB7XG4gICAgICAgICAgICB2ID0gX3JlZjJba107XG4gICAgICAgICAgICB0aGlzW29wdGlvbl1ba10gPSB2O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfcmVmMyA9IFJpdmV0c1tcInB1YmxpY1wiXVtvcHRpb25dO1xuICAgICAgICBmb3IgKGsgaW4gX3JlZjMpIHtcbiAgICAgICAgICB2ID0gX3JlZjNba107XG4gICAgICAgICAgaWYgKChfYmFzZSA9IHRoaXNbb3B0aW9uXSlba10gPT0gbnVsbCkge1xuICAgICAgICAgICAgX2Jhc2Vba10gPSB2O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3JlZjQgPSBSaXZldHMub3B0aW9ucztcbiAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWY0Lmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICBvcHRpb24gPSBfcmVmNFtfal07XG4gICAgICAgIHRoaXNbb3B0aW9uXSA9IChfcmVmNSA9IG9wdGlvbnNbb3B0aW9uXSkgIT0gbnVsbCA/IF9yZWY1IDogUml2ZXRzW1wicHVibGljXCJdW29wdGlvbl07XG4gICAgICB9XG4gICAgICB0aGlzLmJ1aWxkKCk7XG4gICAgfVxuXG4gICAgVmlldy5wcm90b3R5cGUub3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wdGlvbiwgb3B0aW9ucywgX2ksIF9sZW4sIF9yZWYxO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgX3JlZjEgPSBSaXZldHMuZXh0ZW5zaW9ucy5jb25jYXQoUml2ZXRzLm9wdGlvbnMpO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBvcHRpb24gPSBfcmVmMVtfaV07XG4gICAgICAgIG9wdGlvbnNbb3B0aW9uXSA9IHRoaXNbb3B0aW9uXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5iaW5kaW5nUmVnRXhwID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIl5cIiArIHRoaXMucHJlZml4ICsgXCItXCIpO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5idWlsZEJpbmRpbmcgPSBmdW5jdGlvbihiaW5kaW5nLCBub2RlLCB0eXBlLCBkZWNsYXJhdGlvbikge1xuICAgICAgdmFyIGNvbnRleHQsIGN0eCwgZGVwZW5kZW5jaWVzLCBrZXlwYXRoLCBvcHRpb25zLCBwaXBlLCBwaXBlcztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIHBpcGVzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZWYxLCBfcmVzdWx0cztcbiAgICAgICAgX3JlZjEgPSBkZWNsYXJhdGlvbi5tYXRjaCgvKCg/OidbXiddKicpKig/Oig/OlteXFx8J10qKD86J1teJ10qJykrW15cXHwnXSopK3xbXlxcfF0rKSl8XiQvZyk7XG4gICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICBwaXBlID0gX3JlZjFbX2ldO1xuICAgICAgICAgIF9yZXN1bHRzLnB1c2gocGlwZS50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgIH0pKCk7XG4gICAgICBjb250ZXh0ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX2ksIF9sZW4sIF9yZWYxLCBfcmVzdWx0cztcbiAgICAgICAgX3JlZjEgPSBwaXBlcy5zaGlmdCgpLnNwbGl0KCc8Jyk7XG4gICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICBjdHggPSBfcmVmMVtfaV07XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaChjdHgudHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9KSgpO1xuICAgICAga2V5cGF0aCA9IGNvbnRleHQuc2hpZnQoKTtcbiAgICAgIG9wdGlvbnMuZm9ybWF0dGVycyA9IHBpcGVzO1xuICAgICAgaWYgKGRlcGVuZGVuY2llcyA9IGNvbnRleHQuc2hpZnQoKSkge1xuICAgICAgICBvcHRpb25zLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcy5zcGxpdCgvXFxzKy8pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYmluZGluZ3MucHVzaChuZXcgUml2ZXRzW2JpbmRpbmddKHRoaXMsIG5vZGUsIHR5cGUsIGtleXBhdGgsIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbCwgcGFyc2UsIF9pLCBfbGVuLCBfcmVmMTtcbiAgICAgIHRoaXMuYmluZGluZ3MgPSBbXTtcbiAgICAgIHBhcnNlID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgdmFyIGJsb2NrLCBjaGlsZE5vZGUsIGRlbGltaXRlcnMsIG4sIHBhcnNlciwgdGV4dCwgdG9rZW4sIHRva2VucywgX2ksIF9qLCBfbGVuLCBfbGVuMSwgX3JlZjE7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgIHBhcnNlciA9IFJpdmV0cy5UZXh0VGVtcGxhdGVQYXJzZXI7XG4gICAgICAgICAgICBpZiAoZGVsaW1pdGVycyA9IF90aGlzLnRlbXBsYXRlRGVsaW1pdGVycykge1xuICAgICAgICAgICAgICBpZiAoKHRva2VucyA9IHBhcnNlci5wYXJzZShub2RlLmRhdGEsIGRlbGltaXRlcnMpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoISh0b2tlbnMubGVuZ3RoID09PSAxICYmIHRva2Vuc1swXS50eXBlID09PSBwYXJzZXIudHlwZXMudGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gdG9rZW5zLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRva2VuLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZXh0LCBub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5idWlsZEJpbmRpbmcoJ1RleHRCaW5kaW5nJywgdGV4dCwgbnVsbCwgdG9rZW4udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICBibG9jayA9IF90aGlzLnRyYXZlcnNlKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBfcmVmMSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyIF9rLCBfbGVuMSwgX3JlZjEsIF9yZXN1bHRzO1xuICAgICAgICAgICAgICBfcmVmMSA9IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChfayA9IDAsIF9sZW4xID0gX3JlZjEubGVuZ3RoOyBfayA8IF9sZW4xOyBfaysrKSB7XG4gICAgICAgICAgICAgICAgbiA9IF9yZWYxW19rXTtcbiAgICAgICAgICAgICAgICBfcmVzdWx0cy5wdXNoKG4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gX3JlZjFbX2pdO1xuICAgICAgICAgICAgICBwYXJzZShjaGlsZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgX3JlZjEgPSB0aGlzLmVscztcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgZWwgPSBfcmVmMVtfaV07XG4gICAgICAgIHBhcnNlKGVsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYmluZGluZ3Muc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHZhciBfcmVmMiwgX3JlZjM7XG4gICAgICAgIHJldHVybiAoKChfcmVmMiA9IGIuYmluZGVyKSAhPSBudWxsID8gX3JlZjIucHJpb3JpdHkgOiB2b2lkIDApIHx8IDApIC0gKCgoX3JlZjMgPSBhLmJpbmRlcikgIT0gbnVsbCA/IF9yZWYzLnByaW9yaXR5IDogdm9pZCAwKSB8fCAwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS50cmF2ZXJzZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGF0dHJpYnV0ZXMsIGJpbmRlciwgYmluZGluZ1JlZ0V4cCwgYmxvY2ssIGlkZW50aWZpZXIsIHJlZ2V4cCwgdHlwZSwgdmFsdWUsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWYxLCBfcmVmMiwgX3JlZjM7XG4gICAgICBiaW5kaW5nUmVnRXhwID0gdGhpcy5iaW5kaW5nUmVnRXhwKCk7XG4gICAgICBibG9jayA9IG5vZGUubm9kZU5hbWUgPT09ICdTQ1JJUFQnIHx8IG5vZGUubm9kZU5hbWUgPT09ICdTVFlMRSc7XG4gICAgICBfcmVmMSA9IG5vZGUuYXR0cmlidXRlcztcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgYXR0cmlidXRlID0gX3JlZjFbX2ldO1xuICAgICAgICBpZiAoYmluZGluZ1JlZ0V4cC50ZXN0KGF0dHJpYnV0ZS5uYW1lKSkge1xuICAgICAgICAgIHR5cGUgPSBhdHRyaWJ1dGUubmFtZS5yZXBsYWNlKGJpbmRpbmdSZWdFeHAsICcnKTtcbiAgICAgICAgICBpZiAoIShiaW5kZXIgPSB0aGlzLmJpbmRlcnNbdHlwZV0pKSB7XG4gICAgICAgICAgICBfcmVmMiA9IHRoaXMuYmluZGVycztcbiAgICAgICAgICAgIGZvciAoaWRlbnRpZmllciBpbiBfcmVmMikge1xuICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYyW2lkZW50aWZpZXJdO1xuICAgICAgICAgICAgICBpZiAoaWRlbnRpZmllciAhPT0gJyonICYmIGlkZW50aWZpZXIuaW5kZXhPZignKicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4cCA9IG5ldyBSZWdFeHAoXCJeXCIgKyAoaWRlbnRpZmllci5yZXBsYWNlKC9cXCovZywgJy4rJykpICsgXCIkXCIpO1xuICAgICAgICAgICAgICAgIGlmIChyZWdleHAudGVzdCh0eXBlKSkge1xuICAgICAgICAgICAgICAgICAgYmluZGVyID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpbmRlciB8fCAoYmluZGVyID0gdGhpcy5iaW5kZXJzWycqJ10pO1xuICAgICAgICAgIGlmIChiaW5kZXIuYmxvY2spIHtcbiAgICAgICAgICAgIGJsb2NrID0gdHJ1ZTtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBbYXR0cmlidXRlXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9yZWYzID0gYXR0cmlidXRlcyB8fCBub2RlLmF0dHJpYnV0ZXM7XG4gICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMy5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHtcbiAgICAgICAgYXR0cmlidXRlID0gX3JlZjNbX2pdO1xuICAgICAgICBpZiAoYmluZGluZ1JlZ0V4cC50ZXN0KGF0dHJpYnV0ZS5uYW1lKSkge1xuICAgICAgICAgIHR5cGUgPSBhdHRyaWJ1dGUubmFtZS5yZXBsYWNlKGJpbmRpbmdSZWdFeHAsICcnKTtcbiAgICAgICAgICB0aGlzLmJ1aWxkQmluZGluZygnQmluZGluZycsIG5vZGUsIHR5cGUsIGF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgdHlwZSA9IG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50c1t0eXBlXSAmJiAhbm9kZS5fYm91bmQpIHtcbiAgICAgICAgICB0aGlzLmJpbmRpbmdzLnB1c2gobmV3IFJpdmV0cy5Db21wb25lbnRCaW5kaW5nKHRoaXMsIG5vZGUsIHR5cGUpKTtcbiAgICAgICAgICBibG9jayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBibG9jaztcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgIHZhciBiaW5kaW5nLCBfaSwgX2xlbiwgX3JlZjEsIF9yZXN1bHRzO1xuICAgICAgX3JlZjEgPSB0aGlzLmJpbmRpbmdzO1xuICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgYmluZGluZyA9IF9yZWYxW19pXTtcbiAgICAgICAgaWYgKGZuKGJpbmRpbmcpKSB7XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmluZGluZywgX2ksIF9sZW4sIF9yZWYxO1xuICAgICAgX3JlZjEgPSB0aGlzLmJpbmRpbmdzO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBiaW5kaW5nID0gX3JlZjFbX2ldO1xuICAgICAgICBiaW5kaW5nLmJpbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmluZGluZywgX2ksIF9sZW4sIF9yZWYxO1xuICAgICAgX3JlZjEgPSB0aGlzLmJpbmRpbmdzO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBiaW5kaW5nID0gX3JlZjFbX2ldO1xuICAgICAgICBiaW5kaW5nLnVuYmluZCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBWaWV3LnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmluZGluZywgX2ksIF9sZW4sIF9yZWYxO1xuICAgICAgX3JlZjEgPSB0aGlzLmJpbmRpbmdzO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBiaW5kaW5nID0gX3JlZjFbX2ldO1xuICAgICAgICBpZiAodHlwZW9mIGJpbmRpbmcuc3luYyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgYmluZGluZy5zeW5jKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUucHVibGlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGJpbmRpbmcsIF9pLCBfbGVuLCBfcmVmMTtcbiAgICAgIF9yZWYxID0gdGhpcy5zZWxlY3QoZnVuY3Rpb24oYikge1xuICAgICAgICB2YXIgX3JlZjE7XG4gICAgICAgIHJldHVybiAoX3JlZjEgPSBiLmJpbmRlcikgIT0gbnVsbCA/IF9yZWYxLnB1Ymxpc2hlcyA6IHZvaWQgMDtcbiAgICAgIH0pO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBiaW5kaW5nID0gX3JlZjFbX2ldO1xuICAgICAgICBiaW5kaW5nLnB1Ymxpc2goKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24obW9kZWxzKSB7XG4gICAgICB2YXIgYmluZGluZywga2V5LCBtb2RlbCwgX2ksIF9sZW4sIF9yZWYxO1xuICAgICAgaWYgKG1vZGVscyA9PSBudWxsKSB7XG4gICAgICAgIG1vZGVscyA9IHt9O1xuICAgICAgfVxuICAgICAgZm9yIChrZXkgaW4gbW9kZWxzKSB7XG4gICAgICAgIG1vZGVsID0gbW9kZWxzW2tleV07XG4gICAgICAgIHRoaXMubW9kZWxzW2tleV0gPSBtb2RlbDtcbiAgICAgIH1cbiAgICAgIF9yZWYxID0gdGhpcy5iaW5kaW5ncztcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgYmluZGluZyA9IF9yZWYxW19pXTtcbiAgICAgICAgaWYgKHR5cGVvZiBiaW5kaW5nLnVwZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgYmluZGluZy51cGRhdGUobW9kZWxzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gVmlldztcblxuICB9KSgpO1xuXG4gIFJpdmV0cy5CaW5kaW5nID0gKGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIEJpbmRpbmcodmlldywgZWwsIHR5cGUsIGtleXBhdGgsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMudmlldyA9IHZpZXc7XG4gICAgICB0aGlzLmVsID0gZWw7XG4gICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgdGhpcy5rZXlwYXRoID0ga2V5cGF0aDtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMgOiB7fTtcbiAgICAgIHRoaXMuZ2V0VmFsdWUgPSBfX2JpbmQodGhpcy5nZXRWYWx1ZSwgdGhpcyk7XG4gICAgICB0aGlzLnVwZGF0ZSA9IF9fYmluZCh0aGlzLnVwZGF0ZSwgdGhpcyk7XG4gICAgICB0aGlzLnVuYmluZCA9IF9fYmluZCh0aGlzLnVuYmluZCwgdGhpcyk7XG4gICAgICB0aGlzLmJpbmQgPSBfX2JpbmQodGhpcy5iaW5kLCB0aGlzKTtcbiAgICAgIHRoaXMucHVibGlzaCA9IF9fYmluZCh0aGlzLnB1Ymxpc2gsIHRoaXMpO1xuICAgICAgdGhpcy5zeW5jID0gX19iaW5kKHRoaXMuc3luYywgdGhpcyk7XG4gICAgICB0aGlzLnNldCA9IF9fYmluZCh0aGlzLnNldCwgdGhpcyk7XG4gICAgICB0aGlzLmV2ZW50SGFuZGxlciA9IF9fYmluZCh0aGlzLmV2ZW50SGFuZGxlciwgdGhpcyk7XG4gICAgICB0aGlzLmZvcm1hdHRlZFZhbHVlID0gX19iaW5kKHRoaXMuZm9ybWF0dGVkVmFsdWUsIHRoaXMpO1xuICAgICAgdGhpcy5wYXJzZUZvcm1hdHRlckFyZ3VtZW50cyA9IF9fYmluZCh0aGlzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzLCB0aGlzKTtcbiAgICAgIHRoaXMucGFyc2VUYXJnZXQgPSBfX2JpbmQodGhpcy5wYXJzZVRhcmdldCwgdGhpcyk7XG4gICAgICB0aGlzLm9ic2VydmUgPSBfX2JpbmQodGhpcy5vYnNlcnZlLCB0aGlzKTtcbiAgICAgIHRoaXMuc2V0QmluZGVyID0gX19iaW5kKHRoaXMuc2V0QmluZGVyLCB0aGlzKTtcbiAgICAgIHRoaXMuZm9ybWF0dGVycyA9IHRoaXMub3B0aW9ucy5mb3JtYXR0ZXJzIHx8IFtdO1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgIHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzID0ge307XG4gICAgICB0aGlzLm1vZGVsID0gdm9pZCAwO1xuICAgICAgdGhpcy5zZXRCaW5kZXIoKTtcbiAgICB9XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5zZXRCaW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpZGVudGlmaWVyLCByZWdleHAsIHZhbHVlLCBfcmVmMTtcbiAgICAgIGlmICghKHRoaXMuYmluZGVyID0gdGhpcy52aWV3LmJpbmRlcnNbdGhpcy50eXBlXSkpIHtcbiAgICAgICAgX3JlZjEgPSB0aGlzLnZpZXcuYmluZGVycztcbiAgICAgICAgZm9yIChpZGVudGlmaWVyIGluIF9yZWYxKSB7XG4gICAgICAgICAgdmFsdWUgPSBfcmVmMVtpZGVudGlmaWVyXTtcbiAgICAgICAgICBpZiAoaWRlbnRpZmllciAhPT0gJyonICYmIGlkZW50aWZpZXIuaW5kZXhPZignKicpICE9PSAtMSkge1xuICAgICAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChcIl5cIiArIChpZGVudGlmaWVyLnJlcGxhY2UoL1xcKi9nLCAnLisnKSkgKyBcIiRcIik7XG4gICAgICAgICAgICBpZiAocmVnZXhwLnRlc3QodGhpcy50eXBlKSkge1xuICAgICAgICAgICAgICB0aGlzLmJpbmRlciA9IHZhbHVlO1xuICAgICAgICAgICAgICB0aGlzLmFyZ3MgPSBuZXcgUmVnRXhwKFwiXlwiICsgKGlkZW50aWZpZXIucmVwbGFjZSgvXFwqL2csICcoLispJykpICsgXCIkXCIpLmV4ZWModGhpcy50eXBlKTtcbiAgICAgICAgICAgICAgdGhpcy5hcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmJpbmRlciB8fCAodGhpcy5iaW5kZXIgPSB0aGlzLnZpZXcuYmluZGVyc1snKiddKTtcbiAgICAgIGlmICh0aGlzLmJpbmRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmRlciA9IHtcbiAgICAgICAgICByb3V0aW5lOiB0aGlzLmJpbmRlclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24ob2JqLCBrZXlwYXRoLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIFJpdmV0cy5zaWdodGdsYXNzKG9iaiwga2V5cGF0aCwgY2FsbGJhY2ssIHtcbiAgICAgICAgcm9vdDogdGhpcy52aWV3LnJvb3RJbnRlcmZhY2UsXG4gICAgICAgIGFkYXB0ZXJzOiB0aGlzLnZpZXcuYWRhcHRlcnNcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5wYXJzZVRhcmdldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRva2VuO1xuICAgICAgdG9rZW4gPSBSaXZldHMuVHlwZVBhcnNlci5wYXJzZSh0aGlzLmtleXBhdGgpO1xuICAgICAgaWYgKHRva2VuLnR5cGUgPT09IFJpdmV0cy5UeXBlUGFyc2VyLnR5cGVzLnByaW1pdGl2ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9IHRva2VuLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IHRoaXMub2JzZXJ2ZSh0aGlzLnZpZXcubW9kZWxzLCB0aGlzLmtleXBhdGgsIHRoaXMuc3luYyk7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVsID0gdGhpcy5vYnNlcnZlci50YXJnZXQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzID0gZnVuY3Rpb24oYXJncywgZm9ybWF0dGVySW5kZXgpIHtcbiAgICAgIHZhciBhaSwgYXJnLCBvYnNlcnZlciwgcHJvY2Vzc2VkQXJncywgX2Jhc2UsIF9pLCBfbGVuO1xuICAgICAgYXJncyA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF9pLCBfbGVuLCBfcmVzdWx0cztcbiAgICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBhcmdzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgYXJnID0gYXJnc1tfaV07XG4gICAgICAgICAgX3Jlc3VsdHMucHVzaChSaXZldHMuVHlwZVBhcnNlci5wYXJzZShhcmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3Jlc3VsdHM7XG4gICAgICB9KSgpO1xuICAgICAgcHJvY2Vzc2VkQXJncyA9IFtdO1xuICAgICAgZm9yIChhaSA9IF9pID0gMCwgX2xlbiA9IGFyZ3MubGVuZ3RoOyBfaSA8IF9sZW47IGFpID0gKytfaSkge1xuICAgICAgICBhcmcgPSBhcmdzW2FpXTtcbiAgICAgICAgcHJvY2Vzc2VkQXJncy5wdXNoKGFyZy50eXBlID09PSBSaXZldHMuVHlwZVBhcnNlci50eXBlcy5wcmltaXRpdmUgPyBhcmcudmFsdWUgOiAoKF9iYXNlID0gdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnMpW2Zvcm1hdHRlckluZGV4XSB8fCAoX2Jhc2VbZm9ybWF0dGVySW5kZXhdID0ge30pLCAhKG9ic2VydmVyID0gdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdW2FpXSkgPyAob2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmUodGhpcy52aWV3Lm1vZGVscywgYXJnLnZhbHVlLCB0aGlzLnN5bmMpLCB0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF1bYWldID0gb2JzZXJ2ZXIpIDogdm9pZCAwLCBvYnNlcnZlci52YWx1ZSgpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvY2Vzc2VkQXJncztcbiAgICB9O1xuXG4gICAgQmluZGluZy5wcm90b3R5cGUuZm9ybWF0dGVkVmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGFyZ3MsIGZpLCBmb3JtYXR0ZXIsIGlkLCBwcm9jZXNzZWRBcmdzLCBfaSwgX2xlbiwgX3JlZjEsIF9yZWYyO1xuICAgICAgX3JlZjEgPSB0aGlzLmZvcm1hdHRlcnM7XG4gICAgICBmb3IgKGZpID0gX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IGZpID0gKytfaSkge1xuICAgICAgICBmb3JtYXR0ZXIgPSBfcmVmMVtmaV07XG4gICAgICAgIGFyZ3MgPSBmb3JtYXR0ZXIubWF0Y2goL1teXFxzJ10rfCcoW14nXXwnW15cXHNdKSonfFwiKFteXCJdfFwiW15cXHNdKSpcIi9nKTtcbiAgICAgICAgaWQgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIGZvcm1hdHRlciA9IHRoaXMudmlldy5mb3JtYXR0ZXJzW2lkXTtcbiAgICAgICAgcHJvY2Vzc2VkQXJncyA9IHRoaXMucGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJncywgZmkpO1xuICAgICAgICBpZiAoKGZvcm1hdHRlciAhPSBudWxsID8gZm9ybWF0dGVyLnJlYWQgOiB2b2lkIDApIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICB2YWx1ZSA9IChfcmVmMiA9IGZvcm1hdHRlci5yZWFkKS5jYWxsLmFwcGx5KF9yZWYyLCBbdGhpcy5tb2RlbCwgdmFsdWVdLmNvbmNhdChfX3NsaWNlLmNhbGwocHJvY2Vzc2VkQXJncykpKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXR0ZXIgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgIHZhbHVlID0gZm9ybWF0dGVyLmNhbGwuYXBwbHkoZm9ybWF0dGVyLCBbdGhpcy5tb2RlbCwgdmFsdWVdLmNvbmNhdChfX3NsaWNlLmNhbGwocHJvY2Vzc2VkQXJncykpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5ldmVudEhhbmRsZXIgPSBmdW5jdGlvbihmbikge1xuICAgICAgdmFyIGJpbmRpbmcsIGhhbmRsZXI7XG4gICAgICBoYW5kbGVyID0gKGJpbmRpbmcgPSB0aGlzKS52aWV3LmhhbmRsZXI7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuY2FsbChmbiwgdGhpcywgZXYsIGJpbmRpbmcpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgQmluZGluZy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBfcmVmMTtcbiAgICAgIHZhbHVlID0gdmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbiAmJiAhdGhpcy5iaW5kZXJbXCJmdW5jdGlvblwiXSAmJiBSaXZldHNbXCJwdWJsaWNcIl0uZXhlY3V0ZUZ1bmN0aW9ucyA/IHRoaXMuZm9ybWF0dGVkVmFsdWUodmFsdWUuY2FsbCh0aGlzLm1vZGVsKSkgOiB0aGlzLmZvcm1hdHRlZFZhbHVlKHZhbHVlKTtcbiAgICAgIHJldHVybiAoX3JlZjEgPSB0aGlzLmJpbmRlci5yb3V0aW5lKSAhPSBudWxsID8gX3JlZjEuY2FsbCh0aGlzLCB0aGlzLmVsLCB2YWx1ZSkgOiB2b2lkIDA7XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkZXBlbmRlbmN5LCBvYnNlcnZlcjtcbiAgICAgIHJldHVybiB0aGlzLnNldCgoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfaSwgX2osIF9sZW4sIF9sZW4xLCBfcmVmMSwgX3JlZjIsIF9yZWYzO1xuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgICAgIGlmICh0aGlzLm1vZGVsICE9PSB0aGlzLm9ic2VydmVyLnRhcmdldCkge1xuICAgICAgICAgICAgX3JlZjEgPSB0aGlzLmRlcGVuZGVuY2llcztcbiAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIgPSBfcmVmMVtfaV07XG4gICAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICgoKHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldCkgIT0gbnVsbCkgJiYgKChfcmVmMiA9IHRoaXMub3B0aW9ucy5kZXBlbmRlbmNpZXMpICE9IG51bGwgPyBfcmVmMi5sZW5ndGggOiB2b2lkIDApKSB7XG4gICAgICAgICAgICAgIF9yZWYzID0gdGhpcy5vcHRpb25zLmRlcGVuZGVuY2llcztcbiAgICAgICAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjMubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IF9yZWYzW19qXTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZSh0aGlzLm1vZGVsLCBkZXBlbmRlbmN5LCB0aGlzLnN5bmMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLm9ic2VydmVyLnZhbHVlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhbGwodGhpcykpO1xuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5wdWJsaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncywgZmksIGZpUmV2ZXJzZWQsIGZvcm1hdHRlciwgaWQsIGxhc3Rmb3JtYXR0ZXJJbmRleCwgcHJvY2Vzc2VkQXJncywgdmFsdWUsIF9pLCBfbGVuLCBfcmVmMSwgX3JlZjIsIF9yZWYzO1xuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLmdldFZhbHVlKHRoaXMuZWwpO1xuICAgICAgICBsYXN0Zm9ybWF0dGVySW5kZXggPSB0aGlzLmZvcm1hdHRlcnMubGVuZ3RoIC0gMTtcbiAgICAgICAgX3JlZjEgPSB0aGlzLmZvcm1hdHRlcnMuc2xpY2UoMCkucmV2ZXJzZSgpO1xuICAgICAgICBmb3IgKGZpUmV2ZXJzZWQgPSBfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgZmlSZXZlcnNlZCA9ICsrX2kpIHtcbiAgICAgICAgICBmb3JtYXR0ZXIgPSBfcmVmMVtmaVJldmVyc2VkXTtcbiAgICAgICAgICBmaSA9IGxhc3Rmb3JtYXR0ZXJJbmRleCAtIGZpUmV2ZXJzZWQ7XG4gICAgICAgICAgYXJncyA9IGZvcm1hdHRlci5zcGxpdCgvXFxzKy8pO1xuICAgICAgICAgIGlkID0gYXJncy5zaGlmdCgpO1xuICAgICAgICAgIHByb2Nlc3NlZEFyZ3MgPSB0aGlzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzKGFyZ3MsIGZpKTtcbiAgICAgICAgICBpZiAoKF9yZWYyID0gdGhpcy52aWV3LmZvcm1hdHRlcnNbaWRdKSAhPSBudWxsID8gX3JlZjIucHVibGlzaCA6IHZvaWQgMCkge1xuICAgICAgICAgICAgdmFsdWUgPSAoX3JlZjMgPSB0aGlzLnZpZXcuZm9ybWF0dGVyc1tpZF0pLnB1Ymxpc2guYXBwbHkoX3JlZjMsIFt2YWx1ZV0uY29uY2F0KF9fc2xpY2UuY2FsbChwcm9jZXNzZWRBcmdzKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZlci5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkZXBlbmRlbmN5LCBvYnNlcnZlciwgX2ksIF9sZW4sIF9yZWYxLCBfcmVmMiwgX3JlZjM7XG4gICAgICB0aGlzLnBhcnNlVGFyZ2V0KCk7XG4gICAgICBpZiAoKF9yZWYxID0gdGhpcy5iaW5kZXIuYmluZCkgIT0gbnVsbCkge1xuICAgICAgICBfcmVmMS5jYWxsKHRoaXMsIHRoaXMuZWwpO1xuICAgICAgfVxuICAgICAgaWYgKCh0aGlzLm1vZGVsICE9IG51bGwpICYmICgoX3JlZjIgPSB0aGlzLm9wdGlvbnMuZGVwZW5kZW5jaWVzKSAhPSBudWxsID8gX3JlZjIubGVuZ3RoIDogdm9pZCAwKSkge1xuICAgICAgICBfcmVmMyA9IHRoaXMub3B0aW9ucy5kZXBlbmRlbmNpZXM7XG4gICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICBkZXBlbmRlbmN5ID0gX3JlZjNbX2ldO1xuICAgICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMubW9kZWwsIGRlcGVuZGVuY3ksIHRoaXMuc3luYyk7XG4gICAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMucHVzaChvYnNlcnZlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZpZXcucHJlbG9hZERhdGEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luYygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhaSwgYXJncywgZmksIG9ic2VydmVyLCBfaSwgX2xlbiwgX3JlZjEsIF9yZWYyLCBfcmVmMywgX3JlZjQ7XG4gICAgICBpZiAoKF9yZWYxID0gdGhpcy5iaW5kZXIudW5iaW5kKSAhPSBudWxsKSB7XG4gICAgICAgIF9yZWYxLmNhbGwodGhpcywgdGhpcy5lbCk7XG4gICAgICB9XG4gICAgICBpZiAoKF9yZWYyID0gdGhpcy5vYnNlcnZlcikgIT0gbnVsbCkge1xuICAgICAgICBfcmVmMi51bm9ic2VydmUoKTtcbiAgICAgIH1cbiAgICAgIF9yZWYzID0gdGhpcy5kZXBlbmRlbmNpZXM7XG4gICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgIG9ic2VydmVyID0gX3JlZjNbX2ldO1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107XG4gICAgICBfcmVmNCA9IHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzO1xuICAgICAgZm9yIChmaSBpbiBfcmVmNCkge1xuICAgICAgICBhcmdzID0gX3JlZjRbZmldO1xuICAgICAgICBmb3IgKGFpIGluIGFyZ3MpIHtcbiAgICAgICAgICBvYnNlcnZlciA9IGFyZ3NbYWldO1xuICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnMgPSB7fTtcbiAgICB9O1xuXG4gICAgQmluZGluZy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24obW9kZWxzKSB7XG4gICAgICB2YXIgX3JlZjEsIF9yZWYyO1xuICAgICAgaWYgKG1vZGVscyA9PSBudWxsKSB7XG4gICAgICAgIG1vZGVscyA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5tb2RlbCA9IChfcmVmMSA9IHRoaXMub2JzZXJ2ZXIpICE9IG51bGwgPyBfcmVmMS50YXJnZXQgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gKF9yZWYyID0gdGhpcy5iaW5kZXIudXBkYXRlKSAhPSBudWxsID8gX3JlZjIuY2FsbCh0aGlzLCBtb2RlbHMpIDogdm9pZCAwO1xuICAgIH07XG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICBpZiAodGhpcy5iaW5kZXIgJiYgKHRoaXMuYmluZGVyLmdldFZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmRlci5nZXRWYWx1ZS5jYWxsKHRoaXMsIGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBSaXZldHMuVXRpbC5nZXRJbnB1dFZhbHVlKGVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEJpbmRpbmc7XG5cbiAgfSkoKTtcblxuICBSaXZldHMuQ29tcG9uZW50QmluZGluZyA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tcG9uZW50QmluZGluZywgX3N1cGVyKTtcblxuICAgIGZ1bmN0aW9uIENvbXBvbmVudEJpbmRpbmcodmlldywgZWwsIHR5cGUpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGJpbmRpbmdSZWdFeHAsIHByb3BlcnR5TmFtZSwgdG9rZW4sIF9pLCBfbGVuLCBfcmVmMSwgX3JlZjI7XG4gICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIHRoaXMudW5iaW5kID0gX19iaW5kKHRoaXMudW5iaW5kLCB0aGlzKTtcbiAgICAgIHRoaXMuYmluZCA9IF9fYmluZCh0aGlzLmJpbmQsIHRoaXMpO1xuICAgICAgdGhpcy5sb2NhbHMgPSBfX2JpbmQodGhpcy5sb2NhbHMsIHRoaXMpO1xuICAgICAgdGhpcy5jb21wb25lbnQgPSB0aGlzLnZpZXcuY29tcG9uZW50c1t0aGlzLnR5cGVdO1xuICAgICAgdGhpc1tcInN0YXRpY1wiXSA9IHt9O1xuICAgICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgICAgIHRoaXMudXBzdHJlYW1PYnNlcnZlcnMgPSB7fTtcbiAgICAgIGJpbmRpbmdSZWdFeHAgPSB2aWV3LmJpbmRpbmdSZWdFeHAoKTtcbiAgICAgIF9yZWYxID0gdGhpcy5lbC5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICBhdHRyaWJ1dGUgPSBfcmVmMVtfaV07XG4gICAgICAgIGlmICghYmluZGluZ1JlZ0V4cC50ZXN0KGF0dHJpYnV0ZS5uYW1lKSkge1xuICAgICAgICAgIHByb3BlcnR5TmFtZSA9IHRoaXMuY2FtZWxDYXNlKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICB0b2tlbiA9IFJpdmV0cy5UeXBlUGFyc2VyLnBhcnNlKGF0dHJpYnV0ZS52YWx1ZSk7XG4gICAgICAgICAgaWYgKF9faW5kZXhPZi5jYWxsKChfcmVmMiA9IHRoaXMuY29tcG9uZW50W1wic3RhdGljXCJdKSAhPSBudWxsID8gX3JlZjIgOiBbXSwgcHJvcGVydHlOYW1lKSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzW1wic3RhdGljXCJdW3Byb3BlcnR5TmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSBSaXZldHMuVHlwZVBhcnNlci50eXBlcy5wcmltaXRpdmUpIHtcbiAgICAgICAgICAgIHRoaXNbXCJzdGF0aWNcIl1bcHJvcGVydHlOYW1lXSA9IHRva2VuLnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyc1twcm9wZXJ0eU5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIENvbXBvbmVudEJpbmRpbmcucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7fTtcblxuICAgIENvbXBvbmVudEJpbmRpbmcucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbigpIHt9O1xuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUubG9jYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5LCBvYnNlcnZlciwgcmVzdWx0LCB2YWx1ZSwgX3JlZjEsIF9yZWYyO1xuICAgICAgcmVzdWx0ID0ge307XG4gICAgICBfcmVmMSA9IHRoaXNbXCJzdGF0aWNcIl07XG4gICAgICBmb3IgKGtleSBpbiBfcmVmMSkge1xuICAgICAgICB2YWx1ZSA9IF9yZWYxW2tleV07XG4gICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBfcmVmMiA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgZm9yIChrZXkgaW4gX3JlZjIpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBfcmVmMltrZXldO1xuICAgICAgICByZXN1bHRba2V5XSA9IG9ic2VydmVyLnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBDb21wb25lbnRCaW5kaW5nLnByb3RvdHlwZS5jYW1lbENhc2UgPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24oZ3JvdXBlZCkge1xuICAgICAgICByZXR1cm4gZ3JvdXBlZFsxXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIENvbXBvbmVudEJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrLCBrZXksIGtleXBhdGgsIG9ic2VydmVyLCBvcHRpb24sIG9wdGlvbnMsIHNjb3BlLCB2LCBfYmFzZSwgX2ksIF9qLCBfbGVuLCBfbGVuMSwgX3JlZjEsIF9yZWYyLCBfcmVmMywgX3JlZjQsIF9yZWY1LCBfcmVmNiwgX3JlZjc7XG4gICAgICBpZiAoIXRoaXMuYm91bmQpIHtcbiAgICAgICAgX3JlZjEgPSB0aGlzLm9ic2VydmVycztcbiAgICAgICAgZm9yIChrZXkgaW4gX3JlZjEpIHtcbiAgICAgICAgICBrZXlwYXRoID0gX3JlZjFba2V5XTtcbiAgICAgICAgICB0aGlzLm9ic2VydmVyc1trZXldID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIGtleXBhdGgsICgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jb21wb25lbnRWaWV3Lm1vZGVsc1trZXldID0gX3RoaXMub2JzZXJ2ZXJzW2tleV0udmFsdWUoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcykpLmNhbGwodGhpcywga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib3VuZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb21wb25lbnRWaWV3ICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRWaWV3LmJpbmQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gdGhpcy5jb21wb25lbnQudGVtcGxhdGUuY2FsbCh0aGlzKTtcbiAgICAgICAgc2NvcGUgPSB0aGlzLmNvbXBvbmVudC5pbml0aWFsaXplLmNhbGwodGhpcywgdGhpcy5lbCwgdGhpcy5sb2NhbHMoKSk7XG4gICAgICAgIHRoaXMuZWwuX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBfcmVmMiA9IFJpdmV0cy5leHRlbnNpb25zO1xuICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYyLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgb3B0aW9uID0gX3JlZjJbX2ldO1xuICAgICAgICAgIG9wdGlvbnNbb3B0aW9uXSA9IHt9O1xuICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFtvcHRpb25dKSB7XG4gICAgICAgICAgICBfcmVmMyA9IHRoaXMuY29tcG9uZW50W29wdGlvbl07XG4gICAgICAgICAgICBmb3IgKGsgaW4gX3JlZjMpIHtcbiAgICAgICAgICAgICAgdiA9IF9yZWYzW2tdO1xuICAgICAgICAgICAgICBvcHRpb25zW29wdGlvbl1ba10gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBfcmVmNCA9IHRoaXMudmlld1tvcHRpb25dO1xuICAgICAgICAgIGZvciAoayBpbiBfcmVmNCkge1xuICAgICAgICAgICAgdiA9IF9yZWY0W2tdO1xuICAgICAgICAgICAgaWYgKChfYmFzZSA9IG9wdGlvbnNbb3B0aW9uXSlba10gPT0gbnVsbCkge1xuICAgICAgICAgICAgICBfYmFzZVtrXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF9yZWY1ID0gUml2ZXRzLm9wdGlvbnM7XG4gICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWY1Lmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykge1xuICAgICAgICAgIG9wdGlvbiA9IF9yZWY1W19qXTtcbiAgICAgICAgICBvcHRpb25zW29wdGlvbl0gPSAoX3JlZjYgPSB0aGlzLmNvbXBvbmVudFtvcHRpb25dKSAhPSBudWxsID8gX3JlZjYgOiB0aGlzLnZpZXdbb3B0aW9uXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudFZpZXcgPSBuZXcgUml2ZXRzLlZpZXcoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZE5vZGVzKSwgc2NvcGUsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFZpZXcuYmluZCgpO1xuICAgICAgICBfcmVmNyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICBmb3IgKGtleSBpbiBfcmVmNykge1xuICAgICAgICAgIG9ic2VydmVyID0gX3JlZjdba2V5XTtcbiAgICAgICAgICB0aGlzLnVwc3RyZWFtT2JzZXJ2ZXJzW2tleV0gPSB0aGlzLm9ic2VydmUodGhpcy5jb21wb25lbnRWaWV3Lm1vZGVscywga2V5LCAoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oa2V5LCBvYnNlcnZlcikge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLnNldFZhbHVlKF90aGlzLmNvbXBvbmVudFZpZXcubW9kZWxzW2tleV0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKSkuY2FsbCh0aGlzLCBrZXksIG9ic2VydmVyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5LCBvYnNlcnZlciwgX3JlZjEsIF9yZWYyLCBfcmVmMztcbiAgICAgIF9yZWYxID0gdGhpcy51cHN0cmVhbU9ic2VydmVycztcbiAgICAgIGZvciAoa2V5IGluIF9yZWYxKSB7XG4gICAgICAgIG9ic2VydmVyID0gX3JlZjFba2V5XTtcbiAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKCk7XG4gICAgICB9XG4gICAgICBfcmVmMiA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgZm9yIChrZXkgaW4gX3JlZjIpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSBfcmVmMltrZXldO1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoX3JlZjMgPSB0aGlzLmNvbXBvbmVudFZpZXcpICE9IG51bGwgPyBfcmVmMy51bmJpbmQuY2FsbCh0aGlzKSA6IHZvaWQgMDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbXBvbmVudEJpbmRpbmc7XG5cbiAgfSkoUml2ZXRzLkJpbmRpbmcpO1xuXG4gIFJpdmV0cy5UZXh0QmluZGluZyA9IChmdW5jdGlvbihfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dEJpbmRpbmcsIF9zdXBlcik7XG5cbiAgICBmdW5jdGlvbiBUZXh0QmluZGluZyh2aWV3LCBlbCwgdHlwZSwga2V5cGF0aCwgb3B0aW9ucykge1xuICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLmtleXBhdGggPSBrZXlwYXRoO1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyAhPSBudWxsID8gb3B0aW9ucyA6IHt9O1xuICAgICAgdGhpcy5zeW5jID0gX19iaW5kKHRoaXMuc3luYywgdGhpcyk7XG4gICAgICB0aGlzLmZvcm1hdHRlcnMgPSB0aGlzLm9wdGlvbnMuZm9ybWF0dGVycyB8fCBbXTtcbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107XG4gICAgICB0aGlzLmZvcm1hdHRlck9ic2VydmVycyA9IHt9O1xuICAgIH1cblxuICAgIFRleHRCaW5kaW5nLnByb3RvdHlwZS5iaW5kZXIgPSB7XG4gICAgICByb3V0aW5lOiBmdW5jdGlvbihub2RlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5kYXRhID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogJyc7XG4gICAgICB9XG4gICAgfTtcblxuICAgIFRleHRCaW5kaW5nLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVGV4dEJpbmRpbmcuX19zdXBlcl9fLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRleHRCaW5kaW5nO1xuXG4gIH0pKFJpdmV0cy5CaW5kaW5nKTtcblxuICBSaXZldHNbXCJwdWJsaWNcIl0uYmluZGVycy50ZXh0ID0gZnVuY3Rpb24oZWwsIHZhbHVlKSB7XG4gICAgaWYgKGVsLnRleHRDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBlbC50ZXh0Q29udGVudCA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWwuaW5uZXJUZXh0ID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogJyc7XG4gICAgfVxuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzLmh0bWwgPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZWwuaW5uZXJIVE1MID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogJyc7XG4gIH07XG5cbiAgUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnMuc2hvdyA9IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgIHJldHVybiBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyAnJyA6ICdub25lJztcbiAgfTtcblxuICBSaXZldHNbXCJwdWJsaWNcIl0uYmluZGVycy5oaWRlID0gZnVuY3Rpb24oZWwsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdub25lJyA6ICcnO1xuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzLmVuYWJsZWQgPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZWwuZGlzYWJsZWQgPSAhdmFsdWU7XG4gIH07XG5cbiAgUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnMuZGlzYWJsZWQgPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICByZXR1cm4gZWwuZGlzYWJsZWQgPSAhIXZhbHVlO1xuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzLmNoZWNrZWQgPSB7XG4gICAgcHVibGlzaGVzOiB0cnVlLFxuICAgIHByaW9yaXR5OiAyMDAwLFxuICAgIGJpbmQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gUml2ZXRzLlV0aWwuYmluZEV2ZW50KGVsLCAnY2hhbmdlJywgdGhpcy5wdWJsaXNoKTtcbiAgICB9LFxuICAgIHVuYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiBSaXZldHMuVXRpbC51bmJpbmRFdmVudChlbCwgJ2NoYW5nZScsIHRoaXMucHVibGlzaCk7XG4gICAgfSxcbiAgICByb3V0aW5lOiBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICAgIHZhciBfcmVmMTtcbiAgICAgIGlmIChlbC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgIHJldHVybiBlbC5jaGVja2VkID0gKChfcmVmMSA9IGVsLnZhbHVlKSAhPSBudWxsID8gX3JlZjEudG9TdHJpbmcoKSA6IHZvaWQgMCkgPT09ICh2YWx1ZSAhPSBudWxsID8gdmFsdWUudG9TdHJpbmcoKSA6IHZvaWQgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZWwuY2hlY2tlZCA9ICEhdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzLnVuY2hlY2tlZCA9IHtcbiAgICBwdWJsaXNoZXM6IHRydWUsXG4gICAgcHJpb3JpdHk6IDIwMDAsXG4gICAgYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiBSaXZldHMuVXRpbC5iaW5kRXZlbnQoZWwsICdjaGFuZ2UnLCB0aGlzLnB1Ymxpc2gpO1xuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuIFJpdmV0cy5VdGlsLnVuYmluZEV2ZW50KGVsLCAnY2hhbmdlJywgdGhpcy5wdWJsaXNoKTtcbiAgICB9LFxuICAgIHJvdXRpbmU6IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgICAgdmFyIF9yZWYxO1xuICAgICAgaWYgKGVsLnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNoZWNrZWQgPSAoKF9yZWYxID0gZWwudmFsdWUpICE9IG51bGwgPyBfcmVmMS50b1N0cmluZygpIDogdm9pZCAwKSAhPT0gKHZhbHVlICE9IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogdm9pZCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBlbC5jaGVja2VkID0gIXZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBSaXZldHNbXCJwdWJsaWNcIl0uYmluZGVycy52YWx1ZSA9IHtcbiAgICBwdWJsaXNoZXM6IHRydWUsXG4gICAgcHJpb3JpdHk6IDMwMDAsXG4gICAgYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIGlmICghKGVsLnRhZ05hbWUgPT09ICdJTlBVVCcgJiYgZWwudHlwZSA9PT0gJ3JhZGlvJykpIHtcbiAgICAgICAgdGhpcy5ldmVudCA9IGVsLnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgICAgICByZXR1cm4gUml2ZXRzLlV0aWwuYmluZEV2ZW50KGVsLCB0aGlzLmV2ZW50LCB0aGlzLnB1Ymxpc2gpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbihlbCkge1xuICAgICAgaWYgKCEoZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbC50eXBlID09PSAncmFkaW8nKSkge1xuICAgICAgICByZXR1cm4gUml2ZXRzLlV0aWwudW5iaW5kRXZlbnQoZWwsIHRoaXMuZXZlbnQsIHRoaXMucHVibGlzaCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByb3V0aW5lOiBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICAgIHZhciBvLCBfaSwgX2xlbiwgX3JlZjEsIF9yZWYyLCBfcmVmMywgX3Jlc3VsdHM7XG4gICAgICBpZiAoZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh3aW5kb3cualF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgZWwgPSBqUXVlcnkoZWwpO1xuICAgICAgICBpZiAoKHZhbHVlICE9IG51bGwgPyB2YWx1ZS50b1N0cmluZygpIDogdm9pZCAwKSAhPT0gKChfcmVmMSA9IGVsLnZhbCgpKSAhPSBudWxsID8gX3JlZjEudG9TdHJpbmcoKSA6IHZvaWQgMCkpIHtcbiAgICAgICAgICByZXR1cm4gZWwudmFsKHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGVsLnR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG4gICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIF9yZXN1bHRzID0gW107XG4gICAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGVsLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICAgIG8gPSBlbFtfaV07XG4gICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goby5zZWxlY3RlZCA9IChfcmVmMiA9IG8udmFsdWUsIF9faW5kZXhPZi5jYWxsKHZhbHVlLCBfcmVmMikgPj0gMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9yZXN1bHRzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgodmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2b2lkIDApICE9PSAoKF9yZWYzID0gZWwudmFsdWUpICE9IG51bGwgPyBfcmVmMy50b1N0cmluZygpIDogdm9pZCAwKSkge1xuICAgICAgICAgIHJldHVybiBlbC52YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzW1wiaWZcIl0gPSB7XG4gICAgYmxvY2s6IHRydWUsXG4gICAgcHJpb3JpdHk6IDQwMDAsXG4gICAgYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciBhdHRyLCBkZWNsYXJhdGlvbjtcbiAgICAgIGlmICh0aGlzLm1hcmtlciA9PSBudWxsKSB7XG4gICAgICAgIGF0dHIgPSBbdGhpcy52aWV3LnByZWZpeCwgdGhpcy50eXBlXS5qb2luKCctJykucmVwbGFjZSgnLS0nLCAnLScpO1xuICAgICAgICBkZWNsYXJhdGlvbiA9IGVsLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiIHJpdmV0czogXCIgKyB0aGlzLnR5cGUgKyBcIiBcIiArIGRlY2xhcmF0aW9uICsgXCIgXCIpO1xuICAgICAgICB0aGlzLmJvdW5kID0gZmFsc2U7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tYXJrZXIsIGVsKTtcbiAgICAgICAgcmV0dXJuIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLm5lc3RlZCkge1xuICAgICAgICB0aGlzLm5lc3RlZC51bmJpbmQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJvdXRpbmU6IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgICAgdmFyIGtleSwgbW9kZWwsIG1vZGVscywgX3JlZjE7XG4gICAgICBpZiAoISF2YWx1ZSA9PT0gIXRoaXMuYm91bmQpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgbW9kZWxzID0ge307XG4gICAgICAgICAgX3JlZjEgPSB0aGlzLnZpZXcubW9kZWxzO1xuICAgICAgICAgIGZvciAoa2V5IGluIF9yZWYxKSB7XG4gICAgICAgICAgICBtb2RlbCA9IF9yZWYxW2tleV07XG4gICAgICAgICAgICBtb2RlbHNba2V5XSA9IG1vZGVsO1xuICAgICAgICAgIH1cbiAgICAgICAgICAodGhpcy5uZXN0ZWQgfHwgKHRoaXMubmVzdGVkID0gbmV3IFJpdmV0cy5WaWV3KGVsLCBtb2RlbHMsIHRoaXMudmlldy5vcHRpb25zKCkpKSkuYmluZCgpO1xuICAgICAgICAgIHRoaXMubWFya2VyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCB0aGlzLm1hcmtlci5uZXh0U2libGluZyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYm91bmQgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgIHRoaXMubmVzdGVkLnVuYmluZCgpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmJvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24obW9kZWxzKSB7XG4gICAgICB2YXIgX3JlZjE7XG4gICAgICByZXR1cm4gKF9yZWYxID0gdGhpcy5uZXN0ZWQpICE9IG51bGwgPyBfcmVmMS51cGRhdGUobW9kZWxzKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG5cbiAgUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnMudW5sZXNzID0ge1xuICAgIGJsb2NrOiB0cnVlLFxuICAgIHByaW9yaXR5OiA0MDAwLFxuICAgIGJpbmQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnNbXCJpZlwiXS5iaW5kLmNhbGwodGhpcywgZWwpO1xuICAgIH0sXG4gICAgdW5iaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBSaXZldHNbXCJwdWJsaWNcIl0uYmluZGVyc1tcImlmXCJdLnVuYmluZC5jYWxsKHRoaXMpO1xuICAgIH0sXG4gICAgcm91dGluZTogZnVuY3Rpb24oZWwsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnNbXCJpZlwiXS5yb3V0aW5lLmNhbGwodGhpcywgZWwsICF2YWx1ZSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKG1vZGVscykge1xuICAgICAgcmV0dXJuIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzW1wiaWZcIl0udXBkYXRlLmNhbGwodGhpcywgbW9kZWxzKTtcbiAgICB9XG4gIH07XG5cbiAgUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnNbJ29uLSonXSA9IHtcbiAgICBcImZ1bmN0aW9uXCI6IHRydWUsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG4gICAgdW5iaW5kOiBmdW5jdGlvbihlbCkge1xuICAgICAgaWYgKHRoaXMuaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUml2ZXRzLlV0aWwudW5iaW5kRXZlbnQoZWwsIHRoaXMuYXJnc1swXSwgdGhpcy5oYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJvdXRpbmU6IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaGFuZGxlcikge1xuICAgICAgICBSaXZldHMuVXRpbC51bmJpbmRFdmVudChlbCwgdGhpcy5hcmdzWzBdLCB0aGlzLmhhbmRsZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJpdmV0cy5VdGlsLmJpbmRFdmVudChlbCwgdGhpcy5hcmdzWzBdLCB0aGlzLmhhbmRsZXIgPSB0aGlzLmV2ZW50SGFuZGxlcih2YWx1ZSkpO1xuICAgIH1cbiAgfTtcblxuICBSaXZldHNbXCJwdWJsaWNcIl0uYmluZGVyc1snZWFjaC0qJ10gPSB7XG4gICAgYmxvY2s6IHRydWUsXG4gICAgcHJpb3JpdHk6IDQwMDAsXG4gICAgYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciBhdHRyLCB2aWV3LCBfaSwgX2xlbiwgX3JlZjE7XG4gICAgICBpZiAodGhpcy5tYXJrZXIgPT0gbnVsbCkge1xuICAgICAgICBhdHRyID0gW3RoaXMudmlldy5wcmVmaXgsIHRoaXMudHlwZV0uam9pbignLScpLnJlcGxhY2UoJy0tJywgJy0nKTtcbiAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiIHJpdmV0czogXCIgKyB0aGlzLnR5cGUgKyBcIiBcIik7XG4gICAgICAgIHRoaXMuaXRlcmF0ZWQgPSBbXTtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLm1hcmtlciwgZWwpO1xuICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9yZWYxID0gdGhpcy5pdGVyYXRlZDtcbiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgIHZpZXcgPSBfcmVmMVtfaV07XG4gICAgICAgICAgdmlldy5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVuYmluZDogZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciB2aWV3LCBfaSwgX2xlbiwgX3JlZjE7XG4gICAgICBpZiAodGhpcy5pdGVyYXRlZCAhPSBudWxsKSB7XG4gICAgICAgIF9yZWYxID0gdGhpcy5pdGVyYXRlZDtcbiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgIHZpZXcgPSBfcmVmMVtfaV07XG4gICAgICAgICAgdmlldy51bmJpbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcm91dGluZTogZnVuY3Rpb24oZWwsIGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBiaW5kaW5nLCBkYXRhLCBpLCBpbmRleCwga2V5LCBtb2RlbCwgbW9kZWxOYW1lLCBvcHRpb25zLCBwcmV2aW91cywgdGVtcGxhdGUsIHZpZXcsIF9pLCBfaiwgX2ssIF9sZW4sIF9sZW4xLCBfbGVuMiwgX3JlZjEsIF9yZWYyLCBfcmVmMztcbiAgICAgIG1vZGVsTmFtZSA9IHRoaXMuYXJnc1swXTtcbiAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uIHx8IFtdO1xuICAgICAgaWYgKHRoaXMuaXRlcmF0ZWQubGVuZ3RoID4gY29sbGVjdGlvbi5sZW5ndGgpIHtcbiAgICAgICAgX3JlZjEgPSBBcnJheSh0aGlzLml0ZXJhdGVkLmxlbmd0aCAtIGNvbGxlY3Rpb24ubGVuZ3RoKTtcbiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmMS5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgIGkgPSBfcmVmMVtfaV07XG4gICAgICAgICAgdmlldyA9IHRoaXMuaXRlcmF0ZWQucG9wKCk7XG4gICAgICAgICAgdmlldy51bmJpbmQoKTtcbiAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHZpZXcuZWxzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpbmRleCA9IF9qID0gMCwgX2xlbjEgPSBjb2xsZWN0aW9uLmxlbmd0aDsgX2ogPCBfbGVuMTsgaW5kZXggPSArK19qKSB7XG4gICAgICAgIG1vZGVsID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICAgIH07XG4gICAgICAgIGRhdGFbUml2ZXRzW1wicHVibGljXCJdLml0ZXJhdGlvbkFsaWFzKG1vZGVsTmFtZSldID0gaW5kZXg7XG4gICAgICAgIGRhdGFbbW9kZWxOYW1lXSA9IG1vZGVsO1xuICAgICAgICBpZiAodGhpcy5pdGVyYXRlZFtpbmRleF0gPT0gbnVsbCkge1xuICAgICAgICAgIF9yZWYyID0gdGhpcy52aWV3Lm1vZGVscztcbiAgICAgICAgICBmb3IgKGtleSBpbiBfcmVmMikge1xuICAgICAgICAgICAgbW9kZWwgPSBfcmVmMltrZXldO1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgIGRhdGFba2V5XSA9IG1vZGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2aW91cyA9IHRoaXMuaXRlcmF0ZWQubGVuZ3RoID8gdGhpcy5pdGVyYXRlZFt0aGlzLml0ZXJhdGVkLmxlbmd0aCAtIDFdLmVsc1swXSA6IHRoaXMubWFya2VyO1xuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLnZpZXcub3B0aW9ucygpO1xuICAgICAgICAgIG9wdGlvbnMucHJlbG9hZERhdGEgPSB0cnVlO1xuICAgICAgICAgIHRlbXBsYXRlID0gZWwuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICAgIHZpZXcgPSBuZXcgUml2ZXRzLlZpZXcodGVtcGxhdGUsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgIHZpZXcuYmluZCgpO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZWQucHVzaCh2aWV3KTtcbiAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZW1wbGF0ZSwgcHJldmlvdXMubmV4dFNpYmxpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlcmF0ZWRbaW5kZXhdLm1vZGVsc1ttb2RlbE5hbWVdICE9PSBtb2RlbCkge1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZWRbaW5kZXhdLnVwZGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICBfcmVmMyA9IHRoaXMudmlldy5iaW5kaW5ncztcbiAgICAgICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjMubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7XG4gICAgICAgICAgYmluZGluZyA9IF9yZWYzW19rXTtcbiAgICAgICAgICBpZiAoYmluZGluZy5lbCA9PT0gdGhpcy5tYXJrZXIucGFyZW50Tm9kZSAmJiBiaW5kaW5nLnR5cGUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbihtb2RlbHMpIHtcbiAgICAgIHZhciBkYXRhLCBrZXksIG1vZGVsLCB2aWV3LCBfaSwgX2xlbiwgX3JlZjE7XG4gICAgICBkYXRhID0ge307XG4gICAgICBmb3IgKGtleSBpbiBtb2RlbHMpIHtcbiAgICAgICAgbW9kZWwgPSBtb2RlbHNba2V5XTtcbiAgICAgICAgaWYgKGtleSAhPT0gdGhpcy5hcmdzWzBdKSB7XG4gICAgICAgICAgZGF0YVtrZXldID0gbW9kZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIF9yZWYxID0gdGhpcy5pdGVyYXRlZDtcbiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZjEubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgdmlldyA9IF9yZWYxW19pXTtcbiAgICAgICAgdmlldy51cGRhdGUoZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5iaW5kZXJzWydjbGFzcy0qJ10gPSBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICB2YXIgZWxDbGFzcztcbiAgICBlbENsYXNzID0gXCIgXCIgKyBlbC5jbGFzc05hbWUgKyBcIiBcIjtcbiAgICBpZiAoIXZhbHVlID09PSAoZWxDbGFzcy5pbmRleE9mKFwiIFwiICsgdGhpcy5hcmdzWzBdICsgXCIgXCIpICE9PSAtMSkpIHtcbiAgICAgIHJldHVybiBlbC5jbGFzc05hbWUgPSB2YWx1ZSA/IFwiXCIgKyBlbC5jbGFzc05hbWUgKyBcIiBcIiArIHRoaXMuYXJnc1swXSA6IGVsQ2xhc3MucmVwbGFjZShcIiBcIiArIHRoaXMuYXJnc1swXSArIFwiIFwiLCAnICcpLnRyaW0oKTtcbiAgICB9XG4gIH07XG5cbiAgUml2ZXRzW1wicHVibGljXCJdLmJpbmRlcnNbJyonXSA9IGZ1bmN0aW9uKGVsLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gZWwuc2V0QXR0cmlidXRlKHRoaXMudHlwZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWwucmVtb3ZlQXR0cmlidXRlKHRoaXMudHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5mb3JtYXR0ZXJzWydjYWxsJ10gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncywgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmd1bWVudHNbMF0sIGFyZ3MgPSAyIDw9IGFyZ3VtZW50cy5sZW5ndGggPyBfX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgIHJldHVybiB2YWx1ZS5jYWxsLmFwcGx5KHZhbHVlLCBbdGhpc10uY29uY2F0KF9fc2xpY2UuY2FsbChhcmdzKSkpO1xuICB9O1xuXG4gIFJpdmV0c1tcInB1YmxpY1wiXS5hZGFwdGVyc1snLiddID0ge1xuICAgIGlkOiAnX3J2JyxcbiAgICBjb3VudGVyOiAwLFxuICAgIHdlYWttYXA6IHt9LFxuICAgIHdlYWtSZWZlcmVuY2U6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGlkLCBfYmFzZSwgX25hbWU7XG4gICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSh0aGlzLmlkKSkge1xuICAgICAgICBpZCA9IHRoaXMuY291bnRlcisrO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCB0aGlzLmlkLCB7XG4gICAgICAgICAgdmFsdWU6IGlkXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChfYmFzZSA9IHRoaXMud2Vha21hcClbX25hbWUgPSBvYmpbdGhpcy5pZF1dIHx8IChfYmFzZVtfbmFtZV0gPSB7XG4gICAgICAgIGNhbGxiYWNrczoge31cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xlYW51cFdlYWtSZWZlcmVuY2U6IGZ1bmN0aW9uKHJlZiwgaWQpIHtcbiAgICAgIGlmICghT2JqZWN0LmtleXMocmVmLmNhbGxiYWNrcykubGVuZ3RoKSB7XG4gICAgICAgIGlmICghKHJlZi5wb2ludGVycyAmJiBPYmplY3Qua2V5cyhyZWYucG9pbnRlcnMpLmxlbmd0aCkpIHtcbiAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMud2Vha21hcFtpZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHN0dWJGdW5jdGlvbjogZnVuY3Rpb24ob2JqLCBmbikge1xuICAgICAgdmFyIG1hcCwgb3JpZ2luYWwsIHdlYWttYXA7XG4gICAgICBvcmlnaW5hbCA9IG9ialtmbl07XG4gICAgICBtYXAgPSB0aGlzLndlYWtSZWZlcmVuY2Uob2JqKTtcbiAgICAgIHdlYWttYXAgPSB0aGlzLndlYWttYXA7XG4gICAgICByZXR1cm4gb2JqW2ZuXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FsbGJhY2ssIGssIHIsIHJlc3BvbnNlLCBfaSwgX2xlbiwgX3JlZjEsIF9yZWYyLCBfcmVmMywgX3JlZjQ7XG4gICAgICAgIHJlc3BvbnNlID0gb3JpZ2luYWwuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgICBfcmVmMSA9IG1hcC5wb2ludGVycztcbiAgICAgICAgZm9yIChyIGluIF9yZWYxKSB7XG4gICAgICAgICAgayA9IF9yZWYxW3JdO1xuICAgICAgICAgIF9yZWY0ID0gKF9yZWYyID0gKF9yZWYzID0gd2Vha21hcFtyXSkgIT0gbnVsbCA/IF9yZWYzLmNhbGxiYWNrc1trXSA6IHZvaWQgMCkgIT0gbnVsbCA/IF9yZWYyIDogW107XG4gICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmNC5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBfcmVmNFtfaV07XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9O1xuICAgIH0sXG4gICAgb2JzZXJ2ZU11dGF0aW9uczogZnVuY3Rpb24ob2JqLCByZWYsIGtleXBhdGgpIHtcbiAgICAgIHZhciBmbiwgZnVuY3Rpb25zLCBtYXAsIF9iYXNlLCBfaSwgX2xlbjtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgbWFwID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaik7XG4gICAgICAgIGlmIChtYXAucG9pbnRlcnMgPT0gbnVsbCkge1xuICAgICAgICAgIG1hcC5wb2ludGVycyA9IHt9O1xuICAgICAgICAgIGZ1bmN0aW9ucyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAndW5zaGlmdCcsICdzb3J0JywgJ3JldmVyc2UnLCAnc3BsaWNlJ107XG4gICAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBmdW5jdGlvbnMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHtcbiAgICAgICAgICAgIGZuID0gZnVuY3Rpb25zW19pXTtcbiAgICAgICAgICAgIHRoaXMuc3R1YkZ1bmN0aW9uKG9iaiwgZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKF9iYXNlID0gbWFwLnBvaW50ZXJzKVtyZWZdID09IG51bGwpIHtcbiAgICAgICAgICBfYmFzZVtyZWZdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9faW5kZXhPZi5jYWxsKG1hcC5wb2ludGVyc1tyZWZdLCBrZXlwYXRoKSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gbWFwLnBvaW50ZXJzW3JlZl0ucHVzaChrZXlwYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdW5vYnNlcnZlTXV0YXRpb25zOiBmdW5jdGlvbihvYmosIHJlZiwga2V5cGF0aCkge1xuICAgICAgdmFyIGlkeCwgbWFwLCBwb2ludGVycztcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgKG9ialt0aGlzLmlkXSAhPSBudWxsKSkge1xuICAgICAgICBpZiAobWFwID0gdGhpcy53ZWFrbWFwW29ialt0aGlzLmlkXV0pIHtcbiAgICAgICAgICBpZiAocG9pbnRlcnMgPSBtYXAucG9pbnRlcnNbcmVmXSkge1xuICAgICAgICAgICAgaWYgKChpZHggPSBwb2ludGVycy5pbmRleE9mKGtleXBhdGgpKSA+PSAwKSB7XG4gICAgICAgICAgICAgIHBvaW50ZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcC5wb2ludGVyc1tyZWZdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYW51cFdlYWtSZWZlcmVuY2UobWFwLCBvYmpbdGhpcy5pZF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24ob2JqLCBrZXlwYXRoLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGNhbGxiYWNrcywgZGVzYywgdmFsdWU7XG4gICAgICBjYWxsYmFja3MgPSB0aGlzLndlYWtSZWZlcmVuY2Uob2JqKS5jYWxsYmFja3M7XG4gICAgICBpZiAoY2FsbGJhY2tzW2tleXBhdGhdID09IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2tzW2tleXBhdGhdID0gW107XG4gICAgICAgIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5cGF0aCk7XG4gICAgICAgIGlmICghKChkZXNjICE9IG51bGwgPyBkZXNjLmdldCA6IHZvaWQgMCkgfHwgKGRlc2MgIT0gbnVsbCA/IGRlc2Muc2V0IDogdm9pZCAwKSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ialtrZXlwYXRoXTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXlwYXRoLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjYiwgbWFwLCBfaSwgX2xlbiwgX3JlZjE7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMudW5vYnNlcnZlTXV0YXRpb25zKHZhbHVlLCBvYmpbX3RoaXMuaWRdLCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICBpZiAobWFwID0gX3RoaXMud2Vha21hcFtvYmpbX3RoaXMuaWRdXSkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3MgPSBtYXAuY2FsbGJhY2tzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tzW2tleXBhdGhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3JlZjEgPSBjYWxsYmFja3Nba2V5cGF0aF0uc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYxLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYiA9IF9yZWYxW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfX2luZGV4T2YuY2FsbChjYWxsYmFja3Nba2V5cGF0aF0sIGNiKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNiKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5vYnNlcnZlTXV0YXRpb25zKG5ld1ZhbHVlLCBvYmpbX3RoaXMuaWRdLCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoX19pbmRleE9mLmNhbGwoY2FsbGJhY2tzW2tleXBhdGhdLCBjYWxsYmFjaykgPCAwKSB7XG4gICAgICAgIGNhbGxiYWNrc1trZXlwYXRoXS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm9ic2VydmVNdXRhdGlvbnMob2JqW2tleXBhdGhdLCBvYmpbdGhpcy5pZF0sIGtleXBhdGgpO1xuICAgIH0sXG4gICAgdW5vYnNlcnZlOiBmdW5jdGlvbihvYmosIGtleXBhdGgsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzLCBpZHgsIG1hcDtcbiAgICAgIGlmIChtYXAgPSB0aGlzLndlYWttYXBbb2JqW3RoaXMuaWRdXSkge1xuICAgICAgICBpZiAoY2FsbGJhY2tzID0gbWFwLmNhbGxiYWNrc1trZXlwYXRoXSkge1xuICAgICAgICAgIGlmICgoaWR4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spKSA+PSAwKSB7XG4gICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcC5jYWxsYmFja3Nba2V5cGF0aF07XG4gICAgICAgICAgICAgIHRoaXMudW5vYnNlcnZlTXV0YXRpb25zKG9ialtrZXlwYXRoXSwgb2JqW3RoaXMuaWRdLCBrZXlwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYW51cFdlYWtSZWZlcmVuY2UobWFwLCBvYmpbdGhpcy5pZF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uKG9iaiwga2V5cGF0aCkge1xuICAgICAgcmV0dXJuIG9ialtrZXlwYXRoXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24ob2JqLCBrZXlwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXlwYXRoXSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBSaXZldHMuZmFjdG9yeSA9IGZ1bmN0aW9uKHNpZ2h0Z2xhc3MpIHtcbiAgICBSaXZldHMuc2lnaHRnbGFzcyA9IHNpZ2h0Z2xhc3M7XG4gICAgUml2ZXRzW1wicHVibGljXCJdLl8gPSBSaXZldHM7XG4gICAgcmV0dXJuIFJpdmV0c1tcInB1YmxpY1wiXTtcbiAgfTtcblxuICBpZiAodHlwZW9mICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZSAhPT0gbnVsbCA/IG1vZHVsZS5leHBvcnRzIDogdm9pZCAwKSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJpdmV0cy5mYWN0b3J5KHJlcXVpcmUoJ3NpZ2h0Z2xhc3MnKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnc2lnaHRnbGFzcyddLCBmdW5jdGlvbihzaWdodGdsYXNzKSB7XG4gICAgICByZXR1cm4gdGhpcy5yaXZldHMgPSBSaXZldHMuZmFjdG9yeShzaWdodGdsYXNzKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJpdmV0cyA9IFJpdmV0cy5mYWN0b3J5KHNpZ2h0Z2xhc3MpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbn0se1wic2lnaHRnbGFzc1wiOjYwfV0sNjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKCkge1xuICAvLyBQdWJsaWMgc2lnaHRnbGFzcyBpbnRlcmZhY2UuXG4gIGZ1bmN0aW9uIHNpZ2h0Z2xhc3Mob2JqLCBrZXlwYXRoLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2ZXIob2JqLCBrZXlwYXRoLCBjYWxsYmFjaywgb3B0aW9ucylcbiAgfVxuXG4gIC8vIEJhdHRlcmllcyBub3QgaW5jbHVkZWQuXG4gIHNpZ2h0Z2xhc3MuYWRhcHRlcnMgPSB7fVxuXG4gIC8vIENvbnN0cnVjdHMgYSBuZXcga2V5cGF0aCBvYnNlcnZlciBhbmQga2lja3MgdGhpbmdzIG9mZi5cbiAgZnVuY3Rpb24gT2JzZXJ2ZXIob2JqLCBrZXlwYXRoLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgICB0aGlzLm9wdGlvbnMuYWRhcHRlcnMgPSB0aGlzLm9wdGlvbnMuYWRhcHRlcnMgfHwge31cbiAgICB0aGlzLm9iaiA9IG9ialxuICAgIHRoaXMua2V5cGF0aCA9IGtleXBhdGhcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB0aGlzLm9iamVjdFBhdGggPSBbXVxuICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKVxuICAgIHRoaXMucGFyc2UoKVxuXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0ID0gdGhpcy5yZWFsaXplKCkpKSB7XG4gICAgICB0aGlzLnNldCh0cnVlLCB0aGlzLmtleSwgdGhpcy50YXJnZXQsIHRoaXMuY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgLy8gVG9rZW5pemVzIHRoZSBwcm92aWRlZCBrZXlwYXRoIHN0cmluZyBpbnRvIGludGVyZmFjZSArIHBhdGggdG9rZW5zIGZvciB0aGVcbiAgLy8gb2JzZXJ2ZXIgdG8gd29yayB3aXRoLlxuICBPYnNlcnZlci50b2tlbml6ZSA9IGZ1bmN0aW9uKGtleXBhdGgsIGludGVyZmFjZXMsIHJvb3QpIHtcbiAgICB2YXIgdG9rZW5zID0gW11cbiAgICB2YXIgY3VycmVudCA9IHtpOiByb290LCBwYXRoOiAnJ31cbiAgICB2YXIgaW5kZXgsIGNoclxuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwga2V5cGF0aC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNociA9IGtleXBhdGguY2hhckF0KGluZGV4KVxuXG4gICAgICBpZiAoISF+aW50ZXJmYWNlcy5pbmRleE9mKGNocikpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goY3VycmVudClcbiAgICAgICAgY3VycmVudCA9IHtpOiBjaHIsIHBhdGg6ICcnfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudC5wYXRoICs9IGNoclxuICAgICAgfVxuICAgIH1cblxuICAgIHRva2Vucy5wdXNoKGN1cnJlbnQpXG4gICAgcmV0dXJuIHRva2Vuc1xuICB9XG5cbiAgLy8gUGFyc2VzIHRoZSBrZXlwYXRoIHVzaW5nIHRoZSBpbnRlcmZhY2VzIGRlZmluZWQgb24gdGhlIHZpZXcuIFNldHMgdmFyaWFibGVzXG4gIC8vIGZvciB0aGUgdG9rZW5pemVkIGtleXBhdGggYXMgd2VsbCBhcyB0aGUgZW5kIGtleS5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGludGVyZmFjZXMgPSB0aGlzLmludGVyZmFjZXMoKVxuICAgIHZhciByb290LCBwYXRoXG5cbiAgICBpZiAoIWludGVyZmFjZXMubGVuZ3RoKSB7XG4gICAgICBlcnJvcignTXVzdCBkZWZpbmUgYXQgbGVhc3Qgb25lIGFkYXB0ZXIgaW50ZXJmYWNlLicpXG4gICAgfVxuXG4gICAgaWYgKCEhfmludGVyZmFjZXMuaW5kZXhPZih0aGlzLmtleXBhdGhbMF0pKSB7XG4gICAgICByb290ID0gdGhpcy5rZXlwYXRoWzBdXG4gICAgICBwYXRoID0gdGhpcy5rZXlwYXRoLnN1YnN0cigxKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIChyb290ID0gdGhpcy5vcHRpb25zLnJvb3QgfHwgc2lnaHRnbGFzcy5yb290KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZXJyb3IoJ011c3QgZGVmaW5lIGEgZGVmYXVsdCByb290IGFkYXB0ZXIuJylcbiAgICAgIH1cblxuICAgICAgcGF0aCA9IHRoaXMua2V5cGF0aFxuICAgIH1cblxuICAgIHRoaXMudG9rZW5zID0gT2JzZXJ2ZXIudG9rZW5pemUocGF0aCwgaW50ZXJmYWNlcywgcm9vdClcbiAgICB0aGlzLmtleSA9IHRoaXMudG9rZW5zLnBvcCgpXG4gIH1cblxuICAvLyBSZWFsaXplcyB0aGUgZnVsbCBrZXlwYXRoLCBhdHRhY2hpbmcgb2JzZXJ2ZXJzIGZvciBldmVyeSBrZXkgYW5kIGNvcnJlY3RpbmdcbiAgLy8gb2xkIG9ic2VydmVycyB0byBhbnkgY2hhbmdlZCBvYmplY3RzIGluIHRoZSBrZXlwYXRoLlxuICBPYnNlcnZlci5wcm90b3R5cGUucmVhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5vYmpcbiAgICB2YXIgdW5yZWFjaGVkID0gZmFsc2VcbiAgICB2YXIgcHJldlxuXG4gICAgdGhpcy50b2tlbnMuZm9yRWFjaChmdW5jdGlvbih0b2tlbiwgaW5kZXgpIHtcbiAgICAgIGlmIChpc09iamVjdChjdXJyZW50KSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub2JqZWN0UGF0aFtpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnQgIT09IChwcmV2ID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGZhbHNlLCB0b2tlbiwgcHJldiwgdGhpcy51cGRhdGUpXG4gICAgICAgICAgICB0aGlzLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcy51cGRhdGUpXG4gICAgICAgICAgICB0aGlzLm9iamVjdFBhdGhbaW5kZXhdID0gY3VycmVudFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcy51cGRhdGUpXG4gICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldCh0b2tlbiwgY3VycmVudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh1bnJlYWNoZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgdW5yZWFjaGVkID0gaW5kZXhcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcmV2ID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XSkge1xuICAgICAgICAgIHRoaXMuc2V0KGZhbHNlLCB0b2tlbiwgcHJldiwgdGhpcy51cGRhdGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKVxuXG4gICAgaWYgKHVucmVhY2hlZCAhPT0gZmFsc2UpIHtcbiAgICAgIHRoaXMub2JqZWN0UGF0aC5zcGxpY2UodW5yZWFjaGVkKVxuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50XG4gIH1cblxuICAvLyBVcGRhdGVzIHRoZSBrZXlwYXRoLiBUaGlzIGlzIGNhbGxlZCB3aGVuIGFueSBpbnRlcm1lZGlhcnkga2V5IGlzIGNoYW5nZWQuXG4gIE9ic2VydmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV4dCwgb2xkVmFsdWVcblxuICAgIGlmICgobmV4dCA9IHRoaXMucmVhbGl6ZSgpKSAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjaylcbiAgICAgIH1cblxuICAgICAgaWYgKGlzT2JqZWN0KG5leHQpKSB7XG4gICAgICAgIHRoaXMuc2V0KHRydWUsIHRoaXMua2V5LCBuZXh0LCB0aGlzLmNhbGxiYWNrKVxuICAgICAgfVxuXG4gICAgICBvbGRWYWx1ZSA9IHRoaXMudmFsdWUoKVxuICAgICAgdGhpcy50YXJnZXQgPSBuZXh0XG5cbiAgICAgIC8vIEFsd2F5cyBjYWxsIGNhbGxiYWNrIGlmIHZhbHVlIGlzIGEgZnVuY3Rpb24uIElmIG5vdCBhIGZ1bmN0aW9uLCBjYWxsIGNhbGxiYWNrIG9ubHkgaWYgdmFsdWUgY2hhbmdlZFxuICAgICAgaWYgKHRoaXMudmFsdWUoKSBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IHRoaXMudmFsdWUoKSAhPT0gb2xkVmFsdWUpIHRoaXMuY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlYWRzIHRoZSBjdXJyZW50IGVuZCB2YWx1ZSBvZiB0aGUgb2JzZXJ2ZWQga2V5cGF0aC4gUmV0dXJucyB1bmRlZmluZWQgaWZcbiAgLy8gdGhlIGZ1bGwga2V5cGF0aCBpcyB1bnJlYWNoYWJsZS5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMua2V5LCB0aGlzLnRhcmdldClcbiAgICB9XG4gIH1cblxuICAvLyBTZXRzIHRoZSBjdXJyZW50IGVuZCB2YWx1ZSBvZiB0aGUgb2JzZXJ2ZWQga2V5cGF0aC4gQ2FsbGluZyBzZXRWYWx1ZSB3aGVuXG4gIC8vIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUgaXMgYSBuby1vcC5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodGhpcy50YXJnZXQpKSB7XG4gICAgICB0aGlzLmFkYXB0ZXIodGhpcy5rZXkpLnNldCh0aGlzLnRhcmdldCwgdGhpcy5rZXkucGF0aCwgdmFsdWUpXG4gICAgfVxuICB9XG5cbiAgLy8gR2V0cyB0aGUgcHJvdmlkZWQga2V5IG9uIGFuIG9iamVjdC5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGtleSwgb2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlcihrZXkpLmdldChvYmosIGtleS5wYXRoKVxuICB9XG5cbiAgLy8gT2JzZXJ2ZXMgb3IgdW5vYnNlcnZlcyBhIGNhbGxiYWNrIG9uIHRoZSBvYmplY3QgdXNpbmcgdGhlIHByb3ZpZGVkIGtleS5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGFjdGl2ZSwga2V5LCBvYmosIGNhbGxiYWNrKSB7XG4gICAgdmFyIGFjdGlvbiA9IGFjdGl2ZSA/ICdvYnNlcnZlJyA6ICd1bm9ic2VydmUnXG4gICAgdGhpcy5hZGFwdGVyKGtleSlbYWN0aW9uXShvYmosIGtleS5wYXRoLCBjYWxsYmFjaylcbiAgfVxuXG4gIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIHVuaXF1ZSBhZGFwdGVyIGludGVyZmFjZXMgYXZhaWxhYmxlLlxuICBPYnNlcnZlci5wcm90b3R5cGUuaW50ZXJmYWNlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnRlcmZhY2VzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLmFkYXB0ZXJzKVxuXG4gICAgT2JqZWN0LmtleXMoc2lnaHRnbGFzcy5hZGFwdGVycykuZm9yRWFjaChmdW5jdGlvbihpKSB7XG4gICAgICBpZiAoIX5pbnRlcmZhY2VzLmluZGV4T2YoaSkpIHtcbiAgICAgICAgaW50ZXJmYWNlcy5wdXNoKGkpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHJldHVybiBpbnRlcmZhY2VzXG4gIH1cblxuICAvLyBDb252ZW5pZW5jZSBmdW5jdGlvbiB0byBncmFiIHRoZSBhZGFwdGVyIGZvciBhIHNwZWNpZmljIGtleS5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLmFkYXB0ZXIgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFkYXB0ZXJzW2tleS5pXSB8fFxuICAgICAgc2lnaHRnbGFzcy5hZGFwdGVyc1trZXkuaV1cbiAgfVxuXG4gIC8vIFVub2JzZXJ2ZXMgdGhlIGVudGlyZSBrZXlwYXRoLlxuICBPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9ialxuXG4gICAgdGhpcy50b2tlbnMuZm9yRWFjaChmdW5jdGlvbih0b2tlbiwgaW5kZXgpIHtcbiAgICAgIGlmIChvYmogPSB0aGlzLm9iamVjdFBhdGhbaW5kZXhdKSB7XG4gICAgICAgIHRoaXMuc2V0KGZhbHNlLCB0b2tlbiwgb2JqLCB0aGlzLnVwZGF0ZSlcbiAgICAgIH1cbiAgICB9LCB0aGlzKVxuXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB0aGFuIGNhbiBiZSBvYnNlcnZlZC5cbiAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbFxuICB9XG5cbiAgLy8gRXJyb3IgdGhyb3dlci5cbiAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignW3NpZ2h0Z2xhc3NdICcgKyBtZXNzYWdlKVxuICB9XG5cbiAgLy8gRXhwb3J0IG1vZHVsZSBmb3IgTm9kZSBhbmQgdGhlIGJyb3dzZXIuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gc2lnaHRnbGFzc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaWdodGdsYXNzID0gc2lnaHRnbGFzc1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zaWdodGdsYXNzID0gc2lnaHRnbGFzc1xuICB9XG59KS5jYWxsKHRoaXMpO1xuXG59LHt9XSw2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vLyAgICAgVW5kZXJzY29yZS5qcyAxLjguM1xuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxuICAgIG5hdGl2ZUNyZWF0ZSAgICAgICA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOC4zJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCB1bmRlZmluZWRPbmx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIXVuZGVmaW5lZE9ubHkgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3RcbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBwcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gIHZhciBpc0FycmF5TGlrZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LlxuICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gICAgLy8gT3B0aW1pemVkIGl0ZXJhdG9yIGZ1bmN0aW9uIGFzIHVzaW5nIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAvLyBpbiB0aGUgbWFpbiBmdW5jdGlvbiB3aWxsIGRlb3B0aW1pemUgdGhlLCBzZWUgIzE5OTEuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBpbml0aWFsIHZhbHVlIGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gXy5maW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHNldCA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xuICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcbiAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBwYXNzID0gW10sIGZhaWwgPSBbXTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICAgIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqKSA/IHBhc3MgOiBmYWlsKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBzdGFydEluZGV4KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLCBpZHggPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAvL2ZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0XG4gICAgICAgIGlmICghc2hhbGxvdykgdmFsdWUgPSBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QpO1xuICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgb3V0cHV0Lmxlbmd0aCArPSBsZW47XG4gICAgICAgIHdoaWxlIChqIDwgbGVuKSB7XG4gICAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCkge1xuICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBmYWxzZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuemlwKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXNcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHNcbiAgdmFyIGV4ZWN1dGVCb3VuZCA9IGZ1bmN0aW9uKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmUgcHJlLWZpbGxlZC5cbiAgXy5wYXJ0aWFsID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBfID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfTtcblxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcbiAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4gIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGksIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleTtcbiAgICBpZiAobGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghXy5oYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbiAgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuICBmdW5jdGlvbiBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cykge1xuICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gICAgdmFyIHByb3RvID0gKF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlKSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoXy5oYXMob2JqLCBwcm9wKSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tub25FbnVtSWR4XTtcbiAgICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSB7XG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdFxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdFxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHRzID0ge30sXG4gICAgICAgICAgY3VycmVudEtleTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3VycmVudEtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMpO1xuXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3RcbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqZWN0LCBvaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIG9iaiA9IG9iamVjdCwgaXRlcmF0ZWUsIGtleXM7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24ob2l0ZXJhdGVlKSkge1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKG9pdGVyYXRlZSwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7IHJldHVybiBrZXkgaW4gb2JqOyB9O1xuICAgICAgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5uZWdhdGUoaXRlcmF0ZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ubWFwKGZsYXR0ZW4oYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UsIDEpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTtcblxuICAvLyBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIHByb3RvdHlwZSBvYmplY3QuXG4gIC8vIElmIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gIC8vIGNyZWF0ZWQgb2JqZWN0LlxuICBfLmNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIGlmIChwcm9wcykgXy5leHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhhdHRycyksIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7XG4gICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgYW5kIGluIFNhZmFyaSA4ICgjMTkyOSkuXG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0Jykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT09ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIF8ucHJvcGVydHkgPSBwcm9wZXJ0eTtcblxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG4gIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IGZ1bmN0aW9uKCl7fSA6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXG4gIC8vIGBvYmplY3RgIGFzIGNvbnRleHQ7IG90aGVyd2lzZSwgcmV0dXJuIGl0LlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGZhbGxiYWNrKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBvYmplY3RbcHJvcGVydHldO1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9IGZhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZlc3QuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbiAgXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufS5jYWxsKHRoaXMpKTtcblxufSx7fV0sNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uKHNlbGYpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChzZWxmLmZldGNoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3VwcG9ydCA9IHtcbiAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXG4gICAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gICAgYmxvYjogJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiYgJ0Jsb2InIGluIHNlbGYgJiYgKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEJsb2IoKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0pKCksXG4gICAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIHZhciB2aWV3Q2xhc3NlcyA9IFtcbiAgICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDY0QXJyYXldJ1xuICAgIF1cblxuICAgIHZhciBpc0RhdGFWaWV3ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbiAgICB9XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXcgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHZpZXdDbGFzc2VzLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikpID4gLTFcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpXG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLlxcXl9gfH5dL2kudGVzdChuYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICAvLyBCdWlsZCBhIGRlc3RydWN0aXZlIGl0ZXJhdG9yIGZvciB0aGUgdmFsdWUgbGlzdFxuICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xuICAgIHZhciBpdGVyYXRvciA9IHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpXG4gICAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgICBpdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVyYXRvclxuICB9XG5cbiAgZnVuY3Rpb24gSGVhZGVycyhoZWFkZXJzKSB7XG4gICAgdGhpcy5tYXAgPSB7fVxuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgICB9LCB0aGlzKVxuXG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQobmFtZSwgaGVhZGVyc1tuYW1lXSlcbiAgICAgIH0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpXG4gICAgdmFyIGxpc3QgPSB0aGlzLm1hcFtuYW1lXVxuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IFtdXG4gICAgICB0aGlzLm1hcFtuYW1lXSA9IGxpc3RcbiAgICB9XG4gICAgbGlzdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXVxuICAgIHJldHVybiB2YWx1ZXMgPyB2YWx1ZXNbMF0gOiBudWxsXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldIHx8IFtdXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmhhc093blByb3BlcnR5KG5vcm1hbGl6ZU5hbWUobmFtZSkpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHRoaXMubWFwW25vcm1hbGl6ZU5hbWUobmFtZSldID0gW25vcm1hbGl6ZVZhbHVlKHZhbHVlKV1cbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbihjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMubWFwKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHRoaXMubWFwW25hbWVdLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwgbmFtZSwgdGhpcylcbiAgICAgIH0sIHRoaXMpXG4gICAgfSwgdGhpcylcbiAgfVxuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaXRlbXMgPSBbXVxuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkgeyBpdGVtcy5wdXNoKG5hbWUpIH0pXG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHsgaXRlbXMucHVzaCh2YWx1ZSkgfSlcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG4gIH1cblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0ZW1zID0gW11cbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIG5hbWUpIHsgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKSB9KVxuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgICBpZiAoYm9keS5ib2R5VXNlZCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxuICAgIH1cbiAgICBib2R5LmJvZHlVc2VkID0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgICAgfVxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcbiAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKVxuICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYilcbiAgICByZXR1cm4gcHJvbWlzZVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQoYmxvYikge1xuICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpXG4gICAgcmV0dXJuIHByb21pc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1ZilcbiAgICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKVxuICAgIH1cbiAgICByZXR1cm4gY2hhcnMuam9pbignJylcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICAgIGlmIChidWYuc2xpY2UpIHtcbiAgICAgIHJldHVybiBidWYuc2xpY2UoMClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShidWYuYnl0ZUxlbmd0aClcbiAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpXG4gICAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZVxuXG4gICAgdGhpcy5faW5pdEJvZHkgPSBmdW5jdGlvbihib2R5KSB7XG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5ibG9iICYmIEJsb2IucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keVxuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5LnRvU3RyaW5nKClcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiBzdXBwb3J0LmJsb2IgJiYgaXNEYXRhVmlldyhib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSlcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIEJvZHlJbml0IHR5cGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JylcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSlcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1cHBvcnQuYmxvYikge1xuICAgICAgdGhpcy5ibG9iID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QmxvYilcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgcmVhZCBGb3JtRGF0YSBib2R5IGFzIHRleHQnKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3VwcG9ydC5mb3JtRGF0YSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihKU09OLnBhcnNlKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvLyBIVFRQIG1ldGhvZHMgd2hvc2UgY2FwaXRhbGl6YXRpb24gc2hvdWxkIGJlIG5vcm1hbGl6ZWRcbiAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XG4gICAgdmFyIHVwY2FzZWQgPSBtZXRob2QudG9VcHBlckNhc2UoKVxuICAgIHJldHVybiAobWV0aG9kcy5pbmRleE9mKHVwY2FzZWQpID4gLTEpID8gdXBjYXNlZCA6IG1ldGhvZFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxdWVzdChpbnB1dCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnVybCA9IGlucHV0XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpbnB1dC5ib2R5VXNlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmxcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5wdXQuaGVhZGVycylcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kXG4gICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlXG4gICAgICBpZiAoIWJvZHkgJiYgaW5wdXQuX2JvZHlJbml0ICE9IG51bGwpIHtcbiAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgICBpbnB1dC5ib2R5VXNlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gb3B0aW9ucy5jcmVkZW50aWFscyB8fCB0aGlzLmNyZWRlbnRpYWxzIHx8ICdvbWl0J1xuICAgIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGxcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbFxuXG4gICAgaWYgKCh0aGlzLm1ldGhvZCA9PT0gJ0dFVCcgfHwgdGhpcy5tZXRob2QgPT09ICdIRUFEJykgJiYgYm9keSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICAgIH1cbiAgICB0aGlzLl9pbml0Qm9keShib2R5KVxuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywgeyBib2R5OiB0aGlzLl9ib2R5SW5pdCB9KVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gICAgYm9keS50cmltKCkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgdmFyIHNwbGl0ID0gYnl0ZXMuc3BsaXQoJz0nKVxuICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJylcbiAgICAgICAgdmFyIHZhbHVlID0gc3BsaXQuam9pbignPScpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIGZvcm0uYXBwZW5kKGRlY29kZVVSSUNvbXBvbmVudChuYW1lKSwgZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBmb3JtXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKVxuICAgIHJhd0hlYWRlcnMuc3BsaXQoJ1xcclxcbicpLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgICAgdmFyIHBhcnRzID0gbGluZS5zcGxpdCgnOicpXG4gICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKClcbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKVxuICAgICAgICBoZWFkZXJzLmFwcGVuZChrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGhlYWRlcnNcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXF1ZXN0LnByb3RvdHlwZSlcblxuICBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnXG4gICAgdGhpcy5zdGF0dXMgPSAnc3RhdHVzJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXMgOiAyMDBcbiAgICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snXG4gICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKVxuICAgIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdClcbiAgfVxuXG4gIEJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cbiAgUmVzcG9uc2UucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsXG4gICAgfSlcbiAgfVxuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IDAsIHN0YXR1c1RleHQ6ICcnfSlcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJ1xuICAgIHJldHVybiByZXNwb25zZVxuICB9XG5cbiAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdXG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICAgIGlmIChyZWRpcmVjdFN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHN0YXR1cyBjb2RlJylcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtzdGF0dXM6IHN0YXR1cywgaGVhZGVyczoge2xvY2F0aW9uOiB1cmx9fSlcbiAgfVxuXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2VcblxuICBzZWxmLmZldGNoID0gZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGlucHV0LCBpbml0KVxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpXG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgICB2YXIgYm9keSA9ICdyZXNwb25zZScgaW4geGhyID8geGhyLnJlc3BvbnNlIDogeGhyLnJlc3BvbnNlVGV4dFxuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSlcbiAgICAgIH1cblxuICAgICAgeGhyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgICAgfVxuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhociAmJiBzdXBwb3J0LmJsb2IpIHtcbiAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICAgIH0pXG5cbiAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gICAgfSlcbiAgfVxuICBzZWxmLmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMpO1xuXG59LHt9XSw2MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHRQb2xhckNoYXJ0c09wdGlvbnMgPSBleHBvcnRzLmRlZmF1bHRDaGFydHNPcHRpb25zID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5saXN0YURlZmF1bHREYXRhID0gbGlzdGFEZWZhdWx0RGF0YTtcbmV4cG9ydHMuc3VwRGVmYXVsdERhdGEgPSBzdXBEZWZhdWx0RGF0YTtcbmV4cG9ydHMudGVycmlEZWZhdWx0RGF0YSA9IHRlcnJpRGVmYXVsdERhdGE7XG5cbnZhciBfbW92ZW1lbnRDb2xvcnMgPSByZXF1aXJlKCcuL21vdmVtZW50Q29sb3JzLmpzJyk7XG5cbnZhciBkZWZhdWx0Q2hhcnRzT3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdENoYXJ0c09wdGlvbnMgPSB7XG4gIHJlc3BvbnNpdmU6IHRydWUsXG4gIGxlZ2VuZDoge1xuICAgIGRpc3BsYXk6IGZhbHNlXG4gIH0sXG4gIHRvb2x0aXBzOiB7XG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBsYWJlbDogZnVuY3Rpb24gbGFiZWwodG9vbHRpcEl0ZW0sIGRhdGEpIHtcbiAgICAgICAgdmFyIHZhbCA9IGRhdGEuZGF0YXNldHNbdG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4XS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcbiAgICAgICAgdmFyIGxhYiA9IGRhdGEubGFiZWxzW3Rvb2x0aXBJdGVtLmluZGV4XTtcbiAgICAgICAgcmV0dXJuIGxhYiArICc6ICcgKyB2YWwgKyAnJSc7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgZGVmYXVsdFBvbGFyQ2hhcnRzT3B0aW9ucyA9IGV4cG9ydHMuZGVmYXVsdFBvbGFyQ2hhcnRzT3B0aW9ucyA9IHtcbiAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgbGVnZW5kOiB7XG4gICAgZGlzcGxheTogZmFsc2VcbiAgfSxcbiAgdG9vbHRpcHM6IHtcbiAgICBjYWxsYmFja3M6IHtcbiAgICAgIGxhYmVsOiBmdW5jdGlvbiBsYWJlbCh0b29sdGlwSXRlbSwgZGF0YSkge1xuICAgICAgICB2YXIgdmFsID0gZGF0YS5kYXRhc2V0c1t0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXhdLmRhdGFbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuICAgICAgICB2YXIgbGFiID0gZGF0YS5sYWJlbHNbdG9vbHRpcEl0ZW0uaW5kZXhdO1xuICAgICAgICByZXR1cm4gbGFiICsgJzogJyArIHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxpc3RhRGVmYXVsdERhdGEoKSB7XG4gIHJldHVybiB7XG4gICAgbGFiZWxzOiBbJzFhJywgJ0RlY3JlY2VyJywgJ05BVScsICdTb2xpZGFyaWRhZCddLFxuICAgIGRhdGFzZXRzOiBbe1xuICAgICAgZGF0YTogWzI1LCAyNSwgMjUsIDI1XSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogW19tb3ZlbWVudENvbG9ycy5DT0xPUl9NRywgX21vdmVtZW50Q29sb3JzLkNPTE9SX0RFQ1JFQ0VSLCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfTkFVLCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfU0REXVxuICAgIH1dXG4gIH07XG59O1xuXG5mdW5jdGlvbiBzdXBEZWZhdWx0RGF0YSgpIHtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbHM6IFsnSi4gUm9kcsOtZ3VleicsICdGLiBWZXJhJywgJ0EuIEdhbGxhcmRvJywgJ0MuIFBvcnRhbGVzJywgJ0MuIFNlcMO6bHZlZGEnXSxcbiAgICBkYXRhc2V0czogW3tcbiAgICAgIGRhdGE6IFsyMCwgMjAsIDIwLCAyMCwgMjBdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBbX21vdmVtZW50Q29sb3JzLkNPTE9SX01HLCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfREVDUkVDRVIsIF9tb3ZlbWVudENvbG9ycy5DT0xPUl9OQVUsIF9tb3ZlbWVudENvbG9ycy5DT0xPUl9JQSwgX21vdmVtZW50Q29sb3JzLkNPTE9SX1NERF1cbiAgICB9XVxuICB9O1xufTtcblxuZnVuY3Rpb24gdGVycmlEZWZhdWx0RGF0YSgpIHtcbiAgcmV0dXJuIHtcbiAgICBsYWJlbHM6IFsnTUcnLCAnRGVjcmVjZXInLCAnTkFVJywgJ1NvbGlkYXJpZGFkJywgJ0luZGVwZW5kaWVudGUnLCAnSXpxdWllcmRhIEF1dMOzbm9tYSddLFxuICAgIGRhdGFzZXRzOiBbe1xuICAgICAgZGF0YTogWzAsIDAsIDAsIDAsIDAsIDBdLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBbX21vdmVtZW50Q29sb3JzLkNPTE9SX01HLCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfREVDUkVDRVJfQUxULCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfTkFVLCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfU0RELCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfSU5ELCBfbW92ZW1lbnRDb2xvcnMuQ09MT1JfSUFdXG4gICAgfV1cbiAgfTtcbn07XG5cbn0se1wiLi9tb3ZlbWVudENvbG9ycy5qc1wiOjY2fV0sNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0T2JqZWN0ID0gdW5kZWZpbmVkO1xuZXhwb3J0cy5nZXREYXRhID0gZ2V0RGF0YTtcbmV4cG9ydHMuZ2V0U2VydmVyRGF0YSA9IGdldFNlcnZlckRhdGE7XG5cbnZhciBfdW5kZXJzY29yZSA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxudmFyIF91bmRlcnNjb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VuZGVyc2NvcmUpO1xuXG5yZXF1aXJlKCd3aGF0d2ctZmV0Y2gnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy9odHRwczovL3NwcmVhZHNoZWV0cy5nb29nbGUuY29tL2ZlZWRzL2xpc3QvMVBOSU5FN3ZhQkRsTTdybFdwT2RXSlEwT3ZCb2JnXzRKMFlfQUZJbmdFbTgvb2FxcWc4eS9wdWJsaWMvdmFsdWVzP2FsdD1qc29uXG4vL2h0dHBzOi8vc3ByZWFkc2hlZXRzLmdvb2dsZS5jb20vZmVlZHMvbGlzdC8xUE5JTkU3dmFCRGxNN3JsV3BPZFdKUTBPdkJvYmdfNEowWV9BRkluZ0VtOC81L3B1YmxpYy92YWx1ZXM/YWx0PWpzb25cbnZhciBTRVJWRVJfVVJMID0gJ2h0dHBzOi8vcGFjaWZpYy1yaWRnZS05NjYxMi5oZXJva3VhcHAuY29tJztcbnZhciBTSEVFVF9JRCA9ICcxYUhpTEhzSDlpLVpORk5mb2d2b1hpbkhuTlRtQ2pDeEFaY1FzcmJ5bENNayc7XG52YXIgV1NIRUVUX0lEID0gJzUnO1xudmFyIFNIRUVUX1VSTCA9ICdodHRwczovL3NwcmVhZHNoZWV0cy5nb29nbGUuY29tL2ZlZWRzL2xpc3QvJyArIFNIRUVUX0lEICsgKCcvJyArIFdTSEVFVF9JRCArICcvcHVibGljL3ZhbHVlcz9hbHQ9anNvbicpO1xuXG52YXIgZyA9IGZ1bmN0aW9uIGcob2JqLCBwcm9wKSB7XG4gIHJldHVybiBvYmpbJ2dzeCQnICsgcHJvcF0uJHQ7XG59O1xuXG52YXIgZ2V0RnVsbE9iamVjdCA9IGZ1bmN0aW9uIGdldEZ1bGxPYmplY3Qob2JqKSB7XG4gIHZhciBmdWxsT2JqID0ge1xuICAgIGlkOiBnKG9iaiwgJ2lkJyksXG4gICAgbmFtZTogZyhvYmosICduYW1lJyksXG4gICAgbWc6IGcob2JqLCAnbWcnKSxcbiAgICBtZ3BjOiBnKG9iaiwgJ21ncGMnKSxcbiAgICBkZWNyZWNlcjogZyhvYmosICdkZWNyZWNlcicpLFxuICAgIGRlY3JlY2VycGM6IGcob2JqLCAnZGVjcmVjZXJwYycpLFxuICAgIG5hdTogZyhvYmosICduYXUnKSxcbiAgICBuYXVwYzogZyhvYmosICduYXVwYycpLFxuICAgIGlhOiBnKG9iaiwgJ2lhJyksXG4gICAgaWFwYzogZyhvYmosICdpYXBjJyksXG4gICAgc2RkOiBnKG9iaiwgJ3NkZCcpLFxuICAgIHNkZHBjOiBnKG9iaiwgJ3NkZHBjJyksXG4gICAgYjogZyhvYmosICdiJyksXG4gICAgYnBjOiBnKG9iaiwgJ2JwYycpLFxuICAgIG46IGcob2JqLCAnbicpLFxuICAgIG5wYzogZyhvYmosICducGMnKSxcbiAgICB2b3Rvc3ZlOiBnKG9iaiwgJ3ZvdG9zdmUnKSxcbiAgICB2b3RvczogZyhvYmosICd2b3RvcycpLFxuICAgIGVzY3J1dGFkYTogZyhvYmosICdlc2NydXRhZGEnKSA9PSAnVFJVRScsXG4gICAgcGFydGljaXBhY2lvbjogZyhvYmosICdwYXJ0aWNpcGFjaW9uJylcbiAgfTtcblxuICByZXR1cm4gZnVsbE9iajtcbn07XG5cbnZhciBjb252ZXJ0ZXIgPSBmdW5jdGlvbiBjb252ZXJ0ZXIoc2hlZXRPYmplY3QpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHtcbiAgICBkaWExOiB7XG4gICAgICBsaXN0YToge1xuICAgICAgICBtZXNhOiB7fSxcbiAgICAgICAgdGVycmk6IHt9LFxuICAgICAgICB0b3RhbDoge31cbiAgICAgIH0sIHN1cDoge1xuICAgICAgICBtZXNhOiB7fSxcbiAgICAgICAgdGVycmk6IHt9LFxuICAgICAgICB0b3RhbDoge31cbiAgICAgIH1cbiAgICB9LFxuICAgIGRpYTI6IHtcbiAgICAgIGxpc3RhOiB7XG4gICAgICAgIG1lc2E6IHt9LFxuICAgICAgICB0ZXJyaToge30sXG4gICAgICAgIHRvdGFsOiB7fVxuICAgICAgfSwgc3VwOiB7XG4gICAgICAgIG1lc2E6IHt9LFxuICAgICAgICB0ZXJyaToge30sXG4gICAgICAgIHRvdGFsOiB7fVxuICAgICAgfVxuICAgIH0sXG4gICAgdG90YWw6IHtcbiAgICAgIGxpc3RhOiB7XG4gICAgICAgIG1lc2E6IHt9LFxuICAgICAgICB0ZXJyaToge30sXG4gICAgICAgIHRvdGFsOiB7fVxuICAgICAgfSxcbiAgICAgIHN1cDoge1xuICAgICAgICBtZXNhOiB7fSxcbiAgICAgICAgdGVycmk6IHt9LFxuICAgICAgICB0b3RhbDoge31cbiAgICAgIH1cbiAgICB9LFxuICAgIHRlcnJpczoge30sXG4gICAgdG90YWxjdDoge31cbiAgfTtcbiAgdmFyIGxpbmVzID0gc2hlZXRPYmplY3QuZmVlZC5lbnRyeTtcblxuICBsaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG5cbiAgICBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuY29udGFpbnMoWydkaWExJywgJ2RpYTInLCAndG90YWwnXSwgZyhsaW5lLCAndGllbXBvJykpKSB7XG4gICAgICBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuY29udGFpbnMoWyd0b3RhbCddLCBnKGxpbmUsICdhcmVhJykpKSB7XG4gICAgICAgIGNvbnZlcnRlZFtnKGxpbmUsICd0aWVtcG8nKV1bZyhsaW5lLCAndGlwbycpXVtnKGxpbmUsICdhcmVhJyldID0gZ2V0RnVsbE9iamVjdChsaW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnZlcnRlZFtnKGxpbmUsICd0aWVtcG8nKV1bZyhsaW5lLCAndGlwbycpXVtnKGxpbmUsICdhcmVhJyldW2cobGluZSwgJ2lkJyldID0gZ2V0RnVsbE9iamVjdChsaW5lKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF91bmRlcnNjb3JlMi5kZWZhdWx0LmNvbnRhaW5zKFsndGVycmlzJ10sIGcobGluZSwgJ3RpZW1wbycpKSkge1xuICAgICAgaWYgKCFfdW5kZXJzY29yZTIuZGVmYXVsdC5pc0FycmF5KGNvbnZlcnRlZC50ZXJyaXNbZyhsaW5lLCAnYXJlYScpXSkpIHtcbiAgICAgICAgY29udmVydGVkLnRlcnJpc1tnKGxpbmUsICdhcmVhJyldID0gW107XG4gICAgICB9XG5cbiAgICAgIGNvbnZlcnRlZC50ZXJyaXNbZyhsaW5lLCAnYXJlYScpXS5wdXNoKHtcbiAgICAgICAgbW92OiBnKGxpbmUsICdpZCcpLFxuICAgICAgICBtb3ZpZDogZyhsaW5lLCAndGlwbycpLFxuICAgICAgICBub21icmU6IGcobGluZSwgJ25hbWUnKSxcbiAgICAgICAgdm90b3M6IGcobGluZSwgJ21nJyksXG4gICAgICAgIHBjOiBnKGxpbmUsICdtZ3BjJyksXG4gICAgICAgIGVsZWN0bzogZyhsaW5lLCAnZGVjcmVjZXInKSA9PSAnVFJVRSdcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuY29udGFpbnMoWyd0b3RhbGN0J10sIGcobGluZSwgJ3RpZW1wbycpKSkge1xuICAgICAgY29udmVydGVkLnRvdGFsY3RbZyhsaW5lLCAndGlwbycpXSA9IGcobGluZSwgJ2FyZWEnKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59O1xuXG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICByZXR1cm4gZmV0Y2goU0hFRVRfVVJMKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBjb252ZXJ0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlc29sdmUoY29udmVydGVyKG9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnZlcnRQcm9taXNlO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldFNlcnZlckRhdGEoKSB7XG4gIHJldHVybiBmZXRjaChTRVJWRVJfVVJMKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH0pO1xufVxuXG52YXIgZGVmYXVsdE9iamVjdCA9IGV4cG9ydHMuZGVmYXVsdE9iamVjdCA9IHtcbiAgbWc6IDAsXG4gIG1ncGM6IDAsXG4gIGRlY3JlY2VyOiAwLFxuICBkZWNyZWNlcnBjOiAwLFxuICBuYXU6IDAsXG4gIG5hdXBjOiAwLFxuICBpYTogMCxcbiAgaWFwYzogMCxcbiAgc2RkOiAwLFxuICBzZGRwYzogMCxcbiAgYjogMCxcbiAgYnBjOiAwLFxuICBuOiAwLFxuICBucGM6IDAsXG4gIHZvdG9zdmU6IDAsXG4gIHZvdG9zOiAwLFxuICBlc2NydXRhZGE6IGZhbHNlLFxuICBwYXJ0aWNpcGFjaW9uOiAwXG59O1xuXG59LHtcInVuZGVyc2NvcmVcIjo2MSxcIndoYXR3Zy1mZXRjaFwiOjYyfV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2pxdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG52YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXG52YXIgX2NoYXJ0ID0gcmVxdWlyZSgnY2hhcnQuanMnKTtcblxudmFyIF9jaGFydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGFydCk7XG5cbnZhciBfZGF0YUZldGNoZXIgPSByZXF1aXJlKCcuL2RhdGFGZXRjaGVyLmpzJyk7XG5cbnZhciBfcml2ZXRzID0gcmVxdWlyZSgncml2ZXRzJyk7XG5cbnZhciBfcml2ZXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JpdmV0cyk7XG5cbnZhciBfdW5kZXJzY29yZSA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxudmFyIF91bmRlcnNjb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VuZGVyc2NvcmUpO1xuXG52YXIgX2NoYXJ0VmFycyA9IHJlcXVpcmUoJy4vY2hhcnRWYXJzLmpzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIENoYXQuanMgZ2xvYmFsIGNvbmZpZ3VyYXRpb25cbl9jaGFydDIuZGVmYXVsdC5kZWZhdWx0cy5nbG9iYWwuZWxlbWVudHMuYXJjLmJvcmRlcldpZHRoID0gMjtcbl9jaGFydDIuZGVmYXVsdC5kZWZhdWx0cy5nbG9iYWwuZWxlbWVudHMuYXJjLmJvcmRlckNvbG9yID0gJyNkZGQnO1xuXG52YXIgVVBEQVRFX1RJTUUgPSAyMDAwMDtcbnZhciBOT1RJRl9ERUxBWSA9IDgwMDA7XG5cbnZhciBRVUFSVEVSUyA9IFsyNSwgMjUsIDI1LCAyNV07XG52YXIgRklGVEhTID0gWzIwLCAyMCwgMjAsIDIwLCAyMF07XG5cbigwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXG4gICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnLm5vdGlmaWNhdGlvbiBidXR0b24nKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzKS5wYXJlbnRzKCcubm90aWZpY2F0aW9uJykuZmFkZU91dCgpO1xuICB9KTtcblxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyNyZWZyZXNoLW5vdGlmaWNhdGlvbiBidXR0b24nKS5jbGljaygpO1xuICB9LCBOT1RJRl9ERUxBWSk7XG5cbiAgdmFyIG1haW5EYXRhID0gdm9pZCAwO1xuXG4gIHZhciAkY3R4VG90YWxMaXN0YSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI3RvdGFsLWxpc3RhJyk7XG4gIHZhciAkY3R4VG90YWxTdXAgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyN0b3RhbC1zdXAnKTtcbiAgdmFyICRjdHhNZXNhTGlzdGEgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyNtZXNhLWxpc3RhJyk7XG4gIHZhciAkY3R4TWVzYVN1cCA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI21lc2Etc3VwJyk7XG4gIHZhciAkY3R4VGVycmlMaXN0YSA9ICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI3RlcnJpLWxpc3RhJyk7XG4gIHZhciAkY3R4VGVycmlTdXAgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyN0ZXJyaS1zdXAnKTtcbiAgdmFyICRjdHhDYW50VGVycmkgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyNjb25zZWpvJyk7XG5cbiAgdmFyIGNoYXJ0VG90YWxMaXN0YSA9IG5ldyBfY2hhcnQyLmRlZmF1bHQoJGN0eFRvdGFsTGlzdGEsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy5saXN0YURlZmF1bHREYXRhKSgpLFxuICAgIG9wdGlvbnM6IF9jaGFydFZhcnMuZGVmYXVsdENoYXJ0c09wdGlvbnNcbiAgfSk7XG4gIHZhciBjaGFydFRvdGFsU3VwID0gbmV3IF9jaGFydDIuZGVmYXVsdCgkY3R4VG90YWxTdXAsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy5zdXBEZWZhdWx0RGF0YSkoKSxcbiAgICBvcHRpb25zOiBfY2hhcnRWYXJzLmRlZmF1bHRDaGFydHNPcHRpb25zXG4gIH0pO1xuICB2YXIgY2hhcnRNZXNhTGlzdGEgPSBuZXcgX2NoYXJ0Mi5kZWZhdWx0KCRjdHhNZXNhTGlzdGEsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy5saXN0YURlZmF1bHREYXRhKSgpLFxuICAgIG9wdGlvbnM6IF9jaGFydFZhcnMuZGVmYXVsdENoYXJ0c09wdGlvbnNcbiAgfSk7XG4gIHZhciBjaGFydE1lc2FTdXAgPSBuZXcgX2NoYXJ0Mi5kZWZhdWx0KCRjdHhNZXNhU3VwLCB7XG4gICAgdHlwZTogJ3BpZScsXG4gICAgZGF0YTogKDAsIF9jaGFydFZhcnMuc3VwRGVmYXVsdERhdGEpKCksXG4gICAgb3B0aW9uczogX2NoYXJ0VmFycy5kZWZhdWx0Q2hhcnRzT3B0aW9uc1xuICB9KTtcbiAgdmFyIGNoYXJ0VGVycmlMaXN0YSA9IG5ldyBfY2hhcnQyLmRlZmF1bHQoJGN0eFRlcnJpTGlzdGEsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy5saXN0YURlZmF1bHREYXRhKSgpLFxuICAgIG9wdGlvbnM6IF9jaGFydFZhcnMuZGVmYXVsdENoYXJ0c09wdGlvbnNcbiAgfSk7XG4gIHZhciBjaGFydFRlcnJpU3VwID0gbmV3IF9jaGFydDIuZGVmYXVsdCgkY3R4VGVycmlTdXAsIHtcbiAgICB0eXBlOiAncGllJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy5zdXBEZWZhdWx0RGF0YSkoKSxcbiAgICBvcHRpb25zOiBfY2hhcnRWYXJzLmRlZmF1bHRDaGFydHNPcHRpb25zXG4gIH0pO1xuICB2YXIgY2hhcnRDYW50VGVycmkgPSBuZXcgX2NoYXJ0Mi5kZWZhdWx0KCRjdHhDYW50VGVycmksIHtcbiAgICB0eXBlOiAncG9sYXJBcmVhJyxcbiAgICBkYXRhOiAoMCwgX2NoYXJ0VmFycy50ZXJyaURlZmF1bHREYXRhKSgpLFxuICAgIG9wdGlvbnM6IF9jaGFydFZhcnMuZGVmYXVsdFBvbGFyQ2hhcnRzT3B0aW9uc1xuICB9KTtcblxuICB2YXIgc3VtbWFyeUxpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciBzdW1tYXJ5U3VwID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciB0b3RhbExpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciB0b3RhbFN1cCA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmV4dGVuZCh7fSwgX2RhdGFGZXRjaGVyLmRlZmF1bHRPYmplY3QpO1xuICB2YXIgbWVzYUxpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciBtZXNhU3VwID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciB0ZXJyaUxpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kKHt9LCBfZGF0YUZldGNoZXIuZGVmYXVsdE9iamVjdCk7XG4gIHZhciB0ZXJyaVN1cCA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmV4dGVuZCh7fSwgX2RhdGFGZXRjaGVyLmRlZmF1bHRPYmplY3QpO1xuICB2YXIgdGVycml0b3JpYWxlcyA9IHt9O1xuICB2YXIgY2FudGlkYWRUZXJyaXRvcmlhbGVzID0ge307XG4gIHZhciBwYXJ0aWNpcGFjaW9uID0geyB0ZXJyaXM6IFtdIH07XG4gIHZhciBtZXNhc0VzY3J1dGFkYXMgPSB7IG1lc2FzOiBbXSwgYWN0dWFsOiAwLCB0b3RhbDogODUgfTtcblxuICBfcml2ZXRzMi5kZWZhdWx0LmJpbmRlcnMud2lkdGggPSBmdW5jdGlvbiAoZWwsIHZhbHVlKSB7XG4gICAgZWwuc3R5bGUud2lkdGggPSB2YWx1ZSArICclJztcbiAgfTtcblxuICBfcml2ZXRzMi5kZWZhdWx0LmJpbmRlcnMuYWRkY2xhc3MgPSBmdW5jdGlvbiAoZWwsIHZhbHVlKSB7XG4gICAgaWYgKGVsLmFkZGVkQ2xhc3MpIHtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlbCkucmVtb3ZlQ2xhc3MoZWwuYWRkZWRDbGFzcyk7XG4gICAgICBkZWxldGUgZWwuYWRkZWRDbGFzcztcbiAgICB9XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShlbCkuYWRkQ2xhc3ModmFsdWUpO1xuICAgICAgZWwuYWRkZWRDbGFzcyA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBfcml2ZXRzMi5kZWZhdWx0LmJpbmQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjYmluZC1zdW1tYXJ5LWxpc3RhJyksIHN1bW1hcnlMaXN0YSk7XG4gIF9yaXZldHMyLmRlZmF1bHQuYmluZCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyNiaW5kLXN1bW1hcnktc3VwJyksIHN1bW1hcnlTdXApO1xuICBfcml2ZXRzMi5kZWZhdWx0LmJpbmQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjYmluZC10b3RhbC1saXN0YScpLCB0b3RhbExpc3RhKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtdG90YWwtc3VwJyksIHRvdGFsU3VwKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtbWVzYS1saXN0YScpLCBtZXNhTGlzdGEpO1xuICBfcml2ZXRzMi5kZWZhdWx0LmJpbmQoKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjYmluZC1tZXNhLXN1cCcpLCBtZXNhU3VwKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtdGVycmktc3VwJyksIHRlcnJpU3VwKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtdGVycmktbGlzdGEnKSwgdGVycmlMaXN0YSk7XG4gIF9yaXZldHMyLmRlZmF1bHQuYmluZCgoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJyNiaW5kLXRlcnJpcycpLCB0ZXJyaXRvcmlhbGVzKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtdGVycmlzLWRpc3QnKSwgY2FudGlkYWRUZXJyaXRvcmlhbGVzKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtbWVzYXMnKSwgbWVzYXNFc2NydXRhZGFzKTtcbiAgX3JpdmV0czIuZGVmYXVsdC5iaW5kKCgwLCBfanF1ZXJ5Mi5kZWZhdWx0KSgnI2JpbmQtcGFydGljaXBhY2lvbicpLCBwYXJ0aWNpcGFjaW9uKTtcblxuICAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnaW5wdXRbbmFtZT10b3RhbC1kaWFdJywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChtYWluRGF0YSkge1xuICAgICAgdXBkYXRlTWFpbkRhdGFFbGVtZW50cygndG90YWwnKTtcbiAgICB9XG4gIH0pO1xuXG4gICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudCkub24oJ2NoYW5nZScsICdpbnB1dFtuYW1lPW1lc2EtZGlhXSwgZm9ybVtuYW1lPXNlbGVjdGVkLW1lc2FdIHNlbGVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAobWFpbkRhdGEpIHtcbiAgICAgIHVwZGF0ZU1haW5EYXRhRWxlbWVudHMoJ21lc2EnKTtcbiAgICB9XG4gIH0pO1xuXG4gICgwLCBfanF1ZXJ5Mi5kZWZhdWx0KShkb2N1bWVudCkub24oJ2NoYW5nZScsICdpbnB1dFtuYW1lPXRlcnJpLWRpYV0sIGZvcm1bbmFtZT1zZWxlY3RlZC10ZXJyaV0gc2VsZWN0JywgZnVuY3Rpb24gKCkge1xuICAgIGlmIChtYWluRGF0YSkge1xuICAgICAgdXBkYXRlTWFpbkRhdGFFbGVtZW50cygndGVycmknKTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciAkdXBkYXRlTm90aWYgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJy51cGRhdGUtbm90aWYnKTtcbiAgdmFyICRlcnJvck5vdGlmID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCcjZXJyb3Itbm90aWZpY2F0aW9uJyk7XG5cbiAgZnVuY3Rpb24gcmVuZGVyRGF0YSgpIHtcbiAgICAkdXBkYXRlTm90aWYudGV4dCgnQWN0dWFsaXphbmRv4oCmJyk7XG4gICAgKDAsIF9kYXRhRmV0Y2hlci5nZXRTZXJ2ZXJEYXRhKSgpLnRoZW4oZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgJGVycm9yTm90aWYuZmFkZU91dCgpO1xuICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAkdXBkYXRlTm90aWYudGV4dCgnQWN0dWFsaXphZG8gYSBsYXMgJyArICgnMCcgKyBub3cuZ2V0SG91cnMoKSkuc2xpY2UoLTIpICsgJzonICsgKCcwJyArIG5vdy5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSk7XG4gICAgICBtYWluRGF0YSA9IG9iamVjdDtcbiAgICAgIHVwZGF0ZU1haW5EYXRhRWxlbWVudHMoJ2dldERhdGEnKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoYSkge1xuICAgICAgJGVycm9yTm90aWYuZmFkZUluKCk7XG4gICAgICAkdXBkYXRlTm90aWYudGV4dCgnRXJyb3IgYWwgYWN0dWFsaXphcicpO1xuICAgICAgY29uc29sZS5lcnJvcihhKTtcbiAgICB9KTtcbiAgfTtcblxuICByZW5kZXJEYXRhKCk7XG5cbiAgc2V0SW50ZXJ2YWwocmVuZGVyRGF0YSwgVVBEQVRFX1RJTUUpO1xuXG4gIHZhciB1cGRhdGVNYWluRGF0YUVsZW1lbnRzID0gZnVuY3Rpb24gdXBkYXRlTWFpbkRhdGFFbGVtZW50cyhzZW5kZXIpIHtcbiAgICB2YXIgZGlhVG90YWwgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2lucHV0W25hbWU9dG90YWwtZGlhXTpjaGVja2VkJykudmFsKCk7XG4gICAgdmFyIGRpYU1lc2EgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2lucHV0W25hbWU9bWVzYS1kaWFdOmNoZWNrZWQnKS52YWwoKTtcbiAgICB2YXIgZGlhVGVycmkgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2lucHV0W25hbWU9dGVycmktZGlhXTpjaGVja2VkJykudmFsKCk7XG5cbiAgICB2YXIgc2VsZWN0ZWRNZXNhID0gKDAsIF9qcXVlcnkyLmRlZmF1bHQpKCdmb3JtW25hbWU9c2VsZWN0ZWQtbWVzYV0gc2VsZWN0JykudmFsKCk7XG4gICAgdmFyIHNlbGVjdGVkVGVycmkgPSAoMCwgX2pxdWVyeTIuZGVmYXVsdCkoJ2Zvcm1bbmFtZT1zZWxlY3RlZC10ZXJyaV0gc2VsZWN0JykudmFsKCk7XG5cbiAgICBpZiAoc2VuZGVyID09PSAnZ2V0RGF0YScpIHtcbiAgICAgIHN1bW1hcnlMaXN0YSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmV4dGVuZE93bihzdW1tYXJ5TGlzdGEsIG1haW5EYXRhLnRvdGFsLmxpc3RhLnRvdGFsKTtcbiAgICAgIHN1bW1hcnlTdXAgPSBfdW5kZXJzY29yZTIuZGVmYXVsdC5leHRlbmRPd24oc3VtbWFyeVN1cCwgbWFpbkRhdGEudG90YWwuc3VwLnRvdGFsKTtcblxuICAgICAgX3VuZGVyc2NvcmUyLmRlZmF1bHQuZWFjaChtYWluRGF0YS50ZXJyaXMsIGZ1bmN0aW9uICh0ZXJyaSkge1xuICAgICAgICB0ZXJyaS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIGIucGMgLSBhLnBjO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB0ZXJyaXRvcmlhbGVzLnRlcnJpcyA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmNsb25lKG1haW5EYXRhLnRlcnJpcyk7XG4gICAgICBjYW50aWRhZFRlcnJpdG9yaWFsZXMgPSBfdW5kZXJzY29yZTIuZGVmYXVsdC5leHRlbmQoY2FudGlkYWRUZXJyaXRvcmlhbGVzLCBtYWluRGF0YS50b3RhbGN0KTtcblxuICAgICAgY2hhcnRDYW50VGVycmkuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuY2hhaW4oY2FudGlkYWRUZXJyaXRvcmlhbGVzKS5waWNrKCdtZycsICdkZWNyZWNlcicsICduYXUnLCAnc2RkJywgJ2luZCcsICdpYScpLnZhbHVlcygpLm1hcChOdW1iZXIpLnZhbHVlKCk7XG4gICAgICBjaGFydENhbnRUZXJyaS51cGRhdGUoKTtcblxuICAgICAgdmFyIGVzY3J1dGFkYXNBY3R1YWwgPSAwO1xuICAgICAgbWVzYXNFc2NydXRhZGFzLm1lc2FzID0gW107XG4gICAgICBfdW5kZXJzY29yZTIuZGVmYXVsdC5lYWNoKG1haW5EYXRhLnRvdGFsLmxpc3RhLm1lc2EsIGZ1bmN0aW9uIChtZXNhKSB7XG4gICAgICAgIG1lc2FzRXNjcnV0YWRhcy5tZXNhcy5wdXNoKHtcbiAgICAgICAgICBpZDogbWVzYS5pZCxcbiAgICAgICAgICBuYW1lOiBtZXNhLm5hbWUsXG4gICAgICAgICAgZGlhMTogbWFpbkRhdGEuZGlhMS5saXN0YS5tZXNhW21lc2EuaWRdLmVzY3J1dGFkYSxcbiAgICAgICAgICBkaWEyOiBtYWluRGF0YS5kaWEyLmxpc3RhLm1lc2FbbWVzYS5pZF0uZXNjcnV0YWRhXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChtYWluRGF0YS5kaWExLmxpc3RhLm1lc2FbbWVzYS5pZF0uZXNjcnV0YWRhKSB7XG4gICAgICAgICAgZXNjcnV0YWRhc0FjdHVhbCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1haW5EYXRhLmRpYTIubGlzdGEubWVzYVttZXNhLmlkXS5lc2NydXRhZGEpIHtcbiAgICAgICAgICBlc2NydXRhZGFzQWN0dWFsKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBtZXNhc0VzY3J1dGFkYXMuYWN0dWFsID0gZXNjcnV0YWRhc0FjdHVhbDtcblxuICAgICAgX3VuZGVyc2NvcmUyLmRlZmF1bHQuZWFjaChtYWluRGF0YS50b3RhbC5saXN0YS50ZXJyaSwgZnVuY3Rpb24gKHRlcnJpKSB7XG4gICAgICAgIHZhciB1cGRhdGVkVGVycmkgPSB7XG4gICAgICAgICAgbmFtZTogdGVycmkubmFtZSxcbiAgICAgICAgICBwYzogdGVycmkucGFydGljaXBhY2lvblxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvbGRUZXJyaSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmZpbmRXaGVyZShwYXJ0aWNpcGFjaW9uLnRlcnJpcywgeyBuYW1lOiB0ZXJyaS5uYW1lIH0pO1xuICAgICAgICBpZiAob2xkVGVycmkpIHtcbiAgICAgICAgICBfdW5kZXJzY29yZTIuZGVmYXVsdC5leHRlbmQob2xkVGVycmksIHVwZGF0ZWRUZXJyaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFydGljaXBhY2lvbi50ZXJyaXMucHVzaCh1cGRhdGVkVGVycmkpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcGFydGljaXBhY2lvbi50ZXJyaXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYi5wYyAtIGEucGM7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoc2VuZGVyICE9PSAnbWVzYScgJiYgc2VuZGVyICE9PSAndGVycmknKSB7XG4gICAgICB0b3RhbExpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kT3duKHRvdGFsTGlzdGEsIG1haW5EYXRhW2RpYVRvdGFsXS5saXN0YS50b3RhbCk7XG4gICAgICB0b3RhbFN1cCA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmV4dGVuZE93bih0b3RhbFN1cCwgbWFpbkRhdGFbZGlhVG90YWxdLnN1cC50b3RhbCk7XG5cbiAgICAgIHZhciBuZXdUb3RhbExpc3RhRGF0YSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmNoYWluKHRvdGFsTGlzdGEpLnBpY2soJ21ncGMnLCAnZGVjcmVjZXJwYycsICduYXVwYycsICdzZGRwYycpLm1hcChwYXJzZUZsb2F0KS52YWx1ZSgpO1xuICAgICAgaWYgKF91bmRlcnNjb3JlMi5kZWZhdWx0LmFueShuZXdUb3RhbExpc3RhRGF0YSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAwO1xuICAgICAgfSkpIHtcbiAgICAgICAgY2hhcnRUb3RhbExpc3RhLmRhdGEuZGF0YXNldHNbMF0uZGF0YSA9IG5ld1RvdGFsTGlzdGFEYXRhO1xuICAgICAgICBjaGFydFRvdGFsTGlzdGEudXBkYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFydFRvdGFsTGlzdGEuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gUVVBUlRFUlM7XG4gICAgICAgIGNoYXJ0VG90YWxMaXN0YS51cGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1RvdGFsU3VwRGF0YSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmNoYWluKHRvdGFsU3VwKS5waWNrKCdtZ3BjJywgJ2RlY3JlY2VycGMnLCAnbmF1cGMnLCAnaWFwYycsICdzZGRwYycpLm1hcChwYXJzZUZsb2F0KS52YWx1ZSgpO1xuICAgICAgaWYgKF91bmRlcnNjb3JlMi5kZWZhdWx0LmFueShuZXdUb3RhbFN1cERhdGEsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgIHJldHVybiBuID4gMDtcbiAgICAgIH0pKSB7XG4gICAgICAgIGNoYXJ0VG90YWxTdXAuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gbmV3VG90YWxTdXBEYXRhO1xuICAgICAgICBjaGFydFRvdGFsU3VwLnVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhcnRUb3RhbFN1cC5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBGSUZUSFM7XG4gICAgICAgIGNoYXJ0VG90YWxTdXAudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlbmRlciAhPT0gJ3RvdGFsJyAmJiBzZW5kZXIgIT09ICd0ZXJyaScpIHtcbiAgICAgIG1lc2FMaXN0YSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmV4dGVuZE93bihtZXNhTGlzdGEsIG1haW5EYXRhW2RpYU1lc2FdLmxpc3RhLm1lc2Fbc2VsZWN0ZWRNZXNhXSk7XG5cbiAgICAgIG1lc2FTdXAgPSBfdW5kZXJzY29yZTIuZGVmYXVsdC5leHRlbmRPd24obWVzYVN1cCwgbWFpbkRhdGFbZGlhTWVzYV0uc3VwLm1lc2Fbc2VsZWN0ZWRNZXNhXSk7XG5cbiAgICAgIHZhciBuZXdNZXNhTGlzdGFEYXRhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuY2hhaW4obWVzYUxpc3RhKS5waWNrKCdtZ3BjJywgJ2RlY3JlY2VycGMnLCAnbmF1cGMnLCAnc2RkcGMnKS5tYXAocGFyc2VGbG9hdCkudmFsdWUoKTtcbiAgICAgIGlmIChfdW5kZXJzY29yZTIuZGVmYXVsdC5hbnkobmV3TWVzYUxpc3RhRGF0YSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAwO1xuICAgICAgfSkpIHtcbiAgICAgICAgY2hhcnRNZXNhTGlzdGEuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gbmV3TWVzYUxpc3RhRGF0YTtcbiAgICAgICAgY2hhcnRNZXNhTGlzdGEudXBkYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFydE1lc2FMaXN0YS5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBRVUFSVEVSUztcbiAgICAgICAgY2hhcnRNZXNhTGlzdGEudXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdNZXNhU3VwRGF0YSA9IF91bmRlcnNjb3JlMi5kZWZhdWx0LmNoYWluKG1lc2FTdXApLnBpY2soJ21ncGMnLCAnZGVjcmVjZXJwYycsICduYXVwYycsICdpYXBjJywgJ3NkZHBjJykubWFwKHBhcnNlRmxvYXQpLnZhbHVlKCk7XG4gICAgICBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuYW55KG5ld01lc2FTdXBEYXRhLCBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiA+IDA7XG4gICAgICB9KSkge1xuICAgICAgICBjaGFydE1lc2FTdXAuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gbmV3TWVzYVN1cERhdGE7XG4gICAgICAgIGNoYXJ0TWVzYVN1cC51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJ0TWVzYVN1cC5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBGSUZUSFM7XG4gICAgICAgIGNoYXJ0TWVzYVN1cC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VuZGVyICE9PSAndG90YWwnICYmIHNlbmRlciAhPT0gJ21lc2EnKSB7XG4gICAgICB0ZXJyaUxpc3RhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kT3duKHRlcnJpTGlzdGEsIG1haW5EYXRhW2RpYVRlcnJpXS5saXN0YS50ZXJyaVtzZWxlY3RlZFRlcnJpXSk7XG5cbiAgICAgIHRlcnJpU3VwID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuZXh0ZW5kT3duKHRlcnJpU3VwLCBtYWluRGF0YVtkaWFUZXJyaV0uc3VwLnRlcnJpW3NlbGVjdGVkVGVycmldKTtcblxuICAgICAgdmFyIG5ld1RlcnJpTGlzdGFEYXRhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuY2hhaW4odGVycmlMaXN0YSkucGljaygnbWdwYycsICdkZWNyZWNlcnBjJywgJ25hdXBjJywgJ3NkZHBjJykubWFwKHBhcnNlRmxvYXQpLnZhbHVlKCk7XG4gICAgICBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuYW55KG5ld1RlcnJpTGlzdGFEYXRhLCBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiA+IDA7XG4gICAgICB9KSkge1xuICAgICAgICBjaGFydFRlcnJpTGlzdGEuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gbmV3VGVycmlMaXN0YURhdGE7XG4gICAgICAgIGNoYXJ0VGVycmlMaXN0YS51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJ0VGVycmlMaXN0YS5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBRVUFSVEVSUztcbiAgICAgICAgY2hhcnRUZXJyaUxpc3RhLnVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3VGVycmlTdXBEYXRhID0gX3VuZGVyc2NvcmUyLmRlZmF1bHQuY2hhaW4odGVycmlTdXApLnBpY2soJ21ncGMnLCAnZGVjcmVjZXJwYycsICduYXVwYycsICdpYXBjJywgJ3NkZHBjJykubWFwKHBhcnNlRmxvYXQpLnZhbHVlKCk7XG4gICAgICBpZiAoX3VuZGVyc2NvcmUyLmRlZmF1bHQuYW55KG5ld1RlcnJpU3VwRGF0YSwgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPiAwO1xuICAgICAgfSkpIHtcbiAgICAgICAgY2hhcnRUZXJyaVN1cC5kYXRhLmRhdGFzZXRzWzBdLmRhdGEgPSBuZXdUZXJyaVN1cERhdGE7XG4gICAgICAgIGNoYXJ0VGVycmlTdXAudXBkYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGFydFRlcnJpU3VwLmRhdGEuZGF0YXNldHNbMF0uZGF0YSA9IEZJRlRIUztcbiAgICAgICAgY2hhcnRUZXJyaVN1cC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxufSx7XCIuL2NoYXJ0VmFycy5qc1wiOjYzLFwiLi9kYXRhRmV0Y2hlci5qc1wiOjY0LFwiY2hhcnQuanNcIjoxLFwianF1ZXJ5XCI6NTcsXCJyaXZldHNcIjo1OSxcInVuZGVyc2NvcmVcIjo2MX1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBDT0xPUl9NRyA9IGV4cG9ydHMuQ09MT1JfTUcgPSAnI2U5ODQxZCc7XG52YXIgQ09MT1JfTkFVID0gZXhwb3J0cy5DT0xPUl9OQVUgPSAnIzZmZDUyOCc7XG52YXIgQ09MT1JfU0REID0gZXhwb3J0cy5DT0xPUl9TREQgPSAnI0UwMUUyNSc7XG52YXIgQ09MT1JfREVDUkVDRVIgPSBleHBvcnRzLkNPTE9SX0RFQ1JFQ0VSID0gJyNlZWVkMmUnO1xudmFyIENPTE9SX0lBID0gZXhwb3J0cy5DT0xPUl9JQSA9ICdwdXJwbGUnO1xudmFyIENPTE9SX0lORCA9IGV4cG9ydHMuQ09MT1JfSU5EID0gJyM0ODkzODknO1xudmFyIENPTE9SX0pKQ0MgPSBleHBvcnRzLkNPTE9SX0pKQ0MgPSAnI2VlZWQyZSc7XG52YXIgQ09MT1JfREVDUkVDRVJfQUxUID0gZXhwb3J0cy5DT0xPUl9ERUNSRUNFUl9BTFQgPSAnI2VlZWQyZSc7XG5cbn0se31dfSx7fSxbNjVdKTtcbiJdfQ==
